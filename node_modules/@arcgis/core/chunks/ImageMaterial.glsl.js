/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
import{ShaderOutput as e}from"../views/3d/webgl-engine/core/shaderLibrary/ShaderOutput.js";import{SliceDraw as r}from"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js";import{Transform as o}from"../views/3d/webgl-engine/core/shaderLibrary/Transform.glsl.js";import{multipassTerrainTest as i}from"../views/3d/webgl-engine/core/shaderLibrary/shading/MultipassTerrainTest.glsl.js";import{defaultMaskAlphaCutoff as a}from"../views/3d/webgl-engine/core/shaderLibrary/util/AlphaCutoff.js";import{ColorConversion as s}from"../views/3d/webgl-engine/core/shaderLibrary/util/ColorConversion.glsl.js";import{addProjViewLocalOrigin as t}from"../views/3d/webgl-engine/core/shaderLibrary/util/View.glsl.js";import{FloatPassUniform as d}from"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js";import{glsl as l}from"../views/3d/webgl-engine/core/shaderModules/interfaces.js";import{ShaderBuilder as n}from"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js";import{Texture2DPassUniform as p}from"../views/3d/webgl-engine/core/shaderModules/Texture2DPassUniform.js";import{TransparencyPassType as g}from"../views/3d/webgl-engine/lib/TransparencyPassType.js";import{VertexAttribute as c}from"../views/3d/webgl-engine/lib/VertexAttribute.js";function v(v){const f=new n,{vertex:u,fragment:m}=f;return t(u,v),f.include(o,v),f.attributes.add(c.POSITION,"vec3"),f.attributes.add(c.UV0,"vec2"),f.varyings.add("vpos","vec3"),v.hasMultipassTerrain&&f.varyings.add("depth","float"),u.code.add(l`
    void main(void) {
      vpos = position;
      ${v.hasMultipassTerrain?"depth = (view * vec4(vpos, 1.0)).z;":""}
      vTexCoord = uv0;
      gl_Position = transformPosition(proj, view, vpos);
    }
  `),f.include(r,v),f.include(i,v),m.uniforms.add(new p("tex",(e=>e.texture)),new d("opacity",(e=>e.opacity))),f.varyings.add("vTexCoord","vec2"),v.output===e.Alpha?m.code.add(l`
    void main() {
      discardBySlice(vpos);
      ${v.hasMultipassTerrain?"terrainDepthTest(gl_FragCoord, depth);":""}

      float alpha = texture(tex, vTexCoord).a * opacity;
      if (alpha  < ${l.float(a)}) {
        discard;
      }

      fragColor = vec4(alpha);
    }
    `):(m.include(s),m.code.add(l`
    void main() {
      discardBySlice(vpos);
      ${v.hasMultipassTerrain?"terrainDepthTest(gl_FragCoord, depth);":""}
      fragColor = texture(tex, vTexCoord) * opacity;

      if (fragColor.a < ${l.float(a)}) {
        discard;
      }

      fragColor = highlightSlice(fragColor, vpos);
      ${v.transparencyPassType===g.Color?"fragColor = premultiplyAlpha(fragColor);":""}
    }
    `)),f}const f=Object.freeze(Object.defineProperty({__proto__:null,build:v},Symbol.toStringTag,{value:"Module"}));export{f as I,v as b};
