/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
import{b as e}from"./mat3.js";import{c as r}from"./mat3f64.js";import{I as o}from"./mat4f64.js";import{ForwardLinearDepth as a}from"../views/3d/webgl-engine/core/shaderLibrary/ForwardLinearDepth.glsl.js";import{Offset as i}from"../views/3d/webgl-engine/core/shaderLibrary/Offset.glsl.js";import{ShaderOutput as s}from"../views/3d/webgl-engine/core/shaderLibrary/ShaderOutput.js";import{SliceDraw as l}from"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js";import{Transform as t}from"../views/3d/webgl-engine/core/shaderLibrary/Transform.glsl.js";import{InstancedDoublePrecision as n}from"../views/3d/webgl-engine/core/shaderLibrary/attributes/InstancedDoublePrecision.glsl.js";import{NormalAttribute as d,NormalType as c}from"../views/3d/webgl-engine/core/shaderLibrary/attributes/NormalAttribute.glsl.js";import{PositionAttribute as m}from"../views/3d/webgl-engine/core/shaderLibrary/attributes/PositionAttribute.glsl.js";import{SymbolColor as g}from"../views/3d/webgl-engine/core/shaderLibrary/attributes/SymbolColor.glsl.js";import{TextureCoordinateAttribute as u}from"../views/3d/webgl-engine/core/shaderLibrary/attributes/TextureCoordinateAttribute.glsl.js";import{VertexColor as p}from"../views/3d/webgl-engine/core/shaderLibrary/attributes/VertexColor.glsl.js";import{VertexNormal as v}from"../views/3d/webgl-engine/core/shaderLibrary/attributes/VertexNormal.glsl.js";import{VerticalOffset as h}from"../views/3d/webgl-engine/core/shaderLibrary/attributes/VerticalOffset.glsl.js";import{DefaultMaterialAuxiliaryPasses as f}from"../views/3d/webgl-engine/core/shaderLibrary/default/DefaultMaterialAuxiliaryPasses.glsl.js";import{ComputeNormalTexture as b}from"../views/3d/webgl-engine/core/shaderLibrary/shading/ComputeNormalTexture.glsl.js";import{EvaluateAmbientOcclusion as w}from"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateAmbientOcclusion.glsl.js";import{EvaluateSceneLighting as x,addAmbientBoostFactor as y,addLightingGlobalFactor as C}from"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateSceneLighting.glsl.js";import{addMainLightIntensity as T}from"../views/3d/webgl-engine/core/shaderLibrary/shading/MainLighting.glsl.js";import{multipassTerrainTest as j}from"../views/3d/webgl-engine/core/shaderLibrary/shading/MultipassTerrainTest.glsl.js";import{Normals as L}from"../views/3d/webgl-engine/core/shaderLibrary/shading/Normals.glsl.js";import{PhysicallyBasedRendering as M}from"../views/3d/webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRendering.glsl.js";import{PhysicallyBasedRenderingParameters as P,PBRMode as $}from"../views/3d/webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRenderingParameters.glsl.js";import{ReadShadowMapPass as O,ReadShadowMapDraw as N}from"../views/3d/webgl-engine/core/shaderLibrary/shading/ReadShadowMap.glsl.js";import{colorTextureUV as A,normalTextureUV as S,emissiveTextureUV as E,occlusionTextureUV as V,metallicRoughnessTextureUV as D}from"../views/3d/webgl-engine/core/shaderLibrary/shading/TextureTransformUV.glsl.js";import{VisualVariables as _}from"../views/3d/webgl-engine/core/shaderLibrary/shading/VisualVariables.glsl.js";import{symbolAlphaCutoff as U}from"../views/3d/webgl-engine/core/shaderLibrary/util/AlphaCutoff.js";import{DiscardOrAdjustAlphaPass as B}from"../views/3d/webgl-engine/core/shaderLibrary/util/AlphaDiscard.glsl.js";import{MixExternalColor as F}from"../views/3d/webgl-engine/core/shaderLibrary/util/MixExternalColor.glsl.js";import{addProjViewLocalOrigin as I,addCameraPosition as R}from"../views/3d/webgl-engine/core/shaderLibrary/util/View.glsl.js";import{Float3PassUniform as z}from"../views/3d/webgl-engine/core/shaderModules/Float3PassUniform.js";import{Float4PassUniform as W}from"../views/3d/webgl-engine/core/shaderModules/Float4PassUniform.js";import{FloatPassUniform as k}from"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js";import{glsl as G}from"../views/3d/webgl-engine/core/shaderModules/interfaces.js";import{Matrix3PassUniform as q}from"../views/3d/webgl-engine/core/shaderModules/Matrix3PassUniform.js";import{Matrix4PassUniform as H}from"../views/3d/webgl-engine/core/shaderModules/Matrix4PassUniform.js";import{ShaderBuilder as J}from"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js";import{Texture2DPassUniform as K}from"../views/3d/webgl-engine/core/shaderModules/Texture2DPassUniform.js";import{TransparencyPassType as Q}from"../views/3d/webgl-engine/lib/TransparencyPassType.js";import{VertexAttribute as X}from"../views/3d/webgl-engine/lib/VertexAttribute.js";function Y(Y){const Z=new J,{vertex:ee,fragment:re,varyings:oe}=Z;if(I(ee,Y),Z.include(m),oe.add("vpos","vec3"),Z.include(_,Y),Z.include(n,Y),Z.include(h,Y),Y.hasColorTextureTransform&&Z.include(A),Y.output===s.Color||Y.output===s.Alpha){Y.hasNormalTextureTransform&&Z.include(S),Y.hasEmissionTextureTransform&&Z.include(E),Y.hasOcclusionTextureTransform&&Z.include(V),Y.hasMetallicRoughnessTextureTransform&&Z.include(D),R(ee,Y),Z.include(d,Y),Z.include(t,Y);const s=Y.normalType===c.Attribute||Y.normalType===c.Compressed;s&&Y.offsetBackfaces&&Z.include(i),Z.include(b,Y),Z.include(v,Y),Y.instancedColor&&Z.attributes.add(X.INSTANCECOLOR,"vec4"),oe.add("vPositionLocal","vec3"),Z.include(u,Y),Z.include(a,Y),Z.include(g,Y),Z.include(p,Y),ee.uniforms.add(new W("externalColor",(e=>e.externalColor))),oe.add("vcolorExt","vec4"),Y.hasMultipassTerrain&&oe.add("depth","float");const l=Y.hasModelTransformation;if(l){const a=r();ee.uniforms.add(new H("model",(e=>e.modelTransformation??o))),ee.uniforms.add(new q("normalTransform",(r=>(e(a,r.modelTransformation??o),a))))}ee.code.add(G`
      void main(void) {
        forwardNormalizedVertexColor();
        vcolorExt = externalColor;
        ${Y.instancedColor?"vcolorExt *= instanceColor * 0.003921568627451;":""}
        vcolorExt *= vvColor();
        vcolorExt *= getSymbolColor();
        forwardColorMixMode();

        if (vcolorExt.a < ${G.float(U)}) {
          gl_Position = vec4(1e38, 1e38, 1e38, 1.0);
        } else {
          vpos = calculateVPos();
          ${l?"vpos = (model * vec4(vpos, 1.0)).xyz;":""}
          vPositionLocal = vpos - view[3].xyz;
          vpos = subtractOrigin(vpos);
          ${s?G`vNormalWorld = ${l?"normalize(normalTransform * dpNormal(vvLocalNormal(normalModel())))":"dpNormal(vvLocalNormal(normalModel()))"};`:""}
          vpos = addVerticalOffset(vpos, localOrigin);
          ${Y.hasVertexTangents?"vTangent = dpTransformVertexTangent(tangent);":""}
          gl_Position = transformPosition(proj, view, vpos);
          ${s&&Y.offsetBackfaces?"gl_Position = offsetBackfacingClipPosition(gl_Position, vpos, vNormalWorld, cameraPosition);":""}
        }

        ${Y.hasMultipassTerrain?"depth = (view * vec4(vpos, 1.0)).z;":""}
        forwardLinearDepth();
        forwardTextureCoordinates();
        ${Y.hasColorTextureTransform?G`forwardColorUV();`:""}
        ${Y.hasNormalTextureTransform?G`forwardNormalUV();`:""}
        ${Y.hasEmissionTextureTransform?G`forwardEmissiveUV();`:""}
        ${Y.hasOcclusionTextureTransform?G`forwardOcclusionUV();`:""}
        ${Y.hasMetallicRoughnessTextureTransform?G`forwardMetallicRoughnessUV();`:""}
      }
    `)}switch(Y.output){case s.Alpha:Z.include(l,Y),Z.include(B,Y),Z.include(j,Y),re.uniforms.add(new k("opacity",(e=>e.opacity)),new k("layerOpacity",(e=>e.layerOpacity))),Y.hasColorTexture&&re.uniforms.add(new K("tex",(e=>e.texture))),re.include(F),re.code.add(G`
      void main() {
        discardBySlice(vpos);
        ${Y.hasMultipassTerrain?"terrainDepthTest(gl_FragCoord, depth);":""}
        ${Y.hasColorTexture?G`
                vec4 texColor = texture(tex, ${Y.hasColorTextureTransform?G`colorUV`:G`vuv0`});
                ${Y.textureAlphaPremultiplied?"texColor.rgb /= texColor.a;":""}
                discardOrAdjustAlpha(texColor);`:G`vec4 texColor = vec4(1.0);`}
        ${Y.hasVertexColors?G`float opacity_ = layerOpacity * mixExternalOpacity(vColor.a * opacity, texColor.a, vcolorExt.a, int(colorMixMode));`:G`float opacity_ = layerOpacity * mixExternalOpacity(opacity, texColor.a, vcolorExt.a, int(colorMixMode));`}
        fragColor = vec4(opacity_);
      }
    `);break;case s.Color:Z.include(l,Y),Z.include(x,Y),Z.include(w,Y),Z.include(B,Y),Z.include(Y.instancedDoublePrecision?O:N,Y),Z.include(j,Y),R(re,Y),re.uniforms.add(ee.uniforms.get("localOrigin"),new z("ambient",(e=>e.ambient)),new z("diffuse",(e=>e.diffuse)),new k("opacity",(e=>e.opacity)),new k("layerOpacity",(e=>e.layerOpacity))),Y.hasColorTexture&&re.uniforms.add(new K("tex",(e=>e.texture))),Z.include(P,Y),Z.include(M,Y),re.include(F),Z.include(L,Y),y(re),C(re),T(re),re.code.add(G`
      void main() {
        discardBySlice(vpos);
        ${Y.hasMultipassTerrain?"terrainDepthTest(gl_FragCoord, depth);":""}
        ${Y.hasColorTexture?G`
                vec4 texColor = texture(tex, ${Y.hasColorTextureTransform?G`colorUV`:G`vuv0`});
                ${Y.textureAlphaPremultiplied?"texColor.rgb /= texColor.a;":""}
                discardOrAdjustAlpha(texColor);`:G`vec4 texColor = vec4(1.0);`}
        shadingParams.viewDirection = normalize(vpos - cameraPosition);
        ${Y.normalType===c.ScreenDerivative?G`
                vec3 normal = screenDerivativeNormal(vPositionLocal);`:G`
                shadingParams.normalView = vNormalWorld;
                vec3 normal = shadingNormal(shadingParams);`}
        ${Y.pbrMode===$.Normal?"applyPBRFactors();":""}
        float ssao = evaluateAmbientOcclusionInverse();
        ssao *= getBakedOcclusion();

        vec3 posWorld = vpos + localOrigin;

        float additionalAmbientScale = additionalDirectedAmbientLight(posWorld);
        float shadow = ${Y.receiveShadows?"readShadowMap(vpos, linearDepth)":Y.spherical?"lightingGlobalFactor * (1.0 - additionalAmbientScale)":"0.0"};

        vec3 matColor = max(ambient, diffuse);
        ${Y.hasVertexColors?G`
                vec3 albedo = mixExternalColor(vColor.rgb * matColor, texColor.rgb, vcolorExt.rgb, int(colorMixMode));
                float opacity_ = layerOpacity * mixExternalOpacity(vColor.a * opacity, texColor.a, vcolorExt.a, int(colorMixMode));`:G`
                vec3 albedo = mixExternalColor(matColor, texColor.rgb, vcolorExt.rgb, int(colorMixMode));
                float opacity_ = layerOpacity * mixExternalOpacity(opacity, texColor.a, vcolorExt.a, int(colorMixMode));`}
        ${Y.hasNormalTexture?G`
                mat3 tangentSpace = ${Y.hasVertexTangents?"computeTangentSpace(normal);":"computeTangentSpace(normal, vpos, vuv0);"}
                vec3 shadingNormal = computeTextureNormal(tangentSpace, ${Y.hasNormalTextureTransform?G`normalUV`:"vuv0"});`:G`vec3 shadingNormal = normal;`}
        vec3 normalGround = ${Y.spherical?G`normalize(posWorld);`:G`vec3(0.0, 0.0, 1.0);`}

        ${Y.snowCover?G`
                float snow = smoothstep(0.5, 0.55, dot(normal, normalGround));
                albedo = mix(albedo, vec3(1), snow);
                shadingNormal = mix(shadingNormal, normal, snow);
                ssao = mix(ssao, 1.0, snow);`:""}

        vec3 additionalLight = ssao * mainLightIntensity * additionalAmbientScale * ambientBoostFactor * lightingGlobalFactor;

        ${Y.pbrMode===$.Normal||Y.pbrMode===$.Schematic?G`
                float additionalAmbientIrradiance = additionalAmbientIrradianceFactor * mainLightIntensity[2];
                ${Y.snowCover?G`
                        mrr = mix(mrr, vec3(0.0, 1.0, 0.04), snow);
                        emission = mix(emission, vec3(0.0), snow);`:""}

                vec3 shadedColor = evaluateSceneLightingPBR(shadingNormal, albedo, shadow, 1.0 - ssao, additionalLight, shadingParams.viewDirection, normalGround, mrr, emission, additionalAmbientIrradiance);`:G`vec3 shadedColor = evaluateSceneLighting(shadingNormal, albedo, shadow, 1.0 - ssao, additionalLight);`}
        fragColor = highlightSlice(vec4(shadedColor, opacity_), vpos);
        ${Y.transparencyPassType===Q.Color?G`fragColor = premultiplyAlpha(fragColor);`:""}
      }
    `)}return Z.include(f,Y),Z}const Z=Object.freeze(Object.defineProperty({__proto__:null,build:Y},Symbol.toStringTag,{value:"Module"}));export{Z as D,Y as b};
