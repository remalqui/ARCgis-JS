/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
import{ForwardLinearDepth as e}from"../views/3d/webgl-engine/core/shaderLibrary/ForwardLinearDepth.glsl.js";import{ShaderOutput as r}from"../views/3d/webgl-engine/core/shaderLibrary/ShaderOutput.js";import{SliceDraw as o}from"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js";import{Transform as i}from"../views/3d/webgl-engine/core/shaderLibrary/Transform.glsl.js";import{ObjectAndLayerIdColor as a}from"../views/3d/webgl-engine/core/shaderLibrary/attributes/ObjectAndLayerIdColor.glsl.js";import{OutputHighlight as s}from"../views/3d/webgl-engine/core/shaderLibrary/output/OutputHighlight.glsl.js";import{EvaluateAmbientLighting as n}from"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateAmbientLighting.glsl.js";import{MainLighting as t,addMainLightDirection as d,addMainLightIntensity as l}from"../views/3d/webgl-engine/core/shaderLibrary/shading/MainLighting.glsl.js";import{multipassTerrainTest as v}from"../views/3d/webgl-engine/core/shaderLibrary/shading/MultipassTerrainTest.glsl.js";import{NormalUtils as g}from"../views/3d/webgl-engine/core/shaderLibrary/shading/NormalUtils.glsl.js";import{PBRMode as c}from"../views/3d/webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRenderingParameters.glsl.js";import{ReadShadowMapDraw as m}from"../views/3d/webgl-engine/core/shaderLibrary/shading/ReadShadowMap.glsl.js";import{Water as p}from"../views/3d/webgl-engine/core/shaderLibrary/shading/Water.glsl.js";import{WaterDistortion as u}from"../views/3d/webgl-engine/core/shaderLibrary/shading/WaterDistortion.glsl.js";import{symbolAlphaCutoff as w}from"../views/3d/webgl-engine/core/shaderLibrary/util/AlphaCutoff.js";import{ColorConversion as h}from"../views/3d/webgl-engine/core/shaderLibrary/util/ColorConversion.glsl.js";import{addProjViewLocalOrigin as f,addCameraPosition as b}from"../views/3d/webgl-engine/core/shaderLibrary/util/View.glsl.js";import{Float4PassUniform as y}from"../views/3d/webgl-engine/core/shaderModules/Float4PassUniform.js";import{FloatPassUniform as j}from"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js";import{glsl as C}from"../views/3d/webgl-engine/core/shaderModules/interfaces.js";import{ShaderBuilder as L}from"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js";import{TransparencyPassType as P}from"../views/3d/webgl-engine/lib/TransparencyPassType.js";import{VertexAttribute as M}from"../views/3d/webgl-engine/lib/VertexAttribute.js";function S(S){const x=new L,{vertex:_,fragment:F}=x;f(_,S),x.include(i,S),x.attributes.add(M.POSITION,"vec3"),x.attributes.add(M.UV0,"vec2");const T=new y("waterColor",(e=>e.color));if(S.output===r.Color&&S.isDraped)return x.varyings.add("vpos","vec3"),_.uniforms.add(T),_.code.add(C`
        void main(void) {
          if (waterColor.a < ${C.float(w)}) {
            // Discard this vertex
            gl_Position = vec4(1e38, 1e38, 1e38, 1.0);
            return;
          }

          vpos = position;
          gl_Position = transformPosition(proj, view, vpos);
        }
    `),F.uniforms.add(T),F.code.add(C`void main() {
fragColor = waterColor;
}`),x;switch(S.output!==r.Color&&S.output!==r.Alpha||(x.include(g,S),x.include(e,S),x.varyings.add("vuv","vec2"),x.varyings.add("vpos","vec3"),x.varyings.add("vnormal","vec3"),x.varyings.add("vtbnMatrix","mat3"),S.hasMultipassTerrain&&x.varyings.add("depth","float"),_.uniforms.add(T),_.code.add(C`
      void main(void) {
        if (waterColor.a < ${C.float(w)}) {
          // Discard this vertex
          gl_Position = vec4(1e38, 1e38, 1e38, 1.0);
          return;
        }

        vuv = uv0;
        vpos = position;

        vnormal = getLocalUp(vpos, localOrigin);
        vtbnMatrix = getTBNMatrix(vnormal);

        ${S.hasMultipassTerrain?"depth = (view * vec4(vpos, 1.0)).z;":""}

        gl_Position = transformPosition(proj, view, vpos);
        ${S.output===r.Color?"forwardLinearDepth();":""}
      }
    `)),x.include(v,S),S.output){case r.Alpha:x.include(o,S),F.uniforms.add(T),F.code.add(C`
        void main() {
          discardBySlice(vpos);
          ${S.hasMultipassTerrain?"terrainDepthTest(gl_FragCoord, depth);":""}

          fragColor = vec4(waterColor.a);
        }
      `);break;case r.Color:x.include(t),x.include(n,{pbrMode:c.Disabled,lightingSphericalHarmonicsOrder:2}),x.include(u),x.include(o,S),x.include(m,S),x.include(p,S),F.uniforms.add(T,new j("timeElapsed",(e=>e.timeElapsed)),_.uniforms.get("view"),_.uniforms.get("localOrigin")),b(F,S),F.include(h),d(F),l(F),F.code.add(C`
      void main() {
        discardBySlice(vpos);
        ${S.hasMultipassTerrain?"terrainDepthTest(gl_FragCoord, depth);":""}
        vec3 localUp = vnormal;
        // the created normal is in tangent space
        vec4 tangentNormalFoam = getSurfaceNormalAndFoam(vuv, timeElapsed);

        // we rotate the normal according to the tangent-bitangent-normal-Matrix
        vec3 n = normalize(vtbnMatrix * tangentNormalFoam.xyz);
        vec3 v = -normalize(vpos - cameraPosition);
        float shadow = ${S.receiveShadows?C`1.0 - readShadowMap(vpos, linearDepth)`:"1.0"};
        vec4 vPosView = view * vec4(vpos, 1.0);
        vec4 final = vec4(getSeaColor(n, v, mainLightDirection, waterColor.rgb, mainLightIntensity, localUp, shadow, tangentNormalFoam.w, vPosView.xyz, vpos + localOrigin), waterColor.w);

        // gamma correction
        fragColor = delinearizeGamma(final);
        fragColor = highlightSlice(fragColor, vpos);
        ${S.transparencyPassType===P.Color?"fragColor = premultiplyAlpha(fragColor);":""}
      }
    `);break;case r.Normal:x.include(g,S),x.include(u,S),x.include(o,S),x.varyings.add("vpos","vec3"),x.varyings.add("vuv","vec2"),_.uniforms.add(T),_.code.add(C`
        void main(void) {
          if (waterColor.a < ${C.float(w)}) {
            // Discard this vertex
            gl_Position = vec4(1e38, 1e38, 1e38, 1.0);
            return;
          }

          vuv = uv0;
          vpos = position;

          gl_Position = transformPosition(proj, view, vpos);
        }
    `),F.uniforms.add(new j("timeElapsed",(e=>e.timeElapsed))),F.code.add(C`void main() {
discardBySlice(vpos);
vec4 tangentNormalFoam = getSurfaceNormalAndFoam(vuv, timeElapsed);
tangentNormalFoam.xyz = normalize(tangentNormalFoam.xyz);
fragColor = vec4((tangentNormalFoam.xyz + vec3(1.0)) * 0.5, tangentNormalFoam.w);
}`);break;case r.Highlight:x.include(s,S),x.varyings.add("vpos","vec3"),_.uniforms.add(T),_.code.add(C`
      void main(void) {
        if (waterColor.a < ${C.float(w)}) {
          // Discard this vertex
          gl_Position = vec4(1e38, 1e38, 1e38, 1.0);
          return;
        }

        vpos = position;
        gl_Position = transformPosition(proj, view, vpos);
      }
    `),x.include(o,S),F.code.add(C`void main() {
discardBySlice(vpos);
outputHighlight();
}`);break;case r.ObjectAndLayerIdColor:x.include(a,S),x.varyings.add("vpos","vec3"),_.uniforms.add(T),_.code.add(C`
      void main(void) {
        if (waterColor.a < ${C.float(w)}) {
          // Discard this vertex
          gl_Position = vec4(1e38, 1e38, 1e38, 1.0);
          return;
        }

        vpos = position;
        gl_Position = transformPosition(proj, view, vpos);
        forwardObjectAndLayerIdColor();
      }
    `),x.include(o,S),F.code.add(C`void main() {
discardBySlice(vpos);
outputObjectAndLayerIdColor();
}`)}return x}const x=Object.freeze(Object.defineProperty({__proto__:null,build:S},Symbol.toStringTag,{value:"Module"}));export{x as W,S as b};
