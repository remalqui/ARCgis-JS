/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
import{_ as e}from"../../chunks/tslib.es6.js";import t from"../../core/Accessor.js";import"../../core/Error.js";import{HandleOwnerMixin as s}from"../../core/HandleOwner.js";import has from"../../core/has.js";import"../../core/Logger.js";import{throttle as i}from"../../core/throttle.js";import{property as o}from"../../core/accessorSupport/decorators/property.js";import"../../core/accessorSupport/ensureType.js";import"../../core/arrayUtils.js";import{subclass as r}from"../../core/accessorSupport/decorators/subclass.js";import{CollisionEngine as p}from"./engine/webgl/collisions/CollisionEngine.js";const a=32;let d=class extends(s(t)){constructor(e){super(e),this.collisionEngine=new p,this.lastUpdateId=-1,this.updateRequested=!1,this.view=null,this._applyVisibilityPass=i((e=>{const t=this.view;if(t)try{const s=t.featuresTilingScheme.getClosestInfoForScale(e.state.scale).level;this.collisionEngine.run(t.allLayerViews.items,e,s)}catch(s){}}),a,this),this.addHandles(this._applyVisibilityPass)}get updating(){return has("esri-2d-log-updating")&&console.log(`Updating LabelManager ${this.updateRequested}:\n-> updateRequested: ${this.updateRequested}`),this.updateRequested}update(e){this._applyVisibilityPass(e)}viewChange(){this.requestUpdate()}requestUpdate(){this.updateRequested||(this.updateRequested=!0,this.view?.requestUpdate())}processUpdate(e){this.updateRequested&&(this.updateRequested=!1,this.update(e))}};e([o()],d.prototype,"updateRequested",void 0),e([o()],d.prototype,"updating",null),e([o()],d.prototype,"view",void 0),d=e([r("esri.views.2d.LabelManager")],d);export{d as LabelManager};
