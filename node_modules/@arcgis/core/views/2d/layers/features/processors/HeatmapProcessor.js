/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../../chunks/tslib.es6.js";import"../../../../../core/has.js";import{applySome as t}from"../../../../../core/maybe.js";import"../../../../../core/Logger.js";import"../../../../../core/accessorSupport/ensureType.js";import"../../../../../core/arrayUtils.js";import"../../../../../core/Error.js";import{subclass as s}from"../../../../../core/accessorSupport/decorators/subclass.js";import{diff as r}from"../../../../../core/accessorSupport/diffUtils.js";import{calculateHeatmapIntensityInfoReaders as i}from"../../../../../renderers/support/heatmapUtils.js";import{TILE_SIZE as o}from"../../../engine/webgl/definitions.js";import a from"./BaseProcessor.js";import{getPow2NeighborKey as n}from"../support/tileUtils.js";class d{constructor(e,t){this.offset=e,this.extent=t}}function l(e){const t=e.key,s=new Map,r=256,i=o,a=e.tileInfoView.tileInfo.isWrappable;return s.set(n(t,-1,-1,a).id,new d([-i,-i],[i-r,i-r,i,i])),s.set(n(t,0,-1,a).id,new d([0,-i],[0,i-r,i,i])),s.set(n(t,1,-1,a).id,new d([i,-i],[0,i-r,r,i])),s.set(n(t,-1,0,a).id,new d([-i,0],[i-r,0,i,i])),s.set(n(t,1,0,a).id,new d([i,0],[0,0,r,i])),s.set(n(t,-1,1,a).id,new d([-i,i],[i-r,0,i,r])),s.set(n(t,0,1,a).id,new d([0,i],[0,0,i,r])),s.set(n(t,1,1,a).id,new d([i,i],[0,0,r,r])),s}let p=class extends a{constructor(){super(...arguments),this.type="heatmap",this._tileKeyToFeatureSets=new Map}initialize(){this.handles.add([this.tileStore.on("update",this.onTileUpdate.bind(this))])}async update(e,t){const s=t.schema.processors[0];if("heatmap"!==s.type)return;r(this._schema,s)&&(e.mesh=!0,this._schema=s)}onTileUpdate(e){for(const t of e.removed)this._tileKeyToFeatureSets.delete(t.key.id)}onTileClear(e){const t={clear:!0};return this._tileKeyToFeatureSets.delete(e.key.id),this.remoteClient.invoke("tileRenderer.onTileData",{tileKey:e.id,data:t})}async onTileMessage(e,s,r){this._tileKeyToFeatureSets.has(e.key.id)||this._tileKeyToFeatureSets.set(e.key.id,new Map);const o=this._tileKeyToFeatureSets.get(e.key.id);if(o&&null!=s.addOrUpdate&&s.addOrUpdate.hasFeatures&&o.set(s.addOrUpdate.instance,s),s.end){const s=[],o=l(e);this._tileKeyToFeatureSets.forEach(((r,i)=>{if(i===e.key.id)r.forEach((e=>t(e.addOrUpdate,(e=>s.push(e)))));else if(o.has(i)){const e=o.get(i),[a,n]=e.offset;r.forEach((e=>t(e.addOrUpdate,(e=>{const t=e.transform(a,n,1,1);s.push(t)}))))}}));const a=i(s,this._schema.mesh,512,512),n={tileKey:e.key.id,intensityInfo:a},d=[a.matrix];return this.remoteClient.invoke("tileRenderer.onTileData",n,{...r,transferList:d})}}onTileError(e,t,s){return this.remoteClient.invoke("tileRenderer.onTileError",{tileKey:e.id,error:t},s)}};p=e([s("esri.views.2d.layers.features.processors.HeatmapProcessor")],p);const c=p;export{c as default};
