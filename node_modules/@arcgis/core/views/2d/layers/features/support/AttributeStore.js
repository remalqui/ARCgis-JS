/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
import t from"../../../../../core/Error.js";import has from"../../../../../core/has.js";import e from"../../../../../core/Logger.js";import{clamp as i}from"../../../../../core/mathUtils.js";import{mapMany as s,forEachSome as r,applySome as a}from"../../../../../core/maybe.js";import{createResolver as n,isAbortError as o}from"../../../../../core/promiseUtils.js";import{diff as l}from"../../../../../core/accessorSupport/diffUtils.js";import{WatchUpdatingTracking as h}from"../../../../../core/support/WatchUpdatingTracking.js";import u from"../../../../../layers/support/FieldsIndex.js";import{MAX_FILTERS as d,HIGHLIGHT_FLAG as p,ATTRIBUTE_DATA_VV as c,NAN_MAGIC_NUMBER as g,ATTRIBUTE_DATA_ANIMATION as _,ATTRIBUTE_DATA_GPGPU as f}from"../../../engine/webgl/definitions.js";import{DISPLAY_ID_TYPE_AGGREGATE as m,DISPLAY_ID_TYPE_FEATURE as y,getDisplayIdTexel as b,getDisplayIdType as x,getDisplayIdFilterMask as S}from"../../../engine/webgl/DisplayId.js";import{getPixelArrayCtor as T}from"../../../engine/webgl/Utils.js";import{createDebugLogger as z,DEBUG_ATTR_UPDATES as U}from"../../../engine/webgl/util/debug.js";import{getVisualVariableSizeValueRepresentationRatio as A}from"../tileRenderers/support/visualVariablesUtils.js";import{PixelType as w}from"../../../../webgl/enums.js";const E=e.getLogger("esri.views.layers.2d.features.support.AttributeStore"),k=z(U,E),D={sharedArrayBuffer:has("esri-shared-array-buffer"),atomics:has("esri-atomics")};function F(t,e){return i=>e(t(i))}class I{constructor(t,e,i,s){this.size=0,this.texelSize=4,this.dirtyStart=0,this.dirtyEnd=0;const{pixelType:r,layout:a,textureOnly:n}=s;this.textureOnly=n||!1,this.pixelType=r,this._ctype=e,this.layout=a,this._resetRange(),this._shared=t,this.size=i,n||(this.data=this._initData(r,i,t,e))}get buffer(){return a(this.data,(t=>t.buffer))}unsetComponentAllTexels(t,e){const i=this.data;for(let s=0;s<this.size*this.size;s++)i[s*this.texelSize+t]&=~e;this.dirtyStart=0,this.dirtyEnd=this.size*this.size-1}setComponentAllTexels(t,e){const i=this.data;for(let s=0;s<this.size*this.size;s++)i[s*this.texelSize+t]|=255&e;this.dirtyStart=0,this.dirtyEnd=this.size*this.size-1}setComponent(t,e,i){const s=this.data;for(const r of i)s[r*this.texelSize+t]|=e,this.dirtyStart=Math.min(this.dirtyStart,r),this.dirtyEnd=Math.max(this.dirtyEnd,r)}setComponentTexel(t,e,i){this.data[i*this.texelSize+t]|=e,this.dirtyStart=Math.min(this.dirtyStart,i),this.dirtyEnd=Math.max(this.dirtyEnd,i)}unsetComponentTexel(t,e,i){this.data[i*this.texelSize+t]&=~e,this.dirtyStart=Math.min(this.dirtyStart,i),this.dirtyEnd=Math.max(this.dirtyEnd,i)}getData(t,e){const i=b(t);return this.data[i*this.texelSize+e]}setData(t,e,i){const s=b(t),r=1<<e;0!=(this.layout&r)?null!=this.data&&(this.data[s*this.texelSize+e]=i,this.dirtyStart=Math.min(this.dirtyStart,s),this.dirtyEnd=Math.max(this.dirtyEnd,s)):E.error("mapview-attributes-store","Tried to set a value for a texel's readonly component")}lock(){this.pixelType===w.UNSIGNED_BYTE&&this._shared&&D.atomics&&"local"!==this._ctype&&Atomics.store(this.data,0,1)}unlock(){this.pixelType===w.UNSIGNED_BYTE&&this._shared&&D.atomics&&"local"!==this._ctype&&Atomics.store(this.data,0,0)}expand(t){if(this.size=t,!this.textureOnly){const e=this._initData(this.pixelType,t,this._shared,this._ctype),i=this.data;e.set(i),this.data=e}}toMessage(){const t=this.dirtyStart,e=this.dirtyEnd,i=this.texelSize;if(t>e)return null;this._resetRange();const s=!(this._shared||"local"===this._ctype),r=this.pixelType,a=this.layout,n=this.data;return{start:t,end:e,data:s&&n.slice(t*i,(e+1)*i)||null,pixelType:r,layout:a}}_initData(t,e,i,s){const r=i&&"local"!==s?SharedArrayBuffer:ArrayBuffer,a=T(t),n=new a(new r(e*e*4*a.BYTES_PER_ELEMENT));for(let o=0;o<n.length;o+=4)n[o+1]=255;return n}_resetRange(){this.dirtyStart=2147483647,this.dirtyEnd=0}}class B{constructor(t,e){this._client=t,this.config=e,this.updatingHandles=new h,this._blocks=new Array,this._filters=new Array(d),this._attributeComputeInfo=null,this._targetType=0,this._abortController=new AbortController,this._hasScaleExpr=!1,this._size=32,this._nextUpdate=null,this._currUpdate=null,this._idsToHighlight=new Set;const i=e.supportsTextureFloat?w.FLOAT:w.UNSIGNED_BYTE;k(`Creating AttributeStore ${D.sharedArrayBuffer?"with":"without"} shared memory`),this._blockDescriptors=[{pixelType:w.UNSIGNED_BYTE,layout:1},{pixelType:w.UNSIGNED_BYTE,layout:15,textureOnly:!0},{pixelType:w.UNSIGNED_BYTE,layout:15,textureOnly:!0},{pixelType:i,layout:15},{pixelType:i,layout:15},{pixelType:i,layout:15},{pixelType:i,layout:15}],this._blocks=this._blockDescriptors.map((()=>null))}destroy(){this._abortController.abort(),this.updatingHandles.destroy()}get hasScaleExpr(){return this._hasScaleExpr}get _signal(){return this._abortController.signal}get hasHighlight(){return this._idsToHighlight.size>0}isUpdating(){const t=this.updatingHandles.updating||!!this._nextUpdate;return has("esri-2d-log-updating")&&console.log(`Updating AttributeStore: ${t}\n  -> updatingHandles ${this.updatingHandles.updating} (currUpdate: ${!!this._currUpdate})\n  -> nextUpdate: ${!!this._nextUpdate}\n`),t}update(t,e){this.config=e;const i=e.schema.processors[0].storage,s=l(this._schema,i);if((t.targets.feature||t.targets.aggregate)&&(t.storage.data=!0),s&&(has("esri-2d-update-debug")&&console.debug("Applying Update - AttributeStore:",s),t.storage.data=!0,this._schema=i,this._attributeComputeInfo=null,null!=i)){switch(i.target){case"feature":this._targetType=y;break;case"aggregate":this._targetType=m}if("subtype"===i.type){this._attributeComputeInfo={isSubtype:!0,subtypeField:i.subtypeField,map:new Map};for(const t in i.mapping){const e=i.mapping[t];if(null!=e&&null!=e.vvMapping)for(const i of e.vvMapping)this._bindAttribute(i,parseInt(t,10))}}else{if(this._attributeComputeInfo={isSubtype:!1,map:new Map},null!=i.vvMapping)for(const t of i.vvMapping)this._bindAttribute(t);if(null!=i.attributeMapping)for(const t of i.attributeMapping)this._bindAttribute(t)}}}onTileData(t,e){if(null==e.addOrUpdate)return;const i=e.addOrUpdate.getCursor();for(;i.next();){const t=i.getDisplayId();this.setAttributeData(t,i)}}async setHighlight(t,e){const i=1,s=this._getBlock(0),r=e.map((t=>b(t)));s.lock(),s.unsetComponentAllTexels(0,i),s.setComponent(0,i,r),s.unlock(),this._idsToHighlight.clear();for(const a of t)this._idsToHighlight.add(a);await this.sendUpdates()}async updateFilters(t,e,i){has("esri-2d-update-debug")&&console.debug("AttributeStore::updateFilters");const{service:s,spatialReference:r}=i,{filters:a}=e,n=a.map(((t,e)=>this._updateFilter(t,e,s,r))),o=(await Promise.all(n)).some((t=>t));has("esri-2d-update-debug")&&console.debug("AttributeStore::updateFilters - finsihed"),o&&(t.storage.filters=!0,has("esri-2d-update-debug")&&console.debug("Applying Update - AttributeStore:","Filters changed"))}setData(t,e,i,s){const r=b(t);this._ensureSizeForTexel(r),this._getBlock(e).setData(t,i,s)}getData(t,e,i){return this._getBlock(e).getData(t,i)}getHighlightFlag(t){return this._idsToHighlight.has(t)?p:0}unsetAttributeData(t){const e=b(t);this._getBlock(0).setData(e,0,0)}setAttributeData(t,e){const s=b(t);if(this._ensureSizeForTexel(s),this._getBlock(0).setData(s,0,this.getFilterFlags(e)),this._targetType!==x(t))return;const r=this._attributeComputeInfo,a=this.config.supportsTextureFloat?1:2,n=4;let o=null;r&&(o=r.isSubtype?r.map.get(e.readAttribute(r.subtypeField)):r.map,o&&o.size&&o.forEach(((t,r)=>{const o=r*a%n,l=Math.floor(r*a/n),h=this._getBlock(l+c),u=t(e);if(this.config.supportsTextureFloat)h.setData(s,o,u);else if(u===g)h.setData(s,o,255),h.setData(s,o+1,255);else{const t=i(Math.round(u),-32767,32766)+32768,e=255&t,r=(65280&t)>>8;h.setData(s,o,e),h.setData(s,o+1,r)}})))}sendUpdates(){if(has("esri-2d-update-debug")&&console.debug("AttributeStore::sendUpdate"),this._nextUpdate)return this._nextUpdate.promise;if(this._currUpdate)return this._nextUpdate=n(),this.updatingHandles.addPromise(this._nextUpdate.promise),this._nextUpdate.promise;const e={blocks:this._blocks.map((t=>null!=t?t.toMessage():null))};return this._currUpdate=this._createResources().then((()=>{const t=()=>{if(this._currUpdate=null,this._nextUpdate){const t=this._nextUpdate;this._nextUpdate=null,this.sendUpdates().then((()=>t.resolve()))}else has("esri-2d-update-debug")&&console.debug("AttributeStore::sendUpdate::No additional updates queued")};has("esri-2d-update-debug")&&console.debug("AttributeStore::sendUpdate::client.update");const i=this.updatingHandles.addPromise(this._client.update(e,this._signal).then(t).catch(t));return this._client.render(this._signal),i})).catch((e=>{if(o(e))return this._createResourcesPromise=null,this._createResources();E.error(new t("mapview-attribute-store","Encountered an error during client update",e))})),this._currUpdate}_ensureSizeForTexel(t){for(;t>=this._size*this._size;)if(this._expand())return}_bindAttribute(t,e){function i(){const{normalizationField:e}=t;return e?i=>{const s=i.readAttribute(e);if(!s)return null;return i.readAttribute(t.field)/s}:e=>e.readAttribute(t.field)}function s(){return t.normalizationField&&E.warn("mapview-arcade","Ignoring normalizationField specified with an arcade expression which is not supported."),e=>e.getComputedNumericAtIndex(t.fieldIndex)}let r;if(null!=t.fieldIndex)r=s();else{if(!t.field)return;r=i()}const{valueRepresentation:a}=t;if(a){r=F(r,(t=>A(t,a)))}const n=t=>null===t||isNaN(t)||t===1/0||t===-1/0?g:t,o=this._attributeComputeInfo;if(o.isSubtype){const i=o.map.get(e)??new Map;i.set(t.binding,F(r,n)),o.map.set(e,i)}else o.map.set(t.binding,F(r,n))}_createResources(){if(null!=this._createResourcesPromise)return this._createResourcesPromise;this._getBlock(_),this._getBlock(f),k("Initializing AttributeStore");const e={shared:D.sharedArrayBuffer&&!("local"===this._client.type),size:this._size,blocks:s(this._blocks,(t=>({textureOnly:t.textureOnly,buffer:t.buffer,pixelType:t.pixelType})))},i=this._client.initialize(e,this._signal).catch((e=>{o(e)?this._createResourcesPromise=null:E.error(new t("mapview-attribute-store","Encountered an error during client initialization",e))}));return this._createResourcesPromise=i,i.then((()=>null==this._createResourcesPromise?this._createResources():void 0)),i}_getBlock(t){const e=this._blocks[t];if(null!=e)return e;k(`Initializing AttributeBlock at index ${t}`);const i=D.sharedArrayBuffer,s=this._client.type,r=new I(i,s,this._size,this._blockDescriptors[t]);return this._blocks[t]=r,this._createResourcesPromise=null,r}_expand(){if(this._size<this.config.maxTextureSize){const t=this._size<<=1;return k("Expanding block size to",t,this._blocks),r(this._blocks,(e=>e.expand(t))),this._createResourcesPromise=null,this._size=t,0}return E.error(new t("mapview-limitations","Maximum number of onscreen features exceeded.")),-1}async _updateFilter(t,e,i,s){const r=this._filters[e],a=null!=r&&r.hash;if(!r&&!t)return!1;if(a===JSON.stringify(t))return!1;if(null==t){if(!r)return!1;const t=1<<e+1,i=this._getBlock(0);return this._filters[e]=null,i.setComponentAllTexels(0,t),this.sendUpdates(),!0}const n=await this._getFilter(e,i);return await n.update(t,s),!0}async _getFilter(t,e){const i=this._filters[t];if(null!=i)return i;const{default:s}=await import("./FeatureFilter.js"),r=new s({geometryType:e.geometryType,hasM:!1,hasZ:!1,timeInfo:e.timeInfo,fieldsIndex:new u(e.fields)});return this._filters[t]=r,r}isVisible(t){return!!(2&this._getBlock(0).getData(t,0))}getFilterFlags(t){let e=0;const i=S(t.getDisplayId());for(let r=0;r<this._filters.length;r++){const s=!!(i&1<<r),a=this._filters[r];e|=(!s||null==a||a.check(t)?1:0)<<r}let s=0;if(this._idsToHighlight.size){const e=t.getObjectId();s=this.getHighlightFlag(e)}return e<<1|s}}export{B as default};
