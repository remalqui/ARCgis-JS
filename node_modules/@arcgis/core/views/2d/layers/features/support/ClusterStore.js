/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
import"../../../../../geometry.js";import e from"../../../../../core/Evented.js";import has from"../../../../../core/has.js";import{applySome as t}from"../../../../../core/maybe.js";import{diff as s,hasDiff as r}from"../../../../../core/accessorSupport/diffUtils.js";import{GeohashTree as o}from"../../../../../geohash/GeohashTree.js";import{setGeohashBuf as i,setGeohashXY as a}from"../../../../../geohash/geohashUtils.js";import{create as h}from"../../../../../geometry/support/aaBoundingBox.js";import{earth as n}from"../../../../../geometry/support/Ellipsoid.js";import{getInfo as l}from"../../../../../geometry/support/spatialReferenceUtils.js";import{getBoundsOptimizedGeometry as u,quantizeX as g,quantizeY as c,convertFromPolygon as d}from"../../../../../layers/graphics/featureConversionUtils.js";import{OptimizedFeatureWithGeometry as f,OptimizedFeature as p}from"../../../../../layers/graphics/OptimizedFeature.js";import m from"../../../../../layers/graphics/OptimizedGeometry.js";import{checkProjectionSupport as _,project as y}from"../../../../../layers/graphics/data/projectionSupport.js";import{TILE_SIZE as I}from"../../../engine/webgl/definitions.js";import{DISPLAY_ID_TEXEL_MASK as b}from"../../../engine/webgl/DisplayId.js";import{featureAdapter as v}from"../FeatureStore2D.js";import{Store2D as R}from"../Store2D.js";import{FeatureSetReaderJSON as M}from"./FeatureSetReaderJSON.js";import x from"../../../../../geometry/SpatialReference.js";import j from"../../../../../geometry/Polygon.js";import C from"../../../../../geometry/Extent.js";const F=12,L=64,B=1,w=h();class S extends f{constructor(e,t,s,r,o){super(new m([],[t,s]),r,null,e),this.geohashBoundsInfo=o}get count(){return this.attributes.cluster_count}static create(e,t,s,r,o,i,a,h){const n=new S(t,s,r,i,a);return n.displayId=e.createDisplayId(!0),n.referenceId=h,n.tileLevel=o,n}update(e,t,s,r,o,i){return this.geometry.coords[0]=e,this.geometry.coords[1]=t,this.tileLevel=s,this.attributes=r,this.geohashBoundsInfo=o,this.referenceId=null,this.referenceId=i,this}toJSON(){return{attributes:{...this.attributes,aggregateId:this.objectId,referenceId:1===this.attributes.cluster_count?this.referenceId:null},geometry:{x:this.geometry.coords[0],y:this.geometry.coords[1]}}}}function T(e){return 57.29577951308232*e}class V extends R{constructor(t,s,r,o){super(t,r),this.type="cluster",this.events=new e,this.objectIdField="aggregateId",this.featureAdapter=v,this._geohashLevel=0,this._tileLevel=0,this._aggregateValueRanges={},this._aggregateValueRangesChanged=!1,this._geohashBuf=[],this._clusters=new Map,this._tiles=new Map,this._serviceInfo=o,this.geometryInfo=t.geometryInfo,this._spatialReference=s,this._projectionSupportCheck=_(s,x.WGS84),this._bitsets.geohash=r.getBitset(r.createBitset()),this._bitsets.inserted=r.getBitset(r.createBitset())}destroy(){this._tree.destroy()}get featureSpatialReference(){return this._spatialReference}get fields(){return this._fields}async updateSchema(e,t){const i=this._schema;try{await super.updateSchema(e,t),await this._projectionSupportCheck}catch(h){}this._fields=[...this._schema.params.fields,{name:"referenceId",alias:"referenceId",type:"esriFieldTypeInteger"}];!!this._fields.some((e=>"cluster_count"===e.name))||this._fields.push({name:"cluster_count",alias:"cluster_count",type:"esriFieldTypeInteger"});const a=s(i,t);t&&(null!=a||e.source||e.storage.filters)?((r(a,"params.fields")||!this._tree||e.source)&&(this._tree&&this._tree.destroy(),this._tree=new o(this._statisticFields,this._serviceInfo),this._rebuildTree(),has("esri-2d-update-debug")&&console.debug("Aggregate mesh needs update due to tree changing")),has("esri-2d-update-debug")&&console.debug("Applying Update - ClusterStore:",a),e.targets[t.name]=!0,e.mesh=!1,this._aggregateValueRanges={}):i&&(e.mesh=!0)}clear(){this._rebuildTree()}sweepFeatures(e,t){this._bitsets.inserted.forEachSet((s=>{if(!e.has(s)){const e=t.lookupByDisplayIdUnsafe(s);this._remove(e)}}))}sweepAggregates(e,t,s){this._clusters.forEach(((r,o)=>{r&&r.tileLevel!==s&&(e.releaseDisplayId(r.displayId),t.unsetAttributeData(r.displayId),this._clusters.delete(o))}))}onTileData(e,t,s,r,o=!0){if(!this._schema||null==t.addOrUpdate)return t;this.events.emit("changed");const i=this._getTransforms(e,this._spatialReference);{const e=t.addOrUpdate.getCursor();for(;e.next();)this._update(e,r)}if(t.status.mesh||!o)return t;const a=new Array,h=this._schema.params.clusterRadius;this._getClustersForTile(a,e,h,s,i),t.addOrUpdate=M.fromOptimizedFeatures(a,{fields:this.fields,geometryType:"esriGeometryPoint",objectIdField:this.objectIdField}),t.addOrUpdate.attachStorage(s),t.clear=!0,t.end=!0;{const r=t.addOrUpdate.getCursor();for(;r.next();){const t=r.getDisplayId();this._bitsets.computed.unset(t),this.setComputedAttributes(s,r,t,e.scale)}}return this._aggregateValueRangesChanged&&t.end&&(this.events.emit("valueRangesChanged",{valueRanges:this._aggregateValueRanges}),this._aggregateValueRangesChanged=!1),t}onTileUpdate({added:e,removed:t}){if(e.length){const t=e[0].level;this._tileLevel=t,this._setGeohashLevel(t)}if(!this._schema)return;const s=this._schema.params.clusterRadius;t.forEach((e=>{this._tiles.delete(e.key.id),this._markTileClustersForDeletion(e,s)}))}getAggregate(e){for(const t of this._clusters.values())if((t?.displayId&b)==(e&b))return t.toJSON();return null}getAggregates(){const e=[];for(const t of this._clusters.values())t?.tileLevel===this._tileLevel&&e.push(t.toJSON());return e}getDisplayId(e){const t=this._clusters.get(e);return t?t.displayId:null}getFeatureDisplayIdsForAggregate(e){const t=this._clusters.get(e);return t?this._tree.getRegionDisplayIds(t.geohashBoundsInfo):[]}getDisplayIdForReferenceId(e){for(const t of this._clusters.values())if(t?.referenceId===e)return t.displayId;return null}getAggregateValueRanges(){return this._aggregateValueRanges}forEach(e){this._clusters.forEach((t=>{if(!t)return;const s=t.toJSON(),r=M.fromFeatures([s],{objectIdField:this.objectIdField,globalIdField:null,geometryType:this.geometryInfo.geometryType,fields:this.fields}).getCursor();r.next(),e(r)}))}forEachInBounds(e,t){}forEachBounds(e,t){const{hasM:s,hasZ:r}=this.geometryInfo;for(const o of e){const e=u(w,o.readGeometry(),r,s);null!=e&&t(e)}}size(){let e=0;return this.forEach((t=>e++)),e}_rebuildTree(){this._bitsets.computed.clear(),this._bitsets.inserted.clear(),this._tree&&this._tree.clear()}_remove(e){const t=e.getDisplayId(),s=e.getXHydrated(),r=e.getYHydrated(),o=this._geohashBuf[2*t],i=this._geohashBuf[2*t+1];this._bitsets.inserted.has(t)&&(this._bitsets.inserted.unset(t),this._tree.removeCursor(e,s,r,o,i,this._geohashLevel))}_update(e,t){const s=e.getDisplayId(),r=this._bitsets.inserted,o=t.isVisible(s);if(o===r.has(s))return;if(!o)return void this._remove(e);const i=e.getXHydrated(),a=e.getYHydrated();if(!this._setGeohash(s,i,a))return;const h=this._geohashBuf[2*s],n=this._geohashBuf[2*s+1];this._tree.insertCursor(e,s,i,a,h,n,this._geohashLevel),r.set(s)}_setGeohash(e,t,s){if(this._bitsets.geohash.has(e))return!0;const r=this._geohashBuf;if(this._spatialReference.isWebMercator){const o=T(t/n.radius),a=o-360*Math.floor((o+180)/360),h=T(Math.PI/2-2*Math.atan(Math.exp(-s/n.radius)));i(r,e,h,a,F)}else{const o=y({x:t,y:s},this._spatialReference,x.WGS84);if(!o)return!1;i(r,e,o.y,o.x,F)}return this._bitsets.geohash.set(e),!0}_getClustersForTile(e,s,r,o,i,a=!0){const h=this._schema.params.clusterPixelBuffer,n=2*r,l=Math.ceil(2**s.key.level*I/n)+1,u=Math.ceil(h/n)+0,d=Math.ceil(I/n),{row:f,col:m}=s.key,_=m*I,y=f*I,b=Math.floor(_/n)-u,v=Math.floor(y/n)-u,R=b+d+2*u,M=v+d+2*u,x=s.tileInfoView.getLODInfoAt(s.key.level);for(let I=b;I<=R;I++)for(let r=v;r<=M;r++){let h=I;x.wrap&&(h=I<0?I+l:I%l);const n=x.wrap&&I<0,u=x.wrap&&I%l!==I,d=this._lookupCluster(o,x,s.key.level,h,r,s);if(null!=d){const s=t(i,(e=>n?e.left:u?e.right:e.tile));if(a&&null==s)continue;if(!d.count)continue;if(null!=s&&a){const t=d.geometry.clone();let r=d.attributes;t.coords[0]=g(s,t.coords[0]),t.coords[1]=c(s,t.coords[1]),1===d.count&&null!=d.referenceId&&(r={...d.attributes,referenceId:d.referenceId});const o=new p(t,r);o.displayId=d.displayId,e.push(o)}}}}_getGeohashLevel(e){return Math.min(Math.ceil(e/2+2),F)}_setGeohashLevel(e){const t=this._getGeohashLevel(e),s=(Math.floor(t/B)+1)*B-1;if(this._geohashLevel!==s)return this._geohashLevel=s,this._rebuildTree(),void this._bitsets.geohash.clear()}_getTransforms(e,t){const s={originPosition:"upperLeft",scale:[e.resolution,e.resolution],translate:[e.bounds[0],e.bounds[3]]},r=l(t);if(!r)return{tile:s,left:null,right:null};const[o,i]=r.valid;return{tile:s,left:{...s,translate:[i,e.bounds[3]]},right:{...s,translate:[o-i+e.bounds[0],e.bounds[3]]}}}_getClusterId(e,t,s){return(15&e)<<28|(16383&t)<<14|16383&s}_markForDeletion(e,t,s){const r=this._getClusterId(e,t,s);this._clusters.delete(r)}_getClusterBounds(e,t,s){const r=this._schema.params.clusterRadius,o=2*r;let i=s%2?t*o:t*o-r;const a=s*o;let h=i+o;const n=a-o,l=2**e.level*I;e.wrap&&i<0&&(i=0),e.wrap&&h>l&&(h=l);const u=i/I,g=a/I,c=h/I,d=n/I;return[e.getXForColumn(u),e.getYForRow(g),e.getXForColumn(c),e.getYForRow(d)]}_getGeohash(e,t,s){const r={geohashX:0,geohashY:0};return a(r,t,e,s),r}_getGeohashBounds(e,t){const s=this._getGeohashLevel(e.key.level);if(this._spatialReference.isWebMercator){const[e,r,o,i]=t,h={x:e,y:r},l={x:o,y:i};let u=0,g=0,c=0,d=0;{const e=T(h.x/n.radius);u=e-360*Math.floor((e+180)/360),g=T(Math.PI/2-2*Math.atan(Math.exp(-h.y/n.radius)))}{const e=T(l.x/n.radius);c=e-360*Math.floor((e+180)/360),d=T(Math.PI/2-2*Math.atan(Math.exp(-l.y/n.radius)))}const f={geohashX:0,geohashY:0},p={geohashX:0,geohashY:0};a(f,g,u,s),a(p,d,c,s);return{bounds:[e,r,o,i],geohashBounds:{xLL:f.geohashX,yLL:f.geohashY,xTR:p.geohashX,yTR:p.geohashY},level:s}}const r=j.fromExtent(C.fromBounds(t,this._spatialReference)),o=y(r,this._spatialReference,x.WGS84,{densificationStep:e.resolution*L});if(!o)return null;const i=d(new m,o,!1,!1),h=i.coords.filter(((e,t)=>!(t%2))),l=i.coords.filter(((e,t)=>t%2)),u=Math.min(...h),g=Math.min(...l),c=Math.max(...h),f=Math.max(...l),p=this._getGeohash(u,g,s),_=this._getGeohash(c,f,s);return{bounds:t,geohashBounds:{xLL:p.geohashX,yLL:p.geohashY,xTR:_.geohashX,yTR:_.geohashY},level:s}}_lookupCluster(e,t,s,r,o,i){const a=this._getClusterId(s,r,o),h=this._clusters.get(a),n=this._getClusterBounds(t,r,o),l=this._getGeohashBounds(i,n);if(null==l)return null;const u=this._tree.getRegionStatistics(l),{count:g,xTotal:c,yTotal:d,referenceId:f}=u,p=g?c/g:0,m=g?d/g:0;if(0===g)return this._clusters.set(a,null),null;const _={cluster_count:g,...u.attributes},y=null!=h?h.update(p,m,s,_,l,f):S.create(e,a,p,m,s,_,l,f);if(0===g){const[e,t,s,r]=n;y.geometry.coords[0]=(e+s)/2,y.geometry.coords[1]=(t+r)/2}return this._clusters.set(a,y),this._updateAggregateValueRangeForCluster(y,y.tileLevel),y}_updateAggregateValueRangeForCluster(e,t){const s=this._aggregateValueRanges[t]||{minValue:1/0,maxValue:0},r=s.minValue,o=s.maxValue;s.minValue=Math.min(r,e.count),s.maxValue=Math.max(o,e.count),this._aggregateValueRanges[t]=s,r===s.minValue&&o===s.maxValue||(this._aggregateValueRangesChanged=!0)}_markTileClustersForDeletion(e,t){const s=2*t,r=Math.ceil(I/s),{row:o,col:i}=e.key,a=i*I,h=o*I,n=Math.floor(a/s),l=Math.floor(h/s);for(let u=n;u<n+r;u++)for(let t=l;t<l+r;t++)this._markForDeletion(e.key.level,u,t)}}export{S as ClusterInfo,V as ClusterStore};
