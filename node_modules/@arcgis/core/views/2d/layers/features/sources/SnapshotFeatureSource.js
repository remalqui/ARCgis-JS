/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../../chunks/tslib.es6.js";import"../../../../../core/has.js";import t from"../../../../../core/Logger.js";import{unwrapOrThrow as s}from"../../../../../core/maybe.js";import{throwIfAborted as r,after as o}from"../../../../../core/promiseUtils.js";import n from"../../../../../core/RandomLCG.js";import{subclass as a}from"../../../../../core/accessorSupport/decorators/subclass.js";import{BaseFeatureSource as i}from"./BaseFeatureSource.js";import{FeatureSetReaderIndirect as d}from"../support/FeatureSetReaderPBFIndirect.js";import{UpdateToken as u}from"../support/UpdateToken.js";function l(e,t,s){const r=e.getXHydrated(),o=e.getYHydrated(),n=t.getColumnForX(r),a=Math.floor(t.normalizeCol(n));return`${s}/${Math.floor(t.getRowForY(o))}/${a}`}function h(e,t){if(null==e)return null;const s=t.transform,r=e.getQuantizationTransform();if(null==r){const[t,r]=s.scale,[o,n]=s.translate,a=-o/t,i=1/t,d=n/r,u=1/-r;return e.transform(a,d,i,u)}const[o,n]=r.scale,[a,i]=r.translate,[d,u]=s.scale,[l,h]=s.translate,c=o/d,g=(a-l)/d,p=n/u,_=(-i+h)/u;return e.transform(g,_,c,p)}let c=class extends i{constructor(e){super(e),this.mode="snapshot",this._loading=!0,this._controller=new AbortController,this._downloadPromise=null,this._didSendEnd=!1,this._queries=new Array,this._invalidated=!1,this._hasAggregates=!1,this._random=new n(1e3),this._store=e.store,this._markedIdsBufId=this._store.storage.createBitset()}destroy(){super.destroy(),this._controller.abort()}get loading(){return this._loading}get _signal(){return this._controller.signal}update(e,t){super.update(e,t),null==this._featureCount&&(this._featureCount=t.initialFeatureCount),null!=t.changedFeatureCount&&(this._featureCount=t.changedFeatureCount),this._hasAggregates=!!e.targets?.aggregate}async resend(e=!1){if(await this._downloadPromise,this._invalidated||e){const e=s(this._featureCount,"Expected featureCount to be defined");return this._invalidated=!1,this._subscriptions.forEach((e=>e.clear())),this._downloadPromise=this._download(e),void await this._downloadPromise}const t=this._queries.map((({query:e,reader:t})=>this._sendPatchQuery(e,t)));await Promise.all(t),this._subscriptions.forEach((e=>{e.requests.done.forEach((e=>this._onMessage(e.message)))}))}async refresh(e,t){t&&(this._featureCount=t.featureCount),await this.resend(!0)}async _sendPatchQuery(e,t){const s=null!=e.outFields?e.outFields:[],o=this._queryInfo.outFields,n=o.filter((e=>!s.includes(e)));if(!n.length)return;const a=e.clone(),i=this._signal;a.returnGeometry=!1,a.returnCentroid=!1,a.outFields=n,e.outFields=o;const d=await this.enqueueQuery({query:a,depth:0,signal:i});r({signal:i}),t.joinAttributes(d)}async _fetchDataTile(e){if(!this._downloadPromise){const e=s(this._featureCount,"Expected featureCount to be defined");this._downloadPromise=this._download(e)}const t=this._store.search(e),r=this._subscriptions.get(e.key.id),n=t.length-1;for(let s=0;s<n;s++){const n=h(t[s],e),a={type:"append",id:e.id,addOrUpdate:n,end:!1,status:u.empty()};r.add({query:null,message:a}),this._hasAggregates||await o(1),this._onMessage(a)}const a=h(n>=0?t[n]:null,e),i=this._didSendEnd,d={type:"append",id:e.id,addOrUpdate:a,end:i,status:u.empty()};r.add({query:null,message:d}),this._onMessage(d)}async _download(e){try{await this.whenInitialized();const t=this._store.storage.getBitset(this._markedIdsBufId),s=new Set;t.clear();const r=Math.ceil(e/this.pageSize),o=Array.from({length:r},((e,t)=>t)).sort(((e,t)=>this._random.getInt()-this._random.getInt())).map((e=>this._downloadPage(e,t,s)));await Promise.all(o),this._store.sweepFeatures(t,this._store.storage),this._store.sweepFeatureSets(s)}catch(s){t.getLogger("esri.views.2d.layers.features.sources.SnapshotFeatureSource").error("mapview-snapshot-source","Encountered and error when downloading feature snapshot",s)}this._sendEnd(),this._loading=!1}async _downloadPage(e,t,s){const o=this.pageSize,n={start:e*o,num:o,cacheHint:!0};null!=this.maxRecordCountFactor&&(n.maxRecordCountFactor=this.maxRecordCountFactor);const a=this.createQuery(n),i=this._signal,d=await this.enqueueQuery({query:a,depth:e,signal:i});r({signal:i}),this._queries.push({query:a,reader:d}),this._store.insert(d),s.add(d.instance);const u=d.getCursor();for(;u.next();)t.set(u.getDisplayId());this._send(d)}_send(e){if(!this._subscriptions.size)return;let t=null;const s=new Map,r=new Set,o=new Map;this._subscriptions.forEach((e=>{const n=e.tile;s.set(n.key.id,null),t=n.tileInfoView,r.add(n.level);const{row:a,col:i}=n.key,d=`${n.level}/${a}/${i}`,u=o.get(d)??[];u.push(e),o.set(d,u)}));for(const n of r){const r=t.getLODInfoAt(n),a=e.getCursor();for(;a.next();){const e=l(a,r,n),t=a.getIndex();if(o.has(e))for(const r of o.get(e)){const e=r.tile.id;let o=s.get(e);null==o&&(o=[],s.set(e,o)),o.push(t)}}}s.forEach(((t,s)=>{if(null!=t){const r=this._subscriptions.get(s),o={type:"append",id:s,addOrUpdate:h(d.from(e,t),r.tile),end:!1,status:u.empty()};r.add({query:null,message:o}),this._onMessage(o)}}))}_sendEnd(){this._subscriptions.forEach((e=>{const t={type:"append",id:e.tile.id,addOrUpdate:null,end:!0,status:u.empty()};e.add({query:null,message:t}),this._onMessage(t)})),this._didSendEnd=!0}};c=e([a("esri.view.2d.layers.features.sources.SnapshotFeatureSource")],c);export{c as SnapshotFeatureSource};
