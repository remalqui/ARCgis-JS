/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
import e from"../../../../config.js";import t from"../../../../request.js";import{bidiText as i}from"../../../../core/BidiText.js";import s from"../../../../core/Error.js";import{getFullyQualifiedFontName as r}from"../../../../core/fontUtils.js";import has from"../../../../core/has.js";import o from"../../../../core/Logger.js";import{nextPowerOfTwo as n}from"../../../../core/mathUtils.js";import{throwIfAborted as a,isAbortError as h}from"../../../../core/promiseUtils.js";import{pt2px as c}from"../../../../core/screenUtils.js";import{s as u}from"../../../../chunks/vec2.js";import{c as d}from"../../../../chunks/vec2f32.js";import l from"../../../../symbols/cim/Rasterizer.js";import{SDF_TEXTURE_SIZE as m,TEXTURE_BINDING_GLYPH_ATLAS as p,TEXTURE_BINDING_SPRITE_ATLAS as g,SPRITE_PADDING as f,PATTERN_FILL_RASTERIZATION_SCALE as _}from"./definitions.js";import{MosaicType as w}from"./enums.js";import y from"./GlyphMosaic.js";import M from"./GlyphSource.js";import I from"./SDFConverter.js";import z from"./SpriteMosaic.js";import{is3D as T,charCodes as R,isSimple as v,isSVGResource as j,isImageResource as x,isMarkerPlacementInsidePolygon as S,shouldRepeat as b,getUrl as P,getPMSResourceSize as U,isGIF as B,isPNG as G,isSVGImage as C}from"./Utils.js";import{AnimatableTextureResource as A}from"./animatedFormats/AnimatableTextureResource.js";import{resize as q}from"./animatedFormats/utils.js";import{ok as E}from"./util/Result.js";import{keyFromSymbol as F}from"./util/symbolUtils.js";import{QueueProcessor as L}from"../../../support/QueueProcessor.js";import{TextureSamplingMode as N}from"../../../webgl/enums.js";const $=d(),k="arial-unicode-ms-regular",H=o.getLogger("esri.views.2d.engine.webgl.TextureManager");function O(e,t){const i=Math.round(c(t)*window.devicePixelRatio),s=i>=128?2:4;return Math.min(e,i*s)}const Q=(e,t,i)=>H.error(new s(e,t,i));class V{static fromMosaic(e,t){return new V(e,t.page,t.sdf)}constructor(e,t,i){this.mosaicType=e,this.page=t,this.sdf=i}}class Y{constructor(i,r,o){this._requestRender=i,this.resourceManager=r,this._allowNonPowerOfTwo=o,this._invalidFontsMap=new Map,this._sdfConverter=new I(m),this._bindingInfos=new Array,this._hashToBindingIndex=new Map,this._ongoingRasterizations=new Map,this._imageRequestQueue=new L({concurrency:10,process:async(e,i)=>{a(i);try{return await t(e,{responseType:"image",signal:i})}catch(r){if(!h(r))throw new s("mapview-invalid-resource",`Could not fetch requested resource at ${e}`,r);throw r}}}),this._spriteMosaic=new z(2048,2048,500),this._glyphSource=new M(`${e.fontsUrl}/{fontstack}/{range}.pbf`),this._glyphMosaic=new y(1024,1024,this._glyphSource),this._rasterizer=new l(r)}dispose(){this._spriteMosaic.dispose(),this._glyphMosaic.dispose(),this._rasterizer.dispose(),this._sdfConverter.dispose(),this._spriteMosaic=null,this._glyphMosaic=null,this._sdfConverter=null,this._hashToBindingIndex.clear(),this._hashToBindingIndex=null,this._bindingInfos=null,this._ongoingRasterizations.clear(),this._ongoingRasterizations=null,this._imageRequestQueue.clear(),this._imageRequestQueue=null}get sprites(){return this._spriteMosaic}get glyphs(){return this._glyphMosaic}async rasterizeItem(e,t,i,s){if(null==e)return Q("mapview-null-resource","Unable to rasterize null resource"),null;switch(e.type){case"text":case"esriTS":{const t=await this._rasterizeText(e,i,s);return t.forEach((e=>this._setTextureBinding(w.GLYPH,e))),{glyphMosaicItems:t}}default:{if(T(e))return Q("mapview-invalid-type",`MapView does not support symbol type: ${e.type}`,e),null;const i=await this._rasterizeSpriteSymbol(e,t,s);return E(i)&&i&&this._setTextureBinding(w.SPRITE,i),{spriteMosaicItem:i}}}}bindTextures(e,t,i,s=!1){if(0===i.textureBinding)return;const r=this._bindingInfos[i.textureBinding-1],o=r.page,n=s?N.LINEAR_MIPMAP_LINEAR:N.LINEAR;switch(r.mosaicType){case w.SPRITE:{const i=this.sprites.getWidth(o),s=this.sprites.getHeight(o),r=u($,i,s);return this._spriteMosaic.bind(e,n,o,g),t.setUniform1i("u_texture",g),void t.setUniform2fv("u_mosaicSize",r)}case w.GLYPH:{const i=this.glyphs.width,s=this.glyphs.height,r=u($,i,s);return this._glyphMosaic.bind(e,n,o,p),t.setUniform1i("u_texture",p),void t.setUniform2fv("u_mosaicSize",r)}default:H.error("mapview-texture-manager",`Cannot handle unknown type ${r.mosaicType}`)}}_hashMosaic(e,t){return 1|e<<1|(t.sdf?1:0)<<2|t.page<<3}_setTextureBinding(e,t){const i=this._hashMosaic(e,t);if(!this._hashToBindingIndex.has(i)){const s=V.fromMosaic(e,t),r=this._bindingInfos.length+1;this._hashToBindingIndex.set(i,r),this._bindingInfos.push(s)}t.textureBinding=this._hashToBindingIndex.get(i)}async _rasterizeText(e,t,s){let o,n;if("cim"in e){const t=e;o=t.fontName,n=t.text}else{const t=e;o=r(t.font),n=t.text}const a=this._invalidFontsMap.has(o),h=t||R(i(n)[0]);try{const e=a?k:o;return has("esri-2d-stabilize-glyphs")&&await this._glyphMosaic.preloadASCIIGlyphCache(e),await this._glyphMosaic.getGlyphItems(e,h,s)}catch(c){return Q("mapview-invalid-resource",`Couldn't find font ${o}. Falling back to Arial Unicode MS Regular`),this._invalidFontsMap.set(o,!0),this._glyphMosaic.getGlyphItems(k,h,s)}}async _rasterizeSpriteSymbol(e,t,i){if(v(e))return;const r=F(e);if(this._spriteMosaic.has(r))return this._spriteMosaic.getSpriteItem(r);if(j(e)||x(e)&&!S(e))return this._handleAsyncResource(r,e,i);const o=_,n=this._rasterizer.rasterizeJSONResource(e,o);if(n){const{size:t,image:i,sdf:s,simplePattern:o,rasterizationScale:a}=n;return this._addItemToMosaic(r,t,{type:"static",data:i},b(e),s,o,a)}return new s("TextureManager","unrecognized or null rasterized image")}async _handleAsyncResource(e,t,i){if(this._ongoingRasterizations.has(e))return this._ongoingRasterizations.get(e);let s;s=j(t)?this._handleSVG(t,e,i):this._handleImage(t,e,i),this._ongoingRasterizations.set(e,s);try{await s,this._ongoingRasterizations.delete(e)}catch{this._ongoingRasterizations.delete(e)}return s}async _handleSVG(e,t,i){const s=[m,m],r=await this._sdfConverter.draw(e.path,i);return this._addItemToMosaic(t,s,{type:"static",data:new Uint32Array(r.buffer)},!1,!0,!0)}async _handleGIFOrPNG(e,t,i){const r=P(e);await this.resourceManager.fetchResource(r,i);let o=this.resourceManager.getResource(r);if(null==o)return new s("mapview-invalid-resource",`Could not fetch requested resource at ${r}.`);let a=o.width,h=o.height;if(o instanceof HTMLImageElement){"esriPMS"===e.type&&(a=Math.round(O(o.width,U(e))),h=Math.round(o.height*(a/o.width)));const i="cim"in e?e.cim.colorSubstitutions:void 0,{size:s,sdf:r,image:n}=this._rasterizer.rasterizeImageResource(a,h,o,i);return this._addItemToMosaic(t,s,{type:"static",data:n},b(e),r,!1)}this._allowNonPowerOfTwo||(a=n(o.width+2*f)-2*f,h=n(o.height+2*f)-2*f),a===o.width&&h===o.height||(o=q(o,a,h));const c=e.animatedSymbolProperties||{},u=e.objectId,d=new A(o,this._requestRender,c,u);return this._addItemToMosaic(t,[d.width,d.height],{type:"animated",data:d},b(e),!1,!1)}async _handleImage(e,t,i){if(B(e)||G(e))return this._handleGIFOrPNG(e,t,i);const r=P(e);try{let s;const o=this.resourceManager.getResource(r);if(null!=o&&o instanceof HTMLImageElement)s=o;else{const{data:e}=await this._imageRequestQueue.push(r,{...i});s=e}if(C(r))if("width"in e&&"height"in e)s.width=c(e.width),s.height=c(e.height);else if("cim"in e){const t=e.cim;s.width=c(t.width??t.scaleX*t.size),s.height=c(t.size)}if(!s.width||!s.height)return null;let n=s.width,a=s.height;"esriPMS"===e.type&&(n=Math.round(O(s.width,U(e))),a=Math.round(s.height*(n/s.width)));const h="cim"in e?e.cim.colorSubstitutions:void 0,{size:u,sdf:d,image:l}=this._rasterizer.rasterizeImageResource(n,a,s,h);return this._addItemToMosaic(t,u,{type:"static",data:l},b(e),d,!1)}catch(Q){if(!h(Q))return new s("mapview-invalid-resource",`Could not fetch requested resource at ${r}. ${Q.message}`)}}_addItemToMosaic(e,t,i,s,r,o,n){return this._spriteMosaic.addSpriteItem(e,t,i,s,r,o,n)}}export{Y as default};
