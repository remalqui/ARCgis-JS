/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
import t from"../../../../core/Error.js";import has from"../../../../core/has.js";import e from"../../../../core/Logger.js";import{mapMany as i,applySome as s,forEachSome as r}from"../../../../core/maybe.js";import{createResolver as a}from"../../../../core/promiseUtils.js";import{ATTRIBUTE_DATA_VV as n,TEXTURE_BINDING_ATTRIBUTE_DATA_0 as d,TEXTURE_BINDING_ATTRIBUTE_DATA_1 as h,TEXTURE_BINDING_ATTRIBUTE_DATA_2 as u,TEXTURE_BINDING_ATTRIBUTE_DATA_3 as o,TEXTURE_BINDING_ATTRIBUTE_DATA_4 as l,TEXTURE_BINDING_ATTRIBUTE_DATA_5 as p,TEXTURE_BINDING_GPGPU as x,ATTRIBUTE_DATA_FILTER_FLAGS as _,ATTRIBUTE_DATA_GPGPU as g,ATTRIBUTE_DATA_ANIMATION as c,ATTRIBUTE_DATA_DD1 as f}from"./definitions.js";import{getDisplayIdTexel as b}from"./DisplayId.js";import{getPixelArrayCtor as T,getPixelBytes as m}from"./Utils.js";import{createDebugLogger as y,DEBUG_ATTR_UPDATES as w}from"./util/debug.js";import{TextureWrapMode as z,TextureSamplingMode as U,PixelType as D}from"../../../webgl/enums.js";import{FramebufferObject as E}from"../../../webgl/FramebufferObject.js";import{Texture as S}from"../../../webgl/Texture.js";import{TextureDescriptor as A}from"../../../webgl/TextureDescriptor.js";const j=e.getLogger("esri.views.2d.engine.webgl.AttributeStoreView"),k=y(w,j);class M{constructor(t,e,i){this._texture=null,this._lastTexture=null,this._fbos={},this.texelSize=4;const{buffer:s,pixelType:r,textureOnly:a}=t,n=T(r);this.shared=i,this.pixelType=r,this.size=e,this.textureOnly=a,a||(this.data=new n(s)),this._resetRange()}destroy(){s(this._texture,(t=>t.dispose()));for(const t in this._fbos)s(this._fbos[t],(e=>{"0"===t&&e.detachColorTexture(),e.dispose()})),this._fbos[t]=null;this._texture=null}get _textureDesc(){const t=new A;return t.wrapMode=z.CLAMP_TO_EDGE,t.samplingMode=U.NEAREST,t.dataType=this.pixelType,t.width=this.size,t.height=this.size,t}setData(t,e,i){const s=b(t),r=this.data,a=s*this.texelSize+e;!r||a>=r.length||(r[a]=i,this.dirtyStart=Math.min(this.dirtyStart,s),this.dirtyEnd=Math.max(this.dirtyEnd,s))}getData(t,e){if(null==this.data)return null;const i=b(t)*this.texelSize+e;return!this.data||i>=this.data.length?null:this.data[i]}getTexture(t){return this._texture??this._initTexture(t)}getFBO(t,e=0){if(!this._fbos[e]){const i=0===e?this.getTexture(t):this._textureDesc;this._fbos[e]=new E(t,i)}return this._fbos[e]}get locked(){return!(this.pixelType!==D.UNSIGNED_BYTE||!this.shared||this.textureOnly||!has("esri-atomics")||!this.data)&&1===Atomics.load(this.data,0)}get hasDirty(){const t=this.dirtyStart;return this.dirtyEnd>=t}updateTexture(e,i){if(!this.locked){try{const i=this.dirtyStart,s=this.dirtyEnd;if(!this.hasDirty)return;this._resetRange();const r=this.data.buffer,a=this.getTexture(e),n=4,d=(i-i%this.size)/this.size,h=(s-s%this.size)/this.size,u=d,o=this.size,l=h,p=d*this.size*n,x=(o+l*this.size)*n-p,_=T(this.pixelType),g=new _(r,p*_.BYTES_PER_ELEMENT,x),c=this.size,f=l-u+1;if(f>this.size)return void j.error(new t("mapview-webgl","Out-of-bounds index when updating AttributeData"));a.updateData(0,0,u,c,f,g)}catch(s){}i()}}update(t){const{data:e,start:i,end:s}=t;if(null!=e&&null!=this.data){const s=this.data,r=i*this.texelSize;for(let i=0;i<e.length;i++){const a=1<<i%this.texelSize;t.layout&a&&(s[r+i]=e[i])}}this.dirtyStart=Math.min(this.dirtyStart,i),this.dirtyEnd=Math.max(this.dirtyEnd,s)}resize(t,e){const i=this.size;if(this.size=e,this.textureOnly)return void(i!==this.size&&(this._lastTexture=this._texture,this._texture=null));const s=T(this.pixelType);this.destroy(),this.data=new s(t.buffer)}_resetRange(){this.dirtyStart=2147483647,this.dirtyEnd=0}_initTexture(t){const e=new S(t,this._textureDesc,this.data??void 0);if(null!=this._lastTexture&&this._fbos[0]){const i=this._lastTexture.descriptor.width,s=this._lastTexture.descriptor.height,r=this._lastTexture.descriptor.dataType,a=this._lastTexture.descriptor.pixelFormat,n=this.getFBO(t),d=m(r),h=new(T(r))(new ArrayBuffer(i*s*d*this.texelSize)),u=t.getBoundFramebufferObject(),{x:o,y:l,width:p,height:x}=t.getViewport();t.bindFramebuffer(n),n.readPixels(0,0,i,s,a,r,h),e.updateData(0,0,0,2*i,s/2,h),t.setViewport(o,l,p,x),t.bindFramebuffer(u)}return this.destroy(),this._texture=e,this._texture}}class O{constructor(t){this._onUpdate=t,this._initialized=!1,this._forceNextUpload=!1,this._locked=!1}initialize(t){const{blocks:e,shared:s,size:r}=t;if(this.shared=s,this.size=r,k("Initializing AttributeStoreView",t),null==this._data)this._data=i(e,(t=>new M(t,r,s)));else for(let i=0;i<this._data.length;i++){const t=this._data[i],a=e[i];null!=a&&(null==t?this._data[i]=new M(a,r,s):t.resize(a,r))}this._initialized=!0}destroy(){s(this._data,(t=>i(t,(t=>t.destroy())))),s(this._defaultTexture,(t=>t.dispose()))}isEmpty(){return null==this._data}isUpdating(){const t=null!=this._pendingAttributeUpdate,e=t;return has("esri-2d-log-updating")&&console.log(`Updating AttributeStoreView ${e}\n  -> hasPendingUpdate ${t}`),e}getBlock(t){if(null==this._data)return null;return this._data[t]}setLabelMinZoom(t,e){this.setData(t,0,1,e)}getLabelMinZoom(t){return this.getData(t,0,1,255)}getFilterFlags(t){return this.getData(t,0,0,0)}getVVSize(t){return this.getData(t,n,0,0)}getData(t,e,i,s){if(!this._data)return 0;const r=this._data[e];if(null==r)return 0;const a=r.getData(t,i);return null!=a?a:s}setData(t,e,i,s){this._data[e].setData(t,i,s)}lockTextureUpload(){this._locked=!0}unlockTextureUpload(){this._locked=!1}forceTextureUpload(){this._forceNextUpload=!0}async requestUpdate(e){if(this._pendingAttributeUpdate)return void j.error(new t("mapview-webgl","Tried to update attribute data with a pending update"));const i=a();return k("AttributeStoreView Update Requested",e),this._pendingAttributeUpdate={data:e,resolver:i},this._onUpdate(),i.promise}update(){if(this._initialized&&null!=this._pendingAttributeUpdate){has("esri-2d-update-debug")&&console.debug("AttributeStoreView::update");const{data:t,resolver:e}=this._pendingAttributeUpdate,i=this._data;for(let r=0;r<t.blocks.length;r++){const e=t.blocks[r],a=i[r];s(a,(t=>s(e,(e=>{k(`Updating block ${r}`,e),t.update(e)}))))}this._pendingAttributeUpdate=null,e(),this._onUpdate()}}bindTextures(t,e=!0){const i=this._getDefaultTexture(t);if(!this._initialized)return t.bindTexture(i,d),void(e&&(t.bindTexture(i,h),t.bindTexture(i,u),t.bindTexture(i,o),t.bindTexture(i,l),t.bindTexture(i,p),t.bindTexture(i,x)));const s=this._data;this._locked&&!this._forceNextUpload||(r(s,(e=>e.updateTexture(t,(()=>this._onUpdate())))),this._forceNextUpload=!1),t.bindTexture(s[_]?.getTexture(t)??i,d),e&&(t.bindTexture(s[g]?.getTexture(t)??i,x),t.bindTexture(s[c]?.getTexture(t)??i,h),t.bindTexture(s[n]?.getTexture(t)??i,u),t.bindTexture(s[f]?.getTexture(t)??i,o),t.bindTexture(s[l]?.getTexture(t)??i,l),t.bindTexture(s[p]?.getTexture(t)??i,p))}_getDefaultTexture(t){if(null==this._defaultTexture){const e=new A;e.wrapMode=z.CLAMP_TO_EDGE,e.samplingMode=U.NEAREST,e.width=1,e.height=1,this._defaultTexture=new S(t,e,new Uint8Array(4))}return this._defaultTexture}}export{O as AttributeStoreView};
