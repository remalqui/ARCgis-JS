/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
import{applySome as t}from"../../../core/maybe.js";import{createResolver as e,onAbortOrThrow as s,throwIfNotAbortError as i}from"../../../core/promiseUtils.js";import{g as r,h,r as o,l as u,m as a}from"../../../chunks/mat3.js";import{c as n}from"../../../chunks/mat3f32.js";import{f as d}from"../../../chunks/vec2f32.js";import{DisplayObject as l}from"./DisplayObject.js";import c from"./ImageryBitmapSource.js";import{ContextType as _}from"../../webgl/contextUtils.js";import{SizedPixelFormat as p,PixelFormat as m,TextureWrapMode as x}from"../../webgl/enums.js";import{Texture as g}from"../../webgl/Texture.js";import{TextureDescriptor as f}from"../../webgl/TextureDescriptor.js";function w(t){return t&&"render"in t}function b(t){const e=document.createElement("canvas");return e.width=t.width,e.height=t.height,t.render(e.getContext("2d")),e}function v(e){return w(e)?e instanceof c?t(e.getRenderedRasterPixels(),(t=>t.renderedRasterPixels)):b(e):e}class T extends l{constructor(t=null,e=!1){super(),this.blendFunction="standard",this._sourceWidth=0,this._sourceHeight=0,this._textureInvalidated=!1,this._texture=null,this.stencilRef=0,this.coordScale=[1,1],this._height=void 0,this.pixelRatio=1,this.resolution=0,this.rotation=0,this._source=null,this._width=void 0,this.x=0,this.y=0,this.immutable=e,this.source=t,this.requestRender=this.requestRender.bind(this)}destroy(){this._texture&&(this._texture.dispose(),this._texture=null),null!=this._uploadStatus&&(this._uploadStatus.controller.abort(),this._uploadStatus=null)}get isSourceScaled(){return this.width!==this._sourceWidth||this.height!==this._sourceHeight}get height(){return void 0!==this._height?this._height:this._sourceHeight}set height(t){this._height=t}get source(){return this._source}set source(t){null==t&&null==this._source||(this._source=t,this.invalidateTexture(),this.requestRender())}get width(){return void 0!==this._width?this._width:this._sourceWidth}set width(t){this._width=t}beforeRender(t){super.beforeRender(t),this.updateTexture(t)}async setSourceAsync(t,i){null!=this._uploadStatus&&this._uploadStatus.controller.abort();const r=new AbortController,h=e();return s(i,(()=>r.abort())),s(r,(t=>h.reject(t))),this._uploadStatus={controller:r,resolver:h},this.source=t,h.promise}invalidateTexture(){this._textureInvalidated||(this._textureInvalidated=!0,this._source instanceof HTMLImageElement?(this._sourceHeight=this._source.naturalHeight,this._sourceWidth=this._source.naturalWidth):this._source&&(this._sourceHeight=this._source.height,this._sourceWidth=this._source.width))}updateTransitionProperties(t,e){t>=64&&(this.fadeTransitionEnabled=!1,this.inFadeTransition=!1),super.updateTransitionProperties(t,e)}setTransform(t){const e=r(this.transforms.dvs),[s,i]=t.toScreenNoRotation([0,0],[this.x,this.y]),n=this.resolution/this.pixelRatio/t.resolution,l=n*this.width,c=n*this.height,_=Math.PI*this.rotation/180;h(e,e,d(s,i)),h(e,e,d(l/2,c/2)),o(e,e,-_),h(e,e,d(-l/2,-c/2)),u(e,e,d(l,c)),a(this.transforms.dvs,t.displayViewMat3,e)}setSamplingProfile(t){this._texture&&(t.mips&&!this._texture.descriptor.hasMipmap&&this._texture.generateMipmap(),this._texture.setSamplingMode(t.samplingMode))}bind(t,e){this._texture&&t.bindTexture(this._texture,e)}async updateTexture({context:t,painter:e}){if(!this._textureInvalidated)return;if(this._textureInvalidated=!1,this._texture||(this._texture=this._createTexture(t)),!this.source)return void this._texture.setData(null);this._texture.resize(this._sourceWidth,this._sourceHeight);const s=v(this.source);try{if(null!=this._uploadStatus){const{controller:t,resolver:i}=this._uploadStatus,r={signal:t.signal},{width:h,height:o}=this,u=this._texture,a=e.textureUploadManager;await a.enqueueTextureUpdate({data:s,texture:u,width:h,height:o},r),i.resolve(),this._uploadStatus=null}else this._texture.setData(s);this.ready()}catch(r){i(r)}}onDetach(){this.destroy()}_createTransforms(){return{dvs:n()}}_createTexture(t){const e=this.immutable&&t.type===_.WEBGL2,s=new f;return s.internalFormat=e?p.RGBA8:m.RGBA,s.wrapMode=x.CLAMP_TO_EDGE,s.isImmutable=e,s.width=this._sourceWidth,s.height=this._sourceHeight,new g(t,s)}}export{T as Bitmap,w as isImageSource,b as rasterize};
