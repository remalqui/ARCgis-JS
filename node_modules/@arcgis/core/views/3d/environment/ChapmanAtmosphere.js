/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
import e from"../../../core/Handles.js";import{clamp as t,lerp as s,smoothstep as i}from"../../../core/mathUtils.js";import{watch as r}from"../../../core/reactiveUtils.js";import{s as a}from"../../../chunks/vec2.js";import{a as o}from"../../../chunks/vec2f64.js";import{s as n,l as h,p as d}from"../../../chunks/vec3.js";import{s as u}from"../../../chunks/vec4.js";import{earth as m}from"../../../geometry/support/Ellipsoid.js";import{AtmosphereType as p}from"./AtmosphereType.js";import{atmosphereHeight as l,innerAtmosphereDepth as c,computeInnerAltitudeFade as _}from"./atmosphereUtils.js";import{ChapmanAtmospherePassParameters as T,ChapmanAtmosphereTechnique as f}from"./ChapmanAtmosphereTechnique.js";import{ChapmanAtmosphereTechniqueConfiguration as v}from"./ChapmanAtmosphereTechniqueConfiguration.js";import{Pos2Tex as b}from"../webgl-engine/lib/DefaultVertexBufferLayouts.js";import{createQuadVAO as R}from"../webgl-engine/lib/glUtil3D.js";import{PrimitiveType as w}from"../../webgl/enums.js";class q{constructor(t,s){this._view=t,this.type=p.Realistic,this._handles=new e,this._passParameters=new T,this._rootTileElevationMin=NaN,this._lowerBoundEarthRadius=m.radius,this._fadeHaze=0,this._tmpScale=o(),this._updateRadius(m.radius);const i=s.renderContext.rctx;this._updateRootTileElevationBounds(),this._handles.add([r((()=>this._view?.basemapTerrain?.rootTileElevationBounds),(()=>this._view?.basemapTerrain?this._updateRootTileElevationBounds():null)),r((()=>this._view?.basemapTerrain?.visibleElevationBounds),(()=>this._view?.basemapTerrain?this._updateVisibleElevationBounds():null))]);const a=new v;a.haze=!1,this._atmosphereTechnique=s.techniqueRepository.acquire(f,a),a.haze=!0,this._atmosphereHazeTechnique=s.techniqueRepository.acquire(f,a),a.reduced=!0,a.haze=!1,this._atmosphereReducedTechnique=s.techniqueRepository.acquire(f,a),a.haze=!0,this._atmosphereHazeReducedTechnique=s.techniqueRepository.acquire(f,a),this._vao=R(i,b)}destroy(){this._handles.destroy(),this._atmosphereTechnique.release(),this._atmosphereHazeTechnique.release(),this._atmosphereReducedTechnique.release(),this._atmosphereHazeReducedTechnique.release(),this._vao.dispose()}render(e,t){this._render(e,t?this._atmosphereTechnique:this._atmosphereReducedTechnique,e.offscreenRenderingHelper.depthTexture,t,!1)}renderHaze(e,t,s){this._fadeHaze=t,this._render(e,s?this._atmosphereHazeTechnique:this._atmosphereHazeReducedTechnique,e.offscreenRenderingHelper.linearDepthTexture,s,!0)}_render(e,t,i,r,o){if(null==i)return;const d=e.offscreenRenderingHelper;this._update(e.bindParameters.camera),this._passParameters.depthTexture=i;const u=d.background.color;n(this._passParameters.backgroundColor,u[0]*u[3],u[1]*u[3],u[2]*u[3]);const p=e.rctx.bindTechnique(t,this._passParameters,e.bindParameters);if(r)d.renderDepthDetached((()=>this._renderCommon(p,e)));else{const t=e.rctx.getViewport(),r=h(e.bindParameters.camera.eye)-m.radius;let n;if(r<l){const e=Math.min(1,Math.max(0,r/l));n=o?s(.4,.5,e):s(.2,.3,e)}else{const e=Math.min(1,Math.max(0,(r-l)/(15*l)));n=o?s(.5,1,e):s(.3,.6,e)}const u=Math.floor(n*e.bindParameters.camera.fullViewport[2]),c=Math.floor(n*e.bindParameters.camera.fullViewport[3]);e.rctx.setViewport(0,0,u,c),d.renderToTargets((()=>this._renderCommon(p,e)),d.tmpColor,d.tmpDepth,[0,0,0,1],!1,!1),e.rctx.setViewport(t.x,t.y,t.width,t.height),a(this._tmpScale,u/e.bindParameters.camera.fullViewport[2],c/e.bindParameters.camera.fullViewport[3]),d.compositeAtmosphereToMain(e.bindParameters,o,i,this._tmpScale)}}_renderCommon(e,t){null!=this._vao&&(t.rctx.bindVAO(this._vao),e.assertCompatibleVertexAttributeLocations(this._vao),t.rctx.drawArrays(w.TRIANGLE_STRIP,0,4))}_adjustRadiusForTesselation(e){return e*Math.cos(Math.PI/16/16)}_updateRootTileElevationBounds(){const e=this._view.basemapTerrain.rootTileElevationBounds.min;e!==this._rootTileElevationMin&&(this._rootTileElevationMin=e,this._lowerBoundEarthRadius=m.radius,this._updateVisibleElevationBounds())}_updateVisibleElevationBounds(){const e=this._adjustRadiusForTesselation(m.radius+this._view.basemapTerrain.visibleElevationBounds.min);e<this._lowerBoundEarthRadius&&this._updateRadius(e)}_updateRadius(e){this._lowerBoundEarthRadius=e,a(this._passParameters.radii,e,e+l),this._passParameters.innerFadeDistance=2*Math.sqrt((2*e-c)*c)}_update(e){if(!e)return;const r=d(e.eye),a=Math.sqrt(r),o=r-this._passParameters.radii[1]*this._passParameters.radii[1],n=t((a-this._passParameters.radii[0])/l,0,1);u(this._passParameters.heightParameters,a,r,o,n),this._passParameters.altitudeFade=_(a-this._lowerBoundEarthRadius),this._passParameters.hazeStrength=s(s(.6,1,i(9500,10500,a-m.radius)),1,this._fadeHaze)}static isSupported(e){return e.renderContext.rctx.capabilities.depthTexture}}export{q as ChapmanAtmosphere};
