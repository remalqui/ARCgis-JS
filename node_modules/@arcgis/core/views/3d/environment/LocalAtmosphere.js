/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
import{disposeMaybe as e}from"../../../core/maybe.js";import{c as t}from"../../../chunks/mat4.js";import{c as r}from"../../../chunks/mat4f64.js";import{AtmosphereType as s}from"./AtmosphereType.js";import{S as o}from"../../../chunks/SimpleAtmosphere.glsl.js";import{SimpleAtmosphereTechnique as i}from"./SimpleAtmosphereTechnique.js";import{SimpleAtmosphereTechniqueConfiguration as m,SimpleAtmosphereGeometry as a}from"./SimpleAtmosphereTechniqueConfiguration.js";import{earthAtmosphereTextureSimple as n}from"./resources/SimpleAtmosphereTexture.js";import{glLayout as p}from"../support/buffer/glUtil.js";import{newLayout as c}from"../support/buffer/InterleavedLayout.js";import{Default3D as u}from"../webgl-engine/lib/DefaultVertexAttributeLocations.js";import{createPolySphereData as f}from"../webgl-engine/lib/GeometryUtil.js";import{VertexArrayObject as h}from"../webgl-engine/lib/VertexArrayObject.js";import{VertexAttribute as l}from"../webgl-engine/lib/VertexAttribute.js";import{BufferObject as b}from"../../webgl/BufferObject.js";import{TextureWrapMode as g,PrimitiveType as j,Usage as _}from"../../webgl/enums.js";import{Texture as x}from"../../webgl/Texture.js";import{TextureDescriptor as w}from"../../webgl/TextureDescriptor.js";import{vertexCount as A}from"../../webgl/Util.js";class d{constructor(e,t){this.type=s.Local,this._configuration=new m,this._passParameters=new o,this._configuration.geometry=a.Cylinder,this._technique=t.techniqueRepository.acquire(i,this._configuration);const r=t.renderContext.rctx;this._vao=this._createVertexArrayObject(r),this._vaoCount=A(this._vao,"geometry");const p=new w;p.wrapMode=g.CLAMP_TO_EDGE,p.flipped=!0,p.width=1,p.height=512,this._passParameters.texture=new x(r,p,n)}destroy(){this._passParameters.texture=e(this._passParameters.texture),this._vao.dispose(),this._technique.release()}render(e){const t=e.rctx,r=t.bindTechnique(this._technique,this._passParameters,e.bindParameters);y(v,e.bindParameters.camera.viewMatrix),r.setUniformMatrix4fv("view",v),t.bindVAO(this._vao),r.assertCompatibleVertexAttributeLocations(this._vao),t.drawArrays(j.TRIANGLES,0,this._vaoCount)}renderHaze(){return!1}_createVertexArrayObject(e){const t=f(1,2,!1),r=t.indices[0][1],s=t.vertexAttributes[0][1];for(let a=0;a<r.length;a+=3){const e=r[a];r[a]=r[a+2],r[a+2]=e}const o=s.data,i=T.createBuffer(r.length),m=i.position;for(let a=0;a<r.length;++a){const e=3*r[a];m.set(a,0,o[e]),m.set(a,1,o[e+1]),m.set(a,2,o[e+2])}return new h(e,u,{geometry:p(T)},{geometry:b.createVertex(e,_.STATIC_DRAW,i.buffer)})}}function y(e,r){t(e,r),e[12]=0,e[13]=0,e[14]=0,e[15]=1}const v=r(),T=c().vec3f(l.POSITION);export{d as LocalAtmosphere};
