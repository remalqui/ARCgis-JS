/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../chunks/tslib.es6.js";import t from"../../../../Color.js";import"../../../../intl.js";import i from"../../../../core/Accessor.js";import{getAccentColor as s,getTextHaloColor as n,getTextColor as o}from"../../../../core/analysisThemeUtils.js";import l from"../../../../core/Handles.js";import{nextHighestPowerOfTen as a,deg2rad as r}from"../../../../core/mathUtils.js";import{destroyMaybe as c}from"../../../../core/maybe.js";import{formatDecimal as d,formatImperialLength as h,formatImperialVerticalLength as u,formatMetricLength as m,formatMetricVerticalLength as g}from"../../../../core/quantityFormatUtils.js";import{toUnit as p}from"../../../../core/quantityUtils.js";import{watch as _,syncAndInitial as v}from"../../../../core/reactiveUtils.js";import{createRenderScreenPointArray3 as b,createRenderScreenPointArray as L}from"../../../../core/screenUtils.js";import{preferredImperialLengthUnit as w,convertUnit as S}from"../../../../core/unitUtils.js";import{property as y}from"../../../../core/accessorSupport/decorators/property.js";import"../../../../core/accessorSupport/ensureType.js";import"../../../../core/arrayUtils.js";import"../../../../core/has.js";import{subclass as f}from"../../../../core/accessorSupport/decorators/subclass.js";import{g as A}from"../../../../chunks/vec2.js";import{g as P,a as j}from"../../../../chunks/vec3.js";import{c as V}from"../../../../chunks/vec3f64.js";import{MeasurementMode as E}from"../interfaces.js";import{ViewMode as z,VisualElementOrientation as M}from"./interfaces.js";import{screenSpaceTangent as D}from"../support/viewUtils.js";import{LabelVisualElement as O,mirrorPosition as G}from"../../interactive/visualElements/LabelVisualElement.js";import{LineVisualElement as C}from"../../interactive/visualElements/LineVisualElement.js";import{MeasurementArrowVisualElement as x}from"../../interactive/visualElements/MeasurementArrowVisualElement.js";import{RightAngleQuadVisualElement as T}from"../../interactive/visualElements/RightAngleQuadVisualElement.js";import{GeodesicSegment as H,EuclideanSegment as U}from"../../interactive/visualElements/support/Segment.js";import{RenderOccludedFlag as k}from"../../webgl-engine/lib/Material.js";import{createStipplePatternSimple as R}from"../../webgl-engine/materials/lineStippleUtils.js";import{onLocaleChange as F}from"../../../../intl/locale.js";import{fetchMessageBundle as B}from"../../../../intl/messages.js";let Q=class extends i{get visible(){return this.analysisView.visible}get viewMode(){const{elevationAlignedStartPoint:e,elevationAlignedEndPoint:t}=this.analysisView;if(null==e||null==t||e.equals(t))return z.None;const i=this.analysisView.result;if(null==i)return z.Direct;if("geodesic"===i.mode)return this._requiresGeodesicGuideAt(this._startPosition)||this._requiresGeodesicGuideAt(this._endPosition)?z.ProjectedGeodesic:z.Direct;const{verticalDistance:s,horizontalDistance:n}=i,o=s.value,l=n.value;return Math.min(o/l,l/o)<this.triangleCollapseRatioThreshold?z.Direct:z.Triangle}get actualVisualizedMeasurement(){if(null==this.analysisView.result)switch(this.analysisView.measurementMode){case E.Auto:case E.Euclidean:default:return"euclidean";case E.Geodesic:return"geodesic"}return this.analysisView.result.mode}get allowVisualElementsOrientationChange(){return null==this._triangleOrientationOverride}set allowVisualElementsOrientationChange(e){null==this._triangleOrientationOverride!==e&&(null==this._triangleOrientationOverride?this._triangleOrientationOverride=this._actualVisualElementsOrientation:this._triangleOrientationOverride=null)}get labels(){const e="geodesic"===this.actualVisualizedMeasurement;return{direct:this._segmentLabel,horizontal:e?this._segmentLabel:this._horizontalLabel,vertical:this._verticalLabel}}constructor(e){super(e),this._params={triangleColor:t.toUnitRGBA(s(.75)),triangleLineWidth:3,geodesicProjectionLineWidth:2,geodesicProjectionLineColor:t.toUnitRGBA(s(.75)),guideLineWidth:2,guideStippleLengthPixels:6,directLabelFontSize:16,horizontalLabelFontSize:12,verticalLabelFontSize:12},this._handles=new l,this._segmentVisualElement=null,this._triangleVisualElement=null,this._rightAngleQuad=null,this._projectedGeodesicLine=null,this._geodesicStartHint=null,this._geodesicEndHint=null,this._segmentLabel=null,this._verticalLabel=null,this._horizontalLabel=null,this._startPosition=V(),this._endPosition=V(),this._cornerPosition=V(),this._startPositionAtSeaLevel=V(),this._endPositionAtSeaLevel=V(),this._triangleOrientationOverride=null,this.messages=null,this.loadingMessages=!0,this.visualElementOrientation=M.Auto,this.triangleCollapseRatioThreshold=.03}initialize(){const e=this._params,i={attached:!0,view:this.view};this._segmentVisualElement=new x({...i,geometry:null,renderOccluded:k.OccludeAndTransparent}),this._triangleVisualElement=new C({...i,width:e.triangleLineWidth,color:e.triangleColor,renderOccluded:k.OccludeAndTransparent}),this._rightAngleQuad=new T({...i,color:t.toUnitRGBA(s(.75)),renderOccluded:k.OccludeAndTransparent});const l={...i,polygonOffset:!0,renderOccluded:k.OccludeAndTransparent};this._projectedGeodesicLine=new C({...l,width:e.geodesicProjectionLineWidth,color:e.geodesicProjectionLineColor,stipplePattern:R(e.guideStippleLengthPixels)}),this._geodesicStartHint=new C({...l,width:e.guideLineWidth,color:e.geodesicProjectionLineColor,stipplePattern:R(e.guideStippleLengthPixels)}),this._geodesicEndHint=new C({...l,width:e.guideLineWidth,color:e.geodesicProjectionLineColor,stipplePattern:R(e.guideStippleLengthPixels)});const a={...i,backgroundColor:n(.6),calloutColor:n(.5),textColor:o()};this._segmentLabel=new O({...a,fontSize:e.directLabelFontSize}),this._verticalLabel=new O({...a,fontSize:e.verticalLabelFontSize}),this._horizontalLabel=new O({...a,fontSize:e.horizontalLabelFontSize}),this._handles.add([_((()=>{const{elevationAlignedStartPoint:e,elevationAlignedEndPoint:t}=this.analysisView,i=this.view;return{view:i,camera:i.state.camera,viewMode:this.viewMode,elevationAlignedStartPoint:e,elevationAlignedEndPoint:t,orientation:this._actualVisualElementsOrientation,visualizedMeasurement:this.actualVisualizedMeasurement,stripeLength:this._measurementArrowStripeLength}}),(e=>this._updateGeometryAndViewMode(e)),v),_((()=>({visible:this.visible,viewMode:this.viewMode})),(e=>this._updateVisualElementVisibility(e)),v),_((()=>({text:this._labelsText,visualizedMeasurement:this.actualVisualizedMeasurement})),(e=>this._updateLabelText(e)),v),_((()=>({visible:this.visible,viewMode:this.viewMode})),(e=>this._updateLabelVisibility(e)),v),_((()=>this._measurementArrowStripeLength),(e=>this._updateSegmentStripeLength(e)),v),F((async()=>this._updateMessageBundle()))]),this._updateMessageBundle()}destroy(){this._handles=c(this._handles),this._segmentVisualElement=c(this._segmentVisualElement),this._triangleVisualElement=c(this._triangleVisualElement),this._rightAngleQuad=c(this._rightAngleQuad),this._projectedGeodesicLine=c(this._projectedGeodesicLine),this._geodesicStartHint=c(this._geodesicStartHint),this._geodesicEndHint=c(this._geodesicEndHint),this._segmentLabel=c(this._segmentLabel),this._verticalLabel=c(this._verticalLabel),this._horizontalLabel=c(this._horizontalLabel),this.set("view",null)}_updateVisualElementVisibility({visible:e,viewMode:t}){if(this._segmentVisualElement.visible=!1,this._triangleVisualElement.visible=!1,this._rightAngleQuad.visible=!1,this._projectedGeodesicLine.visible=!1,this._geodesicStartHint.visible=!1,this._geodesicEndHint.visible=!1,e)switch(t){case z.None:break;case z.Direct:this._segmentVisualElement.visible=!0;break;case z.Triangle:this._segmentVisualElement.visible=!0,this._triangleVisualElement.visible=!0,this._rightAngleQuad.visible=!0;break;case z.ProjectedGeodesic:this._segmentVisualElement.visible=!0,this._projectedGeodesicLine.visible=!0,this._geodesicStartHint.visible=!0,this._geodesicEndHint.visible=!0}}_updateGeometryAndViewMode({view:e,camera:t,viewMode:i,elevationAlignedStartPoint:s,elevationAlignedEndPoint:n,orientation:o,visualizedMeasurement:l,stripeLength:a}){const r=e.renderCoordsHelper;if(null==r||null==s||null==n||s.equals(n))return;let c=this._startPosition,d=this._endPosition;r.toRenderCoords(s,c),r.toRenderCoords(n,d);const h=o===M.AboveSegment?1:-1,u=h*(r.getAltitude(d)-r.getAltitude(c));u<0&&(c=this._endPosition,d=this._startPosition);const m="geodesic"===l?new H(this._startPosition,this._endPosition,r.spatialReference):new U(this._startPosition,this._endPosition);switch(this._segmentVisualElement.geometry=m,this._updateSegmentStripeLength(a),i){case z.Direct:this._updateSegment(m,o);break;case z.Triangle:this._updateSegmentAndTriangle({view:e,camera:t,segment:m,orientation:o,startPosition:c,endPosition:d,deltaSign:h,altitudeDelta:u});break;case z.ProjectedGeodesic:this._updateSegmentAndProjection({view:e,orientation:o,startPosition:c,endPosition:d})}}_updateSegment(e,t){this._segmentLabel.anchor=t===M.AboveSegment?"top":"bottom",this._segmentLabel.geometry={type:"segment",segment:e,sampleLocation:"center"}}_updateSegmentAndTriangle({view:{renderCoordsHelper:e},camera:t,segment:i,orientation:s,startPosition:n,endPosition:o,deltaSign:l,altitudeDelta:a}){const r=this._cornerPosition;e.worldUpAtPosition(n,r),P(r,r,l*Math.abs(a)),j(r,r,n),this._triangleVisualElement.geometry=[[[n[0],n[1],n[2]],[r[0],r[1],r[2]],[o[0],o[1],o[2]]]],this._rightAngleQuad.geometry={previous:n,center:r,next:o};const c=new U(n,r),d=new U(r,o),h=q(n,o,r,s,t);this._segmentLabel.anchor=h.segment,this._segmentLabel.geometry={type:"segment",segment:i,sampleLocation:"center"},this._verticalLabel.geometry={type:"segment",segment:c,sampleLocation:"center"},this._verticalLabel.anchor=h.vertical,this._horizontalLabel.geometry={type:"segment",segment:d,sampleLocation:"center"},this._horizontalLabel.anchor=h.horizontal}_updateSegmentAndProjection({view:{renderCoordsHelper:e},orientation:t,startPosition:i,endPosition:s}){e.setAltitude(this._startPositionAtSeaLevel,0,i),e.setAltitude(this._endPositionAtSeaLevel,0,s);const n=new H(this._startPositionAtSeaLevel,this._endPositionAtSeaLevel,e.spatialReference);this._projectedGeodesicLine.setGeometryFromSegment(n),this._geodesicStartHint.setGeometryFromSegment(new U(this._startPositionAtSeaLevel,i)),this._geodesicEndHint.setGeometryFromSegment(new U(this._endPositionAtSeaLevel,s)),this._segmentLabel.geometry={type:"segment",segment:n,sampleLocation:"center"},this._segmentLabel.anchor=t===M.AboveSegment?"top":"bottom"}_updateLabelText({text:e,visualizedMeasurement:t}){null!=e?(this._segmentLabel.text="euclidean"===t?e.euclideanDistance:e.geodesicDistance,this._horizontalLabel.text=e.horizontalDistance,this._verticalLabel.text=e.verticalDistance):(this._segmentLabel.text=null,this._horizontalLabel.text=null,this._verticalLabel.text=null),this.notifyChange("labels")}_updateLabelVisibility({visible:e,viewMode:t}){const i=this._segmentLabel,s=this._horizontalLabel,n=this._verticalLabel;if(i.visible=!1,s.visible=!1,n.visible=!1,e)switch(t){case z.Direct:i.visible=!0;break;case z.Triangle:i.visible=!0,s.visible=!0,n.visible=!0;break;case z.ProjectedGeodesic:i.visible=!0;case z.None:}}get _labelsText(){if(this.destroyed)return null;const e=this.messages,t=this.analysisView.result;if(null==t||null==e)return null;const{directDistance:i,horizontalDistance:s,verticalDistance:n,geodesicDistance:o}=t,l=this.analysisView.unit,a=e=>({euclideanDistance:"",geodesicDistance:"",horizontalDistance:"",verticalDistance:"",...e});switch(l){case"metric":return a({euclideanDistance:i&&m(e,i),geodesicDistance:o&&m(e,o),horizontalDistance:s&&m(e,s),verticalDistance:n&&g(e,n)});case"imperial":return a({euclideanDistance:i&&h(e,i),geodesicDistance:o&&h(e,o),horizontalDistance:s&&h(e,s),verticalDistance:n&&u(e,n)});default:return a({euclideanDistance:i&&d(e,i,l),geodesicDistance:o&&d(e,o,l),horizontalDistance:s&&d(e,s,l),verticalDistance:n&&d(e,n,l)})}}_updateSegmentStripeLength(e){const t=this._segmentVisualElement;null!=e?(t.stripeLength=e,t.stripesEnabled=!0):t.stripesEnabled=!1}get _actualVisualElementsOrientation(){if(null!=this._triangleOrientationOverride)return this._triangleOrientationOverride;const e=this.visualElementOrientation;return e===M.Auto?this.view.state.camera.aboveGround?M.AboveSegment:M.BelowSegment:e}_requiresGeodesicGuideAt(e){const t=this.view;if(!t?.state)return!1;const i=t.state.camera,s=t.renderCoordsHelper;if(!s)return!1;const n=i.computeScreenPixelSizeAt(e);return s.getAltitude(e)/n>=10}get _measurementArrowStripeLength(){const{result:e,unit:t}=this.analysisView;if(null==e)return null;let i=null;const s=e.directDistance;switch(t){case"metric":i=s&&p(s,"meters");break;case"imperial":i=s&&p(s,w(s.value,s.unit));break;default:i=s&&p(s,t)}if(null==i)return null;return a(i.value/30)*S(1,i.unit,"meters")}_updateMessageBundle(){this.loadingMessages=!0,B("esri/core/t9n/Units").then((e=>{this.messages=e})).finally((()=>{this.loadingMessages=!1}))}get testData(){return{labels:this.labels,stripeLength:this._segmentVisualElement?.stripeLength}}};function q(e,t,i,s,n){const o=N,l=I;n.projectToRenderScreen(i,o),n.projectToRenderScreen(t,l);const a={segment:"bottom",horizontal:"top",vertical:o[0]<l[0]?"left":"right"};{const s=J,o=K;if(D(e,i,s,n),D(e,t,o,n),A(s,o)>=W){const e=Math.sign(s[1])===Math.sign(o[1]);a.segment=e?G(a.vertical):a.vertical}else{const e=X;D(i,t,e,n),A(e,o)>=W&&(a.segment=Math.sign(e[0])===Math.sign(o[0])?G(a.horizontal):a.horizontal)}}if(s===M.BelowSegment){const e=e=>"top"===e?"bottom":"top";a.segment=e(a.segment),a.horizontal=e(a.horizontal),a.vertical=e(a.vertical)}return a}e([y()],Q.prototype,"_triangleOrientationOverride",void 0),e([y()],Q.prototype,"messages",void 0),e([y()],Q.prototype,"view",void 0),e([y()],Q.prototype,"analysis",void 0),e([y()],Q.prototype,"analysisView",void 0),e([y()],Q.prototype,"loadingMessages",void 0),e([y()],Q.prototype,"visible",null),e([y()],Q.prototype,"viewMode",null),e([y()],Q.prototype,"actualVisualizedMeasurement",null),e([y()],Q.prototype,"visualElementOrientation",void 0),e([y()],Q.prototype,"triangleCollapseRatioThreshold",void 0),e([y()],Q.prototype,"allowVisualElementsOrientationChange",null),e([y()],Q.prototype,"labels",null),e([y()],Q.prototype,"_labelsText",null),e([y()],Q.prototype,"_actualVisualElementsOrientation",null),e([y()],Q.prototype,"_measurementArrowStripeLength",null),Q=e([f("esri.views.3d.analysis.DirectLineMeasurement.DirectLineMeasurementVisualization")],Q);const W=Math.cos(r(12)),N=b(),I=b(),J=L(),K=L(),X=L();export{Q as DirectLineMeasurementVisualization};
