/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../chunks/tslib.es6.js";import r from"../../../../core/Accessor.js";import{screenPointObjectToArray as t}from"../../../../core/screenUtils.js";import{property as s}from"../../../../core/accessorSupport/decorators/property.js";import"../../../../core/accessorSupport/ensureType.js";import"../../../../core/arrayUtils.js";import"../../../../core/has.js";import{subclass as o}from"../../../../core/accessorSupport/decorators/subclass.js";import{c as i,n,g as c,a}from"../../../../chunks/vec3.js";import{a as p,c as l}from"../../../../chunks/vec3f64.js";import{create as m,copy as u,fromPoints as d}from"../../../../geometry/support/ray.js";import{sv2d as h}from"../../../../geometry/support/vectorStacks.js";import{getObjectId as f}from"../../../../layers/graphics/dehydratedFeatures.js";import{LineOfSightIntersectionResult as y}from"./LineOfSightIntersectionResult.js";import{isI3sIntersectorResult as g}from"../../layers/i3s/Intersector.js";import{fromScreen as I}from"../../support/geometryUtils/ray.js";import{isTerrainIntersectorResult as j}from"../../terrain/Intersector.js";import{newIntersector as v}from"../../webgl-engine/lib/Intersector.js";import{StoreResults as w,IntersectorType as b}from"../../webgl-engine/lib/IntersectorInterfaces.js";import{toGraphic as P}from"../../webgl-engine/lib/intersectorUtilsConversions.js";let R=class extends r{constructor(e){super(e),this._terrainIntersectionOptionsLayerUids=new Set(["terrain"])}initialize(){this.intersector=v(this.view.state.viewingMode),this.intersector.options.hud=!1,this.intersector.options.store=w.MIN}getScreenPointIntersection(e){const r=t(e,h.get()),s=I(this.view.state.camera,r,L);return this._getRayIntersection(s)}_getRayIntersection(e,r){if(null==e||null==this.view.sceneIntersectionHelper)return null;this.intersector.options.store=w.MIN,this.view.sceneIntersectionHelper.intersectToolIntersectorRay(e,this.intersector,r);const t=this.intersector.results.min,s=l();if(!t.getIntersectionPoint(s))return null;const o=this.view.renderCoordsHelper.fromRenderCoords(s,this.view.spatialReference),i=p(t.normal);if(g(t))return new y({type:b.OBJECT,id:`${t.target.layerUid}/${t.target.nodeIndex}/${t.target.componentIndex}`,mapPoint:o,renderPoint:s,normal:i,ray:u(e),graphic:null});if(j(t))return new y({type:b.TERRAIN,id:t.target.lij.slice(),mapPoint:o,renderPoint:s,normal:i,ray:u(e),graphic:null});const n=P(t,this.view);if(null!=n){const r=n.layer,t=n.sourceLayer;let c;if(t)if("scene"===t.type)c=f(n,t.objectIdField);else c=n.uid;else c=n.uid;return new y({type:b.OBJECT,id:`${r?.uid}/${c}`,mapPoint:o,renderPoint:s,normal:i,ray:u(e),graphic:n})}return null}updateFromGroundIntersection(e,r,t){const s=S,o=U,l=O,m=C;i(o,e),this.view.renderCoordsHelper.worldUpAtPosition(o,l),n(l,l);const u=this.view.basemapTerrain.visibleElevationBounds,h=u?Math.abs(u.max-u.min):100,f=r>=0?1:-1;c(m,l,f*(h+Math.abs(r))),a(s,o,m),d(s,o,L);const y=this._getRayIntersection(L,{include:this._terrainIntersectionOptionsLayerUids});return null!=y?(c(m,l,f*r),a(t,y.renderPoint,m),p(y.normal)):(i(t,e),null)}};e([s()],R.prototype,"view",void 0),e([s()],R.prototype,"intersector",void 0),R=e([o("esri.views.3d.analysis.LineOfSight.LineOfSightRayIntersector")],R);const S=l(),U=l(),O=l(),C=l(),L=m();export{R as LineOfSightRayIntersector};
