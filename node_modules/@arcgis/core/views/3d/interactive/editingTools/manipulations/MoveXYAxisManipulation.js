/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
import t from"../../../../../Color.js";import a from"../../../../../core/Evented.js";import r from"../../../../../core/Handles.js";import{handlesGroup as e}from"../../../../../core/handleUtils.js";import{destroyMaybe as i}from"../../../../../core/maybe.js";import{f as o,b as s,m as n,d as l,E as p}from"../../../../../chunks/mat4.js";import{c as u}from"../../../../../chunks/mat4f64.js";import{s as h}from"../../../../../chunks/vec3.js";import{f as m}from"../../../../../chunks/vec3f64.js";import{sv3d as c,sm4d as f}from"../../../../../geometry/support/vectorStacks.js";import{getGraphicEffectiveElevationInfo as d}from"../../../../../support/elevationInfoUtils.js";import{Manipulator3D as _}from"../../Manipulator3D.js";import{RenderObject as g}from"../../RenderObject.js";import{screenToMapXYAtLocation as M}from"../dragEventPipeline3D.js";import{ManipulatorType as w}from"../ManipulatorType.js";import{getSettings as j}from"../settings.js";import{DISC_RADIUS as v,DISC_TRANSLATE_ARROW_OFFSET as A,DISC_HEIGHT as b,DISC_TRANSLATE_ARROW_SIZE as y}from"./config.js";import{Manipulation as I}from"./Manipulation.js";import{createGraphicMoveDragPipeline as T}from"./moveUtils.js";import{CullFaceOptions as D}from"../../../webgl-engine/lib/basicInterfaces.js";import{createExtrudedTriangle as E,transformInPlace as S}from"../../../webgl-engine/lib/GeometryUtil.js";import{RenderOccludedFlag as x}from"../../../webgl-engine/lib/Material.js";import{ColorMaterial as P}from"../../../webgl-engine/materials/ColorMaterial.js";import{createManipulatorDragEventPipeline as k,dragAtLocation as R,constrainToMapAxis as U,addScreenDelta as O}from"../../../../interactive/dragEventPipeline.js";import{ManipulatorStateFlags as L}from"../../../../interactive/interfaces.js";class q extends I{constructor(t){super(),this._handles=new r,this._arrowManipulatorInfos=new Array,this._opaqueMaterial=this._createMaterial(),this._transparentMaterial=this._createMaterial(.5),this._angle=0,this._scale=1,this._radius=v,this._updateAfterDrag=!1,this.events=new a,this._tool=t.tool,this._view=t.view,null!=t.radius&&(this._radius=t.radius),this._createManipulators(),this.forEachManipulator((t=>this._tool.manipulators.add(t)))}set orthogonalAvailable(t){this._arrowManipulatorInfos.length>=3&&(this._arrowManipulatorInfos[1].manipulator.available=t,this._arrowManipulatorInfos[3].manipulator.available=t)}destroy(){this._handles=i(this._handles),this.forEachManipulator((t=>{this._tool.manipulators.remove(t),t.destroy()})),this._tool=null,this._view=null,this._arrowManipulatorInfos.length=0}forEachManipulator(t){for(const{manipulator:a}of this._arrowManipulatorInfos)t(a,w.TRANSLATE_XY)}createGraphicDragPipeline(t,a,r){const e=a.graphic,i=d(e),o=e.geometry.spatialReference;return T(a,r,(a=>this.createDragPipeline(((r,e,i,o,s)=>(({steps:e,cancel:i}=t(r,e,i,o,s)),a(r,e,i))),i,o,e)),this._view.state.viewingMode)}createDragPipeline(t,a,r,i){return e(this._arrowManipulatorInfos.map((({manipulator:e},o)=>k(e,((e,s,n,l,p)=>{const u=s.next((t=>({...t,manipulatorType:w.TRANSLATE_XY}))).next(R(this._view,e.elevationAlignedLocation)).next(M(this._view,e.elevationAlignedLocation,a,r,i)).next(U(e.location,this.angle+(o+1)*Math.PI*.5)).next(O());t(e,u,n,l,p)})))))}get angle(){return this._angle}set angle(t){this._angle=t,this.dragging?this._updateAfterDrag=!0:this._updateManipulatorTransform()}get displayScale(){return this._scale}set displayScale(t){this._scale=t,this._updateManipulatorTransform()}get radius(){return this._radius}set radius(t){this._radius!==t&&(this._radius=t,this._updateManipulators())}_updateManipulators(){for(let t=0;t<this._arrowManipulatorInfos.length;t++)this._updateArrowManipulator(this._arrowManipulatorInfos[t],t);this._updateManipulatorTransform()}_updateArrowManipulator({manipulator:t,transform:a},r){const e=this._radius/v,i=y*e,l=i*Math.sqrt(3)/2,p=E(this._opaqueMaterial,l,i/2,i/2,b);S(p,o(f.get(),h(c.get(),0,-l/3,0))),t.renderObjects=[new g(p,L.Focused),new g(p.instantiate({material:this._transparentMaterial}),L.Unfocused)],t.radius=l/3*2*1.2;const u=s(f.get(),r*Math.PI/2),m=o(f.get(),h(c.get(),0,A*e,0));n(a,u,m)}_createManipulators(){for(let t=0;t<4;t++){const a=this._createArrowManipulator(t);this._arrowManipulatorInfos.push(a)}this._updateManipulatorTransform()}_updateManipulatorTransform(){const t=this.angle,a=l(f.get(),t,m(0,0,1));if(null==a)return;const r=p(f.get(),h(c.get(),this.displayScale,this.displayScale,this.displayScale)),e=n(f.get(),r,a);for(const i of this._arrowManipulatorInfos){const t=n(f.get(),e,i.transform);i.manipulator.modelTransform=t}}_createArrowManipulator(t){const a=new _({view:this._view,autoScaleRenderObjects:!1,worldOriented:!0,focusMultiplier:1,touchMultiplier:1,collisionType:{type:"disc",direction:m(0,0,1)}}),r={manipulator:a,transform:u()};return this._updateArrowManipulator(r,t),this._handles.add(a.events.on("drag",(t=>{this._updateAfterDrag&&"end"===t.action&&!this.dragging&&(this._updateManipulatorTransform(),this._updateAfterDrag=!1)}))),r}_createMaterial(a=1){const r=j(this._view),e=t.toUnitRGBA(r.colors.accent);return e[3]*=a,new P({color:e,transparent:1!==a,cullFace:D.Back,renderOccluded:x.Transparent})}get test(){return{arrowManipulators:this._arrowManipulatorInfos.map((({manipulator:t})=>t))}}}export{q as MoveXYAxisManipulation};
