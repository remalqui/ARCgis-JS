/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
import{newFloatArray as t,floatSubArray as e}from"../../../../geometry/support/FloatArray.js";import{newIntArray as i,compactIndices as s}from"../../../../geometry/support/Indices.js";class r{constructor(s,r,h,o,p,n={}){this.path=s,this.profile=r,this.extruder=h,this.startCap=o,this.endCap=p,this.options=n,this._extrusionVertexCount=0;const l=this.path.vertices.length-2;this.numExtrusionProfiles=h.numProfilesPerJoin()*l+2,this.numVerticesTotal=r.vertices.length*this.numExtrusionProfiles,this.startCap.vertexBufferStart=this.numVerticesTotal;const a=this.startCap.numVertices;this.numVerticesTotal+=a,this.endCap.vertexBufferStart=this.numVerticesTotal;const u=this.endCap.numVertices;this.numVerticesTotal+=u,this.pathVertexData=i(1*this.numVerticesTotal),this.profileRightAxes=t(4*this.numVerticesTotal),this.profileUpAxes=t(4*this.numVerticesTotal),this.profileVertexAndNormals=t(4*this.numVerticesTotal),this.positions=e(s.positions,s.offset,3*s.vertices.length),this._rebuildGeometry(),this.buildTopology()}emitVertex(t,e,i,s,r){const h=4*this._extrusionVertexCount;if(this.profileRightAxes[h]=e.right[0],this.profileRightAxes[h+1]=e.right[1],this.profileRightAxes[h+2]=e.right[2],this.profileUpAxes[h]=e.up[0],this.profileUpAxes[h+1]=e.up[1],this.profileUpAxes[h+2]=e.up[2],this.profileVertexAndNormals[h]=i[0],this.profileVertexAndNormals[h+1]=i[1],this.profileVertexAndNormals[h+2]=s[0],this.profileVertexAndNormals[h+3]=s[1],this.pathVertexData[this._extrusionVertexCount]=t,r){const e=this.path.vertices[t],i=e.maxStretchDistance;this.profileRightAxes[h+3]=e.rotationRight[0]*i,this.profileUpAxes[h+3]=e.rotationRight[1]*i}else this.profileRightAxes[h+3]=0,this.profileUpAxes[h+3]=0;++this._extrusionVertexCount}emitCapVertex(t,e,i,s,r,h){const o=4*this._extrusionVertexCount;this.profileRightAxes[o]=e.right[0],this.profileRightAxes[o+1]=e.right[1],this.profileRightAxes[o+2]=e.right[2],this.profileRightAxes[o+3]=r,this.profileUpAxes[o]=e.up[0],this.profileUpAxes[o+1]=e.up[1],this.profileUpAxes[o+2]=e.up[2],this.profileUpAxes[o+3]=h,this.profileVertexAndNormals[o]=i[0],this.profileVertexAndNormals[o+1]=i[1],this.profileVertexAndNormals[o+2]=s[0],this.profileVertexAndNormals[o+3]=s[1],this.pathVertexData[this._extrusionVertexCount]=t,++this._extrusionVertexCount}_rebuildGeometry(){this._extrusionVertexCount=0;const{positions:t,offset:i,vertices:s}=this.path;this.positions=e(t,i,3*s.length);let r=0;const h=(t,e,i,s,h)=>this.emitCapVertex(r,t,e,i,s,h),o=(t,e,i,s)=>this.emitVertex(r,t,e,i,s);for(this.startCap.rebuildConnectingProfileGeometry(s[r],this.profile,h),r=1;r<s.length-1;++r)this.extruder.extrude(s[r],this.profile,o);this.endCap.rebuildConnectingProfileGeometry(s[r],this.profile,h),r=0,this.startCap.rebuildCapGeometry(s[r],h),r=s.length-1,this.endCap.rebuildCapGeometry(s[r],h)}buildTopology(){const t=this.profile.vertices.length,e=this.profile.numSegments,i=this.numExtrusionProfiles-1;let r=3*(2*(e*i));this.startCap.indexBufferStart=r,this.startCap.firstProfileVertexIndex=0,r+=this.startCap.numIndices,this.endCap.indexBufferStart=r,this.endCap.firstProfileVertexIndex=t*(this.numExtrusionProfiles-1);const h=new Array,o=new Array,p=new Array,n=(t,e,i)=>{h.push(t),h.push(e),h.push(i),o.push(t),o.push(e),o.push(i),p.push(this.pathVertexData[t]),p.push(this.pathVertexData[e]),p.push(this.pathVertexData[i])};for(let s=0;s<e;++s){const e=this.profile.indices[2*s],r=this.profile.indices[2*s+1];for(let s=0;s<i;++s){const i=s*t+e,h=(s+1)*t+r,o=s*t+r;n(i,(s+1)*t+e,h),n(i,h,o)}}this.startCap.buildTopology(this.path.vertices[0],n),this.endCap.buildTopology(this.path.vertices[this.path.vertices.length-1],n),this.vertexIndices=s(h),this.normalIndices=s(o),this.pathVertexIndices=s(p)}onPathChanged(){this._rebuildGeometry()}}export{r as PathBuilder};
