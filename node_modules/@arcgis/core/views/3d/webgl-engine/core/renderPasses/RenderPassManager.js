/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
import{f as s,t as e,e as t}from"../../../../../chunks/mat3.js";import{c as a}from"../../../../../chunks/mat3f64.js";import{c as r}from"../../../../../chunks/mat4.js";import{s as i,c as h}from"../../../../../chunks/vec3.js";import{c as o}from"../../../../../chunks/vec3f64.js";import{MaterialPassParameters as n,ShadowMapPassParameters as m,HighlightPassParameters as l,RenderPassIdentifier as c}from"./AllRenderPasses.js";import{RenderPass as p,RenderPassSorting as u}from"./RenderPass.js";import{ShaderOutput as d}from"../shaderLibrary/ShaderOutput.js";import{TwoVectorPosition as _}from"../util/TwoVectorPosition.js";import{union as g}from"../../lib/depthRange.js";import{RenderSlot as P}from"../../lib/RenderSlot.js";class w{constructor(s,e){this.rctx=s,this.shaderTechniqueRepository=e,this.canRender=!0,this._materialPassParameters=new n,this._shadowPassParameters=new m,this._highlightPassParameters=new l,this._systems=new Set,this._passes={materialOpaque:new p(s,e),materialTransparent:new p(s,e,u.BackToFront),materialIntegratedMesh:new p(s,e),shadowMap:new p(s,e),highlight:new p(s,e),highlightIntegratedMesh:new p(s,e),highlightShadowMap:new p(s,e),defaultShadowMap:new p(s,e)}}destroy(){this._context=null,this._systems.clear()}register(s){this._systems.add(s)}prepareRender(s){if(0!==this._systems.size){for(const s of Object.values(this._passes))s.prepareSubmit();this._systems.forEach((e=>e.submit(this._passes,s.bindParameters)));for(const s of Object.values(this._passes))s.finishSubmit();this.shaderTechniqueRepository.frameUpdate()}}prepareTechniques(s){return 0===this._systems.size?null:(this._configure(s),this._materialPassParameters.output=s.output,this._invoke(s,((e,t)=>e.prepare(t,s.bindParameters))))}render(s,e){this._invoke(s,((t,a)=>t.dispatch(a,s.bindParameters,e)))}_invoke(s,e){switch(s.bindParameters.slot){case P.OPAQUE_MATERIAL:switch(s.output){case d.Color:case d.Depth:case d.Normal:case d.ObjectAndLayerIdColor:return e(this._passes.materialOpaque,this._materialPassParameters);case d.Highlight:return e(this._passes.highlight,this._highlightPassParameters);case d.Shadow:return e(this._passes.shadowMap,this._shadowPassParameters);case d.ShadowHighlight:return e(this._passes.highlightShadowMap,this._shadowPassParameters);case d.ShadowExcludeHighlight:return e(this._passes.defaultShadowMap,this._shadowPassParameters)}break;case P.TRANSPARENT_MATERIAL:switch(s.output){case d.Color:case d.Alpha:case d.Depth:case d.Normal:case d.ObjectAndLayerIdColor:return e(this._passes.materialTransparent,this._materialPassParameters)}break;case P.INTEGRATED_MESH:switch(s.output){case d.Color:case d.Depth:case d.Normal:case d.ObjectAndLayerIdColor:return e(this._passes.materialIntegratedMesh,this._materialPassParameters);case d.Highlight:return e(this._passes.highlightIntegratedMesh,this._highlightPassParameters)}}return null}notifyDirty(){this._context.requestRender()}slots(){return[P.OPAQUE_MATERIAL,P.TRANSPARENT_MATERIAL,P.INTEGRATED_MESH]}initializeRenderContext(s){this._context=s}uninitializeRenderContext(){}queryDepthRange(s){const e={near:1/0,far:-1/0};return this._systems.forEach((t=>{const a=t.queryShadowCasterDepthRange(s);null!=a&&g(e,a,e)})),e}_configure(s){const e=s.output===d.Shadow||s.output===d.ShadowHighlight||s.output===d.ShadowExcludeHighlight?this._shadowPassParameters:s.output===d.Highlight?this._highlightPassParameters:this._materialPassParameters;this._updateParameters(s,e)}_updateParameters(a,o){const n=a.bindParameters.camera,m=n.viewInverseTransposeMatrix;i(f,m[3],m[7],m[11]),T.set(f),h(o.transformWorldFromViewTH,T.high),h(o.transformWorldFromViewTL,T.low),h(o.slicePlaneLocalOrigin,f),s(o.transformViewFromCameraRelativeRS,n.viewMatrix),r(o.transformProjFromView,n.projectionMatrix),o.identifier===c.Material&&(this._materialPassParameters.transparent=a.bindParameters.slot===P.TRANSPARENT_MATERIAL,this._materialPassParameters.integratedMesh=a.bindParameters.slot===P.INTEGRATED_MESH,e(R,o.transformViewFromCameraRelativeRS),t(o.transformNormalViewFromGlobal,R))}get needsHighlight(){return this._passes.highlight.count>0||this._passes.highlightIntegratedMesh.count>0}get needsTransparentPass(){return this._passes.materialTransparent.count>0}}const f=o(),R=a(),T=new _;export{w as RenderPassManager};
