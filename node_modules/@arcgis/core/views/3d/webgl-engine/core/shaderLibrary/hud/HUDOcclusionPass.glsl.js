/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
import{AlignPixel as e}from"./AlignPixel.glsl.js";import{ReadLinearDepth as r}from"../output/ReadLinearDepth.glsl.js";import{multipassGeometryTest as t}from"../shading/MultipassGeometryTest.glsl.js";import{RgbaFloatEncoding as o}from"../util/RgbaFloatEncoding.glsl.js";import{Float2PassUniform as a}from"../../shaderModules/Float2PassUniform.js";import{glsl as i}from"../../shaderModules/interfaces.js";import{Texture2DPassUniform as s}from"../../shaderModules/Texture2DPassUniform.js";function n(n,p){const{vertex:l,fragment:d}=n;l.include(e),p.hasMultipassGeometry&&l.include(t),p.hasMultipassTerrain&&n.varyings.add("depth","float"),l.code.add(i`
  void main(void) {
    vec4 posProjCenter;
    if (dot(position, position) > 0.0) {
      // Render single point to center of the pixel to avoid subpixel
      // filtering to affect the marker color
      ProjectHUDAux projectAux;
      vec4 posProj = projectPositionHUD(projectAux);
      posProjCenter = alignToPixelCenter(posProj, viewport.zw);

      ${p.hasMultipassGeometry?i`
        // Don't draw vertices behind geometry
        if(geometryDepthTest(.5 + .5 * posProjCenter.xy / posProjCenter.w, projectAux.posView.z)){
          posProjCenter = vec4(1e038, 1e038, 1e038, 1.0);
        }`:""}

      ${p.hasMultipassTerrain?"depth = projectAux.posView.z;":""}
      vec3 vpos = projectAux.posModel;
      if (rejectBySlice(vpos)) {
        // Project out of clip space
        posProjCenter = vec4(1e038, 1e038, 1e038, 1.0);
      }

    } else {
      // Project out of clip space
      posProjCenter = vec4(1e038, 1e038, 1e038, 1.0);
    }

    gl_Position = posProjCenter;
    gl_PointSize = 1.0;
  }
  `),p.hasMultipassTerrain&&d.include(r),p.hasMultipassTerrain&&d.uniforms.add(new s("terrainDepthTexture",((e,r)=>r.multipassTerrain.linearDepthTexture)),new a("nearFar",((e,r)=>r.camera.nearFar))),d.include(o),d.code.add(i`
  void main() {
    fragColor = vec4(1);
    ${p.hasMultipassTerrain?i`
          // Read the rgba data from the texture linear depth
          vec4 terrainDepthData = texelFetch(terrainDepthTexture, ivec2(gl_FragCoord.xy), 0);

          float terrainDepth = linearDepthFromFloat(rgba2float(terrainDepthData), nearFar);

          // If HUD vertex is behind terrain and the terrain depth is not the initialize value (e.g. we are not looking at the sky)
          // Mark the HUD vertex as occluded by transparent terrain
          if(depth < terrainDepth && terrainDepthData != vec4(0,0,0,1)){
            fragColor.g = 0.5;
          }`:""}
  }
  `)}export{n as HUDOcclusionPass};
