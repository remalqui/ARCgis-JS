/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
import e from"../../../../Color.js";import t from"../../../../core/Error.js";import{loadImageAsync as o}from"../../../../support/requestUtils.js";import{EncodedMeshTexture as r}from"../../glTF/internal/resourceUtils.js";import{TextureUsage as a,TextureEncoding as s}from"./enums.js";import{CullFaceOptions as n}from"../../webgl-engine/lib/basicInterfaces.js";import{useSchematicPBR as l}from"../../webgl-engine/materials/pbrUtils.js";async function i(t){const o=[],r=[];if(null==t){return{material:{alphaMode:"opaque",alphaCutoff:.1,doubleSided:!0,cullFace:0,normalTextureId:-1,emissiveTextureId:-1,occlusionTextureId:-1,emissiveFactor:[0,0,0],metallicRoughness:{baseColorFactor:[1,1,1,1],baseColorTextureId:-1,metallicRoughnessTextureId:-1,metallicFactor:0,roughnessFactor:.6000000238418579},wrapTextures:!1,hasParametersFromSource:!0},requiredTextures:o,textureData:r}}const s=d(t);"auto"===t.alphaMode&&console.warn('alphaMode "auto" not supported by I3S PBRMaterial - defaulting to "blend".');return{material:{alphaMode:"auto"===t.alphaMode?"blend":t.alphaMode,alphaCutoff:t.alphaCutoff,doubleSided:t.doubleSided,cullFace:t.doubleSided?n.None:n.Back,normalTextureId:await u(t.normalTexture,o,r,a.Normal),emissiveTextureId:s?await u(t.emissiveTexture,o,r,a.Emissive):-1,occlusionTextureId:s?await u(t.occlusionTexture,o,r,a.Occlusion):-1,emissiveFactor:s&&null!=t.emissiveColor?e.toUnitRGB(t.emissiveColor):[0,0,0],metallicRoughness:{baseColorFactor:null!=t.color?e.toUnitRGBA(t.color):[1,1,1,1],baseColorTextureId:await u(t.colorTexture,o,r,a.Color),metallicRoughnessTextureId:s?await u(t.metallicRoughnessTexture,o,r,a.MetallicRoughness):-1,metallicFactor:s?t.metallic:0,roughnessFactor:s?t.roughness:0},wrapTextures:!0,hasParametersFromSource:l({normalTexture:t.normalTexture,emissiveTexture:s?t.emissiveTexture:null,emissiveFactor:s?e.toUnitRGB(t.emissiveColor):null,occlusionTexture:s?t.occlusionTexture:null,metallicRoughnessTexture:s?t.metallicRoughnessTexture:null,metallicFactor:s?t.metallic:null,roughnessFactor:s?t.roughness:null})},requiredTextures:o,textureData:r}}async function u(e,a,n,l){if(null==e)return-1;const i=n.length,u=e.data,d=e.url;if(null!=u){if(u instanceof HTMLImageElement||u instanceof HTMLCanvasElement){const e=c(u);return n.push({id:i,usage:l,data:e,encoding:s.PNG,downsampled:!1}),a.push({id:i,usage:l,encodings:[{name:void 0,encoding:s.PNG}]}),i}if(u instanceof HTMLVideoElement)return-1;if(u instanceof ImageData)throw new t("ImageData textures not supported yet for client side I3S nodes");if(u instanceof r)throw new t("EncodedMeshTexture textures not supported yet for client side I3S nodes")}else if(null!=d){const e=new Image;e.src=d;const t=c(await o(e,e.src,!1,void 0));return n.push({id:i,usage:l,data:t,encoding:s.PNG,downsampled:!1}),a.push({id:i,usage:l,encodings:[{name:void 0,encoding:s.PNG}]}),i}return-1}function c(e){const t=1048576,o=4096,r=2;let a=e.width*e.height;if(a>=o){let o=e.width,s=e.height;do{o=Math.ceil(o/r),s=Math.ceil(s/r),a=o*s}while(a>t);const n=document.createElement("canvas");n.width=o,n.height=s;return n.getContext("2d").drawImage(e,0,0,o,s),n}return e}function d(e){return e.hasOwnProperty("metallicRoughnessTexture")}export{i as convertMeshMaterialToPBRMaterial};
