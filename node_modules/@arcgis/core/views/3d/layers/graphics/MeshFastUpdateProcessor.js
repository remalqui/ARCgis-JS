/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
import{DefaultMaterial as a}from"../../webgl-engine/materials/DefaultMaterial.js";class e{constructor(){this._fastTransformOriginalMaterials=new Map,this._fastTransformClonedMaterials=new Map,this._graphicReferenceCount=0}enable(e,r,t){e.enableFastTransformUpdates((e=>{if(this._graphicReferenceCount<=1){if(this._fastTransformOriginalMaterials.has(e))return e;const a=r.byMaterial(e);return this._fastTransformOriginalMaterials.set(e,a),r.delete(e),e}const s=new a(e.parameters);return t.stage.add(s),this._fastTransformClonedMaterials.set(s,e),s}),t.localOriginFactory)}disable(a,e,r){const t=new Set,s=new Set;a.disableFastTransformUpdates((a=>{if(!this._fastTransformClonedMaterials.has(a)){const r=a,i=this._fastTransformOriginalMaterials.get(r);return e.has(i.uid)?(t.add(r),e.byUid(i.uid).material):(s.add(r),i.material)}const i=a,n=this._fastTransformClonedMaterials.get(i);return this._fastTransformClonedMaterials.delete(i),r.stage.remove(i),i.dispose(),n}));for(const i of t)this._fastTransformOriginalMaterials.delete(i),r.stage.remove(i),i.dispose();for(const i of s){const a=this._fastTransformOriginalMaterials.get(i);this._fastTransformOriginalMaterials.delete(i),e.set(a.uid,a)}}onAddGraphic(){this._graphicReferenceCount++}onRemoveGraphic(a,e,r){this._graphicReferenceCount--,this.disable(a,e,r)}forEachMaterialInfo(a){this._fastTransformOriginalMaterials.forEach(a)}forEachClonedMaterial(a){this._fastTransformClonedMaterials.forEach(a)}destroy(a){a.removeMany(Array.from(this._fastTransformClonedMaterials.keys())),a.removeMany(Array.from(this._fastTransformOriginalMaterials.values(),(({material:a})=>a))),this._fastTransformClonedMaterials.clear(),this._fastTransformOriginalMaterials.clear()}}class r{constructor(){this._byUid=new Map,this._byMaterial=new Map}get materials(){return Array.from(this._byUid.values(),(a=>a.material))}byUid(a){return this._byUid.get(a)}byMaterial(a){return this._byMaterial.get(a)}set(a,e){this._byUid.set(a,e),this._byMaterial.set(e.material,e)}delete(a){const e=this._byMaterial.get(a)?.uid;e&&(this._byUid.delete(e),this._byMaterial.delete(a))}has(a){return this._byUid.has(a)}forEachMaterialInfo(a){this._byUid.forEach(a)}clear(){this._byUid.clear(),this._byMaterial.clear()}}export{r as MaterialInfoCache,e as MeshFastUpdateProcessor};
