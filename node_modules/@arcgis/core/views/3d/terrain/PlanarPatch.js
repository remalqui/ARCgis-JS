/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
import{f as e,c as t}from"../../../chunks/vec3f64.js";import{projectVectorToVector as r}from"../../../geometry/projection.js";import i from"../../../geometry/SpatialReference.js";import{wrap as a}from"../../../geometry/support/aaBoundingBox.js";import{create as s}from"../../../geometry/support/aaBoundingRect.js";import{isPlateCarree as o}from"../../../geometry/support/spatialReferenceUtils.js";import{TileFrustumVisibility as n}from"./ITile.js";import{createPlanarGlobePatch as l,updateCornersPlanar as c,updateEdgesAndCornersPlanar as h}from"./PatchGeometryFactory.js";import{Tile as u,CenterPosition as d}from"./Tile.js";import{intersectAabbInvDirBefore as m}from"../webgl-engine/materials/internal/MaterialUtil.js";class p extends u{get horizontalScale(){return this._horizontalScaleFactor}constructor(e,t,r){super(),this._horizontalScaleFactor=1,this._extentInRenderSR=s(),void 0!==e&&this.init(e,t,r)}init(t,a,s){super.init(t,a,s);const n=s.view.renderSpatialReference,l=s.spatialReference,c=null!=n&&o(n)&&null!=l&&l.isGeographic?this.ellipsoid.radius*Math.PI/180:1;this._horizontalScaleFactor=c;const h=this.surface.isWebMercatorOnPlateeCarree,u=this._extentInRenderSR,d=this.extent;if(h){const t=e(d[0],d[1],0);r(t,i.WebMercator,t,i.PlateCarree);const a=e(d[2],d[3],0);r(a,i.WebMercator,a,i.PlateCarree),u[0]=t[0],u[1]=t[1],u[2]=a[0],u[3]=a[1]}else for(let e=0;e<4;++e)u[e]=d[e]*c;this.centerAtSeaLevel[0]=.5*(u[0]+u[2]),this.centerAtSeaLevel[1]=.5*(u[1]+u[3]),this.centerAtSeaLevel[2]=0,this._edgeLen=Math.max(u[2]-u[0],u[3]-u[1]),this._edgeLen2=this._edgeLen*this._edgeLen,this.updateRadiusAndCenter()}updateRadiusAndCenter(){this._updateCenter();const e=this._extentInRenderSR,t=.5*(e[2]-e[0]),r=.5*(e[3]-e[1]),i=Math.sqrt(t*t+r*r),a=.5*(this.elevationBounds[0]-this.elevationBounds[1]),s=Math.max(i,a);this._center[d.MIDDLE][3]=s}_calculateFrustumVisibilityStatus(e){const t=this._aabb(),r=t[0],i=t[1],a=t[2],s=t[3],o=t[4],l=t[5];let c=!0;for(let h=0;h<6;h++){const t=e[h],u=t[0],d=t[1],m=t[2],p=t[3];if(u*(u>0?r:s)+d*(d>0?i:o)+m*(m>0?a:l)+p>=0)return n.OUTSIDE;c=c&&u*(u<0?r:s)+d*(d<0?i:o)+m*(m<0?a:l)+p<=0}return c?n.INSIDE:n.INTERSECTS}_aabb(){const e=this._extentInRenderSR;return a(e[0],e[1],this.elevationBounds[0],e[2],e[3],this.elevationBounds[1])}intersectsRay(e,t,r,i){return f[0]=1/t[0],f[1]=1/t[1],f[2]=1/t[2],m(this._aabb(),e,f,r,i)}createGeometry(){l(this.renderData,this._horizontalScaleFactor),this.setMemoryDirty()}getDefaultVerticesPerSide(){return this.level<9?3:2}updateCornerElevations(){c(this.renderData,this._horizontalScaleFactor)}updateEdgeElevations(){h(this.renderData,this._horizontalScaleFactor)}}const f=t();export{p as PlanarPatch};
