/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
import"../../../../core/has.js";import{LRUCache as e}from"../../../../core/LRUCache.js";import{getOrCreateMapValue as t}from"../../../../core/MapUtils.js";import{throwIfAborted as s}from"../../../../core/promiseUtils.js";import{getMetersPerVerticalUnitForSR as n}from"../../../../core/unitUtils.js";import{getMetersPerUnit as o}from"../../../../symbols/support/unitConversionUtils.js";function i(e=!1,t){if(e){const{elevationInfo:e,alignPointsInFeatures:s,spatialReference:n}=t;return new c(e,s,n)}return new a}class a{async alignCandidates(e,t){return e}notifyElevationSourceChange(){}}const r=1024;class c{constructor(t,s,o){this._elevationInfo=t,this._alignPointsInFeatures=s,this.spatialReference=o,this._alignmentsCache=new e(r),this._cacheVersion=0,this._metersPerVerticalUnit=n(o)}async alignCandidates(e,t){const s=this._elevationInfo;return null==s||"absolute-height"!==s.mode||s.featureExpressionInfo?this._alignComputedElevationCandidates(e,t):(this._alignAbsoluteElevationCandidates(e,s),e)}notifyElevationSourceChange(){this._alignmentsCache.clear(),this._cacheVersion++}_alignAbsoluteElevationCandidates(e,t){const{offset:s,unit:n}=t;if(null==s)return;const i=s*(o(n??"meters")/this._metersPerVerticalUnit);for(const o of e)switch(o.type){case"edge":o.start.z+=i,o.end.z+=i;continue;case"vertex":o.target.z+=i;continue}}async _alignComputedElevationCandidates(e,n){const o=new Map;for(const s of e)t(o,s.objectId,d).push(s);const[i,a,r]=this._prepareQuery(o),c=await this._alignPointsInFeatures(i,n);s(n);if(r!==this._cacheVersion)return this._alignComputedElevationCandidates(e,n);this._applyCacheAndResponse(i,c,a);const{drapedObjectIds:l,failedObjectIds:h}=c,u=[];for(const t of e){const{objectId:e}=t;l.has(e)&&"edge"===t.type&&(t.draped=!0),h.has(e)||u.push(t)}return u}_prepareQuery(e){const t=[],s=[];for(const[n,o]of e){const e=[];for(const t of o)this._addToQueriesOrCachedResult(n,t.target,e,s),"edge"===t.type&&(this._addToQueriesOrCachedResult(n,t.start,e,s),this._addToQueriesOrCachedResult(n,t.end,e,s));0!==e.length&&t.push({objectId:n,points:e})}return[t,s,this._cacheVersion]}_addToQueriesOrCachedResult(e,t,s,n){const o=h(e,t),i=this._alignmentsCache.get(o);null==i?s.push(t):n.push(new l(t,i))}_applyCacheAndResponse(e,{elevations:t,drapedObjectIds:s,failedObjectIds:n},o){for(const r of o)r.apply();let i=0;const a=this._alignmentsCache;for(const{objectId:r,points:c}of e){if(n.has(r)){i+=c.length;continue}const e=!s.has(r);for(const s of c){const n=h(r,s),o=t[i++];s.z=o,e&&a.put(n,o,1)}}}}class l{constructor(e,t){this.point=e,this.z=t}apply(){this.point.z=this.z}}function h(e,{x:t,y:s,z:n}){return`${e}-${t}-${s}-${n??0}}`}function d(){return[]}export{i as getSnappingCandidateElevationAligner};
