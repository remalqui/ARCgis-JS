/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
import{k as e}from"../../../chunks/vec2.js";import{a as t}from"../../../chunks/vec2f64.js";import{f as r}from"../../../chunks/vec3f64.js";import{absoluteHeightElevationInfo as i}from"../../../support/elevationInfoUtils.js";import{defaults as s}from"./Settings.js";import{SnappingAlgorithm as o}from"./SnappingAlgorithm.js";import{anyMapPointToSnappingPoint as n,asSnappingPoint as l}from"./SnappingPoint.js";import{editEdgeToSnappingEdge as a,squaredScreenDistance as c}from"./snappingUtils.js";import{ParallelLineSnappingCandidate as h}from"./candidates/ParallelLineSnappingCandidate.js";import{vectorToScreenPoint as p}from"../support/viewUtils.js";import{projectPointToLine as d}from"../../support/geometry2dUtils.js";class f extends o{snapNewVertex(e,t){const r=t.editGeometryOperations.data.components[0],s=r.edges.length,o=r.vertices.length,l=[];if(s<2)return l;const{view:c}=this,h=p(e,t.spatialReference,i,c),d=n(r.vertices[o-1].pos,c,t),f=n(r.vertices[0].pos,c,t),g=r.edges[s-1];let m=g;do{if(this.edgeExceedsShortLineThreshold(m,t)){const r=a(m,c,t);this._checkEdgeForParallelLines(r,d,e,h,t,l),this._checkEdgeForParallelLines(r,f,e,h,t,l)}m=m.leftVertex.leftEdge}while(m&&m!==g);return l}snapExistingVertex(e,t){const r=[],s=t.vertexHandle,o=s.component;if(o.edges.length<3)return r;const{view:l}=this,c=p(e,t.spatialReference,i,l),h=s.leftEdge,d=s.rightEdge,f=o.vertices[0],g=n(f.pos,l,t),m=o.vertices.length,u=o.vertices[m-1],v=n(u.pos,l,t),E=o.edges[0];let L=E;do{if(L!==h&&L!==d&&this.edgeExceedsShortLineThreshold(L,t)){const i=a(L,l,t);h&&this._checkEdgeForParallelLines(i,n(h.leftVertex.pos,l,t),e,c,t,r),d&&this._checkEdgeForParallelLines(i,n(d.rightVertex.pos,l,t),e,c,t,r),s===f?this._checkEdgeForParallelLines(i,v,e,c,t,r):s===u&&this._checkEdgeForParallelLines(i,g,e,c,t,r)}L=L.rightVertex.rightEdge}while(L&&L!==E);return r}_checkEdgeForParallelLines(t,o,n,a,f,m){const u=t.left,v=t.right;if(d(g,o,u,v),e(g,o)<s.parallelLineThreshold)return;d(g,n,u,v,o);const{spatialReference:E,pointer:L}=f,x=l(r(g[0],g[1],n[2]));if(c(a,p(x,E,i,this.view))<this.squaredProximityThreshold(L)){if(this.isVertical(x,o)||this.isVertical(u,v))return;if(this._parallelToPreviousCandidate(t,m))return;m.push(new h({referenceLine:t,lineStart:o,targetPoint:x,isDraped:"on-the-ground"===f.elevationInfo?.mode}))}}_parallelToPreviousCandidate(t,r){const i=t.left,o=t.right;for(const n of r)if(d(g,o,n.constraint.start,n.constraint.end,i),e(g,o)<s.parallelLineThreshold)return n.addReferenceLine(t),!0;return!1}}const g=t();export{f as ParallelLineSnapper};
