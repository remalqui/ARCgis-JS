/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
import{_ as e}from"../../chunks/tslib.es6.js";import t from"../../core/Accessor.js";import{getTextColor as s,getTextHaloColor as o}from"../../core/analysisThemeUtils.js";import{createTask as i}from"../../core/asyncUtils.js";import{makeHandle as r}from"../../core/handleUtils.js";import{throwIfAborted as n}from"../../core/promiseUtils.js";import{formatLength as a}from"../../core/quantityFormatUtils.js";import{watch as l,on as p}from"../../core/reactiveUtils.js";import{createScreenPointArray as c}from"../../core/screenUtils.js";import{property as h}from"../../core/accessorSupport/decorators/property.js";import"../../core/accessorSupport/ensureType.js";import"../../core/arrayUtils.js";import"../../core/has.js";import{subclass as d}from"../../core/accessorSupport/decorators/subclass.js";import{k as m,s as u,e as f,a as b,l as g,i as _}from"../../chunks/vec2.js";import{a as x}from"../../chunks/vec2f64.js";import{F as y}from"../../chunks/vec3.js";import{isClockwise as v}from"../../geometry/support/coordsUtils.js";import{fetchMessageBundle as j}from"../../intl/messages.js";import{getGeometryEffectiveElevationMode as U}from"../../support/elevationInfoUtils.js";import{getDefaultUnitForView as I}from"../../support/getDefaultUnitForView.js";import L from"../overlay/TextOverlayItem.js";import{autoDirectDistanceByElevationMode as D}from"../support/automaticLengthMeasurementUtils.js";const O=3025,S={default:15,far:25};let w=class extends t{constructor(e){super(e),this.context=null,this.stagedVertex=null,this.visible=!0,this.edgeDistance="default",this._messagesUnits=null,this._labelInfos=[],this._nextLabelIndex=0}initialize(){const e=i((async e=>{const t=await j("esri/core/t9n/Units");n(e),this._messagesUnits=t}));this.addHandles([l((()=>[null!=this.context&&this.getCameraOrExtent(this.context),this.visible,this._edgeDistancePixels,this.stagedVertex,this._messagesUnits]),(()=>this._update())),...["vertex-add","vertex-update","vertex-remove"].map((e=>p((()=>this.context?.editGeometryOperations),e,(()=>this._update())))),r((()=>e.abort()))])}destroy(){for(this._nextLabelIndex=0;this._labelInfos.length;)this._destroyLabel(this._labelInfos.pop())}get updating(){return null==this._messagesUnits}get test(){return{labelContents:this._labelInfos.slice(0,this._nextLabelIndex).map((e=>e.label.text))}}get _edgeDistancePixels(){return S[this.edgeDistance]}_update(){this._nextLabelIndex=0;const e=this.context;if(null==e)return void this._destroyUnusedLabels();const{components:t,geometry:s,coordinateHelper:o}=e.editGeometryOperations.data;if(!s)return void this._destroyUnusedLabels();const i=t.length;for(let r=0;r<i;++r){const n=[];if(t[r].iterateVertices((e=>{n.push(o.toXYZ(e.pos))})),0===r&&null!=this.stagedVertex&&n.push(o.toXYZ(this.stagedVertex)),n.length<2)continue;const a=n[0],l=n[n.length-1];"polygon"===s.type&&n.length>2&&!y(a,l)&&n.push(a);const p=1===i&&!v(n,!1,!1);let c=C,h=P;this.toScreenPointArray(e,a,c);for(let t=1;t<n.length;++t){const s=n[t-1],o=n[t];this.toScreenPointArray(e,o,h),this._addLabel(e,s,c,o,h,p),[c,h]=[h,c]}}this._destroyUnusedLabels()}_addLabel(e,t,s,o,i,r){const{label:n}=this._getOrCreateLabel(e);if(!this.visible||m(s,i)<O)return void(n.visible=!1);const l=null!=e.graphicState?e.graphicState.isDraped?"on-the-ground":"absolute-height":U(e.editGeometryOperations.data.geometry,e.elevationInfo),{spatialReference:p}=e.editGeometryOperations.data,c=D(t,o,p,l),h=this._messagesUnits,d=I(e.view);n.text=null!=h&&null!=c?a(h,c,d):"",n.visible=!0;const x=i[0]-s[0],y=i[1]-s[1];r?u(V,-y,x):u(V,y,-x),f(V,V),b(V,V,this._edgeDistancePixels),g(k,s,i,.5),_(k,k,V),n.position=[k[0],k[1]],Math.abs(V[0])>Math.abs(V[1])?n.anchor=V[0]>0?"left":"right":n.anchor=-V[1]<0?"top":"bottom"}_getOrCreateLabel(e){if(this._labelInfos.length>this._nextLabelIndex)return this._labelInfos[this._nextLabelIndex++];const t=new L({anchor:"center",fontSize:10,textColor:s(),backgroundColor:o(.6)});e.view.overlay?.items.add(t);const i={label:t};return this._labelInfos.push(i),this._nextLabelIndex=this._labelInfos.length,i}_destroyUnusedLabels(){for(;this._labelInfos.length>this._nextLabelIndex;)this._destroyLabel(this._labelInfos.pop())}_destroyLabel({label:e}){this.context?.view.overlay?.items.remove(e),e.destroy()}};e([h()],w.prototype,"context",void 0),e([h()],w.prototype,"stagedVertex",void 0),e([h()],w.prototype,"visible",void 0),e([h()],w.prototype,"edgeDistance",void 0),e([h()],w.prototype,"updating",null),e([h()],w.prototype,"_messagesUnits",void 0),e([h()],w.prototype,"_edgeDistancePixels",null),w=e([d("esri.views.interactive")],w);const V=x(),k=x(),C=c(),P=c();export{w as SegmentLabels};
