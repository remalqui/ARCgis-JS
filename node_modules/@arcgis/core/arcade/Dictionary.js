/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
import{ArcadeDate as t}from"./ArcadeDate.js";import{deepClone as s}from"./deepClone.js";import{ArcadeExecutionError as i,ExecutionErrorCodes as e}from"./executionError.js";import n from"./ImmutableArray.js";import{i as r,a as o,b as a,c as u,t as l,d as c,e as f,f as h,g as m,h as b,j as y,k as d,l as g,m as w,n as J}from"../chunks/languageUtils.js";import p from"../geometry/Geometry.js";function T(t,s,i=!1,e=!1){if(null==t)return null;if(a(t))return m(t);if(o(t))return b(t);if(u(t))return y(t);if(d(t))return g(t,s);if(w(t)){const n=[];for(const r of t)n.push(T(r,s,i,e));return n}if(e&&J(t))return t;const n=new A;n.immutable=!1;for(const r of Object.keys(t)){const o=t[r];void 0!==o&&n.setField(r,T(o,s,i,e))}return n.immutable=i,n}class A{constructor(t){this.declaredClass="esri.arcade.Dictionary",this.attributes=null,this.plain=!1,this.immutable=!0,this.attributes=t instanceof A?t.attributes:t??{}}field(t){const s=t.toLowerCase(),n=this.attributes[t];if(void 0!==n)return n;for(const i in this.attributes)if(i.toLowerCase()===s)return this.attributes[i];throw new i(null,e.FieldNotFound,null,{key:t})}setField(s,n){if(this.immutable)throw new i(null,e.Immutable,null);if(r(n))throw new i(null,e.NoFunctionInDictionary,null);const o=s.toLowerCase();n instanceof Date&&(n=t.dateJSToArcadeDate(n));if(void 0===this.attributes[s]){for(const t in this.attributes)if(t.toLowerCase()===o)return void(this.attributes[t]=n);this.attributes[s]=n}else this.attributes[s]=n}hasField(t){const s=t.toLowerCase();if(void 0!==this.attributes[t])return!0;for(const i in this.attributes)if(i.toLowerCase()===s)return!0;return!1}keys(){let t=[];for(const s in this.attributes)t.push(s);return t=t.sort(),t}castToText(s=!1){let i="";for(const e in this.attributes){""!==i&&(i+=",");const r=this.attributes[e];null==r?i+=JSON.stringify(e)+":null":o(r)||a(r)||u(r)?i+=JSON.stringify(e)+":"+JSON.stringify(r):r instanceof p?i+=JSON.stringify(e)+":"+l(r):r instanceof n||r instanceof Array?i+=JSON.stringify(e)+":"+l(r,null,s):r instanceof t?i+=s?JSON.stringify(e)+":"+JSON.stringify(r.getTime()):JSON.stringify(e)+":"+r.stringify():null!==r&&"object"==typeof r&&void 0!==r.castToText&&(i+=JSON.stringify(e)+":"+r.castToText(s))}return"{"+i+"}"}static convertObjectToArcadeDictionary(t,s,i=!0,e=!1){const n=new A;n.immutable=!1;for(const r in t){const o=t[r];void 0!==o&&n.setField(r.toString(),T(o,s,i,e))}return n.immutable=i,n}static convertJsonToArcade(t,s,i=!1){return T(t,s,i)}castAsJson(t=null){const s={};for(let i in this.attributes){const e=this.attributes[i];void 0!==e&&(t?.keyTranslate&&(i=t.keyTranslate(i)),s[i]=c(e,t))}return s}async castDictionaryValueAsJsonAsync(t,s,i,e=null,n){const r=await f(i,e,n);return t[s]=r,r}async castAsJsonAsync(s=null,i=null){const e={},n=[];for(let r in this.attributes){const o=this.attributes[r];i?.keyTranslate&&(r=i.keyTranslate(r)),void 0!==o&&(h(o)||o instanceof p||o instanceof t?e[r]=c(o,i):n.push(this.castDictionaryValueAsJsonAsync(e,r,o,s,i)))}return n.length>0&&await Promise.all(n),e}deepClone(){const t=new A;t.immutable=!1;for(const i of this.keys())t.setField(i,s(this.field(i)));return t}}export{A as default};
