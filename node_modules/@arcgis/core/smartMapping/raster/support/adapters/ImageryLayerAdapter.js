/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
import{_ as t}from"../../../../chunks/tslib.es6.js";import"../../../../geometry.js";import{property as s}from"../../../../core/accessorSupport/decorators/property.js";import"../../../../core/accessorSupport/ensureType.js";import"../../../../core/arrayUtils.js";import"../../../../core/has.js";import{subclass as e}from"../../../../core/accessorSupport/decorators/subclass.js";import{estimateStatisticsFromHistograms as r}from"../../../../layers/support/rasterFunctions/stretchUtils.js";import a from"../../../../rest/support/ImageHistogramParameters.js";import i from"./RasterLayerAdapter.js";import o from"../../../../geometry/Point.js";let n=class extends i{constructor(){super(...arguments),this._cacheSize=20,this._statsCache=new Map}generateRasterInfo(t){const s=t?.rasterFunction;try{return this.layer.generateRasterInfo(s,{signal:t?.signal})}catch{return Promise.resolve(this.layer.serviceRasterInfo)}}async estimateStatisticsHistograms(t){const s=t?.rasterFunction?.functionName??"default";if(this._statsCache.has(s))return this._statsCache.get(s);let{width:e,height:i,pixelSize:n}=this.layer.rasterInfo,c=1;for(;e>2e3||i>2e3;)e/=2,i/=2,c*=2;const p=t?.rasterFunction??this.layer.rasterFunction,{fullExtent:l,mosaicRule:h}=this.layer;n=new o(n.x*c,n.y*c,l.spatialReference);const m=new a({geometry:l,pixelSize:n,renderingRule:p,mosaicRule:h});let u;if(this.layer.capabilities.operations.supportsComputeStatisticsHistograms)u=await this.layer.computeStatisticsHistograms(m,t);else{const{histograms:s}=await this.layer.computeHistograms(m,t);u={statistics:r(s),histograms:s}}if(this._statsCache.set(s,u),this._statsCache.size>this._cacheSize){const t=this._statsCache.keys().next().value;this._statsCache.delete(t)}return u}supportsMultidirectionalHillshade(){return this.layer.version>=10.81}load(t){return this.addResolvingPromise(this.layer.load(t).then((()=>{this.generateRasterInfo({rasterFunction:this.rasterFunction,signal:t?.signal}).then((t=>this.rasterInfo=t))}))),Promise.resolve(this)}};t([s()],n.prototype,"layer",void 0),n=t([e("esri.smartMapping.support.adapters.ImageryLayerAdapter")],n);const c=n;export{c as default};
