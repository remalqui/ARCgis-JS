/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
import e from"../../../../request.js";import{throwIfAborted as t}from"../../../../core/promiseUtils.js";import{join as o}from"../../../../core/urlUtils.js";import{isHostedAgolService as s}from"../../../support/arcgisLayerUrl.js";const r=1e6,a=20*r,n=2e9,i=3;async function p({data:p,name:c,description:l},m,d){let f=null;try{const u=o(m,"uploads"),h=o(u,"info"),{data:w}=await e(h,{query:{f:"json"},responseType:"json"});t(d);const y=s(m),j=w.maxUploadFileSize*r,g=y?n:j,q=y?Math.min(a,j):a;if(p.size>g)throw new Error("Data too large");const T=o(u,"register"),{data:z}=await e(T,{query:{f:"json",itemName:c,description:l},responseType:"json",method:"post"});if(t(d),!z.success)throw new Error("Registration failed");const{itemID:E}=z.item;f=o(u,E);const U=o(f,"uploadPart"),D=Math.ceil(p.size/q),M=new Array;for(let e=0;e<D;++e)M.push(p.slice(e*q,Math.min((e+1)*q,p.size)));const P=M.slice().reverse(),x=new Array,A=async()=>{for(;0!==P.length;){const o=M.length-P.length,s=P.pop(),r=new FormData;r.append("f","json"),r.append("file",s),r.append("partId",`${o}`);const{data:a}=await e(U,{timeout:0,body:r,responseType:"json",method:"post"});if(t(d),!a.success)throw new Error("Part upload failed")}};for(let e=0;e<i&&0!==P.length;++e)x.push(A());await Promise.all(x);const F=o(f,"commit"),{data:I}=await e(F,{query:{f:"json",parts:M.map(((e,t)=>t)).join(",")},responseType:"json",method:"post"});if(t(d),!I.success)throw new Error("Commit failed");return I.item}catch(u){if(null!=f){const t=o(f,"delete");await e(t,{query:{f:"json"},responseType:"json",method:"post"})}throw u}}export{p as uploadItem};
