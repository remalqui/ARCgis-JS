/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
import{createTask as e}from"../../../core/asyncUtils.js";import t from"../../../core/Error.js";import r from"../../../core/Logger.js";import{throwIfAborted as s,isAbortError as a}from"../../../core/promiseUtils.js";import{equals as i,WGS84 as n}from"../../../geometry/support/spatialReferenceUtils.js";import{convertFromGeometry as o,convertToGeometry as u}from"../featureConversionUtils.js";import p from"../data/FeatureStore.js";import{project as h,checkProjectionSupport as y}from"../data/projectionSupport.js";import{QueryEngine as c}from"../data/QueryEngine.js";import{validateGeoJSON as l,createOptimizedFeatures as m}from"./geojson/geojson.js";import{mixAttributes as g}from"./support/sourceUtils.js";import{getFeature as _}from"../../ogc/wfsUtils.js";import f from"../../support/FieldsIndex.js";class d{constructor(){this._queryEngine=null,this._customParameters=null,this._snapshotFeatures=async e=>{const{objectIdField:t}=this._queryEngine,r=await _(this._getFeatureUrl??"",this._featureType.typeName,this._getFeatureOutputFormat,{customParameters:this._customParameters,dateFields:this._queryEngine.fieldsIndex.dateFields.map((e=>e.name)),signal:e});await l(r),s(e);const a=m(r,{geometryType:this._queryEngine.geometryType,hasZ:!1,objectIdField:t});if(!i(this._queryEngine.spatialReference,n))for(const s of a)null!=s.geometry&&(s.geometry=o(h(u(s.geometry,this._queryEngine.geometryType,!1,!1),n,this._queryEngine.spatialReference)));let p=1;for(const s of a){const e={};g(this._fieldsIndex,e,s.attributes,!0),s.attributes=e,null==s.attributes[t]&&(s.objectId=s.attributes[t]=p++)}return a}}destroy(){this._queryEngine?.destroy(),this._queryEngine=null}async load(e,t){const{getFeatureUrl:r,getFeatureOutputFormat:a,spatialReference:i,fields:n,geometryType:o,featureType:u,objectIdField:h,customParameters:y}=e;this._featureType=u,this._customParameters=y,this._getFeatureUrl=r,this._getFeatureOutputFormat=a,this._fieldsIndex=new f(n),await this._checkProjection(i),s(t),this._queryEngine=new c({fields:n,geometryType:o,hasM:!1,hasZ:!1,objectIdField:h,spatialReference:i,timeInfo:null,featureStore:new p({geometryType:o,hasM:!1,hasZ:!1})});const l=await this._snapshotFeatures(t.signal);return this._queryEngine.featureStore.addMany(l),{extent:(await this._queryEngine.fetchRecomputedExtents()).fullExtent}}async applyEdits(){throw new t("wfs-source:editing-not-supported","applyEdits() is not supported on WFSLayer")}async queryFeatures(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQuery(e,t.signal)}async queryFeatureCount(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForCount(e,t.signal)}async queryObjectIds(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForIds(e,t.signal)}async queryExtent(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForExtent(e,t.signal)}async querySnapping(e,t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForSnapping(e,t.signal)}async refresh(s){return this._customParameters=s,this._snapshotTask?.abort(),this._snapshotTask=e(this._snapshotFeatures),this._snapshotTask.promise.then((e=>{this._queryEngine.featureStore.clear(),e&&this._queryEngine.featureStore.addMany(e)}),(e=>{this._queryEngine.featureStore.clear(),a(e)||r.getLogger("esri.layers.WFSLayer").error(new t("wfs-layer:getfeature-error","An error occurred during the GetFeature request",{error:e}))})),await this._waitSnapshotComplete(),{extent:(await this._queryEngine.fetchRecomputedExtents()).fullExtent}}async _waitSnapshotComplete(){if(this._snapshotTask&&!this._snapshotTask.finished){try{await this._snapshotTask.promise}catch{}return this._waitSnapshotComplete()}}async _checkProjection(e){try{await y(n,e)}catch{throw new t("unsupported-projection","Projection not supported",{spatialReference:e})}}}export{d as default};
