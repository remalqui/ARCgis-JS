/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
import{_ as e}from"../../chunks/tslib.es6.js";import t from"../../request.js";import r from"../../core/Error.js";import{isDataProtocol as o,isBlobProtocol as s,isAbsolute as i,dataToBlob as n,join as a}from"../../core/urlUtils.js";import{generateUUID as m}from"../../core/uuid.js";import{property as p}from"../../core/accessorSupport/decorators/property.js";import"../../core/accessorSupport/ensureType.js";import"../../core/arrayUtils.js";import"../../core/has.js";import{reader as c}from"../../core/accessorSupport/decorators/reader.js";import{subclass as l}from"../../core/accessorSupport/decorators/subclass.js";import{writer as u}from"../../core/accessorSupport/decorators/writer.js";import d from"./MediaElementBase.js";import{getResourceContentExtension as f}from"../../portal/support/resourceExtension.js";import{f as g,t as h,i as y,M as v}from"../../chunks/persistableUrlUtils.js";let j=class extends d{constructor(e){super(e),this.content=null,this.image=null,this.type="image",this.image=null}load(){const e=this.image;if("string"==typeof e){const r=t(e,{responseType:"image"}).then((({data:e})=>{this._set("content",e)}));this.addResolvingPromise(r)}else if(e instanceof HTMLImageElement){const t=e.decode().then((()=>{this._set("content",e)}));this.addResolvingPromise(t)}else e?this._set("content",e):this.addResolvingPromise(Promise.reject(new r("image-element:invalid-image-type","Invalid image type",{image:e})));return Promise.resolve(this)}readImage(e,t,r){return g(t.url,r)}writeImage(e,t,r,n){if(null==e)return;const a=n?.portalItem,m=n?.resources;if(!a||!m)return void("string"==typeof e&&(t[r]=h(e,n)));const p="string"!=typeof e||o(e)||s(e)?null:e;if(p){if(null==y(p))return void(t[r]=p);const e=h(p,{...n,verifyItemRelativeUrls:n&&n.verifyItemRelativeUrls?{writtenUrls:n.verifyItemRelativeUrls.writtenUrls,rootPath:void 0}:void 0},v.NO);if(a&&e&&!i(e))return m.toKeep.push({resource:a.resourceFromPath(e),compress:!1}),void(t[r]=e)}t[r]="<pending>",m.pendingOperations.push(w(e).then((e=>{const o=T(e,a);t[r]=o.itemRelativeUrl,m.toAdd.push({resource:o,content:e,compress:!1,finish:e=>{this.image=e.url}})})))}};e([p({readOnly:!0})],j.prototype,"content",void 0),e([p({json:{name:"url",type:String}})],j.prototype,"image",void 0),e([c("image",["url"])],j.prototype,"readImage",null),e([u("image")],j.prototype,"writeImage",null),e([p({readOnly:!0,json:{name:"mediaType"}})],j.prototype,"type",void 0),j=e([l("esri.layers.support.ImageElement")],j);const I=j;async function w(e){if("string"==typeof e){if(s(e)){const{data:r}=await t(e,{responseType:"blob"});return r}if(o(e))return n(e);return w((await t(e,{responseType:"image"})).data)}return new Promise((t=>E(e).toBlob(t)))}function E(e){if(e instanceof HTMLCanvasElement)return e;const t=e instanceof HTMLImageElement?e.naturalWidth:e.width,r=e instanceof HTMLImageElement?e.naturalHeight:e.height,o=document.createElement("canvas"),s=o.getContext("2d");return o.width=t,o.height=r,e instanceof HTMLImageElement?s.drawImage(e,0,0,e.width,e.height):e instanceof ImageData&&s.putImageData(e,0,0),o}function T(e,t){const r=m(),o=`${a("media",r)}.${f(e)}`;return t.resourceFromPath(o)}export{I as default};
