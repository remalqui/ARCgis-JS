/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
import{assertIsSome as t}from"../../../core/maybe.js";import n from"../PixelBlock.js";import{getPixelValueRange as s}from"../rasterFormats/pixelRangeUtils.js";import{stretchTypeFunctionEnum as e}from"../../../renderers/support/stretchRendererUtils.js";const i=1,o=[.299,.587,.114];function r(t,n=256){n=Math.min(n,256);const{size:s,counts:e}=t,i=new Uint8Array(s),o=e.reduce(((t,s)=>t+s/n),0);let r=0,a=0,l=0,u=o;for(let f=0;f<s;f++)if(l+=e[f],!(f<s-1&&l+e[f+1]<u)){for(;r<n-1&&u<l;)r++,u+=o;for(let t=a;t<=f;t++)i[t]=r;a=f+1}for(let f=a;f<s;f++)i[f]=n-1;return i}function a(t){const{minCutOff:n,maxCutOff:s,gamma:e,pixelType:i,rounding:o}=t,r=t.outMin||0,a=t.outMax||255;if(!["u8","u16","s8","s16"].includes(i))return null;const u=n.length;let f,c,m=0;"s8"===i?m=-127:"s16"===i&&(m=-32767);let h=256;["u16","s16"].includes(i)&&(h=65536);const g=[],p=[],x=a-r;for(f=0;f<u;f++)p[f]=s[f]-n[f],g[f]=0===p[f]?0:x/p[f];let M;const y=[];let b,v,k;if(e&&e.length>=u){const t=d(u,e);for(f=0;f<u;f++){for(k=[],c=0;c<h;c++)if(0!==p[f])if(b=c+m,M=(b-n[f])/p[f],v=1,e[f]>1&&(v-=(1/x)**(M*t[f])),b<s[f]&&b>n[f]){const t=v*x*M**(1/e[f])+r;k[c]="floor"===o?Math.floor(t):"round"===o?Math.round(t):t}else b>=s[f]?k[c]=a:k[c]=r;else k[c]=r;y[f]=k}}else for(f=0;f<u;f++){for(k=[],c=0;c<h;c++)if(b=c+m,b<=n[f])k[c]=r;else if(b>=s[f])k[c]=a;else{const t=(b-n[f])*g[f]+r;k[c]="floor"===o?Math.floor(t):"round"===o?Math.round(t):t}y[f]=k}if(null!=t.contrastOffset){const n=l(t.contrastOffset,t.brightnessOffset);for(f=0;f<u;f++)for(k=y[f],c=0;c<h;c++)k[c]=n[k[c]]}return{lut:y,offset:m}}function l(t,n){const s=Math.min(Math.max(t,-100),100),e=Math.min(Math.max(n??0,-100),100),i=255,o=128;let r=0,a=0;const l=new Uint8Array(256);for(r=0;r<256;r++)s>0&&s<100?a=(200*r-100*i+2*i*e)/(2*(100-s))+o:s<=0&&s>-100?a=(200*r-100*i+2*i*e)*(100+s)/2e4+o:100===s?(a=200*r-100*i+(i+1)*(100-s)+2*i*e,a=a>0?i:0):-100===s&&(a=o),l[r]=a>i?i:a<0?0:a;return l}function u(t,n,s){const e=[];for(let i=0;i<n.length;i++){let r=0,a=0,l=0;"min"in n[i]?({min:r,max:a,avg:l}=n[i]):[r,a,l]=n[i];let u=l??0;"u8"!==t&&(u=255*(u-r)/(a-r)),s&&(u*=o[i]),e.push(f(u))}return e}function f(t){if(t<=0||t>=255)return i;let n=0;150!==t&&(n=t<=150?45*Math.cos(.01047*t):17*Math.sin(.021*t));const s=255,e=t+n,o=Math.log(t/s),r=Math.log(e/s);if(0===r)return i;const a=o/r;return isNaN(a)?i:Math.min(9.9,Math.max(.01,a))}function c(t,n,s,e){let i=1/0,o=-1/0,r=0,a=0;const l=t.length;for(let d=0;d<l;d++){const s=t[d];n&&!n[d]||(i=s<i?s:i,o=s>o?s:o,r+=s,a++)}if(0===a)return{statistics:{min:0,max:0,avg:0,stddev:0},histogram:null};const u=r/a;let f=0;for(let d=0;d<l;d++)n&&!n[d]||(f+=(t[d]-u)**2);const c=n?n.filter((t=>t)).length:l,m={min:i,max:o,avg:u,stddev:c<=1?0:Math.sqrt(f/(c-1))};if(!e)return{statistics:m,histogram:null};if(["u8","s8","u4","u2","u1"].includes(s)){const s=o-i+1,e=new Uint32Array(s);for(let o=0;o<l;o++)n&&!n[o]||e[t[o]-i]++;return{statistics:m,histogram:{min:i-.5,max:o+.5,size:s,counts:e}}}const h=256,g=new Uint32Array(h),p=(o-i)/h;if(0===p)return{statistics:m,histogram:{min:i,max:o,size:1,counts:new Uint32Array(1).fill(a)}};const x=new Uint32Array(h+1);for(let d=0;d<l;d++)n&&!n[d]||x[Math.floor((t[d]-i)/p)]++;for(let d=0;d<h-1;d++)g[d]=x[d];return g[h-1]=x[h-1]+x[h],{statistics:m,histogram:{min:i,max:o,size:h,counts:g}}}function m(t){const{pixels:n,mask:s,pixelType:e,bandMasks:i}=t,o=n.map(((t,n)=>c(t,i?.[n]??s,e,!0)));return{statistics:o.map((({statistics:t})=>t)),histograms:o.map((({histogram:t})=>t))}}function h(t){if(null==t||!t.pixels?.length)return null;const{pixels:n,mask:s,bandMasks:e,pixelType:i}=t,o=t.width*t.height,r=n.length;let a,l,u,f,c;const m=[],h=[];let g,p,x,d,M,y,b,v,k,w;const z=256;for(f=0;f<r;f++){g=new Uint32Array(z),x=n[f];const r=e?.[f]??s;if("u8"===i)if(a=-.5,l=255.5,r)for(c=0;c<o;c++)r[c]&&g[x[c]]++;else for(c=0;c<o;c++)g[x[c]]++;else{let n=!1;t.statistics||(t.updateStatistics(),n=!0);const s=t.statistics;if(a=s[f].minValue,l=s[f].maxValue,u=(l-a)/z,0===u){!s||t.validPixelCount||n||t.updateStatistics();const e=(t.validPixelCount||t.width*t.height)/z;for(let t=0;t<z;t++)g[t]=Math.round(e*(t+1))-Math.round(e*t)}else{for(p=new Uint32Array(z+1),c=0;c<o;c++)r&&!r[c]||p[Math.floor((x[c]-a)/u)]++;for(c=0;c<z-1;c++)g[c]=p[c];g[z-1]=p[z-1]+p[z]}}for(m.push({min:a,max:l,size:z,counts:g}),d=0,M=0,v=0,c=0;c<z;c++)d+=g[c],M+=c*g[c];for(k=M/d,c=0;c<z;c++)v+=g[c]*(c-k)**2;w=Math.sqrt(v/(d-1)),u=(l-a)/z,y=(k+.5)*u+a,b=w*u,h.push({min:a,max:l,avg:y,stddev:b})}return{statistics:h,histograms:m}}function g(t){const n=[];for(let s=0;s<t.length;s++){const{min:e,max:i,size:o,counts:r}=t[s];let a=0,l=0;for(let t=0;t<o;t++)a+=r[t],l+=t*r[t];const u=l/a;let f=0;for(let t=0;t<o;t++)f+=r[t]*(t-u)**2;const c=(i-e)/o,m=(u+.5)*c+e,h=Math.sqrt(f/(a-1))*c;n.push({min:e,max:i,avg:m,stddev:h})}return n}function p(n,i){const{pixelBlock:o,bandIds:a,returnHistogramLut:l,rasterInfo:u}=i;let f=null,c=null,m=n.stretchType;if("number"==typeof m&&(m=e[m]),n.dra)if("minMax"===m&&null!=o&&o.statistics)f=o.statistics.map((t=>[t.minValue,t.maxValue,0,0]));else{const t=h(o);f=null!=t?t.statistics:null,c=null!=t?t.histograms:null}else f=n.statistics?.length>0?n.statistics:u.statistics,c="histograms"in n?n.histograms:void 0,c||(c=u.histograms);"percentClip"!==m&&"histogramEqualization"!==m||c?.length||(m="minMax");const g=f?.length||c?.length||u.bandCount,p=[],d=[];let M,y,b,v,k,w,z,C,O;f&&!Array.isArray(f[0])&&(f=f.map((t=>[t.min,t.max,t.avg,t.stddev])));const[A,U]=s(u.pixelType);if(!f?.length){for(f=[],C=0;C<g;C++)f.push([A,U,1,1]);"standardDeviation"===m&&(m="minMax")}switch(m){case"none":for(C=0;C<g;C++)p[C]=A,d[C]=U;break;case"minMax":for(C=0;C<g;C++){const t=f[C];p[C]=t[0],d[C]=t[1]}break;case"standardDeviation":for(C=0;C<g;C++){const t=f[C];p[C]=t[2]-n.numberOfStandardDeviations*t[3],d[C]=t[2]+n.numberOfStandardDeviations*t[3],p[C]<t[0]&&(p[C]=t[0]),d[C]>t[1]&&(d[C]=t[1])}break;case"histogramEqualization":for(t(c),C=0;C<g;C++)p[C]=c[C].min,d[C]=c[C].max;break;case"percentClip":for(t(c),C=0;C<c.length;C++){for(M=c[C],k=new Uint32Array(M.size),v=[...M.counts],v.length>=20&&(v[0]=v[1]=v[2]=v[v.length-1]=v[v.length-2]=0),b=0,y=(M.max-M.min)/M.size,z=-.5===M.min&&1===y?.5:0,O=0;O<M.size;O++)b+=v[O],k[O]=b;for(w=(n.minPercent||0)*b/100,p[C]=M.min+z,O=0;O<M.size;O++)if(k[O]>w){p[C]=M.min+y*(O+z);break}for(w=(1-(n.maxPercent||0)/100)*b,d[C]=M.max+z,O=M.size-2;O>=0;O--)if(k[O]<w){d[C]=M.min+y*(O+2-z);break}if(d[C]<p[C]){const t=p[C];p[C]=d[C],d[C]=t}}break;default:for(C=0;C<g;C++){const t=f[C];p[C]=t[0],d[C]=t[1]}}let T,q,P;"histogramEqualization"===m?(t(c),q=c[0].size||256,T=0,l&&(P=c.map((t=>r(t))))):(q=n.max||255,T=n.min||0);return x({minCutOff:p,maxCutOff:d,outMax:q,outMin:T,histogramLut:P},a)}function x(t,n){if(null==n||0===n.length)return t;const s=Math.max.apply(null,n),{minCutOff:e,maxCutOff:i,outMin:o,outMax:r,histogramLut:a}=t;return e.length===n.length||e.length<=s?t:{minCutOff:n.map((t=>e[t])),maxCutOff:n.map((t=>i[t])),histogramLut:a?n.map((t=>a[t])):null,outMin:o,outMax:r}}function d(t,n){const s=new Float32Array(t);for(let e=0;e<t;e++)n[e]>1?n[e]>2?s[e]=6.5+(n[e]-2)**2.5:s[e]=6.5+100*(2-n[e])**4:s[e]=1;return s}function M(t,s){if(null==t||!t.pixels?.length)return t;const{mask:e,bandMasks:i,width:o,height:r,pixels:a}=t,{minCutOff:l,maxCutOff:u,gamma:f}=s,c=s.outMin||0,m=s.outMax||255,h=o*r,g=s.outputPixelType||"u8",p=t.pixels.map((()=>n.createEmptyBand(g,h))),x=p.length,M=m-c,y=[],b=[];for(let n=0;n<x;n++)b[n]=u[n]-l[n],y[n]=0===b[n]?0:M/b[n];const v=g.startsWith("u")||g.startsWith("s"),k=f&&f.length>=x,w=!!s.isRenderer;if(k){const t=d(x,f);for(let n=0;n<x;n++){const s=i?.[n]??e;for(let e=0;e<h;e++)if(null==s||s[e]){if(0===b[n]){p[n][e]=c;continue}const s=a[n][e],i=(s-l[n])/b[n];let o=1;if(f[n]>1&&(o-=(1/M)**(i*t[n])),s<u[n]&&s>l[n]){const t=o*M*i**(1/f[n])+c;p[n][e]=w?Math.floor(t):v?Math.round(t):t}else s>=u[n]?p[n][e]=m:p[n][e]=c}}}else for(let n=0;n<x;n++){const t=i?.[n]??e;for(let s=0;s<h;s++)if(null==t||t[s]){const t=a[n][s];if(t<u[n]&&t>l[n]){const e=(t-l[n])*y[n]+c;p[n][s]=w?Math.floor(e):v?Math.round(e):e}else t>=u[n]?p[n][s]=m:p[n][s]=c}}const z=new n({width:o,height:r,mask:e,bandMasks:i,pixels:p,pixelType:g});return z.updateStatistics(),z}export{d as computeGammaCorrection,u as computeGammaValues,m as computeStatisticsHistograms,l as createContrastBrightnessLUT,r as createHistogramEqualizationLUT,a as createStretchLUT,g as estimateStatisticsFromHistograms,h as estimateStatisticsHistograms,p as getStretchCutoff,M as stretch};
