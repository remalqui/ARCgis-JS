/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
import{id as t}from"../../kernel.js";import r from"../../request.js";import{throwIfAbortError as e}from"../../core/promiseUtils.js";import a from"../FeatureLayer.js";import n from"../../portal/Portal.js";import s from"../../portal/PortalItem.js";class i{constructor(t,r,e,a){this._parsedUrl=t,this._portalItem=r,this._apiKey=e,this.signal=a,this._rootDocument=null;const n=this._parsedUrl?.path.match(/^(.*)\/SceneServer\/layers\/([\d]*)\/?$/i);n&&(this._urlParts={root:n[1],layerId:parseInt(n[2],10)})}async fetch(){if(!this._urlParts)return null;const t=this._portalItem??await this._portalItemFromServiceItemId();if(null==t)return this._loadFromUrl();const r=await this._findAndLoadRelatedPortalItem(t);return null==r?null:this._loadFeatureLayerFromPortalItem(r)}async fetchPortalItem(){if(!this._urlParts)return null;const t=this._portalItem??await this._portalItemFromServiceItemId();return null==t?null:this._findAndLoadRelatedPortalItem(t)}async _fetchRootDocument(){if(null!=this._rootDocument)return this._rootDocument;if(null==this._urlParts)return this._rootDocument={},{};const t={query:{f:"json",token:this._apiKey},responseType:"json",signal:this.signal},e=`${this._urlParts.root}/SceneServer`;try{const a=await r(e,t);this._rootDocument=a.data}catch{this._rootDocument={}}return this._rootDocument}async _fetchServiceOwningPortalUrl(){const a=this._parsedUrl?.path,n=a?t?.findServerInfo(a):null;if(n?.owningSystemUrl)return n.owningSystemUrl;const s=a?a.replace(/(.*\/rest)\/.*/i,"$1")+"/info":null;try{const t=(await r(s,{query:{f:"json"},responseType:"json",signal:this.signal})).data.owningSystemUrl;if(t)return t}catch(i){e(i)}return null}async _findAndLoadRelatedPortalItem(t){try{return(await t.fetchRelatedItems({relationshipType:"Service2Service",direction:"reverse"},{signal:this.signal})).find((t=>"Feature Service"===t.type))||null}catch(r){return e(r),null}}async _loadFeatureLayerFromPortalItem(t){await t.load({signal:this.signal});const r=await this._findMatchingAssociatedSublayerUrl(t.url??"");return new a({url:r,portalItem:t}).load({signal:this.signal})}async _loadFromUrl(){const t=await this._findMatchingAssociatedSublayerUrl(`${this._urlParts?.root}/FeatureServer`);return new a({url:t}).load({signal:this.signal})}async _findMatchingAssociatedSublayerUrl(t){const e=t.replace(/^(.*FeatureServer)(\/[\d]*\/?)?$/i,"$1"),a=this._urlParts?.layerId,n=this._fetchRootDocument(),s=t=>{const a={query:{f:"json"},responseType:"json",authMode:t,signal:this.signal};return r(e,a)},i=s("anonymous").catch((()=>s("no-prompt"))),[o,l]=await Promise.all([i,n]),c=l&&l.layers,u=o.data&&o.data.layers;if(!Array.isArray(u))throw new Error("expected layers array");if(Array.isArray(c))for(let r=0;r<Math.min(c.length,u.length);r++){if(c[r].id===a)return`${e}/${u[r].id}`}else if(null!=a&&a<u.length)return`${e}/${u[a].id}`;throw new Error("could not find matching associated sublayer")}async _portalItemFromServiceItemId(){const t=(await this._fetchRootDocument()).serviceItemId;if(!t)return null;const r=new s({id:t,apiKey:this._apiKey}),a=await this._fetchServiceOwningPortalUrl();null!=a&&(r.portal=new n({url:a}));try{return r.load({signal:this.signal})}catch(i){return e(i),null}}}export{i as FetchAssociatedFeatureLayer};
