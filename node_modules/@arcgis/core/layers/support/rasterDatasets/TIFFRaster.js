/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import"../../../geometry.js";import{isSome as t}from"../../../core/arrayUtils.js";import r from"../../../core/Error.js";import{property as i}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/accessorSupport/ensureType.js";import"../../../core/has.js";import{subclass as s}from"../../../core/accessorSupport/decorators/subclass.js";import a from"../RasterInfo.js";import n from"../RasterStorageInfo.js";import o from"./BaseRaster.js";import f from"./DBFParser.js";import{parseSpatialReference as l,parsePAMInfo as u}from"./pamParser.js";import{parseSignature as c,getPyramidIFDs as p,getMaskIFDs as h,getImageInfo as m,parseIFD as d,parseFieldValues as y,isBSQConfig as g}from"../rasterFormats/TiffDecoder.js";import T from"../rasterFormats/TiffTags.js";import{estimateStatisticsFromHistograms as x}from"../rasterFunctions/stretchUtils.js";import I from"../rasterTransforms/PolynomialTransform.js";import w from"../../../rest/support/FeatureSet.js";import R from"../../../geometry/SpatialReference.js";import _ from"../../../geometry/Extent.js";import b from"../../../geometry/Point.js";const F=(e,t)=>e.get(t)?.values,E=(e,t)=>e.get(t)?.values?.[0];let S=class extends o{constructor(){super(...arguments),this._files=null,this._headerInfo=null,this._bufferSize=1048576,this.datasetFormat="TIFF"}async open(e){await this.init();const t=e?e.signal:null,{data:i}=await this.request(this.url,{range:{from:0,to:this._bufferSize},responseType:"array-buffer",signal:t});if(!i)throw new r("tiffraster:open","failed to open url "+this.url);this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1,this.url.lastIndexOf("."));const{littleEndian:s,firstIFDPos:a,isBigTiff:n}=c(i),o=[];await this._readIFDs(o,i,s,a,0,n?8:4,t);const{imageInfo:f,rasterInfo:l}=this._parseIFDs(o),u=p(o),m=h(o);if(this._headerInfo={littleEndian:s,isBigTiff:n,ifds:o,pyramidIFDs:u,maskIFDs:m,...f},this._set("rasterInfo",l),!f.isSupported)throw new r("tiffraster:open","this tiff is not supported: "+f.message);if(!f.tileWidth)throw new r("tiffraster:open","none-tiled tiff is not optimized for access, convert to COG and retry.");const d=o[0].get("PREDICTOR")?.values?.[0],y=o[0].get("SAMPLEFORMAT")?.values?.[0];if(3===y&&2===d)throw new r("tiffraster:open","unsupported horizontal difference encoding. Predictor=3 is supported for floatting point data");const{skipExtensions:g=[]}=this.ioConfig;if(!g.includes("aux.xml")){const t=await this._fetchAuxiliaryMetaData(e);null!=t&&this._processPAMInfo(t,l)}g.includes("vat.dbf")||1!==l.bandCount||"u8"!==l.pixelType||(l.attributeTable=await this._fetchAuxiliaryTable(e),null!=l.attributeTable&&(l.keyProperties.DataType="thematic")),this.updateTileInfo()}async fetchRawTile(e,t,r,i={}){if(!this._headerInfo?.isSupported||this.isBlockOutside(e,t,r))return null;const s=await this._fetchRawTiffTile(e,t,r,!1,i);if(null!=s&&this._headerInfo.hasMaskBand){const a=await this._fetchRawTiffTile(e,t,r,!0,i);null!=a&&a.pixels[0]instanceof Uint8Array&&(s.mask=a.pixels[0])}return s}_parseIFDs(e){const t=m(e),{width:r,height:i,tileWidth:s,tileHeight:o,planes:f,pixelType:u,compression:c,firstPyramidLevel:p,maximumPyramidLevel:h,pyramidBlockWidth:d,pyramidBlockHeight:y,tileBoundary:g,affine:T,metadata:x}=t,w=t.extent.spatialReference?.wkt||t.extent.spatialReference?.wkid;let S=l(w),v=!!t.isPseudoGeographic;null==S&&(v=!0,S=new R({wkid:3857}));const D=new _({...t.extent,spatialReference:S}),P=new b(D?{x:D.xmin,y:D.ymax,spatialReference:S}:{x:0,y:0}),k=new n({blockWidth:s,blockHeight:o,pyramidBlockWidth:d,pyramidBlockHeight:y,compression:c,origin:P,firstPyramidLevel:p,maximumPyramidLevel:h,blockBoundary:g}),O=new b({x:(D.xmax-D.xmin)/r,y:(D.ymax-D.ymin)/i,spatialReference:S}),j=x?{BandProperties:x.bandProperties,DataType:x.dataType}:{};let B=null;const L=E(e[0],"PHOTOMETRICINTERPRETATION"),A=F(e[0],"COLORMAP");if(L<=3&&A?.length>3&&A.length%3==0){B=[];const e=A.length/3;for(let t=0;t<e;t++)B.push([t,A[t]>>>8,A[t+e]>>>8,A[t+2*e]>>>8])}const z=new a({width:r,height:i,bandCount:f,pixelType:u,pixelSize:O,storageInfo:k,spatialReference:S,isPseudoSpatialReference:v,keyProperties:j,extent:D,colormap:B,statistics:x?x.statistics:null});return T?.length&&(z.nativeExtent=new _({xmin:-.5,ymin:.5-i,xmax:r-.5,ymax:.5,spatialReference:S}),z.transform=new I({polynomialOrder:1,forwardCoefficients:[T[2]+T[0]/2,T[5]-T[3]/2,T[0],T[3],-T[1],-T[4]]}),z.extent=z.transform.forwardTransform(z.nativeExtent),z.pixelSize=new b({x:(D.xmax-D.xmin)/r,y:(D.ymax-D.ymin)/i,spatialReference:S}),k.origin.x=-.5,k.origin.y=.5),{imageInfo:t,rasterInfo:z}}_processPAMInfo(e,t){if(t.statistics=e.statistics??t.statistics,t.histograms=e.histograms,e.histograms&&null==t.statistics&&(t.statistics=x(e.histograms)),e.transform&&null==t.transform){t.transform=e.transform,t.nativeExtent=t.extent;const r=t.transform.forwardTransform(t.nativeExtent);t.pixelSize=new b({x:(r.xmax-r.xmin)/t.width,y:(r.ymax-r.ymin)/t.height,spatialReference:t.spatialReference}),t.extent=r}t.isPseudoSpatialReference&&e.spatialReference&&(t.spatialReference=e.spatialReference,t.extent.spatialReference=t.nativeExtent.spatialReference=t.storageInfo.origin.spatialReference=t.spatialReference)}async _readIFDs(e,t,r,i,s,a=4,n){if(!i)return null;if(i>=t.byteLength||i<0){t=(await this.request(this.url,{range:{from:i+s,to:i+s+this._bufferSize},responseType:"array-buffer",signal:n})).data,s=i+s,i=0}const o=await this._readIFD(t,r,i,s,T.TIFF_TAGS,a,n);if(e.push(o.ifd),!o.nextIFD)return null;await this._readIFDs(e,t,r,o.nextIFD-s,s,a,n)}async _readIFD(e,r,i,s,a=T.TIFF_TAGS,n=4,o){if(!e)return null;const f=d(e,r,i,s,a,n);if(f.success){const i=[];if(f.ifd?.forEach((e=>{e.values||i.push(e)})),i.length>0){const a=i.map((e=>e.offlineOffsetSize)).filter(t),n=Math.min.apply(null,a.map((e=>e[0])));if(Math.min.apply(null,a.map((e=>e[0]+e[1])))-n<=this._bufferSize){const{data:t}=await this.request(this.url,{range:{from:n,to:n+this._bufferSize},responseType:"array-buffer",signal:o});e=t,s=n,i.forEach((t=>y(e,r,t,s)))}}if(f.ifd?.has("GEOKEYDIRECTORY")){const t=f.ifd.get("GEOKEYDIRECTORY"),i=t?.values;if(i&&i.length>4){const a=i[0]+"."+i[1]+"."+i[2],n=await this._readIFD(e,r,t.valueOffset+6-s,s,T.GEO_KEYS,2,o);t.data=n.ifd,t.data&&t.data.set("GEOTIFFVersion",{id:0,type:2,valueCount:1,valueOffset:null,values:[a]})}}return f}if(f.requiredBufferSize&&f.requiredBufferSize!==e.byteLength){const t=await this.request(this.url,{range:{from:s,to:s+f.requiredBufferSize+4},responseType:"array-buffer",signal:o});return(e=t.data).byteLength<f.requiredBufferSize?null:this._readIFD(e,r,0,s,T.TIFF_TAGS,4,o)}}async _fetchRawTiffTile(e,t,r,i,s={}){const a=this._getTileLocation(e,t,r,i);if(!a)return null;const{ranges:n,actualTileWidth:o,actualTileHeight:f,ifd:l}=a,u=n.map((e=>this.request(this.url,{range:e,responseType:"array-buffer",signal:s.signal}))),c=await Promise.all(u),p=c.map((e=>e.data.byteLength)).reduce(((e,t)=>e+t)),h=1===c.length?c[0].data:new ArrayBuffer(p),m=[0],d=[0];if(c.length>1){const e=new Uint8Array(h);for(let t=0,r=0;t<c.length;t++){const i=c[t].data;e.set(new Uint8Array(i),r),m[t]=r,r+=i.byteLength,d[t]=i.byteLength}}const{blockWidth:y,blockHeight:g}=this.getBlockWidthHeight(e),T=await this.decodePixelBlock(h,{format:"tiff",customOptions:{headerInfo:this._headerInfo,ifd:l,offsets:m,sizes:d},width:y,height:g,planes:null,pixelType:null});if(null==T)return null;let x,I,w;if(o!==y||f!==g){let e=T.mask;if(e)for(x=0;x<g;x++)if(w=x*y,x<f)for(I=o;I<y;I++)e[w+I]=0;else for(I=0;I<y;I++)e[w+I]=0;else for(e=new Uint8Array(y*g),T.mask=e,x=0;x<f;x++)for(w=x*y,I=0;I<o;I++)e[w+I]=1}return T}_getTileLocation(e,t,r,i=!1){const{firstPyramidLevel:s,blockBoundary:a}=this.rasterInfo.storageInfo,n=0===e?0:e-(s-1),{_headerInfo:o}=this;if(!o)return null;const f=i?o.maskIFDs[n]:0===n?o?.ifds[0]:o?.pyramidIFDs[n-1];if(!f)return null;const l=g(f,o),u=F(f,"TILEOFFSETS");if(void 0===u)return null;const c=F(f,"TILEBYTECOUNTS"),{minRow:p,minCol:h,maxRow:m,maxCol:d}=a[n];if(t>m||r>d||t<p||r<h)return null;const y=E(f,"IMAGEWIDTH"),T=E(f,"IMAGELENGTH"),x=E(f,"TILEWIDTH"),I=E(f,"TILELENGTH"),w=[];if(l){const{bandCount:e}=this.rasterInfo;for(let i=0;i<e;i++){const e=i*(m+1)*(d+1)+t*(d+1)+r;w[i]={from:u[e],to:u[e]+c[e]-1}}}else{const e=t*(d+1)+r;w.push({from:u[e],to:u[e]+c[e]-1})}for(let g=0;g<w.length;g++)if(null==w[g].from||!w[g].to)return null;return{ranges:w,ifd:f,actualTileWidth:r===d&&y%x||x,actualTileHeight:t===m&&T%I||I}}async _fetchAuxiliaryMetaData(e){try{const{data:t}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:e?.signal});return u(t)}catch{return null}}async _fetchAuxiliaryTable(e){try{const{data:t}=await this.request(this.url+".vat.dbf",{responseType:"array-buffer",signal:e?.signal}),r=f.parse(t);return r?.recordSet?w.fromJSON(r.recordSet):null}catch{return null}}};e([i()],S.prototype,"_files",void 0),e([i()],S.prototype,"_headerInfo",void 0),e([i()],S.prototype,"_bufferSize",void 0),e([i({type:String,json:{write:!0}})],S.prototype,"datasetFormat",void 0),S=e([s("esri.layers.support.rasterDatasets.TIFFRaster")],S);const v=S;export{v as default};
