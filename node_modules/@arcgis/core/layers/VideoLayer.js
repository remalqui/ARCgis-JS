/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
import{_ as t}from"../chunks/tslib.es6.js";import"../geometry.js";import e from"../request.js";import{clamp as r}from"../core/mathUtils.js";import{MultiOriginJSONMixin as o}from"../core/MultiOriginJSONSupport.js";import{watch as i,initial as s}from"../core/reactiveUtils.js";import{property as l}from"../core/accessorSupport/decorators/property.js";import"../core/accessorSupport/ensureType.js";import"../core/arrayUtils.js";import"../core/has.js";import{reader as n}from"../core/accessorSupport/decorators/reader.js";import{subclass as p}from"../core/accessorSupport/decorators/subclass.js";import a from"../geometry/Polyline.js";import u from"../geometry/SpatialReference.js";import c from"./Layer.js";import{BlendLayer as m}from"./mixins/BlendLayer.js";import{CustomParametersMixin as y}from"./mixins/CustomParametersMixin.js";import{ScaleRangeLayer as d}from"./mixins/ScaleRangeLayer.js";import{url as h}from"./support/commonProperties.js";import f from"./support/PlaybackInfo.js";import{getVideoLayerCapabilities as g}from"./support/serviceCapabilitiesUtils.js";import v from"./support/TelemetryData.js";import j from"./support/TelemetryDisplay.js";import S from"./support/VideoFrame.js";import b from"./video/VideoController.js";import{getTelemetryData as O,getSensorTrailPoints as U,readVideoTimeExtent as T}from"./video/videoUtils.js";import x from"../geometry/Polygon.js";import C from"../geometry/Extent.js";let P=class extends(m(d(o(y(c))))){constructor(t){super(t),this._trailPoints=[],this.capabilities=null,this.connectionInfo=null,this.controller=new b,this.copyright=null,this.coverage=null,this.description=null,this.frame=null,this.frameCount=null,this.initialExtent=null,this.playbackInfo=null,this.posterUrl=null,this.protocol="hls",this.qualities=null,this.sourceJSON=null,this.spatialReference=u.WGS84,this.telemetryDisplay=null,this.videoTimeExtent=null,this.title=null,this.type="video",this.url=null}initialize(){this.telemetryDisplay=new j({frameCenter:!0,frameOutline:!0,lineOfSight:!0,sensorLocation:!0,sensorTrail:!0}),this.addHandles([i((()=>this.metadata),(()=>this.notifyChange("telemetry"))),i((()=>this.telemetry?.sensorLocation),(t=>this._setSensorTrail(t)),s)])}load(t){const e=null!=t?t.signal:null;return this.addResolvingPromise(this._fetchService(e)),Promise.resolve(this)}get buffered(){return this.controller.buffered}readCapabilitiesFromService(t,e){return g(e)}get currentTime(){return this.controller.currentTime}get duration(){return this.controller.duration}get ended(){return this.controller.ended}get loop(){return this.controller.loop}set loop(t){this.controller.loop=t}get metadata(){return this.controller?.currentMetadata}get muted(){return this.controller.muted}set muted(t){this.controller.muted=t}get playbackRate(){return this.controller.rate}set playbackRate(t){this.controller.rate=t}get playbackUrl(){return this.connectionInfo&&this.protocol?this.connectionInfo[this.protocol]:null}get sourceUrl(){return this.controller.sourceUrl??""}set sourceUrl(t){this.controller.sourceUrl=t}get state(){return this.controller.state}get telemetry(){return O(this.metadata)}get waiting(){return this.controller.waiting}play(){this.controller.play()}pause(){this.controller.pause()}reset(){this.controller.reset()}setCurrentTime(t){if(!this.duration)return;const e=r(t,0,this.duration);this.controller.setCurrentTime(e)}getCurrentFrame(){}toGround(t,e){return this.controller?.cameraSensorModel?.metadataSupportsTransforms?this.controller.cameraSensorModel.transformImageToGeo(t,e):null}toVideo(t){if(!this.controller?.cameraSensorModel?.metadataSupportsTransforms)return null;const e=this.controller.cameraSensorModel.transformGeoToImage(t.x,t.y,t.z);return{x:e[0],y:e[1]}}async _fetchService(t){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:r,ssl:o}=await e(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters},signal:t});o&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=r,this.read(r,{origin:"service",url:this.parsedUrl})}_setSensorTrail(t){if(!t)return;const e=U(t,this._trailPoints);this._trailPoints=[...e];const r=this._trailPoints.map((t=>t.toArray())),o=new a({hasZ:t.hasZ,paths:[r]});this.telemetry.sensorTrail=o.clone()}};t([l({readOnly:!0})],P.prototype,"buffered",null),t([l({readOnly:!0,json:{read:!1}})],P.prototype,"capabilities",void 0),t([n("service","capabilities",["supportsCoverageQuery","supportsExportClip","supportsMensuration"])],P.prototype,"readCapabilitiesFromService",null),t([l({readOnly:!0,json:{read:{source:"connectionUrl"}}})],P.prototype,"connectionInfo",void 0),t([l()],P.prototype,"controller",void 0),t([l({type:String})],P.prototype,"copyright",void 0),t([l({type:x})],P.prototype,"coverage",void 0),t([l({type:Number})],P.prototype,"currentTime",null),t([l({type:String})],P.prototype,"description",void 0),t([l({type:Number})],P.prototype,"duration",null),t([l({type:Boolean})],P.prototype,"ended",null),t([l({type:S})],P.prototype,"frame",void 0),t([l({type:Number})],P.prototype,"frameCount",void 0),t([l({type:C})],P.prototype,"initialExtent",void 0),t([l({type:Boolean})],P.prototype,"loop",null),t([l({readOnly:!0})],P.prototype,"metadata",null),t([l({type:Boolean})],P.prototype,"muted",null),t([l({type:f})],P.prototype,"playbackInfo",void 0),t([l({type:Number})],P.prototype,"playbackRate",null),t([l({readOnly:!0})],P.prototype,"playbackUrl",null),t([l({readOnly:!0,json:{read:{source:"poster"}}})],P.prototype,"posterUrl",void 0),t([l({type:String})],P.prototype,"protocol",void 0),t([l({readOnly:!0})],P.prototype,"qualities",void 0),t([l()],P.prototype,"sourceJSON",void 0),t([l({type:String})],P.prototype,"sourceUrl",null),t([l()],P.prototype,"spatialReference",void 0),t([l({type:String})],P.prototype,"state",null),t([l({type:v})],P.prototype,"telemetry",null),t([l({type:j})],P.prototype,"telemetryDisplay",void 0),t([l({readOnly:!0,nonNullable:!1,json:{read:{reader:T,source:"time"}}})],P.prototype,"videoTimeExtent",void 0),t([l({readOnly:!0,json:{read:{source:"name"}}})],P.prototype,"title",void 0),t([l({readOnly:!0})],P.prototype,"type",void 0),t([l(h)],P.prototype,"url",void 0),t([l({readOnly:!0})],P.prototype,"waiting",null),P=t([p("esri.layers.VideoLayer")],P);const N=P;export{N as default};
