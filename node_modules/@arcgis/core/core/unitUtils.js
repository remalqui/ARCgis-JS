/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
import"./has.js";import{strict as e}from"./jsonMap.js";import{getReferenceEllipsoid as s}from"../geometry/ellipsoidUtils.js";import{earth as t,mars as r,moon as n}from"../geometry/support/Ellipsoid.js";import{isEarth as i,isWKIDFromMars as a,isWKIDFromMoon as u}from"../geometry/support/spatialReferenceUtils.js";import c from"../geometry/support/WKIDUnitConversion.js";const l=39.37,o=t.radius*Math.PI/200,m=/UNIT\[([^\]]+)\]\]$/i,f=c,d=/UNIT\[([^\]]+)\]/i,U=new Set([4261,4305,4807,4810,4811,4812,4816,4819,4821,4901,4902,37225,104139,104140]),q=e()({meter:"meters",foot:"feet",foot_us:"us-feet",foot_clarke:"clarke-feet",yard_clarke:"clarke-yards",link_clarke:"clarke-links",yard_sears:"sears-yards",foot_sears:"sears-feet",chain_sears:"sears-chains",chain_benoit_1895_b:"benoit-1895-b-chains",yard_indian:"indian-yards",yard_indian_1937:"indian-1937-yards",foot_gold_coast:"gold-coast-feet",chain_sears_1922_truncated:"sears-1922-truncated-chains","50_kilometers":"50-kilometers","150_kilometers":"150-kilometers"}),h=e=>e*e,B=e=>e*e*e,k={length:{baseUnit:"meters",units:{millimeters:{inBaseUnits:.001},centimeters:{inBaseUnits:.01},decimeters:{inBaseUnits:.1},meters:{inBaseUnits:1},kilometers:{inBaseUnits:1e3},inches:{inBaseUnits:.0254},feet:{inBaseUnits:.3048},yards:{inBaseUnits:.9144},miles:{inBaseUnits:1609.344},"nautical-miles":{inBaseUnits:1852},"us-feet":{inBaseUnits:1200/3937}}},area:{baseUnit:"square-meters",units:{"square-millimeters":{inBaseUnits:h(.001)},"square-centimeters":{inBaseUnits:h(.01)},"square-decimeters":{inBaseUnits:h(.1)},"square-meters":{inBaseUnits:1},"square-kilometers":{inBaseUnits:h(1e3)},"square-inches":{inBaseUnits:h(.0254)},"square-feet":{inBaseUnits:h(.3048)},"square-yards":{inBaseUnits:h(.9144)},"square-miles":{inBaseUnits:h(1609.344)},"square-us-feet":{inBaseUnits:h(1200/3937)},acres:{inBaseUnits:.0015625*h(1609.344)},ares:{inBaseUnits:100},hectares:{inBaseUnits:1e4}}},volume:{baseUnit:"liters",units:{liters:{inBaseUnits:1},"cubic-millimeters":{inBaseUnits:1e3*B(.001)},"cubic-centimeters":{inBaseUnits:1e3*B(.01)},"cubic-decimeters":{inBaseUnits:1e3*B(.1)},"cubic-meters":{inBaseUnits:1e3},"cubic-kilometers":{inBaseUnits:1e3*B(1e3)},"cubic-inches":{inBaseUnits:1e3*B(.0254)},"cubic-feet":{inBaseUnits:1e3*B(.3048)},"cubic-yards":{inBaseUnits:1e3*B(.9144)},"cubic-miles":{inBaseUnits:1e3*B(1609.344)}}},angle:{baseUnit:"radians",units:{radians:{inBaseUnits:1},degrees:{inBaseUnits:Math.PI/180}}}},b=(()=>{const e={};for(const s in k)for(const t in k[s].units)e[t]=s;return e})();function p(e,s,t){return e*k[t].units[s].inBaseUnits}function y(e,s,t){return e/k[t].units[s].inBaseUnits}const _=["metric","imperial","square-inches","square-feet","square-yards","square-miles","square-us-feet","square-meters","square-kilometers","acres","ares","hectares"],g=["metric","imperial","inches","feet","yards","miles","nautical-miles","us-feet","meters","kilometers"],M=new Map([["meters","square-meters"],["feet","square-feet"],["us-feet","square-us-feet"]]);function w(e){return"imperial"===e||"metric"===e}function S(e){const s=b[e];if(!s)throw new Error("unknown type");return s}function D(e){return k[e].baseUnit}function I(e){return D(S(e))}function P(e,s=null){return s=s||S(e),k[s].baseUnit===e}function j(e,s,t){if(s===t)return e;const r=S(s);if(r!==S(t))throw new Error("incompatible units");const n=P(s,r)?e:p(e,s,r);return P(t,r)?n:y(n,t,r)}function C(e,s,t){switch(t){case"metric":return v(e,s);case"imperial":return F(e,s);default:return t}}function x(e,s,t){switch(t){case"metric":return E(e,s);case"imperial":return O(e,s);default:return t}}function N(e,s,t){switch(t){case"metric":return J(e,s);case"imperial":return K(e,s);default:return t}}function v(e,s){const t=j(e,s,"meters");return Math.abs(t)<3e3?"meters":"kilometers"}function E(e,s){const t=j(e,s,"meters");return Math.abs(t)<1e5?"meters":"kilometers"}function F(e,s){const t=j(e,s,"feet");return Math.abs(t)<1e3?"feet":"miles"}function O(e,s){const t=j(e,s,"feet");return Math.abs(t)<1e5?"feet":"miles"}function J(e,s){const t=j(e,s,"square-meters");return Math.abs(t)<3e6?"square-meters":"square-kilometers"}function K(e,s){const t=j(e,s,"square-feet");return Math.abs(t)<1e6?"square-feet":"square-miles"}function R(e,s,t){return j(e,s,"meters")/(t*Math.PI/180)}function A(e){return q.fromJSON(e.toLowerCase())||null}function G(e){return q.toJSON(e)||null}function T(e){if(null!=e&&!i(e))return 1;const s=H(e);return s>1e5?1:s}function Y(e){return H(e)>=s(e).metersPerDegree?"meters":Q(e)}function H(e,s=t.metersPerDegree){return L(e,!0)??s}function L(e,s=!1){const t=null!=e?e.wkid:null,i=null!=e?e.wkt:null;let c=null;if(t){if(a(t))return r.metersPerDegree;if(u(t))return n.metersPerDegree;c=f.values[f[t]],!c&&s&&U.has(t)&&(c=o)}else i&&(se(i)?c=$(m.exec(i),c):ee(i)&&(c=$(d.exec(i),c)));return c}function W(e){return e.isGeographic?1:H(e)}function $(e,s){return e&&e[1]?z(e[1]):s}function z(e){return parseFloat(e.split(",")[1])}function Q(e){const s=null!=e?e.wkid:null,t=null!=e?e.wkt:null;let r=null;if(s)r=f.units[f[s]];else if(t){const e=se(t)?m:ee(t)?d:null;if(e){const s=e.exec(t);s&&s[1]&&(r=re(s[1]))}}return null!=r?A(r):null}function V(e){const s=Q(e);return null!=s&&g.includes(s)?s:null}function X(e){const s=Y(e);return null!=s&&g.includes(s)?s:null}function Z(e){const s=Q(e);return null==s?null:M.get(s)}function ee(e){return/^GEOCCS/i.test(e)}function se(e){return/^PROJCS/i.test(e)}const te=1e-7;function re(e){const s=/[\\"\\']{1}([^\\"\\']+)/.exec(e);let t=s&&s[1];if(!t||!f.units.includes(t)){const s=z(e);t=null;const r=f.values;for(let e=0;e<r.length;++e)if(Math.abs(s-r[e])<te){t=f.units[e];break}}return t}function ne(e){const s=Q(e);if(null==s)return null;switch(s){case"feet":case"us-feet":case"clarke-feet":case"clarke-yards":case"clarke-links":case"sears-yards":case"sears-feet":case"sears-chains":case"benoit-1895-b-chains":case"indian-yards":case"indian-1937-yards":case"gold-coast-feet":case"sears-1922-truncated-chains":return"imperial";case"50-kilometers":case"150-kilometers":case"meters":return"metric"}return null}const ie={esriAcres:"acres",esriAres:"ares",esriHectares:"hectares",esriSquareCentimeters:"square-centimeters",esriSquareDecimeters:"square-decimeters",esriSquareFeet:"square-feet",esriSquareInches:"square-inches",esriSquareKilometers:"square-kilometers",esriSquareMeters:"square-meters",esriSquareMiles:"square-miles",esriSquareMillimeters:"square-millimeters",esriSquareUsFeet:"square-us-feet",esriSquareYards:"square-yards"},ae={esriCentimeters:"centimeters",esriDecimeters:"decimeters",esriFeet:"feet",esriInches:"inches",esriKilometers:"kilometers",esriMeters:"meters",esriMiles:"miles",esriMillimeters:"millimeters",esriNauticalMiles:"nautical-miles",esriYards:"yards"},ue={esriDUDecimalDegrees:"degrees",esriDURadians:"radians"},ce=e()(ie),le=e()(ae),oe=e()(ue);export{oe as angleUnitsJSONMap,Z as areaUnitFromSpatialReference,ce as areaUnitsJSONMap,I as baseUnitForUnit,D as baseUnitForUnitType,j as convertUnit,ne as getDefaultUnitSystem,W as getMetersPerCartesianUnitForSR,L as getMetersPerUnit,H as getMetersPerUnitForSR,T as getMetersPerVerticalUnitForSR,Q as getUnitString,Y as getVerticalUnitStringForSR,l as inchesPerMeter,P as isBaseUnit,w as isMeasurementSystem,se as isProjectedWKT,R as lengthToDegrees,V as lengthUnitFromSpatialReference,le as lengthUnitsJSONMap,_ as measurementAreaUnits,g as measurementLengthUnits,N as preferredAreaUnit,K as preferredImperialAreaUnit,F as preferredImperialLengthUnit,O as preferredImperialVerticalLengthUnit,C as preferredLengthUnit,J as preferredMetricAreaUnit,v as preferredMetricLengthUnit,E as preferredMetricVerticalLengthUnit,x as preferredVerticalLengthUnit,A as unitFromRESTJSON,G as unitToRESTJSON,S as unitType,X as verticalLengthUnitFromSpatialReference};
