/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
import{_ as r}from"../../../chunks/tslib.es6.js";import{Clonable as e}from"../../../core/Clonable.js";import o from"../../../core/Collection.js";import{property as t}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/accessorSupport/ensureType.js";import"../../../core/arrayUtils.js";import"../../../core/has.js";import{subclass as s}from"../../../core/accessorSupport/decorators/subclass.js";import{isDisplayExternal as i,externalSourcesAreEqual as l,externalIsOnService as c}from"./External.js";let p=class extends e{constructor(){super(),this.externalSources=new o,this._explicitDisplaySource=null}get displaySource(){return this._explicitDisplaySource??this._implicitDisplaySource}set displaySource(r){if(null!=r&&!i(r))throw new Error("Cannot use this source for display: it is not in a supported format.");this._explicitDisplaySource=r,r&&this.externalSources.every((e=>!l(e,r)))&&this.externalSources.add(r)}clearSources(){this.displaySource=null,this.externalSources.removeAll()}getExternalSourcesOnService(r){return this.externalSources.items.filter((e=>c(e,r)))}get _implicitDisplaySource(){return this.externalSources.find(i)}};r([t()],p.prototype,"externalSources",void 0),r([t()],p.prototype,"displaySource",null),r([t()],p.prototype,"_implicitDisplaySource",null),r([t()],p.prototype,"_explicitDisplaySource",void 0),p=r([s("esri.geometry.support.meshUtils.Metadata")],p);export{p as Metadata};
