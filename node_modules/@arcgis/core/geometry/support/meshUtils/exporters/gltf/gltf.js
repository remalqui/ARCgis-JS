/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
import e from"../../../../../core/Logger.js";import{getOrCreateMapValue as t}from"../../../../../core/MapUtils.js";import{deg2rad as s}from"../../../../../core/mathUtils.js";import{j as r}from"../../../../../chunks/quat.js";import{I as i,b as a}from"../../../../../chunks/quatf64.js";import{k as o}from"../../../../../chunks/vec3.js";import{Z as n,a as l,O as c}from"../../../../../chunks/vec3f64.js";import h from"../../../MeshGeoreferencedRelativeVertexSpace.js";import u from"../../../MeshGeoreferencedVertexSpace.js";import f from"../../../MeshMaterialMetallicRoughness.js";import{ungeoreferenceByTransform as m}from"../../georeference.js";import{Buffer as p}from"./buffer.js";import{computeOrigin as d,smoothNormals as g}from"./geometry.js";import{BufferOutputType as _,ImageOutputType as x,AttributeType as T,TargetBuffer as R,AlphaMode as A}from"./types.js";import{imageToArrayBuffer as b,imageToDataURI as E}from"./imageutils.js";import{isEncodedMeshTexture as M}from"../../../../../views/3d/glTF/internal/resourceUtils.js";import{DataType as O,TextureWrapMode as w}from"../../../../../views/webgl/enums.js";const I=e.getLogger("gltf");class N{constructor(e,t,s){this.params={},this._materialMap=new Array,this._imageMap=new Map,this._textureMap=new Map,this.gltf={asset:{version:"2.0",copyright:e.copyright,generator:e.generator},extras:{options:t,binChunkBuffer:null,promises:[]}},s&&(this.params=s),this._addScenes(e)}_addScenes(e){this.gltf.scene=e.defaultScene;const t=this.gltf.extras,s=t.options.bufferOutputType===_.GLB||t.options.imageOutputType===x.GLB;s&&(t.binChunkBuffer=new p(this.gltf)),e.forEachScene((e=>{this._addScene(e)})),s&&t.binChunkBuffer.finalize()}_addScene(e){this.gltf.scenes||(this.gltf.scenes=[]);const t={};e.name&&(t.name=e.name),e.forEachNode((e=>{t.nodes||(t.nodes=[]);const s=this._addNode(e);t.nodes.push(s)})),this.gltf.scenes.push(t)}_addNode(e){this.gltf.nodes||(this.gltf.nodes=[]);const t={};e.name&&(t.name=e.name);const s=e.translation;o(s,n)||(t.translation=l(s));const h=e.rotation;r(h,i)||(t.rotation=a(h));const u=e.scale;o(u,c)||(t.scale=l(u)),e.mesh&&e.mesh.vertexAttributes.position?t.mesh=this._addMesh(e.mesh):e.forEachNode((e=>{t.children||(t.children=[]);const s=this._addNode(e);t.children.push(s)}));const f=this.gltf.nodes.length;return this.gltf.nodes.push(t),f}_addMesh(e){this.gltf.meshes||(this.gltf.meshes=[]);const t={primitives:[]},s=this.gltf.extras,r=s.options.bufferOutputType===_.GLB;let i;i=r?s.binChunkBuffer:new p(this.gltf),this.params.origin||(this.params.origin=d(e));const{ignoreLocalTransform:a}=this.params,o=a?null:e.transform,{vertexSpace:n}=e,c=a?n.isRelative?new h({origin:l(n.origin)}):new u:n,f=m(e.vertexAttributes,c,o,this.params.origin,{geographic:this.params.geographic,unit:"meters"});g(e,f),this._flipYZAxis(f);const x=i.addBufferView(O.FLOAT,T.VEC3,R.ARRAY_BUFFER);let A,b,E,M;f.normal&&(A=i.addBufferView(O.FLOAT,T.VEC3,R.ARRAY_BUFFER)),e.vertexAttributes.uv&&(b=i.addBufferView(O.FLOAT,T.VEC2,R.ARRAY_BUFFER)),f.tangent&&(E=i.addBufferView(O.FLOAT,T.VEC4,R.ARRAY_BUFFER)),e.vertexAttributes.color&&(M=i.addBufferView(O.UNSIGNED_BYTE,T.VEC4,R.ARRAY_BUFFER)),x.startAccessor("POSITION"),A&&A.startAccessor("NORMAL"),b&&b.startAccessor("TEXCOORD_0"),E&&E.startAccessor("TANGENT"),M&&M.startAccessor("COLOR_0");const w=f.position.length/3,{position:I,normal:N,tangent:B}=f,{color:C,uv:v}=e.vertexAttributes;for(let l=0;l<w;++l)x.push(I[3*l]),x.push(I[3*l+1]),x.push(I[3*l+2]),A&&null!=N&&(A.push(N[3*l]),A.push(N[3*l+1]),A.push(N[3*l+2])),b&&null!=v&&(b.push(v[2*l]),b.push(v[2*l+1])),E&&null!=B&&(E.push(B[4*l]),E.push(B[4*l+1]),E.push(B[4*l+2]),E.push(B[4*l+3])),M&&null!=C&&(M.push(C[4*l]),M.push(C[4*l+1]),M.push(C[4*l+2]),M.push(C[4*l+3]));const S=x.endAccessor(),L=this._addAccessor(x.index,S);let F,y,k,V,j;if(A){const e=A.endAccessor();F=this._addAccessor(A.index,e)}if(b){const e=b.endAccessor();y=this._addAccessor(b.index,e)}if(E){const e=E.endAccessor();k=this._addAccessor(E.index,e)}if(M){const e=M.endAccessor();V=this._addAccessor(M.index,e)}e.components&&e.components.length>0&&e.components[0].faces?(j=i.addBufferView(O.UNSIGNED_INT,T.SCALAR,R.ELEMENT_ARRAY_BUFFER),this._addMeshVertexIndexed(j,e.components,t,L,F,y,k,V)):this._addMeshVertexNonIndexed(e.components,t,L,F,y,k,V),x.finalize(),A&&A.finalize(),b&&b.finalize(),E&&E.finalize(),j&&j.finalize(),M&&M.finalize(),r||i.finalize();const D=this.gltf.meshes.length;return this.gltf.meshes.push(t),D}_flipYZAxis({position:e,normal:t,tangent:s}){this._flipYZBuffer(e,3),this._flipYZBuffer(t,3),this._flipYZBuffer(s,4)}_flipYZBuffer(e,t){if(null!=e)for(let s=1,r=2;s<e.length;s+=t,r+=t){const t=e[s],i=e[r];e[s]=i,e[r]=-t}}_addMaterial(e){if(null===e)return;const t=this._materialMap.indexOf(e);if(-1!==t)return t;this.gltf.materials||(this.gltf.materials=[]);const s={};switch(e.alphaMode){case"mask":s.alphaMode=A.MASK;break;case"auto":case"blend":s.alphaMode=A.BLEND}.5!==e.alphaCutoff&&(s.alphaCutoff=e.alphaCutoff),e.doubleSided&&(s.doubleSided=e.doubleSided),s.pbrMetallicRoughness={};const r=e=>e**2.1,i=e=>{const t=e.toRgba();return t[0]=r(t[0]/255),t[1]=r(t[1]/255),t[2]=r(t[2]/255),t};if(null!=e.color&&(s.pbrMetallicRoughness.baseColorFactor=i(e.color)),null!=e.colorTexture&&(s.pbrMetallicRoughness.baseColorTexture=this._createTextureInfo(e.colorTexture,e.colorTextureTransform)),null!=e.normalTexture&&(s.normalTexture=this._createTextureInfo(e.normalTexture,e.normalTextureTransform)),e instanceof f){if(null!=e.emissiveTexture&&(s.emissiveTexture=this._createTextureInfo(e.emissiveTexture,e.emissiveTextureTransform)),null!=e.emissiveColor){const t=i(e.emissiveColor);s.emissiveFactor=[t[0],t[1],t[2]]}null!=e.occlusionTexture&&(s.occlusionTexture=this._createTextureInfo(e.occlusionTexture,e.occlusionTextureTransform)),null!=e.metallicRoughnessTexture&&(s.pbrMetallicRoughness.metallicRoughnessTexture=this._createTextureInfo(e.metallicRoughnessTexture,e.metallicRoughnessTextureTransform)),s.pbrMetallicRoughness.metallicFactor=e.metallic,s.pbrMetallicRoughness.roughnessFactor=e.roughness}else s.pbrMetallicRoughness.metallicFactor=1,s.pbrMetallicRoughness.roughnessFactor=1,I.warnOnce("Meshes exported to GLTF without MeshMaterialMetallicRoughness material will appear different when imported back.");const a=this.gltf.materials.length;return this.gltf.materials.push(s),this._materialMap.push(e),a}_createTextureInfo(e,t){const r={index:this._addTexture(e)};return t?(r.extensions||(r.extensions={}),r.extensions.KHR_texture_transform={scale:t.scale,offset:t.offset,rotation:s(t.rotation)},r):r}_addTexture(e){const s=this.gltf.textures??[];return this.gltf.textures=s,t(this._textureMap,e,(()=>{const t={sampler:this._addSampler(e),source:this._addImage(e)},r=s.length;return s.push(t),r}))}_addImage(e){const t=this._imageMap.get(e);if(null!=t)return t;this.gltf.images||(this.gltf.images=[]);const s={};if(e.url)s.uri=e.url;else{const t=e.data;s.extras=t;for(let e=0;e<this.gltf.images.length;++e)if(t===this.gltf.images[e].extras)return e;const r=this.gltf.extras;switch(r.options.imageOutputType){case x.GLB:{const e=r.binChunkBuffer.addBufferView(O.UNSIGNED_BYTE,T.SCALAR);if(M(t))null!=t.data&&e.writeOutToBuffer(t.data,0);else{const r=b(t).then((({data:e,type:t})=>(s.mimeType=t,e)));e.writeAsync(r).then((()=>{e.finalize()}))}s.bufferView=e.index;break}case x.DataURI:if(M(t)){I.warnOnce("Image export for basis compressed textures not available.");break}s.uri=E(t);break;default:if(M(t)){I.warnOnce("Image export for basis compressed textures not available.");break}r.promises.push(b(t).then((({data:e,type:t})=>{s.uri=e,s.mimeType=t})))}}const r=this.gltf.images.length;return this.gltf.images.push(s),this._imageMap.set(e,r),r}_addSampler(e){this.gltf.samplers||(this.gltf.samplers=[]);let t=w.REPEAT,s=w.REPEAT;if("string"==typeof e.wrap)switch(e.wrap){case"clamp":t=w.CLAMP_TO_EDGE,s=w.CLAMP_TO_EDGE;break;case"mirror":t=w.MIRRORED_REPEAT,s=w.MIRRORED_REPEAT}else{switch(e.wrap.vertical){case"clamp":s=w.CLAMP_TO_EDGE;break;case"mirror":s=w.MIRRORED_REPEAT}switch(e.wrap.horizontal){case"clamp":t=w.CLAMP_TO_EDGE;break;case"mirror":t=w.MIRRORED_REPEAT}}const r={wrapS:t,wrapT:s};for(let a=0;a<this.gltf.samplers.length;++a)if(JSON.stringify(r)===JSON.stringify(this.gltf.samplers[a]))return a;const i=this.gltf.samplers.length;return this.gltf.samplers.push(r),i}_addAccessor(e,t){this.gltf.accessors||(this.gltf.accessors=[]);const s={bufferView:e,byteOffset:t.byteOffset,componentType:t.componentType,count:t.count,type:t.type,min:t.min,max:t.max,name:t.name};t.normalized&&(s.normalized=!0);const r=this.gltf.accessors.length;return this.gltf.accessors.push(s),r}_addMeshVertexIndexed(e,t,s,r,i,a,o,n){for(const l of t){e.startAccessor("INDICES");for(let s=0;s<l.faces.length;++s)e.push(l.faces[s]);const t=e.endAccessor(),c={attributes:{POSITION:r},indices:this._addAccessor(e.index,t),material:this._addMaterial(l.material)};i&&"flat"!==l.shading&&(c.attributes.NORMAL=i),a&&(c.attributes.TEXCOORD_0=a),o&&"flat"!==l.shading&&(c.attributes.TANGENT=o),n&&(c.attributes.COLOR_0=n),s.primitives.push(c)}}_addMeshVertexNonIndexed(e,t,s,r,i,a,o){const n={attributes:{POSITION:s}};r&&(n.attributes.NORMAL=r),i&&(n.attributes.TEXCOORD_0=i),a&&(n.attributes.TANGENT=a),o&&(n.attributes.COLOR_0=o),e&&(n.material=this._addMaterial(e[0].material)),t.primitives.push(n)}}export{N as GLTF};
