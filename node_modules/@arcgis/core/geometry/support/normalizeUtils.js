/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
import e from"../../config.js";import t from"../../core/Error.js";import n from"../../core/Logger.js";import o from"../Polygon.js";import s from"../Polyline.js";import{getGeometryParts as r,cutParams as i,offsetMagnitude as l,updatePolyGeometry as f}from"./normalizeUtilsCommon.js";import{getInfo as c}from"./spatialReferenceUtils.js";import{geographicToWebMercator as p,webMercatorToGeographic as u}from"./webMercatorUtils.js";import{cut as a}from"../../rest/geometryService/cut.js";import{simplify as h}from"../../rest/geometryService/simplify.js";const m=n.getLogger("esri.geometry.support.normalizeUtils");function g(e){return"polygon"===e.type}function y(e){return"polygon"===e[0].type}function x(e){return"polyline"===e[0].type}function d(e){const t=[];let n=0,o=0;for(let s=0;s<e.length;s++){const r=e[s];let i=null;for(let e=0;e<r.length;e++)i=r[e],t.push(i),0===e?(n=i[0],o=n):(n=Math.min(n,i[0]),o=Math.max(o,i[0]));i&&t.push([(n+o)/2,0])}return t}function w(e,n){if(!(e instanceof s||e instanceof o)){const e="straightLineDensify: the input geometry is neither polyline nor polygon";throw m.error(e),new t(e)}const i=r(e),l=[];for(const t of i){const e=[];l.push(e),e.push([t[0][0],t[0][1]]);for(let o=0;o<t.length-1;o++){const s=t[o][0],r=t[o][1],i=t[o+1][0],l=t[o+1][1],f=Math.sqrt((i-s)*(i-s)+(l-r)*(l-r)),c=(l-r)/f,p=(i-s)/f,u=f/n;if(u>1){for(let l=1;l<=u-1;l++){const t=l*n,o=p*t+s,i=c*t+r;e.push([o,i])}const t=(f+Math.floor(u-1)*n)/2,o=p*t+s,i=c*t+r;e.push([o,i])}e.push([i,l])}}return g(e)?new o({rings:l,spatialReference:e.spatialReference}):new s({paths:l,spatialReference:e.spatialReference})}function j(e,t,n){if(t){const t=w(e,1e6);e=u(t,!0)}return n&&(e=f(e,n)),e}function M(e,t,n){if(Array.isArray(e)){const o=e[0];if(o>t){const n=l(o,t);e[0]=o+n*(-2*t)}else if(o<n){const t=l(o,n);e[0]=o+t*(-2*n)}}else{const o=e.x;if(o>t){const n=l(o,t);e=e.clone().offset(n*(-2*t),0)}else if(o<n){const t=l(o,n);e=e.clone().offset(t*(-2*n),0)}}return e}function R(e,t){let n=-1;for(let o=0;o<t.cutIndexes.length;o++){const s=t.cutIndexes[o],i=t.geometries[o],f=r(i);for(let e=0;e<f.length;e++){const t=f[e];t.some((n=>{if(n[0]<180)return!0;{let n=0;for(let e=0;e<t.length;e++){const o=t[e][0];n=o>n?o:n}n=Number(n.toFixed(9));const o=-360*l(n,180);for(let s=0;s<t.length;s++){const t=i.getPoint(e,s);i.setPoint(e,s,t.clone().offset(o,0))}return!0}}))}if(s===n){if(y(e))for(const t of r(i))e[s]=e[s].addRing(t);else if(x(e))for(const t of r(i))e[s]=e[s].addPath(t)}else n=s,e[s]=i}return e}async function b(t,n,r){if(!Array.isArray(t))return b([t],n);n&&"string"!=typeof n&&m.warn("normalizeCentralMeridian()","The url object is deprecated, use the url string instead");const u="string"==typeof n?n:n?.url??e.geometryServiceUrl;let g,y,x,d,w,P,v,L,U=0;const z=[],A=[];for(const e of t)if(null!=e)if(g||(g=e.spatialReference,y=c(g),x=g.isWebMercator,P=x?102100:4326,d=i[P].maxX,w=i[P].minX,v=i[P].plus180Line,L=i[P].minus180Line),y)if("mesh"===e.type)A.push(e);else if("point"===e.type)A.push(M(e.clone(),d,w));else if("multipoint"===e.type){const t=e.clone();t.points=t.points.map((e=>M(e,d,w))),A.push(t)}else if("extent"===e.type){const t=e.clone()._normalize(!1,!1,y);A.push(t.rings?new o(t):t)}else if(e.extent){const t=e.extent,n=l(t.xmin,w)*(2*d);let o=0===n?e.clone():f(e.clone(),n);t.offset(n,0),t.intersects(v)&&t.xmax!==d?(U=t.xmax>U?t.xmax:U,o=j(o,x),z.push(o),A.push("cut")):t.intersects(L)&&t.xmin!==w?(U=t.xmax*(2*d)>U?t.xmax*(2*d):U,o=j(o,x,360),z.push(o),A.push("cut")):A.push(o)}else A.push(e.clone());else A.push(e);else A.push(e);let S=l(U,d),k=-90;const C=S,I=new s;for(;S>0;){const e=360*S-180;I.addPath([[e,k],[e,-1*k]]),k*=-1,S--}if(z.length>0&&C>0){const e=R(z,await a(u,z,I,r)),n=[],o=[];for(let r=0;r<A.length;r++){const s=A[r];if("cut"!==s)o.push(s);else{const s=e.shift(),i=t[r];null!=i&&"polygon"===i.type&&i.rings&&i.rings.length>1&&s.rings.length>=i.rings.length?(n.push(s),o.push("simplify")):o.push(x?p(s):s)}}if(!n.length)return o;const s=await h(u,n,r),i=[];for(let t=0;t<o.length;t++){const e=o[t];"simplify"!==e?i.push(e):i.push(x?p(s.shift()):s.shift())}return i}const X=[];for(let e=0;e<A.length;e++){const t=A[e];if("cut"!==t)X.push(t);else{const e=z.shift();X.push(!0===x?p(e):e)}}return X}function P(e){if(!e)return null;const t=e.extent;if(!t)return null;const n=e.spatialReference&&c(e.spatialReference);if(!n)return t;const[o,s]=n.valid,r=2*s,{width:i}=t;let l,{xmin:f,xmax:p}=t;if([f,p]=[p,f],"extent"===e.type||0===i||i<=s||i>r||f<o||p>s)return t;switch(e.type){case"polygon":if(!(e.rings.length>1))return t;l=d(e.rings);break;case"polyline":if(!(e.paths.length>1))return t;l=d(e.paths);break;case"multipoint":l=e.points}const u=t.clone();for(let c=0;c<l.length;c++){let e=l[c][0];e<0?(e+=s,p=Math.max(e,p)):(e-=s,f=Math.min(e,f))}return u.xmin=f,u.xmax=p,u.width<i?(u.xmin-=s,u.xmax-=s,u):t}function v(e,t){const n=c(t);if(n){const[t,o]=n.valid,s=o-t;if(e<t)for(;e<t;)e+=s;if(e>o)for(;e>o;)e-=s}return e}export{P as getDenormalizedExtent,b as normalizeCentralMeridian,v as normalizeMapX,w as straightLineDensify};
