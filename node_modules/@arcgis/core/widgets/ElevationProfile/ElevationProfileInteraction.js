/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
import{_ as t}from"../../chunks/tslib.es6.js";import e from"../../Graphic.js";import i from"../../core/Accessor.js";import{createTask as s}from"../../core/asyncUtils.js";import o from"../../core/Handles.js";import{makeHandle as n}from"../../core/handleUtils.js";import{destroyMaybe as a,applySome as r,abortMaybe as l}from"../../core/maybe.js";import{ignoreAbortErrors as h,throwIfAborted as c}from"../../core/promiseUtils.js";import{watch as p,syncAndInitial as d,when as u}from"../../core/reactiveUtils.js";import{property as _}from"../../core/accessorSupport/decorators/property.js";import"../../core/accessorSupport/ensureType.js";import"../../core/arrayUtils.js";import"../../core/has.js";import{subclass as m}from"../../core/accessorSupport/decorators/subclass.js";import g from"../../layers/GraphicsLayer.js";import v from"../../symbols/CIMSymbol.js";import y from"../../symbols/SimpleLineSymbol.js";import{isPolyline as I}from"./support/geometryUtils.js";import S from"../Sketch/SketchViewModel.js";var f,b;function k(t){return"2d"===t?new v({data:{type:"CIMSymbolReference",symbol:{type:"CIMLineSymbol",symbolLayers:[{type:"CIMSolidStroke",effects:[{type:"CIMGeometricEffectDashes",dashTemplate:[5,4],lineDashEnding:"FullGap",controlPointEnding:"NoConstraint"}],enable:!0,capStyle:"Butt",joinStyle:"Round",width:1.5,color:[0,0,0,255]},{type:"CIMSolidStroke",enable:!0,capStyle:"Butt",joinStyle:"Round",width:1.5,color:[255,255,255,255]}]}}}):new y({color:[0,0,0,0]})}!function(t){t.Ready="ready",t.Creating="creating",t.Reshaping="reshaping",t.ReshapingDisabled="rehsaping-disabled",t.Selecting="selecting",t.Selected="selected"}(f||(f={})),function(t){t.View="view",t.Main="main",t.Interaction="interaction"}(b||(b={}));let P=class extends i{constructor(t){super(t),this.state=f.Ready,this._handles=new o,this._pendingStartOptions=null,this._previousInputInfo=null,this._shouldRemoveLastPoint=!1,this._sketchedGraphics=new WeakSet,this._creationToolPromise=null,this._updateToolPromise=null,this._updateDisabled=!1}initialize(){this._handles.add(p((()=>({view:this.tool.viewModel.view,visible:this.tool.visible})),(({view:t,visible:e})=>{null!=t&&e?this._attach(t):this._detach()}),d),b.View)}destroy(){this._detach(),this._handles=a(this._handles)}get canStopCreating(){const t=this._geometry,e=this._shouldRemoveLastPoint?3:2;return I(t)&&t.paths.length>0&&t.paths[0].length>=e}get _input(){return this.tool.viewModel.input}set _input(t){this.tool.viewModel.input=t}get _geometry(){return r(this._input,(t=>t.geometry))}get _visibleAndEditable(){return this.tool.visible&&this.tool.editable}get _view(){return this.tool.viewModel.view}get test(){return{sketchVM:this._sketchVM,toolPromise:Promise.all([this._creationToolPromise??Promise.resolve(),this._updateToolPromise??Promise.resolve()])}}start(t={mode:"sketch"}){if(!this.tool.editable)return;const e=this._view;if(null!=e&&e.ready)switch(this._pendingStartOptions=null,this._stopInteraction(),null==this._previousInputInfo&&this._storePreviousInput(this._input),this._setSketchedGraphic(null),t.mode){case"sketch":this._set("state",f.Creating),this._startCreationInteraction();break;case"select":this._set("state",f.Selecting),this._startSelectionInteraction()}else this._pendingStartOptions=t}stop(){this._pendingStartOptions=null,this._stopInteractionAndUpdate(),this._clearPreviousInput()}cancel(){this._pendingStartOptions=null,this._stopInteractionAndUpdate(),this._restorePreviousInput()}clear(){this._stopInteractionAndUpdate(),this._set("state",f.Ready),this._clearPreviousInput(),this._input=null,this._pendingStartOptions=null}isSketchedGraphic(t){return null!=t&&this._sketchedGraphics.has(t)}_attach(t){this._detach();const e={mode:"3d"===t.type?"relative-to-ground":"on-the-ground",offset:null};this._graphicsLayer=new g({listMode:"hide",internal:!0,elevationInfo:e});const i=k(t.type);this._sketchVM=new S({layer:this._graphicsLayer,view:t,defaultCreateOptions:{mode:"click",hasZ:!1},updateOnGraphicClick:!1,defaultUpdateOptions:{reshapeOptions:{shapeOperation:"none"},enableRotation:!1,enableScaling:!1,enableMoveAllGraphics:!1,enableZ:!1,multipleSelectionEnabled:!1,toggleToolOnClick:!1,tool:"reshape"},polylineSymbol:i,activeLineSymbol:i}),this._handles.add([u((()=>t.ready),(()=>r(this._pendingStartOptions,(t=>this.start(t)))),d),p((()=>[this._input,this._visibleAndEditable]),(()=>this._update()),d),p((()=>({map:t.map,graphicsLayer:this._graphicsLayer})),(({map:t,graphicsLayer:e})=>{null!=t&&null!=e&&t.add(e),this._update()}),d)],b.Main)}_detach(){this._handles.remove(b.Main),this._sketchVM=a(this._sketchVM),this._creationToolPromise=null,this._updateToolPromise=null;const t=r(this._view,(t=>t.map)),e=this._graphicsLayer;null!=t&&null!=e&&t.remove(e),this._graphicsLayer=a(this._graphicsLayer),this._shouldRemoveLastPoint=!1,this._set("state",f.Ready)}_startCreationInteraction(){this._stopInteractionAndUpdate();const t=this._view,i=this._sketchVM;if(null==t||null==i)return;this._shouldRemoveLastPoint=!1;const s=i.on("create",(t=>{const e=t.graphic;switch(t.state){case"complete":this._shouldRemoveLastPoint=!1,this._setSketchedGraphic(e),this._stopInteractionAndUpdate(),this._clearPreviousInput();break;case"cancel":this.cancel();break;case"active":this._setSketchedGraphic(e),"cursor-update"===t.toolEventInfo?.type&&(this._shouldRemoveLastPoint=!0);break;case"start":this._setSketchedGraphic(e)}})),o=()=>{s.remove();const t=this.canStopCreating,o=r(this._geometry,(t=>t.clone()));i.cancel(),this._creationToolPromise=null,null!=o&&t?this._shouldRemoveLastPoint&&this._setSketchedGraphic(new e({geometry:w(o)})):this._input=null};this._handles.remove(b.Interaction),this._handles.add(n(o),b.Interaction),this._creationToolPromise=h(i.create("polyline"))}_startReshapeInteraction(){this._stopInteraction();const t=this._view,e=this._sketchVM;if(null==t||null==e)return;const i=e.on("update",(t=>{const e=t.graphics[0];switch(t.state){case"complete":this._setSketchedGraphic(e),this._stopInteractionAndUpdate(),this._clearPreviousInput();break;case"active":case"start":this._setSketchedGraphic(e)}})),s=()=>{i.remove(),e.cancel(),this._updateToolPromise=null};this._handles.remove(b.Interaction),this._handles.add(n(s),b.Interaction),r(this._input,(t=>{t.visible=!0,this._updateToolPromise=h(e.update(t,{tool:"reshape"}))}))}_startSelectionInteraction(){this._stopInteraction();const t=this._view;if(null==t)return;const e=t.cursor,i=n((()=>t.cursor=e));t.cursor="crosshair",t.closePopup();let o=null;const a=n((()=>l(o))),r=t.on("immediate-click",(e=>{e.preventDefault(),e.stopPropagation(),l(o),o=s((async i=>{const{results:s}=await t.hitTest(e);c(i);const o=s.filter((t=>"graphic"===t.type&&null!=t.graphic)).map((t=>t.graphic)).find((t=>null!=t.geometry&&"polyline"===t.geometry.type));o&&(this._input=o,this._clearPreviousInput(),this._stopInteractionAndUpdate())}))})),h=t.on("key-down",(t=>{"Escape"===t.key&&this.cancel()}));this._handles.remove(b.Interaction),this._handles.add([r,h,a,i],b.Interaction),t.ready&&t.focus()}_stopInteraction(){this._handles.remove(b.Interaction)}_stopInteractionAndUpdate(){this._handles.has(b.Interaction)&&(this._updateDisabled=!0,this._stopInteraction(),this._updateDisabled=!1,this._triggerUpdate())}_triggerUpdate(){this._set("state",f.Ready),this._update()}_update(){if(this._updateDisabled)return;const t=this.state;if(t!==f.Selecting){if(this._visibleAndEditable){if(t===f.Creating||t===f.Reshaping&&this.isSketchedGraphic(this._input))return}else this.cancel();this._set("state",this._getNextState()),this._updateVisuals()}else this.stop()}_getNextState(){return null==this._input?f.Ready:this.isSketchedGraphic(this._input)?this.state===f.Creating?f.Creating:this._visibleAndEditable?f.Reshaping:f.ReshapingDisabled:f.Selected}_updateVisuals(){switch(this.state){case f.Creating:break;case f.Reshaping:this._startReshapeInteraction();break;case f.ReshapingDisabled:{this._stopInteractionAndUpdate();const t=this._input;null!=t&&this.isSketchedGraphic(t)&&(t.visible=!1);break}case f.Ready:case f.Selected:this._stopInteractionAndUpdate();case f.Selecting:}this._updateSketchedGraphic()}_storePreviousInput(t){this._previousInputInfo={graphic:t}}_restorePreviousInput(){const t=this._previousInputInfo;null!=t&&(this._clearPreviousInput(),this._input=t.graphic,this._triggerUpdate())}_clearPreviousInput(){this._previousInputInfo=null}_updateSketchedGraphic(){const t=this._graphicsLayer;if(null==t)return;const e=t.graphics,i=this._input;if(null==i||!this.isSketchedGraphic(i))return void e.removeAll();if(-1===e.indexOf(i))e.removeAll(),e.add(i);else if(1!==e.length){const t=e.filter((t=>t!==i));e.removeMany(t)}}_setSketchedGraphic(t){null!=t&&this._sketchedGraphics.add(t),this._input=t,this._updateSketchedGraphic()}};function w(t){if(I(t)){const e=t.clone();return e.paths=[e.paths[0].slice(0,-1)],e}return t}t([_({nonNullable:!0})],P.prototype,"state",void 0),t([_({nonNullable:!0})],P.prototype,"tool",void 0),t([_()],P.prototype,"canStopCreating",null),t([_()],P.prototype,"_graphicsLayer",void 0),t([_()],P.prototype,"_sketchVM",void 0),t([_()],P.prototype,"_input",null),t([_()],P.prototype,"_geometry",null),t([_()],P.prototype,"_visibleAndEditable",null),t([_()],P.prototype,"_view",null),t([_()],P.prototype,"_shouldRemoveLastPoint",void 0),P=t([m("esri.widgets.ElevationProfile.ElevationProfileInteraction")],P);export{P as ElevationProfileInteraction,f as State};
