/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
import{_ as e}from"../../chunks/tslib.es6.js";import t from"../../Color.js";import{handlesGroup as r}from"../../core/handleUtils.js";import{applySome as i}from"../../core/maybe.js";import{memoize as o}from"../../core/memoize.js";import{watch as n,on as s}from"../../core/reactiveUtils.js";import{union as l}from"../../core/SetUtils.js";import{getMetersPerVerticalUnitForSR as c}from"../../core/unitUtils.js";import{property as a}from"../../core/accessorSupport/decorators/property.js";import"../../core/accessorSupport/ensureType.js";import"../../core/arrayUtils.js";import"../../core/has.js";import{subclass as u}from"../../core/accessorSupport/decorators/subclass.js";import{s as p}from"../../chunks/vec3.js";import{c as d}from"../../chunks/vec4f64.js";import{getReferenceEllipsoid as m}from"../../geometry/ellipsoidUtils.js";import{create as v,fromPoints as y}from"../../geometry/support/ray.js";import{GeometryDescriptor as f}from"../../layers/support/ElevationQuery.js";import{newIntersector as h}from"../../views/3d/webgl-engine/lib/Intersector.js";import{StoreResults as _}from"../../views/3d/webgl-engine/lib/IntersectorInterfaces.js";import{toGraphic as w}from"../../views/3d/webgl-engine/lib/intersectorUtilsConversions.js";import g from"./ElevationProfileLine.js";const I=2e5;let j=class extends g{constructor(e){super(e),this.type="view",this.color=new t("#cf4ccf"),this.viewVisualizationEnabled=!0,this.include=null,this.exclude=null,this.numSamplesForPreview=50,this.numSamplesPerChunk=25,this._getQueryElevationDependencies=o(((e,t,r,i,o,n,s)=>({inputGraphicUid:null!=e?x(e):null,visibleLayers:t,maxIntersectionDistance:r,intersectOptions:i,view:o,stationary:n,spatialReference:s}))),this._vecA=d(),this._vecB=d(),this._ray=v()}get minDemResolution(){const e=this._viewModel?.view;if(null==e||"3d"!==e.type)return null;const t=e.pointsOfInterest?.focus?.renderLocation;if(!t)return null;return e.state.camera.computeRenderPixelSizeAt(t)*c(e.spatialReference)}get queryElevationDependencies(){return i(this._view,(e=>this._getQueryElevationDependencies(this._viewModel?.input,this._visibleLayers,this._maxIntersectionDistance,this._intersectOptions,e,e.stationary,e.spatialReference)))}get _visibleLayers(){const e=this._view;return i(e,(e=>e.map?.allLayers?.filter((e=>e.visible)).toArray()))??[]}get _intersectOptions(){const e=this._view;if(null==e)return{};const t=e.externalToInternalIntersectOptions({include:this.include,exclude:this.exclude}),r=e.externalToInternalIntersectOptions({exclude:this._pointCloudLayers});return t.exclude=l(t.exclude,r.exclude),t}get _pointCloudLayers(){const e=this._view;return null==e?[]:e.allLayerViews.toArray().filter((e=>"point-cloud"===e.layer?.type)).map((e=>e.layer))}get _view(){const e=this._viewModel?.view;return null!=e&&"3d"===e.type?e:null}get _maxIntersectionDistance(){const e=this._view;return null!=e&&e.renderCoordsHelper?m(e.spatialReference).radius/e.renderCoordsHelper.unitInMeters:Number.POSITIVE_INFINITY}get _intersector(){const e=this._view;if(null==e)return null;const t=h(e.state.viewingMode),r=t.options;return r.hud=!1,r.invisibleTerrain=!1,r.backfacesTerrain=!1,r.selectionMode=!1,r.store=_.ALL,t}async queryElevation(e,{noDataValue:t,signal:r}){const i=this.queryElevationDependencies;if(null==i)throw new Error("ElevationProfileLineInput: no dependencies");const o=this._intersector;if(null==o)throw new Error("ElevationProfileLineInput: no view");const{intersectOptions:n,view:s,spatialReference:l}=i,c=s.renderCoordsHelper,a=s.sceneIntersectionHelper,u=this._vecA,d=this._vecA,m=this._vecB,v=this._ray;if(!l)return{geometry:e,noDataValue:t};const h=await f.fromGeometry(e).project(l,r);if(!h)return{geometry:e,noDataValue:t};const _=h.coordinates,w=_.length;for(let f=0;f<w;++f){const e=_[f];p(m,e.x,e.y,e.z??0),c.toRenderCoords(m,l,m),c.setAltitude(u,I,m);const r=y(u,m,v);a.computeIntersection(r,o,n);const s=b(i,o.results.all);s?(s.getIntersectionPoint(d),c.fromRenderCoords(d,d,l),e.z=d[2]):e.z=t}return{geometry:h.export(),noDataValue:t}}attach(e){const t=()=>this._onChange();return r([super.attach(e),n((()=>this.queryElevationDependencies),t),s((()=>e.elevationProvider),"elevation-change",t,{onListenerAdd:t,onListenerRemove:t})])}};function b({view:e,inputGraphicUid:t,maxIntersectionDistance:r},i){for(const o of i){if(null!=o.distanceInRenderSpace&&o.distanceInRenderSpace>r)continue;const i=w(o,e);if(null==i||x(i)!==t)return o}return null}function x(e){if(e.layer&&"objectIdField"in e.layer){const t=e.attributes[e.layer.objectIdField];if(t)return`o-${e.layer.id}-${t}`}return`u-${e.uid}`}e([a({type:t,nonNullable:!0})],j.prototype,"color",void 0),e([a()],j.prototype,"viewVisualizationEnabled",void 0),e([a()],j.prototype,"include",void 0),e([a()],j.prototype,"exclude",void 0),e([a({readOnly:!0})],j.prototype,"minDemResolution",null),e([a()],j.prototype,"queryElevationDependencies",null),e([a()],j.prototype,"_visibleLayers",null),e([a()],j.prototype,"_intersectOptions",null),e([a()],j.prototype,"_pointCloudLayers",null),e([a()],j.prototype,"_view",null),e([a()],j.prototype,"_maxIntersectionDistance",null),e([a()],j.prototype,"_intersector",null),j=e([u("esri.widgets.ElevationProfile.ElevationProfileLineView")],j);const E=j;export{E as default};
