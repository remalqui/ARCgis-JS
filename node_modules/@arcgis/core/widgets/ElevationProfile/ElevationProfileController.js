/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
import{_ as e}from"../../chunks/tslib.es6.js";import t from"../../core/Accessor.js";import{createTask as o}from"../../core/asyncUtils.js";import s from"../../core/Handles.js";import{handlesGroup as r}from"../../core/handleUtils.js";import{applySome as i,abortMaybe as a}from"../../core/maybe.js";import{memoize as l}from"../../core/memoize.js";import{ignoreAbortErrors as n,throwIfAborted as p,throwIfAbortError as m}from"../../core/promiseUtils.js";import{watch as d,syncAndInitial as h}from"../../core/reactiveUtils.js";import{throttle as u}from"../../core/throttle.js";import{property as c}from"../../core/accessorSupport/decorators/property.js";import"../../core/accessorSupport/ensureType.js";import"../../core/arrayUtils.js";import"../../core/has.js";import{subclass as f}from"../../core/accessorSupport/decorators/subclass.js";import{hasGraphicFeatureExpressionInfo as _,getGraphicEffectiveElevationInfo as P}from"../../support/elevationInfoUtils.js";import{getConfig as v}from"./support/constants.js";import{isPolyline as g,isValidInputPath as M}from"./support/geometryUtils.js";import{generateProfiles as y}from"./support/profileUtils.js";const j="line-change";let w=class extends t{constructor(e){super(e),this._handles=new s,this._updateTask=null,this._paramsPerProfile=new Map,this._getUpdateParametersMemoized=l(((e,t,o)=>({stationary:e,visibleProfiles:t,generationParameters:o}))),this._getGenerationParametersMemoized=l(((e,t,o,s,r,i,a)=>g(t)&&M(t)&&null!=s?{view:e,geometry:t,elevationInfo:o,options:i,queue:s,cache:r,slicePlane:a}:null)),this._getElevationInfoMemoized=l(((e,t)=>({mode:e,offset:t}))),this._getOptionsMemoized=l(((e,t,o)=>{const{densificationMaxSamples:s,maxTotalSamples:r}=v();return{geodesicDistanceThreshold:e,samplingDistance:t,densificationMaxSamples:Math.round(s/o),maxTotalSamples:r}})),this._updateThrottled=u((e=>n(this._update(e))),v().updateThrottleMillis)}initialize(){const e=this.viewModel;this._handles.add([d((()=>e.profiles.toArray()),(e=>{this._abortUpdate(),this._paramsPerProfile.clear(),this._handles.remove(j),this._handles.add(e.map((e=>r([e.attach(this.viewModel),e.on("change",(()=>{this._invalidateProfile(e)}))]))),j)}),h),this._updateThrottled,d((()=>this._updateParameters),this._updateThrottled,h)])}destroy(){this._handles.destroy(),this._paramsPerProfile.clear()}get _updateParameters(){const{viewModel:e}=this,t=e.view;return this._getUpdateParametersMemoized(null==t||t.stationary,this.viewModel.visibleProfiles,this._generationParameters)}get _generationParameters(){const{view:e,input:t,queue:o,tileCache:s}=this.viewModel;return null!=e&&e.ready?this._getGenerationParametersMemoized(e,i(t,(e=>e.geometry)),this._elevationInfo,o,s,this._options,"3d"===e.type?e.slicePlane:null):null}get _elevationInfo(){const e=i(this.viewModel.input,(e=>_(e)?null:P(e)));return null!=e?this._getElevationInfoMemoized(e.mode,e.offset):null}get _options(){const e=this.viewModel,t=e.visibleProfiles.length;let o=e.minDemResolution??v().defaultDemResolution;return o=parseFloat(o.toFixed(2)),this._getOptionsMemoized(e.geodesicDistanceThreshold,o,t)}async _update({stationary:e,visibleProfiles:t,generationParameters:s}){this._abortUpdate(),e&&(null!=s?this._updateTask=o((async e=>{this.viewModel.error=null;const o=t.filter((e=>!this._isProfileValid(e,s))),r=y({...s,providers:o},{signal:e});try{for await(const t of r){p(e),this._clearInvalidResults(s);for(let e=0;e<o.length;e++)o[e].result=t[e]}for(const e of o)this._paramsPerProfile.set(e,s)}catch(i){m(i),this._abortUpdate(),this.viewModel.error=i,o.forEach((e=>{e.result=null}))}})):this._clearResults())}_abortUpdate(){this._updateTask=a(this._updateTask)}_isProfileValid(e,t){return this._paramsPerProfile.has(e)&&this._paramsPerProfile.get(e)===t}_invalidateProfile(e){this._paramsPerProfile.delete(e),this._updateThrottled(this._updateParameters)}_clearInvalidResults(e){for(const t of this.viewModel.profiles.items)this._isProfileValid(t,e)||(t.result=null,this._paramsPerProfile.delete(t))}_clearResults(){for(const e of this.viewModel.profiles.items)e.result=null,this._paramsPerProfile.delete(e)}};e([c({nonNullable:!0})],w.prototype,"viewModel",void 0),e([c()],w.prototype,"_updateParameters",null),e([c()],w.prototype,"_generationParameters",null),e([c()],w.prototype,"_elevationInfo",null),e([c()],w.prototype,"_options",null),w=e([f("esri.widgets.ElevationProfile.ElevationProfileController")],w);export{w as ElevationProfileController};
