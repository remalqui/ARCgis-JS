/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
import e from"../request.js";import{normalizeCentralMeridian as r}from"../geometry/support/normalizeUtils.js";import{collectGeometries as t,isInputGeometryZAware as s,fetchServiceDescription as o,dropZValuesOffInputGeometry as a}from"./networkService.js";import{parseUrl as n}from"./utils.js";import{routeParametersToQueryParameters as i}from"./route/utils.js";import u from"./support/FeatureSet.js";import f from"./support/RouteSolveResult.js";function p(e){return e instanceof u}async function c(u,f,c){const m=[],y=[],d={},g={},h=n(u),{path:R}=h;p(f.stops)&&t(f.stops.features,y,"stops.features",d),p(f.pointBarriers)&&t(f.pointBarriers.features,y,"pointBarriers.features",d),p(f.polylineBarriers)&&t(f.polylineBarriers.features,y,"polylineBarriers.features",d),p(f.polygonBarriers)&&t(f.polygonBarriers.features,y,"polygonBarriers.features",d);const v=await r(y);for(const e in d){const r=d[e];m.push(e),g[e]=v.slice(r[0],r[1])}if(s(g,m)){let e=null;try{e=await o(R,f.apiKey,c)}catch{}e&&!e.hasZ&&a(g,m)}for(const e in g)g[e].forEach(((r,t)=>{f.get(e)[t].geometry=r}));const B={...c,query:{...h.query,...i(f),f:"json"}},E=R.endsWith("/solve")?R:`${R}/solve`,{data:T}=await e(E,B);return l(T)}function l(e){const{barriers:r,directionLines:t,directionPoints:s,directions:o,messages:a,polygonBarriers:n,polylineBarriers:i,routes:u,stops:p,traversedEdges:c,traversedJunctions:l,traversedTurns:m}=e,y=e=>{const r=g.find((r=>r.routeName===e));if(null!=r)return r;const t={routeId:g.length+1,routeName:e};return g.push(t),t},d=e=>{const r=g.find((r=>r.routeId===e));if(null!=r)return r;const t={routeId:e,routeName:null};return g.push(t),t},g=[];u?.features.forEach(((e,r)=>{e.geometry.spatialReference=u.spatialReference??void 0;const t=e.attributes.Name,s=r+1;g.push({routeId:s,routeName:t,route:e})})),o?.forEach((e=>{const{routeName:r}=e;y(r).directions=e}));const h=(p?.features.every((e=>null==e.attributes.RouteName))??!1)&&g.length>0?g[0].routeName:null;return p?.features.forEach((e=>{e.geometry&&(e.geometry.spatialReference??=p.spatialReference??void 0);const r=h??e.attributes.RouteName,t=y(r);t.stops??=[],t.stops.push(e)})),t?.features.forEach((e=>{const r=e.attributes.RouteID,s=d(r),{geometryType:o,spatialReference:a}=t;s.directionLines??={features:[],geometryType:o,spatialReference:a},s.directionLines.features.push(e)})),s?.features.forEach((e=>{const r=e.attributes.RouteID,t=d(r),{geometryType:o,spatialReference:a}=s;t.directionPoints??={features:[],geometryType:o,spatialReference:a},t.directionPoints.features.push(e)})),c?.features.forEach((e=>{const r=e.attributes.RouteID,t=d(r),{geometryType:s,spatialReference:o}=c;t.traversedEdges??={features:[],geometryType:s,spatialReference:o},t.traversedEdges.features.push(e)})),l?.features.forEach((e=>{const r=e.attributes.RouteID,t=d(r),{geometryType:s,spatialReference:o}=l;t.traversedJunctions??={features:[],geometryType:s,spatialReference:o},t.traversedJunctions.features.push(e)})),m?.features.forEach((e=>{const r=e.attributes.RouteID,t=d(r);t.traversedTurns??={features:[]},t.traversedTurns.features.push(e)})),f.fromJSON({routeResults:g,barriers:r,polygonBarriers:n,polylineBarriers:i,messages:a})}export{c as solve};
