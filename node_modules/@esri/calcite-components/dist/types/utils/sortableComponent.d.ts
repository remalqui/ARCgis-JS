import Sortable from "sortablejs";
/**
 * Defines interface for components with sorting functionality.
 */
export interface SortableComponent {
  /**
   * The host element.
   */
  readonly el: HTMLElement;
  /**
   * The Sortable instance.
   */
  sortable: Sortable;
}
/**
 * Helper to keep track of a SortableComponent. This should be called in the `connectedCallback` lifecycle method as well as any other method necessary to rebuild the sortable instance.
 *
 * @param {SortableComponent} component - The sortable component.
 * @param {SortableComponent} [options] - Sortable options object.
 */
export declare function connectSortableComponent(component: SortableComponent, options?: Sortable.Options): void;
/**
 * Helper to remove track of a SortableComponent. This should be called in the `disconnectedCallback` lifecycle method.
 *
 * @param {SortableComponent} component - The sortable component.
 */
export declare function disconnectSortableComponent(component: SortableComponent): void;
/**
 * Helper to handle nested SortableComponents on `Sortable.onStart`.
 *
 * @param {SortableComponent} activeComponent - The active sortable component.
 */
export declare function onSortingStart(activeComponent: SortableComponent): void;
/**
 * Helper to handle nested SortableComponents on `Sortable.onEnd`.
 *
 * @param {SortableComponent} activeComponent - The active sortable component.
 */
export declare function onSortingEnd(activeComponent: SortableComponent): void;
