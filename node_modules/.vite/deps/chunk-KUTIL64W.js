import {
  C,
  b,
  s as s3
} from "./chunk-AHVENFMO.js";
import {
  o
} from "./chunk-QVFTB6AS.js";
import {
  c
} from "./chunk-NLX3GR5V.js";
import {
  n3 as n
} from "./chunk-OYBXMT5R.js";
import {
  j
} from "./chunk-HKVL2MJK.js";
import {
  t2 as t
} from "./chunk-O3CHVGVF.js";
import {
  d,
  s as s2
} from "./chunk-HNHXEGH2.js";
import {
  s3 as s
} from "./chunk-W2N7YT6I.js";

// node_modules/@arcgis/core/views/2d/engine/webgl/animatedFormats/apng.js
async function r(r3, n4) {
  const i2 = s3(r3);
  if (i2 instanceof Error)
    throw i2;
  await i2.createImages(), s2(n4);
  const { frames: a3, width: s4, height: p2 } = i2, c2 = document.createElement("canvas");
  c2.width = s4, c2.height = p2;
  const l2 = c2.getContext("2d", { willReadFrequently: true }), m = [], h2 = [];
  for (const t2 of a3) {
    h2.push(n(t2.delay || 100));
    const e = t2.imageElement;
    0 === t2.blendOp ? l2.globalCompositeOperation = "copy" : l2.globalCompositeOperation = "source-over";
    const r4 = 2 === t2.disposeOp ? l2.getImageData(t2.left, t2.top, t2.width, t2.height) : void 0;
    l2.drawImage(e, t2.left, t2.top);
    const n5 = l2.getImageData(0, 0, s4, p2);
    m.push(n5), 0 === t2.disposeOp || (1 === t2.disposeOp ? l2.clearRect(t2.left, t2.top, t2.width, t2.height) : 2 === t2.disposeOp && l2.putImageData(r4, t2.left, t2.top));
  }
  return { frameDurations: h2, getFrame: (t2) => m[t2], width: s4, height: p2 };
}
var n2 = [137, 80, 78, 71, 13, 10, 26, 10];
function i(t2) {
  const e = new Uint8Array(t2);
  return !n2.some((t3, o3) => t3 !== e[o3]);
}
function a(t2) {
  if (!i(t2))
    return false;
  const e = new DataView(t2), o3 = new Uint8Array(t2);
  let r3, n4 = 8;
  do {
    const t3 = e.getUint32(n4);
    if (r3 = String.fromCharCode.apply(String, Array.prototype.slice.call(o3.subarray(n4 + 4, n4 + 8))), "acTL" === r3)
      return true;
    n4 += 12 + t3;
  } while ("IEND" !== r3 && n4 < o3.length);
  return false;
}

// node_modules/@arcgis/core/views/2d/engine/webgl/animatedFormats/gif.js
async function n3(n4, a3) {
  const r3 = C(n4), o3 = b(r3, true), { width: c2, height: d2 } = r3.lsd, m = document.createElement("canvas");
  m.width = c2, m.height = d2;
  const u2 = m.getContext("2d", { willReadFrequently: true }), f = [], h2 = [];
  for (const i2 of o3) {
    h2.push(n(i2.delay || 100));
    const s4 = new ImageData(i2.patch, i2.dims.width, i2.dims.height), n5 = o(s4), a4 = 3 === i2.disposalType ? u2.getImageData(i2.dims.left, i2.dims.top, i2.dims.width, i2.dims.height) : void 0;
    u2.drawImage(n5, i2.dims.left, i2.dims.top);
    const r4 = u2.getImageData(0, 0, c2, d2);
    f.push(r4), 1 === i2.disposalType || (2 === i2.disposalType ? u2.clearRect(i2.dims.left, i2.dims.top, i2.dims.width, i2.dims.height) : 3 === i2.disposalType && u2.putImageData(a4, i2.dims.left, i2.dims.top));
  }
  return { frameDurations: h2, getFrame: (t2) => f[t2], width: c2, height: d2 };
}
var a2 = [71, 73, 70];
function r2(t2) {
  const e = new Uint8Array(t2);
  return !a2.some((t3, i2) => t3 !== e[i2]);
}
function o2(t2) {
  if (!r2(t2))
    return false;
  const e = new DataView(t2), i2 = e.getUint8(10);
  let s4 = 13 + (128 & i2 ? 3 * 2 ** (1 + (7 & i2)) : 0), n4 = 0, a3 = false;
  for (; !a3; ) {
    switch (e.getUint8(s4++)) {
      case 33:
        if (!o3())
          return false;
        break;
      case 44:
        c2();
        break;
      case 59:
        a3 = true;
        break;
      default:
        return false;
    }
    if (n4 > 1)
      return true;
  }
  function o3() {
    switch (e.getUint8(s4++)) {
      case 249:
        d2();
        break;
      case 1:
        m();
        break;
      case 254:
        u2();
        break;
      case 255:
        f();
        break;
      default:
        return false;
    }
    return true;
  }
  function c2() {
    n4++, s4 += 8;
    const t3 = e.getUint8(s4++);
    s4 += 128 & t3 ? 3 * 2 ** (1 + (7 & t3)) : 0, s4++, h2();
  }
  function d2() {
    s4++, s4 += 4, h2();
  }
  function m() {
    n4++, s4++, s4 += 12, h2();
  }
  function u2() {
    h2();
  }
  function f() {
    s4++, s4 += 8, s4 += 3, h2();
  }
  function h2() {
    let t3;
    for (; t3 = e.getUint8(s4++); )
      s4 += t3;
  }
  return false;
}

// node_modules/@arcgis/core/symbols/cim/CIMResourceManager.js
var h = class {
  constructor() {
    this._resourceMap = /* @__PURE__ */ new Map(), this._inFlightResourceMap = /* @__PURE__ */ new Map(), this.geometryEngine = null, this.geometryEnginePromise = null;
  }
  destroy() {
    this._inFlightResourceMap.clear(), this._resourceMap.clear();
  }
  getResource(e) {
    return this._resourceMap.get(e) ?? null;
  }
  async fetchResource(e, t2) {
    const r3 = this._resourceMap.get(e);
    if (r3)
      return { width: r3.width, height: r3.height };
    let i2 = this._inFlightResourceMap.get(e);
    return i2 ? i2.then((e2) => ({ width: e2.width, height: e2.height })) : (i2 = l(e, t2), this._inFlightResourceMap.set(e, i2), i2.then((t3) => (this._inFlightResourceMap.delete(e), this._resourceMap.set(e, t3), { width: t3.width, height: t3.height }), () => ({ width: 0, height: 0 })));
  }
  deleteResource(e) {
    this._inFlightResourceMap.delete(e), this._resourceMap.delete(e);
  }
  loadFont(e) {
    return c(e);
  }
};
async function u(r3, s4) {
  const o3 = window.URL.createObjectURL(r3);
  try {
    const { data: t2 } = await j(o3, { ...s4, responseType: "image" });
    return t2;
  } catch (n4) {
    if (!d(n4))
      throw new s("mapview-invalid-resource", `Could not fetch requested resource at ${o3}`);
    throw n4;
  } finally {
    window.URL.revokeObjectURL(o3);
  }
}
async function l(e, t2) {
  const { arrayBuffer: r3, mediaType: i2 } = await p(e, t2), s4 = "image/png" === i2;
  if ("image/gif" === i2 && o2(r3))
    return n3(r3);
  if (s4 && a(r3))
    return r(r3, t2);
  return u(new Blob([r3], { type: i2 }), t2);
}
async function p(r3, o3) {
  let n4;
  const a3 = ";base64,";
  if (r3.includes(a3)) {
    const e = r3.indexOf(a3), t2 = r3.indexOf(a3) + a3.length, i2 = r3.substring(t2);
    n4 = { arrayBuffer: t(i2), mediaType: r3.substring(0, e).replace("data:", "") };
  } else
    try {
      const t2 = await j(r3, { responseType: "array-buffer", ...o3 }), i2 = t2.data;
      n4 = { arrayBuffer: i2, mediaType: t2.getHeader("Content-Type") };
    } catch (c2) {
      if (!d(c2))
        throw new s("mapview-invalid-resource", `Could not fetch requested resource at ${r3}`);
    }
  return n4;
}

export {
  h
};
//# sourceMappingURL=chunk-KUTIL64W.js.map
