import {
  j
} from "./chunk-7KX64CAH.js";
import {
  _
} from "./chunk-J4R3XNTP.js";
import {
  a as a3
} from "./chunk-LQVUN6IS.js";
import {
  M
} from "./chunk-3GSONYPC.js";
import {
  o2 as o
} from "./chunk-SFV6XLDZ.js";
import {
  s as s3
} from "./chunk-3PLRSFLA.js";
import {
  u2
} from "./chunk-7A5C2EQ3.js";
import {
  m,
  y3 as y
} from "./chunk-OYBXMT5R.js";
import {
  a2
} from "./chunk-CIDWM2UN.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";
import {
  v
} from "./chunk-2YSHZRCT.js";
import {
  n
} from "./chunk-MH2LNFJK.js";
import {
  G,
  Y,
  _ as _2,
  tt
} from "./chunk-O3CHVGVF.js";
import {
  u
} from "./chunk-DWOEYHKS.js";
import {
  s2 as s,
  s3 as s2
} from "./chunk-W2N7YT6I.js";
import {
  a,
  l
} from "./chunk-I5JT24BO.js";

// node_modules/@arcgis/core/portal/PortalItemResource.js
var n2 = class extends m {
  constructor(t) {
    super(t), this.portalItem = null;
  }
  normalizeCtorArgs(t) {
    return t && t.portalItem && t.path ? { ...t, path: this._normalizePath(t.path, t.portalItem) } : t;
  }
  set path(t) {
    null != t && Y(t) ? s.getLogger(this).error("portalitemresource:invalid-path", "A portal item resource path must be relative") : this._set("path", t);
  }
  _castPath(t) {
    return this._normalizePath(t, this.portalItem);
  }
  get url() {
    return this.portalItem && this.path ? `${this.portalItem.itemUrl}/resources/${this.path}` : null;
  }
  get cdnUrl() {
    return this.portalItem && this.path ? `${this.portalItem.itemCdnUrl}/resources/${this.path}` : null;
  }
  get itemRelativeUrl() {
    return this.portalItem && this.path ? `./resources/${this.path}` : null;
  }
  fetch(t = "json", r) {
    const o2 = this.cdnUrl;
    if (null == o2)
      throw new s2("portal-item-resource:fetch", "Portal item resource does not refer to a valid item or path");
    return this.portalItem.portal.request(o2, { responseType: t, query: { token: this.portalItem.apiKey }, signal: r == null ? void 0 : r.signal });
  }
  async update(t, r) {
    const { addOrUpdateResource: e3 } = await import("./resourceUtils-X374NWTI.js");
    return e3(this, "update", t, r);
  }
  hasPath() {
    return null != this.path;
  }
  _normalizePath(t, r) {
    return null == t ? t : (t = t.replace(/^\/+/, ""), null != r && Y(t) && (t = G(t, r.itemUrl)), t == null ? void 0 : t.replace(/^\/+/, "").replace(/^(\.\/)?resources\//, ""));
  }
};
e([y()], n2.prototype, "portalItem", void 0), e([y({ type: String, value: null })], n2.prototype, "path", null), e([s3("path")], n2.prototype, "_castPath", null), e([y({ type: String, readOnly: true })], n2.prototype, "url", null), e([y({ type: String, readOnly: true })], n2.prototype, "cdnUrl", null), e([y({ type: String, readOnly: true })], n2.prototype, "itemRelativeUrl", null), n2 = e([a2("esri.portal.PortalItemResource")], n2);
var u3 = n2;

// node_modules/@arcgis/core/portal/PortalRating.js
var e2 = class extends m {
  constructor(r) {
    super(r), this.created = null, this.rating = null;
  }
};
e([y()], e2.prototype, "created", void 0), e([y()], e2.prototype, "rating", void 0), e2 = e([a2("esri.portal.PortalRating")], e2);
var c = e2;

// node_modules/@arcgis/core/portal/PortalItem.js
var f;
var b = /* @__PURE__ */ new Set(["Map Service", "Feature Service", "Feature Collection", "Scene Service", "Image Service", "Stream Service", "Vector Tile Service", "GeoJson", "CSV", "KML", "WFS", "WMTS", "WMS", "Feed"]);
var k = /* @__PURE__ */ new Set(["KML", "GeoJson", "CSV"]);
var S = f = class extends u2(_) {
  static from(e3) {
    return v(f, e3);
  }
  constructor(e3) {
    super(e3), this.access = null, this.accessInformation = null, this.apiKey = null, this.applicationProxies = null, this.avgRating = null, this.categories = null, this.created = null, this.culture = null, this.description = null, this.extent = null, this.groupCategories = null, this.id = null, this.isOrgItem = false, this.itemControl = null, this.licenseInfo = null, this.modified = null, this.name = null, this.numComments = null, this.numRatings = null, this.numViews = null, this.owner = null, this.ownerFolder = null, this.portal = null, this.screenshots = null, this.size = null, this.snippet = null, this.sourceJSON = null, this.sourceUrl = null, this.spatialReference = null, this.tags = null, this.title = null, this.type = null, this.typeKeywords = null, this.url = null;
  }
  destroy() {
    this.portal = null;
  }
  get displayName() {
    const e3 = this.type, t = this.typeKeywords || [];
    let i = e3;
    return "Feature Service" === e3 || "Feature Collection" === e3 ? i = t.includes("Table") ? "Table" : t.includes("Route Layer") ? "Route Layer" : t.includes("Markup") ? "Markup" : "Feature Layer" : "Image Service" === e3 ? i = t.includes("Elevation 3D Layer") ? "Elevation Layer" : t.includes("Tiled Imagery") ? "Tiled Imagery Layer" : "Imagery Layer" : "Scene Service" === e3 ? i = "Scene Layer" : "Video Service" === e3 ? i = "Video Layer" : "Scene Package" === e3 ? i = "Scene Layer Package" : "Stream Service" === e3 ? i = "Feature Layer" : "Geoprocessing Service" === e3 ? i = t.includes("Web Tool") ? "Tool" : "Geoprocessing Service" : "Geocoding Service" === e3 ? i = "Locator" : "Geoenrichment Service" === e3 ? i = "GeoEnrichment Service" : "Microsoft Powerpoint" === e3 ? i = "Microsoft PowerPoint" : "GeoJson" === e3 ? i = "GeoJSON" : "Globe Service" === e3 ? i = "Globe Layer" : "Vector Tile Service" === e3 ? i = "Tile Layer" : "netCDF" === e3 ? i = "NetCDF" : "Map Service" === e3 ? i = t.includes("Spatiotemporal") || !t.includes("Hosted Service") && !t.includes("Tiled") || t.includes("Relational") ? "Map Image Layer" : "Tile Layer" : e3 && e3.toLowerCase().includes("add in") ? i = e3.replaceAll(/(add in)/gi, "Add-In") : "datastore catalog service" === e3 ? i = "Big Data File Share" : "Compact Tile Package" === e3 ? i = "Tile Package (tpkx)" : "OGCFeatureServer" === e3 ? i = "OGC Feature Layer" : "web mapping application" === e3 && t.includes("configurableApp") ? i = "Instant App" : "Insights Page" === e3 ? i = "Insights Report" : "Excalibur Imagery Project" === e3 && (i = "Excalibur Project"), i;
  }
  readExtent(e3) {
    return e3 && e3.length ? new M(e3[0][0], e3[0][1], e3[1][0], e3[1][1]) : null;
  }
  get iconUrl() {
    const e3 = this.type && this.type.toLowerCase() || "", i = this.typeKeywords || [], r = "esri/images/portal/", o2 = "16";
    let s4, a4 = false, n3 = false, l2 = false, p = false, c2 = false, d = false;
    return e3.indexOf("service") > 0 || "feature collection" === e3 || "kml" === e3 || "wms" === e3 || "wmts" === e3 || "wfs" === e3 ? (a4 = i.includes("Hosted Service"), "feature service" === e3 || "feature collection" === e3 || "kml" === e3 || "wfs" === e3 ? (n3 = i.includes("Table"), l2 = i.includes("Route Layer"), p = i.includes("Markup"), c2 = i.includes("Spatiotemporal"), d = i.includes("UtilityNetwork"), s4 = c2 && n3 ? "spatiotemporaltable" : n3 ? "table" : l2 ? "routelayer" : p ? "markup" : c2 ? "spatiotemporal" : a4 ? "featureshosted" : d ? "utilitynetwork" : "features") : s4 = "map service" === e3 || "wms" === e3 || "wmts" === e3 ? a4 || i.includes("Tiled") || "wmts" === e3 ? "maptiles" : "mapimages" : "scene service" === e3 ? i.includes("Line") ? "sceneweblayerline" : i.includes("3DObject") ? "sceneweblayermultipatch" : i.includes("Point") ? "sceneweblayerpoint" : i.includes("IntegratedMesh") ? "sceneweblayermesh" : i.includes("PointCloud") ? "sceneweblayerpointcloud" : i.includes("Polygon") ? "sceneweblayerpolygon" : i.includes("Building") ? "sceneweblayerbuilding" : i.includes("Voxel") ? "sceneweblayervoxel" : "sceneweblayer" : "image service" === e3 ? i.includes("Elevation 3D Layer") ? "elevationlayer" : i.includes("Tiled Imagery") ? "tiledimagerylayer" : "imagery" : "stream service" === e3 ? "streamlayer" : "video service" === e3 ? i.includes("Live Stream") ? "livestreamvideolayer" : "videolayer" : "vector tile service" === e3 ? "vectortile" : "datastore catalog service" === e3 ? "datastorecollection" : "geocoding service" === e3 ? "geocodeservice" : "geoprocessing service" === e3 ? i.includes("Web Tool") ? "tool" : "layers" : "geodata service" === e3 ? "geodataservice" : "layers") : s4 = "web map" === e3 || "cityengine web scene" === e3 ? "maps" : "web scene" === e3 ? i.includes("ViewingMode-Local") ? "webscenelocal" : "websceneglobal" : "web mapping application" === e3 && i.includes("configurableApp") ? "instantapps" : "web mapping application" === e3 || "mobile application" === e3 || "application" === e3 || "operation view" === e3 || "desktop application" === e3 ? "apps" : "map document" === e3 || "map package" === e3 || "published map" === e3 || "scene document" === e3 || "globe document" === e3 || "basemap package" === e3 || "mobile basemap package" === e3 || "mobile map package" === e3 || "project package" === e3 || "project template" === e3 || "pro map" === e3 || "layout" === e3 || "layer" === e3 && i.includes("ArcGIS Pro") || "explorer map" === e3 && i.indexOf("Explorer Document") ? "mapsgray" : "service definition" === e3 || "csv" === e3 || "shapefile" === e3 || "cad drawing" === e3 || "geojson" === e3 || "netcdf" === e3 || "administrative report" === e3 ? "datafiles" : "explorer add in" === e3 || "desktop add in" === e3 || "windows viewer add in" === e3 || "windows viewer configuration" === e3 ? "appsgray" : "360 vr experience" === e3 ? "360vr" : "arcgis pro add in" === e3 || "arcgis pro configuration" === e3 ? "addindesktop" : "rule package" === e3 || "file geodatabase" === e3 || "sqlite geodatabase" === e3 || "csv collection" === e3 || "kml collection" === e3 || "windows mobile package" === e3 || "map template" === e3 || "desktop application template" === e3 || "gml" === e3 || "arcpad package" === e3 || "code sample" === e3 || "form" === e3 || "document link" === e3 || "earth configuration" === e3 || "operations dashboard add in" === e3 || "rules package" === e3 || "image" === e3 || "workflow manager package" === e3 || "explorer map" === e3 && i.includes("Explorer Mapping Application") || i.includes("Document") ? "datafilesgray" : "network analysis service" === e3 || "geoprocessing service" === e3 || "geodata service" === e3 || "geometry service" === e3 || "geoprocessing package" === e3 || "locator package" === e3 || "geoprocessing sample" === e3 || "workflow manager service" === e3 ? "toolsgray" : "layer" === e3 || "layer package" === e3 || "explorer layer" === e3 ? "layersgray" : "scene package" === e3 ? "scenepackage" : "mobile scene package" === e3 ? "mobilescenepackage" : "tile package" === e3 || "compact tile package" === e3 ? "tilepackage" : "task file" === e3 ? "taskfile" : "report template" === e3 ? "report-template" : "statistical data collection" === e3 ? "statisticaldatacollection" : "insights workbook" === e3 ? "workbook" : "insights model" === e3 ? "insightsmodel" : "insights page" === e3 ? "insightspage" : "insights theme" === e3 ? "insightstheme" : "hub initiative" === e3 ? "hubinitiative" : "hubpage" === e3 ? "hubpage" : "hub event" === e3 ? "hubevent" : "hub site application" === e3 ? "hubsite" : "hub project" === e3 ? "hubproject" : "relational database connection" === e3 ? "relationaldatabaseconnection" : "big data file share" === e3 ? "datastorecollection" : "image collection" === e3 ? "imagecollection" : "style" === e3 ? "style" : "desktop style" === e3 ? "desktopstyle" : "dashboard" === e3 ? "dashboard" : "raster function template" === e3 ? "rasterprocessingtemplate" : "vector tile package" === e3 ? "vectortilepackage" : "ortho mapping project" === e3 ? "orthomappingproject" : "ortho mapping template" === e3 ? "orthomappingtemplate" : "solution" === e3 ? "solutions" : "geopackage" === e3 ? "geopackage" : "deep learning package" === e3 ? "deeplearningpackage" : "real time analytic" === e3 ? "realtimeanalytics" : "big data analytic" === e3 ? "bigdataanalytics" : "feed" === e3 ? "feed" : "excalibur imagery project" === e3 ? "excaliburimageryproject" : "notebook" === e3 ? "notebook" : "storymap" === e3 ? "storymap" : "survey123 add in" === e3 ? "survey123addin" : "mission" === e3 ? "mission" : "mission report" === e3 ? "missionreport" : "quickcapture project" === e3 ? "quickcaptureproject" : "pro report" === e3 ? "proreport" : "pro report template" === e3 ? "proreporttemplate" : "urban model" === e3 ? "urbanmodel" : "web experience" === e3 ? "experiencebuilder" : "web experience template" === e3 ? "webexperiencetemplate" : "experience builder widget" === e3 ? "experiencebuilderwidget" : "experience builder widget package" === e3 ? "experiencebuilderwidgetpackage" : "workflow" === e3 ? "workflow" : "insights script" === e3 ? "insightsscript" : "kernel gateway connection" === e3 ? "kernelgatewayconnection" : "hub initiative template" === e3 ? "hubinitiativetemplate" : "storymap theme" === e3 ? "storymaptheme" : "knowledge graph" === e3 ? "knowledgegraph" : "native application" === e3 ? "nativeapp" : "native application installer" === e3 ? "nativeappinstaller" : "link chart" === e3 ? "linkchart" : "investigation" === e3 ? "investigation" : "ogcfeatureserver" === e3 ? "features" : "pro project" === e3 ? "proproject" : "insights workbook package" === e3 ? "insightsworkbookpackage" : "apache parquet" === e3 ? "apacheparquet" : "notebook code snippets" === e3 || "notebook code snippet library" === e3 ? "notebookcodesnippets" : "suitability model" === e3 ? "suitabilitymodel" : "esri classifier definition" === e3 ? "classifierdefinition" : "esri classification schema" === e3 ? "classificationschema" : "insights data engineering workbook" === e3 ? "dataengineeringworkbook" : "insights data engineering model" === e3 ? "dataengineeringmodel" : "deep learning studio project" === e3 ? "deeplearningproject" : "discussion" === e3 ? "discussion" : "allsource project" === e3 ? "allsourceproject" : "api key" === e3 ? "apikey" : "data pipeline" === e3 ? "datapipelines" : "maps", s4 ? a3(r + s4 + o2 + ".png") : null;
  }
  get isLayer() {
    return null != this.type && b.has(this.type);
  }
  get itemCdnUrl() {
    let e3 = this.itemUrl;
    return e3 && n && !n.findCredential(e3) && (e3 = n._normalizeAGOLorgDomain(e3), e3 = e3.replace(/^https?:\/\/www\.arcgis\.com/, "https://cdn.arcgis.com"), e3 = e3.replace(/^https?:\/\/devext\.arcgis\.com/, "https://cdndev.arcgis.com"), e3 = e3.replace(/^https?:\/\/qaext\.arcgis\.com/, "https://cdnqa.arcgis.com")), e3;
  }
  get itemPageUrl() {
    var _a;
    const e3 = (_a = this.portal) == null ? void 0 : _a.itemPageUrl;
    return e3 && this.id ? `${e3}?id=${this.id}` : null;
  }
  get itemUrl() {
    var _a;
    const e3 = (_a = this.portal) == null ? void 0 : _a.restUrl;
    return e3 && this.id ? `${e3}/content/items/${this.id}` : null;
  }
  get thumbnailUrl() {
    var _a;
    const e3 = this.itemUrl, t = this.thumbnail;
    return e3 && t ? ((_a = this.portal) == null ? void 0 : _a.normalizeUrl(`${e3}/info/${t}?f=json`)) ?? null : null;
  }
  get userItemUrl() {
    const e3 = this.get("portal.restUrl");
    if (!e3)
      return null;
    const t = this.owner || this.get("portal.user.username");
    if (!t)
      return null;
    return `${e3}/content/users/${this.ownerFolder ? `${t}/${this.ownerFolder}` : t}/items/${this.id}`;
  }
  load(e3) {
    const t = this.portal ?? (this.portal = j.getDefault()), i = t.load(e3).then(() => this.sourceJSON ? this.sourceJSON : this.id && this.itemUrl ? t.request(this.itemUrl, { signal: null != e3 ? e3.signal : null, query: { token: this.apiKey } }) : {}).then((e4) => {
      this.sourceJSON = e4, this.read(e4);
    });
    return this.addResolvingPromise(i), Promise.resolve(this);
  }
  async addRating(e3) {
    const t = { method: "post", query: {} };
    return e3 instanceof c && (e3 = e3.rating), null == e3 || isNaN(e3) || "number" != typeof e3 || (t.query.rating = e3), this.portal ? (await this.portal.request(this.itemUrl + "/addRating", t), new c({ rating: e3, created: /* @__PURE__ */ new Date() })) : null;
  }
  clone() {
    const e3 = { access: this.access, accessInformation: this.accessInformation, applicationProxies: a(this.applicationProxies), avgRating: this.avgRating, categories: a(this.categories), created: a(this.created), culture: this.culture, description: this.description, extent: a(this.extent), groupCategories: a(this.groupCategories), id: this.id, itemControl: this.itemControl, licenseInfo: this.licenseInfo, modified: a(this.modified), name: this.name, numComments: this.numComments, numRatings: this.numRatings, numViews: this.numViews, owner: this.owner, ownerFolder: this.ownerFolder, portal: this.portal, screenshots: a(this.screenshots), size: this.size, snippet: this.snippet, sourceUrl: this.sourceUrl, spatialReference: this.spatialReference, tags: a(this.tags), thumbnail: this.thumbnail, title: this.title, type: this.type, typeKeywords: a(this.typeKeywords), url: this.url };
    this.loaded && (e3.loadStatus = "loaded");
    const t = new f({ sourceJSON: this.sourceJSON }).set(e3);
    return t._set("isOrgItem", this.isOrgItem), t;
  }
  createPostQuery() {
    var _a;
    const e3 = this.toJSON();
    for (const i of ["tags", "typeKeywords", "categories"])
      e3[i] = (_a = e3[i]) == null ? void 0 : _a.join(", ");
    const { extent: t } = e3;
    return t && (e3.extent = JSON.stringify(t)), e3;
  }
  async deleteRating() {
    await u(this.portal).request(this.itemUrl + "/deleteRating", { method: "post" });
  }
  fetchData(e3 = "json", t) {
    return u(this.portal).request(this.itemUrl + "/data", { responseType: e3, ...t, query: { token: this.apiKey } });
  }
  async fetchRating(e3) {
    const t = await u(this.portal).request(this.itemUrl + "/rating", { query: { token: this.apiKey }, ...e3 });
    return null != t.rating ? (t.created = new Date(t.created), new c(t)) : null;
  }
  fetchRelatedItems(e3, t) {
    return u(this.portal).requestToTypedArray(this.itemUrl + "/relatedItems", { query: { ...e3, token: this.apiKey }, ...t }, f);
  }
  getThumbnailUrl(e3) {
    let t = this.thumbnailUrl;
    return t && e3 && (t += `&w=${e3}`), t;
  }
  reload() {
    return u(this.portal).request(this.itemUrl ?? "", { cacheBust: true, query: { token: this.apiKey } }).then((e3) => (this.sourceJSON = e3, this.read(e3), this));
  }
  update(e3) {
    return this.id ? this.load().then(() => u(this.portal).signIn()).then(() => {
      const t = e3 && e3.data, i = { method: "post" };
      i.query = this.createPostQuery();
      for (const e4 in i.query)
        null === i.query[e4] && (i.query[e4] = "");
      return i.query.clearEmptyFields = true, null != t && ("string" == typeof t ? i.query.text = t : "object" == typeof t && (i.query.text = JSON.stringify(t))), this.portal.request(`${this.userItemUrl}/update`, i).then(() => this.reload());
    }) : Promise.reject(new s2("portal:item-does-not-exist", "The item does not exist yet and cannot be updated"));
  }
  async copy(e3) {
    if (!this.id)
      throw new s2("portal:item-does-not-exist", "The item does not exist yet");
    await this.load();
    const { portal: t, itemUrl: i } = this;
    await u(t).signIn();
    const { copyResources: o2, folder: s4, tags: a4, title: n3 } = e3 || {}, p = { method: "post", query: { copyPrivateResources: "all" === o2, folder: "string" == typeof s4 ? s4 : s4 == null ? void 0 : s4.id, includeResources: !!o2, tags: a4 == null ? void 0 : a4.join(","), title: n3 } }, { itemId: c2 } = await t.request(`${i}/copy`, p);
    return new f({ id: c2, portal: t });
  }
  updateThumbnail(e3) {
    return this.id ? this.load().then(() => this.portal.signIn()).then(() => {
      const t = e3.thumbnail, i = e3.filename, r = { method: "post" };
      if ("string" == typeof t)
        tt(t) ? r.query = { data: t } : r.query = { url: _2(t) }, null != i && (r.query.filename = i);
      else {
        const e4 = new FormData();
        null != i ? e4.append("file", t, i) : e4.append("file", t), r.body = e4;
      }
      return this.portal.request(`${this.userItemUrl}/updateThumbnail`, r).then(() => this.reload());
    }) : Promise.reject(new s2("portal:item-does-not-exist", "The item does not exist yet and cannot be updated"));
  }
  async fetchResources(e3 = {}, t) {
    const { fetchResources: i } = await import("./resourceUtils-X374NWTI.js");
    return i(this, e3, t);
  }
  async addResource(e3, t, i) {
    const { addOrUpdateResource: r } = await import("./resourceUtils-X374NWTI.js");
    return e3.portalItem = this, r(e3, "add", t, i);
  }
  async removeResource(e3, t) {
    const { removeResource: i } = await import("./resourceUtils-X374NWTI.js");
    if (e3.portalItem && e3.portalItem.itemUrl !== this.itemUrl)
      throw new s2("removeresource:portal-item-mismatch", "The portal item associated with the provided resource does not match the item");
    return i(this, e3, t);
  }
  async removeAllResources(e3) {
    const { removeAllResources: t } = await import("./resourceUtils-X374NWTI.js");
    return t(this, e3);
  }
  resourceFromPath(e3) {
    return new u3({ portalItem: this, path: e3 });
  }
  toJSON() {
    const e3 = this.extent, t = { accessInformation: this.accessInformation, categories: a(this.categories), created: this.created && this.created.getTime(), description: this.description, extent: e3 && [[e3.xmin, e3.ymin], [e3.xmax, e3.ymax]], id: this.id, isOrgItem: this.isOrgItem, licenseInfo: this.licenseInfo, modified: this.modified && this.modified.getTime(), name: this.name, owner: this.owner, ownerFolder: this.ownerFolder, snippet: this.snippet, sourceUrl: this.sourceUrl, spatialReference: this.spatialReference, tags: a(this.tags), thumbnail: this.thumbnail, title: this.title, type: this.type, typeKeywords: a(this.typeKeywords), url: this.url };
    return l(t);
  }
  static fromJSON(e3) {
    if (!e3)
      return null;
    if (e3.declaredClass)
      throw new Error("JSON object is already hydrated");
    return new f({ sourceJSON: e3 });
  }
  _getPostQuery() {
    const e3 = this.toJSON();
    for (const t in e3)
      "tags" === t && null !== e3[t] && (e3[t] = e3[t].join(", ")), "typeKeywords" === t && null !== e3[t] && (e3[t] = e3[t].join(", ")), "extent" === t && e3[t] && (e3[t] = JSON.stringify(e3[t]));
    return e3;
  }
};
e([y({ type: ["private", "shared", "org", "public"] })], S.prototype, "access", void 0), e([y()], S.prototype, "accessInformation", void 0), e([y({ type: String })], S.prototype, "apiKey", void 0), e([y({ json: { read: { source: "appProxies" } } })], S.prototype, "applicationProxies", void 0), e([y()], S.prototype, "avgRating", void 0), e([y()], S.prototype, "categories", void 0), e([y({ type: Date })], S.prototype, "created", void 0), e([y()], S.prototype, "culture", void 0), e([y()], S.prototype, "description", void 0), e([y({ readOnly: true })], S.prototype, "displayName", null), e([y({ type: M })], S.prototype, "extent", void 0), e([o("extent")], S.prototype, "readExtent", null), e([y()], S.prototype, "groupCategories", void 0), e([y({ readOnly: true })], S.prototype, "iconUrl", null), e([y()], S.prototype, "id", void 0), e([y({ readOnly: true })], S.prototype, "isLayer", null), e([y({ type: Boolean, readOnly: true })], S.prototype, "isOrgItem", void 0), e([y()], S.prototype, "itemControl", void 0), e([y({ readOnly: true })], S.prototype, "itemPageUrl", null), e([y({ readOnly: true })], S.prototype, "itemUrl", null), e([y()], S.prototype, "licenseInfo", void 0), e([y({ type: Date })], S.prototype, "modified", void 0), e([y()], S.prototype, "name", void 0), e([y()], S.prototype, "numComments", void 0), e([y()], S.prototype, "numRatings", void 0), e([y()], S.prototype, "numViews", void 0), e([y()], S.prototype, "owner", void 0), e([y()], S.prototype, "ownerFolder", void 0), e([y({ type: j })], S.prototype, "portal", void 0), e([y()], S.prototype, "screenshots", void 0), e([y()], S.prototype, "size", void 0), e([y()], S.prototype, "snippet", void 0), e([y()], S.prototype, "sourceJSON", void 0), e([y({ type: String })], S.prototype, "sourceUrl", void 0), e([y({ type: String })], S.prototype, "spatialReference", void 0), e([y()], S.prototype, "tags", void 0), e([y()], S.prototype, "thumbnail", void 0), e([y({ readOnly: true })], S.prototype, "thumbnailUrl", null), e([y()], S.prototype, "title", void 0), e([y()], S.prototype, "type", void 0), e([y()], S.prototype, "typeKeywords", void 0), e([y({ type: String, json: { read(e3, t) {
  var _a;
  if (k.has(t.type)) {
    const t2 = (_a = this.portal) == null ? void 0 : _a.restUrl;
    e3 || (e3 = t2 && this.id ? `${t2}/content/items/${this.id}/data` : null);
  }
  return e3;
} } })], S.prototype, "url", void 0), e([y({ readOnly: true })], S.prototype, "userItemUrl", null), S = f = e([a2("esri.portal.PortalItem")], S);
var x = S;

export {
  x
};
//# sourceMappingURL=chunk-D5MIJ6WT.js.map
