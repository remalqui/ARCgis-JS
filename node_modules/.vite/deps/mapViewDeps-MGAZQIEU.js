import {
  P as P2,
  o as o5
} from "./chunk-SKIIK7F2.js";
import {
  Y,
  a,
  d as d3,
  e as e6,
  m as m2,
  n as n7,
  n2 as n8,
  r as r4,
  r2 as r5,
  t as t8,
  t2 as t9,
  y
} from "./chunk-WRD2ODFQ.js";
import "./chunk-KMPUORBS.js";
import {
  i as i6
} from "./chunk-SJ7ZVWCS.js";
import {
  i as i7
} from "./chunk-HFINIBOV.js";
import "./chunk-2SB5E3DQ.js";
import {
  oe
} from "./chunk-HVNVJMIO.js";
import "./chunk-M7TZTH7O.js";
import "./chunk-Y2JGNMOW.js";
import "./chunk-TOXOPWS2.js";
import "./chunk-HSAM6HYE.js";
import "./chunk-7YWQQHOF.js";
import {
  m,
  n as n5,
  n3 as n6,
  t3 as t6,
  t4 as t7,
  w
} from "./chunk-TBMS67KR.js";
import {
  h as h5,
  i as i4,
  i2 as i5,
  o as o4,
  t as t5
} from "./chunk-FZIEP3HG.js";
import "./chunk-44OKOXKA.js";
import {
  n as n4
} from "./chunk-43WLCRAJ.js";
import {
  e2 as e5
} from "./chunk-N5CR6S5Y.js";
import {
  h as h4
} from "./chunk-KUTIL64W.js";
import "./chunk-AHVENFMO.js";
import "./chunk-JUYJSPTR.js";
import "./chunk-55E4WCHV.js";
import {
  t as t4
} from "./chunk-GCOLLOWS.js";
import "./chunk-IFHU7PKI.js";
import "./chunk-XKYCNHCM.js";
import "./chunk-Z2RTGLQI.js";
import "./chunk-FE2XXDCR.js";
import {
  c,
  i as i3,
  n as n3,
  u as u2,
  x
} from "./chunk-PEYWLFGJ.js";
import {
  T as T2,
  e2 as e4
} from "./chunk-NE5U5H4D.js";
import "./chunk-V66LHQVK.js";
import "./chunk-U3JB4DA4.js";
import "./chunk-AER5JAFS.js";
import {
  L as L3
} from "./chunk-FKEHFW5J.js";
import "./chunk-7HZ72XIE.js";
import "./chunk-YM46NRFF.js";
import "./chunk-3Y3ICAIL.js";
import "./chunk-TNXVIMSN.js";
import "./chunk-ZMKH5ZRU.js";
import "./chunk-Y7HVH6RU.js";
import "./chunk-UIVGJZCT.js";
import "./chunk-MVR2W3C6.js";
import "./chunk-FNTT27FW.js";
import "./chunk-HPXPYN62.js";
import "./chunk-PM77FW2O.js";
import "./chunk-AC3INPLN.js";
import "./chunk-C3ULZZZU.js";
import "./chunk-QVFTB6AS.js";
import "./chunk-MT6BDG6P.js";
import "./chunk-A6DRT2G4.js";
import "./chunk-4BRWSSYR.js";
import "./chunk-C7U2SKSO.js";
import "./chunk-NVZXNBIH.js";
import "./chunk-GTENSI4J.js";
import "./chunk-CN3PB7HS.js";
import "./chunk-NLX3GR5V.js";
import "./chunk-ZL3HOHNK.js";
import "./chunk-ZO32FGGH.js";
import "./chunk-PX3Q44FM.js";
import "./chunk-XYJMHUDA.js";
import "./chunk-CSLWFQJE.js";
import "./chunk-XP6ESZGI.js";
import "./chunk-3VTULECI.js";
import "./chunk-A4HFWKMU.js";
import "./chunk-TDXHXKUI.js";
import "./chunk-PR2OEILG.js";
import "./chunk-PJP6JTP7.js";
import "./chunk-IVABPLLZ.js";
import {
  E as E3,
  S,
  T
} from "./chunk-TBHRKIAA.js";
import "./chunk-34QQ6GDH.js";
import "./chunk-KTII3LWY.js";
import "./chunk-BBJLFBMQ.js";
import {
  E as E2,
  F as F2,
  L as L2,
  M as M2,
  Q,
  R as R2,
  _,
  qe,
  ze
} from "./chunk-JSMUQBPG.js";
import "./chunk-QAWS7Y22.js";
import "./chunk-OCIERVFA.js";
import "./chunk-QOWAKGE4.js";
import "./chunk-UX5D32RO.js";
import "./chunk-FHYNSVC4.js";
import {
  t as t3
} from "./chunk-FF5LS3YE.js";
import {
  B,
  C as C2,
  D,
  E,
  F,
  G,
  I,
  L,
  O,
  P,
  R,
  U
} from "./chunk-BCDDCNQ2.js";
import "./chunk-32JSK7KN.js";
import "./chunk-FN5LEP6H.js";
import "./chunk-D5EV57FM.js";
import "./chunk-EISDT6B4.js";
import "./chunk-LREUW66K.js";
import "./chunk-PM3CFO6N.js";
import "./chunk-6VJWKAPY.js";
import "./chunk-UQOM5GR4.js";
import "./chunk-YBMFRTPB.js";
import "./chunk-KKGVORR5.js";
import "./chunk-WTKN55TU.js";
import "./chunk-TDPKDZC3.js";
import "./chunk-M5UHI5WR.js";
import "./chunk-YAWND7HF.js";
import "./chunk-FJYIB7HF.js";
import "./chunk-SCOBW7KR.js";
import "./chunk-AHAGGZUI.js";
import "./chunk-TQGXXOXA.js";
import "./chunk-SO7CVIZK.js";
import {
  e as e7,
  w as w2
} from "./chunk-2DUJBWMF.js";
import "./chunk-L6LEC3UI.js";
import "./chunk-34BWOTUS.js";
import "./chunk-KKBQS7Z3.js";
import {
  e as e3
} from "./chunk-D5NSNTGJ.js";
import {
  n as n2,
  o as o3
} from "./chunk-OMDLZQUU.js";
import "./chunk-JUHOAKXP.js";
import "./chunk-FQZ2JEHK.js";
import "./chunk-CNCZBOLJ.js";
import {
  e as e2
} from "./chunk-DTEODQ6R.js";
import "./chunk-E2DURSMR.js";
import "./chunk-4YNW7QZY.js";
import "./chunk-E2BBTG5C.js";
import "./chunk-QNFDBY7V.js";
import "./chunk-EL72ISXP.js";
import "./chunk-5KLICR5E.js";
import "./chunk-PNA6D76Z.js";
import "./chunk-NDQCNJMM.js";
import "./chunk-R2HXL6HT.js";
import "./chunk-2PAQQUAG.js";
import "./chunk-QXPTMFGZ.js";
import "./chunk-4SARN32Z.js";
import "./chunk-QA4FMJA6.js";
import "./chunk-VFQINJTY.js";
import "./chunk-4J6R7QH6.js";
import "./chunk-HB3KZNZ3.js";
import {
  r as r3
} from "./chunk-VZAEQ6CY.js";
import {
  M,
  f,
  h as h3,
  l as l3
} from "./chunk-SS33L3LC.js";
import "./chunk-X4Y5OF5X.js";
import "./chunk-LNMNRMVX.js";
import "./chunk-OO4A3EBQ.js";
import "./chunk-BRDC7DKL.js";
import "./chunk-ZBWBCN2I.js";
import "./chunk-GZTLZ6RD.js";
import "./chunk-KTEJJM3A.js";
import "./chunk-SO6DBMQG.js";
import "./chunk-KTSEQWMB.js";
import "./chunk-QXGO5RRL.js";
import {
  u
} from "./chunk-EIE3W25Z.js";
import "./chunk-7KM4XBUC.js";
import "./chunk-OZXJDVTE.js";
import "./chunk-KIEN3CY2.js";
import "./chunk-4CZO65BK.js";
import "./chunk-7E3Q7HTF.js";
import "./chunk-FXDEKQIL.js";
import "./chunk-GJ5WE5D3.js";
import "./chunk-KKGH4SRQ.js";
import "./chunk-Y2CLYMXQ.js";
import "./chunk-4RFFPIT2.js";
import {
  d as d2
} from "./chunk-UKJF25H6.js";
import "./chunk-KSQTM6XI.js";
import "./chunk-7KX64CAH.js";
import "./chunk-J4R3XNTP.js";
import "./chunk-Y6FRAP2R.js";
import "./chunk-BVNZ3ETW.js";
import "./chunk-FJQ7HIY7.js";
import "./chunk-T4XWQYGC.js";
import "./chunk-4H5JODOT.js";
import "./chunk-TCASQSKO.js";
import "./chunk-5HAVROZG.js";
import {
  i as i2
} from "./chunk-MOPR7RFH.js";
import {
  n,
  o as o2
} from "./chunk-KW3ZNPTA.js";
import {
  r as r2
} from "./chunk-TJB4CGOM.js";
import "./chunk-CWQ6Q3PH.js";
import {
  h as h2,
  l as l2
} from "./chunk-XN5VV437.js";
import "./chunk-ODFH3BSN.js";
import "./chunk-WBSPL6CJ.js";
import "./chunk-N5ULYWRU.js";
import "./chunk-LQVUN6IS.js";
import "./chunk-JZM5YUHA.js";
import "./chunk-MOIETNWJ.js";
import "./chunk-3GSONYPC.js";
import "./chunk-SFV6XLDZ.js";
import "./chunk-3PLRSFLA.js";
import "./chunk-VBD33VNW.js";
import "./chunk-7A5C2EQ3.js";
import {
  A,
  t2
} from "./chunk-OYBXMT5R.js";
import "./chunk-CIDWM2UN.js";
import "./chunk-PD5Q7TDW.js";
import "./chunk-SHJI4PR4.js";
import "./chunk-2YSHZRCT.js";
import {
  j
} from "./chunk-HKVL2MJK.js";
import "./chunk-MH2LNFJK.js";
import {
  vt
} from "./chunk-O3CHVGVF.js";
import {
  C,
  h,
  r,
  s as s2
} from "./chunk-HNHXEGH2.js";
import {
  e,
  i,
  l,
  o,
  t
} from "./chunk-DWOEYHKS.js";
import {
  s3 as s
} from "./chunk-W2N7YT6I.js";
import "./chunk-I5JT24BO.js";
import {
  d,
  has
} from "./chunk-I4U7MQNO.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/shaders/Programs.js
var t10 = (e8) => n4({ ID: e8.id, PATTERN: e8.pattern });
var a2 = { shaders: (r7) => ({ vertexShader: t10(r7) + n7("background/background.vert"), fragmentShader: t10(r7) + n7("background/background.frag") }) };
var d4 = (e8) => n4({ ID: e8.id });
var i8 = { shaders: (r7) => ({ vertexShader: d4(r7) + n7("circle/circle.vert"), fragmentShader: d4(r7) + n7("circle/circle.frag") }) };
var n9 = (e8) => n4({ ID: e8.id, PATTERN: e8.pattern });
var l4 = { shaders: (r7) => ({ vertexShader: n9(r7) + n7("fill/fill.vert"), fragmentShader: n9(r7) + n7("fill/fill.frag") }) };
var s3 = (e8) => n4({ ID: e8.id });
var f2 = { shaders: (r7) => ({ vertexShader: s3(r7) + n7("outline/outline.vert"), fragmentShader: s3(r7) + n7("outline/outline.frag") }) };
var h6 = (e8) => n4({ ID: e8.id, SDF: e8.sdf });
var o6 = { shaders: (r7) => ({ vertexShader: h6(r7) + n7("icon/icon.vert"), fragmentShader: h6(r7) + n7("icon/icon.frag") }) };
var g = (e8) => n4({ ID: e8.id, PATTERN: e8.pattern, SDF: e8.sdf });
var c2 = { shaders: (r7) => ({ vertexShader: g(r7) + n7("line/line.vert"), fragmentShader: g(r7) + n7("line/line.frag") }) };
var S2 = (e8) => n4({ ID: e8.id });
var v = { shaders: (r7) => ({ vertexShader: S2(r7) + n7("text/text.vert"), fragmentShader: S2(r7) + n7("text/text.frag") }) };

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/shaders/VTLMaterialManager.js
var o7 = class {
  constructor() {
    this._programByKey = /* @__PURE__ */ new Map();
  }
  dispose() {
    this._programByKey.forEach((e8) => e8.dispose()), this._programByKey.clear();
  }
  getMaterialProgram(e8, r7, t12) {
    const a5 = r7.key << 3 | this._getMaterialOptionsValue(r7.type, t12);
    if (this._programByKey.has(a5))
      return this._programByKey.get(a5);
    const s7 = this._getProgramTemplate(r7.type), { shaders: n13 } = s7, { vertexShader: c5, fragmentShader: i12 } = n13(t12), o12 = r7.getShaderHeader(), u8 = r7.getShaderMain(), p = c5.replace("#pragma header", o12).replace("#pragma main", u8), g2 = e8.programCache.acquire(p, i12, r7.getAttributeLocations());
    return this._programByKey.set(a5, g2), g2;
  }
  _getMaterialOptionsValue(r7, t12) {
    switch (r7) {
      case L3.BACKGROUND: {
        const e8 = t12;
        return (e8.pattern ? 1 : 0) << 1 | (e8.id ? 1 : 0);
      }
      case L3.FILL: {
        const e8 = t12;
        return (e8.pattern ? 1 : 0) << 1 | (e8.id ? 1 : 0);
      }
      case L3.OUTLINE:
        return t12.id ? 1 : 0;
      case L3.LINE: {
        const e8 = t12;
        return (e8.sdf ? 1 : 0) << 2 | (e8.pattern ? 1 : 0) << 1 | (e8.id ? 1 : 0);
      }
      case L3.ICON: {
        const e8 = t12;
        return (e8.sdf ? 1 : 0) << 1 | (e8.id ? 1 : 0);
      }
      case L3.CIRCLE:
        return t12.id ? 1 : 0;
      case L3.TEXT:
        return t12.id ? 1 : 0;
      default:
        return 0;
    }
  }
  _getProgramTemplate(o12) {
    switch (o12) {
      case L3.BACKGROUND:
        return a2;
      case L3.CIRCLE:
        return i8;
      case L3.FILL:
        return l4;
      case L3.ICON:
        return o6;
      case L3.LINE:
        return c2;
      case L3.OUTLINE:
        return f2;
      case L3.TEXT:
        return v;
      default:
        return null;
    }
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/BitBlitRenderer.js
var _2 = class {
  constructor() {
    this._initialized = false;
  }
  dispose() {
    this._program = t(this._program), this._vertexArrayObject = t(this._vertexArrayObject);
  }
  render(r7, t12, e8, i12) {
    r7 && (this._initialized || this._initialize(r7), r7.setBlendFunctionSeparate(R.ONE, R.ONE_MINUS_SRC_ALPHA, R.ONE, R.ONE_MINUS_SRC_ALPHA), r7.bindVAO(this._vertexArrayObject), r7.useProgram(this._program), t12.setSamplingMode(e8), r7.bindTexture(t12, 0), this._program.setUniform1i("u_tex", 0), this._program.setUniform1f("u_opacity", i12), r7.drawArrays(E.TRIANGLE_STRIP, 0, 4), r7.bindTexture(null, 0), r7.bindVAO());
  }
  _initialize(r7) {
    if (this._initialized)
      return true;
    const s7 = e5(r7, e6);
    if (!s7)
      return false;
    const o12 = new Int8Array(16);
    o12[0] = -1, o12[1] = -1, o12[2] = 0, o12[3] = 0, o12[4] = 1, o12[5] = -1, o12[6] = 1, o12[7] = 0, o12[8] = -1, o12[9] = 1, o12[10] = 0, o12[11] = 1, o12[12] = 1, o12[13] = 1, o12[14] = 1, o12[15] = 1;
    const _5 = e6.attributes, p = new u2(r7, _5, t7, { geometry: c.createVertex(r7, F.STATIC_DRAW, o12) });
    return this._program = s7, this._vertexArrayObject = p, this._initialized = true, true;
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/MaterialManager.js
var t11 = (e8) => e8 === T.HITTEST || e8 === T.LABEL_ALPHA;
var a3 = (e8) => (t11(e8) ? 1 : 0) | (e8 === T.HIGHLIGHT ? 2 : 0);
var s4 = ({ rendererInfo: r7, drawPhase: e8 }, t12, s7) => `${t12.getVariationHash()}-${a3(e8)}-${r7.getVariationHash()}-${null != s7 && s7.join(".")}`;
var o8 = (e8, a5, s7, o12 = {}) => {
  if (o12 = { ...o12, ...a5.getVariation(), ...e8.rendererInfo.getVariation(), highlight: e8.drawPhase === T.HIGHLIGHT, id: t11(e8.drawPhase) }, null != s7)
    for (const r7 of s7)
      o12[r7] = true;
  return o12;
};
var i9 = class {
  constructor(r7) {
    this._rctx = r7, this._programByKey = /* @__PURE__ */ new Map();
  }
  dispose() {
    this._programByKey.forEach((r7) => r7.dispose()), this._programByKey.clear();
  }
  getProgram(r7, t12 = []) {
    const a5 = r7.vsPath + "." + r7.fsPath + JSON.stringify(t12);
    if (this._programByKey.has(a5))
      return this._programByKey.get(a5);
    const s7 = { ...t12.map((r8) => "string" == typeof r8 ? { name: r8, value: true } : r8).reduce((r8, e8) => ({ ...r8, [e8.name]: e8.value }), {}) }, { vsPath: o12, fsPath: i12, attributes: h11 } = r7, n13 = o5(o12, i12, h11, s7), g2 = this._rctx.programCache.acquire(n13.shaders.vertexShader, n13.shaders.fragmentShader, n13.attributes);
    if (!g2)
      throw new Error("Unable to get program for key: ${key}");
    return this._programByKey.set(a5, g2), g2;
  }
  getMaterialProgram(r7, t12, a5, i12, h11) {
    const n13 = s4(r7, t12, h11);
    if (this._programByKey.has(n13))
      return this._programByKey.get(n13);
    const g2 = o8(r7, t12, h11, { ignoresSamplerPrecision: r7.context.driverTest.ignoresSamplerPrecision.result }), m4 = o5(a5, a5, i12, g2), y2 = this._rctx.programCache.acquire(m4.shaders.vertexShader, m4.shaders.fragmentShader, m4.attributes);
    if (!y2)
      throw new Error("Unable to get program for key: ${key}");
    return this._programByKey.set(n13, y2), y2;
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/TextureUploadManager.js
var n10 = class {
  constructor(e8, t12) {
    this._queue = [], this._context = e8, this._refreshable = t12;
  }
  destroy() {
    this._queue = [];
  }
  enqueueTextureUpdate(o12, n13) {
    const h11 = C(), i12 = o12, a5 = qe, c5 = Math.ceil(i12.height / a5);
    if (s2(n13), this._context.type === n2.WEBGL1)
      this._queue.push({ type: "no-chunk", request: o12, resolver: h11, options: n13 });
    else
      for (let e8 = 0; e8 < c5; e8++) {
        const t12 = e8 * a5, s7 = e8 === c5 - 1, u8 = s7 ? i12.height - a5 * e8 : a5;
        this._queue.push({ type: "chunk", request: o12, resolver: h11, chunk: e8, chunkOffset: t12, destHeight: u8, chunkIsLast: s7, options: n13 });
      }
    return h(n13, (e8) => h11.reject(e8)), h11.promise;
  }
  upload() {
    let e8 = 0;
    for (; this._queue.length; ) {
      const t12 = performance.now(), s7 = this._queue.shift();
      if (s7) {
        if (null != s7.options.signal && s7.options.signal.aborted)
          continue;
        switch (s7.type) {
          case "chunk":
            this._uploadChunk(s7);
            break;
          case "no-chunk":
            this._uploadNoChunk(s7);
        }
        const u8 = performance.now() - t12;
        if (e8 += u8, e8 + u8 >= ze)
          break;
      }
    }
    this._queue.length && this._refreshable.requestRender();
  }
  _uploadChunk(e8) {
    const { request: t12, resolver: s7, chunkOffset: o12, chunkIsLast: u8, destHeight: r7 } = e8, { data: n13, texture: h11, width: i12 } = t12;
    null != n13 && (h11.updateData(0, 0, o12, i12, r7, n13, o12), u8 && s7.resolve());
  }
  _uploadNoChunk(e8) {
    const { request: t12, resolver: s7 } = e8, { data: o12, texture: u8 } = t12;
    u8.setData(o12), s7.resolve();
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/WorldExtentClipRenderer.js
var u3 = r3(-0.5, -0.5);
var f3 = class {
  constructor() {
    this._centerNdc = n(), this._pxToNdc = n(), this._worldDimensionsPx = n(), this._mat3 = e3(), this._initialized = false;
  }
  dispose() {
    this._program = t(this._program), this._quad = t(this._quad);
  }
  render(t12, s7) {
    const { context: i12 } = t12;
    return !!this._updateGeometry(t12, s7) && (this._initialized || this._initialize(i12), i12.setDepthWriteEnabled(false), i12.setDepthTestEnabled(false), i12.setColorMask(false, false, false, false), i12.setBlendingEnabled(false), i12.setStencilOp(O.KEEP, O.KEEP, O.REPLACE), i12.setStencilFunction(I.ALWAYS, 1, 255), i12.setStencilTestEnabled(true), i12.useProgram(this._program), this._program.setUniformMatrix3fv("u_worldExtent", this._mat3), this._quad.draw(), this._quad.unbind(), true);
  }
  _initialize(t12) {
    if (this._initialized)
      return;
    const s7 = e5(t12, r4);
    s7 && (this._program = s7, this._quad = new n5(t12, [0, 0, 1, 0, 0, 1, 1, 1]), this._initialized = true);
  }
  _updateGeometry(t12, a5) {
    const { state: n13, pixelRatio: m4 } = t12, { size: c5, rotation: d6 } = n13, p = Math.round(c5[0] * m4), _5 = Math.round(c5[1] * m4);
    if (!n13.spatialReference.isWrappable)
      return false;
    const l8 = r2(d6), f5 = Math.abs(Math.cos(l8)), b = Math.abs(Math.sin(l8)), g2 = Math.round(p * f5 + _5 * b), x2 = Math.round(n13.worldScreenWidth);
    if (g2 <= x2)
      return false;
    const j3 = p * b + _5 * f5, E4 = x2 * m4, M3 = (a5.left - a5.right) * m4 / p, w3 = (a5.bottom - a5.top) * m4 / _5;
    o2(this._worldDimensionsPx, E4, j3, 1), o2(this._pxToNdc, 2 / p, -2 / _5, 1), o2(this._centerNdc, M3, w3, 1);
    const P4 = this._mat3;
    return l3(P4, this._centerNdc), f(P4, P4, this._pxToNdc), 0 !== d6 && h3(P4, P4, l8), f(P4, P4, this._worldDimensionsPx), M(P4, P4, u3), true;
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/effects/AnimationEffect.js
var s5 = class extends t6 {
  constructor() {
    super(...arguments), this.defines = [], this._desc = { vsPath: "fx/integrate", fsPath: "fx/integrate", attributes: /* @__PURE__ */ new Map([["a_position", 0]]) };
  }
  dispose() {
    this._quad && this._quad.dispose();
  }
  bind() {
  }
  unbind() {
  }
  draw(t12, r7) {
    if (!(r7 == null ? void 0 : r7.size))
      return;
    const { context: a5, renderingOptions: s7 } = t12;
    this._quad || (this._quad = new n5(a5, [0, 0, 1, 0, 0, 1, 1, 1]));
    const o12 = a5.getBoundFramebufferObject(), { x: n13, y: u8, width: m4, height: d6 } = a5.getViewport();
    r7.bindTextures(a5);
    const f5 = r7.getBlock(Q);
    if (null == f5)
      return;
    const c5 = f5.getFBO(a5), l8 = f5.getFBO(a5, 1);
    a5.setViewport(0, 0, r7.size, r7.size), this._computeDelta(t12, l8, s7.labelsAnimationTime), this._updateAnimationState(t12, l8, c5), a5.bindFramebuffer(o12), a5.setViewport(n13, u8, m4, d6);
  }
  _computeDelta(e8, i12, a5) {
    const { context: s7, painter: o12, displayLevel: n13 } = e8, u8 = o12.materialManager.getProgram(this._desc, ["delta"]);
    s7.bindFramebuffer(i12), s7.setClearColor(0, 0, 0, 0), s7.clear(s7.gl.COLOR_BUFFER_BIT), s7.useProgram(u8);
    const m4 = has("featurelayer-animation-enabled") ? a5 : 1;
    u8.setUniform1i("u_maskTexture", E2), u8.setUniform1i("u_sourceTexture", F2), u8.setUniform1f("u_timeDelta", e8.deltaTime), u8.setUniform1f("u_animationTime", m4), u8.setUniform1f("u_zoomLevel", Math.round(10 * n13)), this._quad.draw();
  }
  _updateAnimationState(e8, t12, r7) {
    const { context: i12, painter: a5 } = e8, s7 = a5.materialManager.getProgram(this._desc, ["update"]);
    i12.bindTexture(t12.colorTexture, 1), i12.useProgram(s7), s7.setUniform1i("u_sourceTexture", 1), i12.bindFramebuffer(r7), i12.setClearColor(0, 0, 0, 0), i12.clear(i12.gl.COLOR_BUFFER_BIT), this._quad.draw();
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/effects/FeatureEffect.js
var r6 = class extends t6 {
  constructor(e8) {
    super(), this.name = this.constructor.name, this.defines = [e8];
  }
  dispose() {
  }
  bind({ context: e8, painter: t12 }) {
    this._prev = e8.getBoundFramebufferObject();
    const { width: r7, height: s7 } = e8.getViewport(), o12 = t12.getFbos(r7, s7).effect0;
    e8.bindFramebuffer(o12), e8.setColorMask(true, true, true, true), e8.setClearColor(0, 0, 0, 0), e8.clear(e8.gl.COLOR_BUFFER_BIT);
  }
  unbind() {
  }
  draw(e8, r7) {
    const { context: s7, painter: o12 } = e8, n13 = o12.getPostProcessingEffects(r7), c5 = s7.getBoundFramebufferObject();
    for (const { postProcessingEffect: t12, effect: f5 } of n13)
      t12.draw(e8, c5, f5);
    s7.bindFramebuffer(this._prev), s7.setStencilTestEnabled(false), o12.blitTexture(s7, c5.colorTexture, L.NEAREST), s7.setStencilTestEnabled(true);
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/effects/highlight/HighlightRenderer.js
var c3 = class {
  constructor() {
    this._width = void 0, this._height = void 0, this._resources = null;
  }
  dispose() {
    this._resources && (this._resources.quadGeometry.dispose(), this._resources.quadVAO.dispose(), this._resources.highlightProgram.dispose(), this._resources.blurProgram.dispose(), this._resources = null);
  }
  preBlur(e8, i12) {
    e8.bindTexture(i12, L2), e8.useProgram(this._resources.blurProgram), this._resources.blurProgram.setUniform4fv("u_direction", [1, 0, 1 / this._width, 0]), this._resources.blurProgram.setUniformMatrix4fv("u_channelSelector", t5), e8.bindVAO(this._resources.quadVAO), e8.drawArrays(E.TRIANGLE_STRIP, 0, 4), e8.bindVAO();
  }
  finalBlur(e8, s7) {
    e8.bindTexture(s7, L2), e8.useProgram(this._resources.blurProgram), this._resources.blurProgram.setUniform4fv("u_direction", [0, 1, 0, 1 / this._height]), this._resources.blurProgram.setUniformMatrix4fv("u_channelSelector", i5), e8.bindVAO(this._resources.quadVAO), e8.drawArrays(E.TRIANGLE_STRIP, 0, 4), e8.bindVAO();
  }
  renderHighlight(e8, s7, i12) {
    e8.bindTexture(s7, L2), e8.useProgram(this._resources.highlightProgram), i12.applyHighlightOptions(e8, this._resources.highlightProgram), e8.bindVAO(this._resources.quadVAO), e8.setBlendingEnabled(true), e8.setBlendFunction(R.ONE, R.ONE_MINUS_SRC_ALPHA), e8.drawArrays(E.TRIANGLE_STRIP, 0, 4), e8.bindVAO();
  }
  _initialize(s7, i12, a5) {
    this._width = i12, this._height = a5;
    const m4 = c.createVertex(s7, F.STATIC_DRAW, new Int8Array([-1, -1, 0, 0, 1, -1, 1, 0, -1, 1, 0, 1, 1, 1, 1, 1]).buffer), c5 = new u2(s7, /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]), { geometry: [new t3("a_position", 2, C2.BYTE, 0, 4), new t3("a_texcoord", 2, C2.UNSIGNED_BYTE, 2, 4)] }, { geometry: m4 }), f5 = e5(s7, t8), b = e5(s7, r5);
    s7.useProgram(f5), f5.setUniform1i("u_texture", L2), f5.setUniform1i("u_shade", M2), f5.setUniform1f("u_sigma", o4), s7.useProgram(b), b.setUniform1i("u_texture", L2), b.setUniform1f("u_sigma", o4), this._resources = { quadGeometry: m4, quadVAO: c5, highlightProgram: f5, blurProgram: b };
  }
  setup(r7, e8, s7) {
    this._resources ? (this._width = e8, this._height = s7) : this._initialize(r7, e8, s7);
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/effects/highlight/HighlightSurfaces.js
function h7(r7, h11, u8) {
  const c5 = new e4(h11, u8);
  return c5.wrapMode = D.CLAMP_TO_EDGE, new x(r7, c5, new i3(B.STENCIL_INDEX8, h11, u8));
}
var u4 = class {
  constructor() {
    this._width = void 0, this._height = void 0, this._resources = null;
  }
  dispose() {
    this._resources && (this._resources.sharedBlur1Fbo.dispose(), this._resources.sharedBlur2Fbo.dispose(), this._resources = i(this._resources));
  }
  _initialize(r7, e8, s7) {
    this._width = e8, this._height = s7;
    const t12 = h7(r7, e8, s7), o12 = h7(r7, e8, s7);
    this._resources = { sharedBlur1Fbo: t12, sharedBlur2Fbo: o12 };
  }
  setup(r7, e8, s7) {
    !this._resources || this._width === e8 && this._height === s7 || this.dispose(), this._resources || this._initialize(r7, e8, s7);
  }
  get sharedBlur1Tex() {
    return this._resources.sharedBlur1Fbo.colorTexture;
  }
  get sharedBlur1Fbo() {
    return this._resources.sharedBlur1Fbo;
  }
  get sharedBlur2Tex() {
    return this._resources.sharedBlur2Fbo.colorTexture;
  }
  get sharedBlur2Fbo() {
    return this._resources.sharedBlur2Fbo;
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/effects/HighlightEffect.js
var h8 = 4;
var d5 = 4 / h8;
var l5 = class extends t6 {
  constructor() {
    super(...arguments), this.defines = ["highlight"], this._hlRenderer = new c3(), this._width = void 0, this._height = void 0, this._boundFBO = null, this._hlSurfaces = new u4(), this._adjustedWidth = void 0, this._adjustedHeight = void 0, this._blitRenderer = new _2();
  }
  dispose() {
    var _a, _b;
    (_a = this._hlSurfaces) == null ? void 0 : _a.dispose(), (_b = this._hlRenderer) == null ? void 0 : _b.dispose(), this._boundFBO = null;
  }
  bind(e8) {
    const { context: t12, painter: s7 } = e8, { width: r7, height: i12 } = t12.getViewport(), h11 = s7.getFbos(r7, i12).effect0;
    this.setup(e8, r7, i12), t12.bindFramebuffer(h11), t12.setColorMask(true, true, true, true), t12.setClearColor(0, 0, 0, 0), t12.clear(t12.gl.COLOR_BUFFER_BIT);
  }
  unbind() {
  }
  setup({ context: e8 }, t12, s7) {
    this._width = t12, this._height = s7;
    const r7 = t12 % h8, i12 = s7 % h8;
    t12 += r7 < h8 / 2 ? -r7 : h8 - r7, s7 += i12 < h8 / 2 ? -i12 : h8 - i12, this._adjustedWidth = t12, this._adjustedHeight = s7, this._boundFBO = e8.getBoundFramebufferObject();
    const l8 = Math.round(t12 * d5), o12 = Math.round(s7 * d5);
    this._hlRenderer.setup(e8, l8, o12), this._hlSurfaces.setup(e8, l8, o12);
  }
  draw(e8) {
    const { context: t12, highlightGradient: s7 } = e8;
    if (!s7)
      return;
    const r7 = t12.getBoundFramebufferObject();
    t12.setViewport(0, 0, this._adjustedWidth * d5, this._adjustedHeight * d5), t12.bindFramebuffer(this._hlSurfaces.sharedBlur1Fbo), t12.setStencilTestEnabled(false), t12.setClearColor(0, 0, 0, 0), t12.clear(t12.gl.COLOR_BUFFER_BIT), this._blitRenderer.render(t12, r7.colorTexture, L.NEAREST, 1), t12.setStencilTestEnabled(false), t12.setBlendingEnabled(false), t12.setColorMask(false, false, false, true), t12.bindFramebuffer(this._hlSurfaces.sharedBlur2Fbo), t12.setClearColor(0, 0, 0, 0), t12.clear(t12.gl.COLOR_BUFFER_BIT), this._hlRenderer.preBlur(t12, this._hlSurfaces.sharedBlur1Tex), t12.bindFramebuffer(this._hlSurfaces.sharedBlur1Fbo), t12.setClearColor(0, 0, 0, 0), t12.clear(t12.gl.COLOR_BUFFER_BIT), this._hlRenderer.finalBlur(t12, this._hlSurfaces.sharedBlur2Tex), t12.bindFramebuffer(this._boundFBO), t12.setBlendingEnabled(true), t12.setColorMask(true, true, true, true), t12.setViewport(0, 0, this._width, this._height), this._hlRenderer.renderHighlight(t12, this._hlSurfaces.sharedBlur1Tex, s7), this._boundFBO = null;
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/effects/HittestEffect.js
var o9 = class extends t6 {
  constructor() {
    super(...arguments), this.name = this.constructor.name, this.defines = ["hittest"];
  }
  dispose() {
    null != this._fbo && this._fbo.dispose();
  }
  createOptions({ pixelRatio: e8 }, i12, s7 = _) {
    if (!i12.length)
      return null;
    const r7 = i12.shift(), o12 = r7.x, n13 = r7.y;
    return this._outstanding = r7, { type: "hittest", distance: s7 * e8, position: [o12, n13] };
  }
  bind(t12) {
    const { context: i12, attributeView: s7 } = t12;
    if (!s7.size)
      return;
    const r7 = s7.getBlock(R2);
    if (null == r7)
      return;
    const o12 = r7.getFBO(i12);
    i12.setViewport(0, 0, s7.size, s7.size), i12.bindFramebuffer(o12), i12.setColorMask(true, true, true, true), i12.setClearColor(0, 0, 0, 0), i12.clear(i12.gl.COLOR_BUFFER_BIT | i12.gl.DEPTH_BUFFER_BIT);
  }
  unbind(t12) {
  }
  draw(t12) {
    if (null == this._outstanding)
      return;
    const e8 = this._outstanding;
    this._outstanding = null, this._resolve(t12, e8.resolvers);
  }
  async _resolve(t12, i12) {
    const { context: o12, attributeView: n13 } = t12, c5 = n13.getBlock(R2);
    if (null == c5)
      return void i12.forEach((t13) => t13.resolve([]));
    const l8 = c5.getFBO(o12), d6 = new Uint8Array(l8.width * l8.height * 4);
    try {
      await l8.readPixelsAsync(0, 0, l8.width, l8.height, G.RGBA, U.UNSIGNED_BYTE, d6);
    } catch (u8) {
      return void i12.forEach((t13) => t13.resolve([]));
    }
    const a5 = [];
    for (let e8 = 0; e8 < d6.length; e8 += 4) {
      const t13 = d6[e8], i13 = d6[e8 + 3];
      t13 && a5.push({ id: e8 / 4, directHits: i13 });
    }
    a5.sort((t13, e8) => e8.directHits === t13.directHits ? e8.id - t13.id : e8.directHits - t13.directHits);
    const h11 = a5.map((t13) => t13.id);
    i12.forEach((t13) => t13.resolve(h11));
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/effects/HittestEffectVTL.js
var i10 = class extends t6 {
  constructor() {
    super(...arguments), this.name = this.constructor.name, this.defines = ["id"], this._lastSize = 0, this._boundFBO = null;
  }
  dispose() {
    null != this._fbo && this._fbo.dispose();
  }
  bind({ context: t12, painter: e8 }) {
    const { width: s7, height: o12 } = t12.getViewport();
    this._boundFBO = t12.getBoundFramebufferObject();
    const i12 = e8.getFbos(s7, o12).effect0;
    t12.bindFramebuffer(i12), t12.setColorMask(true, true, true, true), t12.setClearColor(0, 0, 0, 0), t12.clear(t12.gl.COLOR_BUFFER_BIT);
  }
  unbind({ context: t12 }) {
    t12.bindFramebuffer(this._boundFBO), this._boundFBO = null;
  }
  draw(e8, s7, o12 = 2 * _) {
    this._resolve(e8, s7, o12);
  }
  async _resolve({ context: t12, state: e8, pixelRatio: i12 }, r7, n13) {
    const f5 = t12.getBoundFramebufferObject(), a5 = e8.size[1] * i12, h11 = Math.round(n13 * i12), u8 = h11 / 2, l8 = h11 / 2;
    this._ensureBuffer(h11), r7.forEach(async (t13, e9) => {
      const n14 = /* @__PURE__ */ new Map(), b = Math.floor(e9.x * i12 - h11 / 2), c5 = Math.floor(a5 - e9.y * i12 - h11 / 2);
      await f5.readPixelsAsync(b, c5, h11, h11, G.RGBA, U.UNSIGNED_BYTE, this._buf);
      for (let s7 = 0; s7 < this._buf32.length; s7++) {
        const t14 = this._buf32[s7];
        if (4294967295 !== t14 && 0 !== t14) {
          const e10 = s7 % h11, o12 = h11 - Math.floor(s7 / h11), i13 = (u8 - e10) * (u8 - e10) + (l8 - o12) * (l8 - o12), r8 = n14.has(t14) ? n14.get(t14) : 4294967295;
          n14.set(t14, Math.min(i13, r8));
        }
      }
      const _5 = Array.from(n14).sort((t14, e10) => t14[1] - e10[1]).map((t14) => t14[0]);
      t13.resolve(_5), r7.delete(e9);
    });
  }
  _ensureBuffer(t12) {
    this._lastSize !== t12 && (this._lastSize = t12, this._buf = new Uint8Array(4 * t12 * t12), this._buf32 = new Uint32Array(this._buf.buffer));
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/effects/post-processing/Bloom.js
var a4 = 5;
var u5 = [1, 0];
var l6 = [0, 1];
var m3 = [1, 0.8, 0.6, 0.4, 0.2];
var _3 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
var h9 = class {
  constructor() {
    this._intensityFBO = null, this._compositeFBO = null, this._mipsFBOs = new Array(a4), this._nMips = a4, this._kernelSizeArray = [3, 5, 7, 9, 11], this._size = [0, 0], this._programDesc = { luminosityHighPass: { vsPath: "post-processing/pp", fsPath: "post-processing/bloom/luminosityHighPass", attributes: /* @__PURE__ */ new Map([["a_position", 0]]) }, gaussianBlur: { vsPath: "post-processing/pp", fsPath: "post-processing/bloom/gaussianBlur", attributes: /* @__PURE__ */ new Map([["a_position", 0]]) }, composite: { vsPath: "post-processing/pp", fsPath: "post-processing/bloom/composite", attributes: /* @__PURE__ */ new Map([["a_position", 0]]) }, blit: { vsPath: "post-processing/pp", fsPath: "post-processing/blit", attributes: /* @__PURE__ */ new Map([["a_position", 0]]) } };
  }
  dispose() {
    if (this._quad = t(this._quad), this._intensityFBO = t(this._intensityFBO), this._compositeFBO = t(this._compositeFBO), this._mipsFBOs) {
      for (let t12 = 0; t12 < this._nMips; t12++)
        this._mipsFBOs[t12] && (this._mipsFBOs[t12].horizontal.dispose(), this._mipsFBOs[t12].vertical.dispose());
      this._mipsFBOs = null;
    }
  }
  draw(t12, i12, r7) {
    const { width: o12, height: n13 } = i12, { context: h11, painter: p } = t12, { materialManager: c5 } = p, d6 = h11.gl, f5 = this._programDesc, { strength: b, radius: F3, threshold: O2 } = r7;
    this._quad || (this._quad = new n5(h11, [-1, -1, 1, -1, -1, 1, 1, 1])), this._createOrResizeResources(t12, o12, n13), h11.setStencilTestEnabled(false), h11.setBlendingEnabled(true), h11.setBlendFunction(R.ONE, R.ONE_MINUS_SRC_ALPHA), h11.setStencilWriteMask(0);
    const B2 = this._quad;
    B2.bind(), h11.bindFramebuffer(this._intensityFBO);
    const g2 = c5.getProgram(f5.luminosityHighPass);
    h11.useProgram(g2), h11.bindTexture(i12.colorTexture, 0), g2.setUniform1i("u_texture", 0), g2.setUniform3fv("u_defaultColor", [0, 0, 0]), g2.setUniform1f("u_defaultOpacity", 0), g2.setUniform1f("u_luminosityThreshold", O2), g2.setUniform1f("u_smoothWidth", 0.01);
    const T4 = [Math.round(o12 / 2), Math.round(n13 / 2)];
    h11.setViewport(0, 0, T4[0], T4[1]), h11.setClearColor(0, 0, 0, 0), h11.clear(d6.COLOR_BUFFER_BIT), B2.draw(), h11.setBlendingEnabled(false);
    let x2 = this._intensityFBO.colorTexture;
    for (let e8 = 0; e8 < this._nMips; e8++) {
      const t13 = c5.getProgram(f5.gaussianBlur, [{ name: "radius", value: this._kernelSizeArray[e8] }]);
      h11.useProgram(t13), h11.bindTexture(x2, e8 + 1), t13.setUniform1i("u_colorTexture", e8 + 1), t13.setUniform2fv("u_texSize", T4), t13.setUniform2fv("u_direction", u5), h11.setViewport(0, 0, T4[0], T4[1]);
      const s7 = this._mipsFBOs[e8];
      h11.bindFramebuffer(s7.horizontal), B2.draw(), x2 = s7.horizontal.colorTexture, h11.bindFramebuffer(s7.vertical), h11.bindTexture(x2, e8 + 1), t13.setUniform2fv("u_direction", l6), B2.draw(), x2 = s7.vertical.colorTexture, T4[0] = Math.round(T4[0] / 2), T4[1] = Math.round(T4[1] / 2);
    }
    h11.setViewport(0, 0, o12, n13);
    const w3 = c5.getProgram(f5.composite, [{ name: "nummips", value: a4 }]);
    h11.bindFramebuffer(this._compositeFBO), h11.useProgram(w3), w3.setUniform1f("u_bloomStrength", b), w3.setUniform1f("u_bloomRadius", F3), w3.setUniform1fv("u_bloomFactors", m3), w3.setUniform3fv("u_bloomTintColors", _3), h11.bindTexture(this._mipsFBOs[0].vertical.colorTexture, 1), w3.setUniform1i("u_blurTexture1", 1), h11.bindTexture(this._mipsFBOs[1].vertical.colorTexture, 2), w3.setUniform1i("u_blurTexture2", 2), h11.bindTexture(this._mipsFBOs[2].vertical.colorTexture, 3), w3.setUniform1i("u_blurTexture3", 3), h11.bindTexture(this._mipsFBOs[3].vertical.colorTexture, 4), w3.setUniform1i("u_blurTexture4", 4), h11.bindTexture(this._mipsFBOs[4].vertical.colorTexture, 5), w3.setUniform1i("u_blurTexture5", 5), B2.draw(), h11.bindFramebuffer(i12), h11.setBlendingEnabled(true);
    const M3 = c5.getProgram(f5.blit);
    h11.useProgram(M3), h11.bindTexture(this._compositeFBO.colorTexture, 6), M3.setUniform1i("u_texture", 6), h11.setBlendFunction(R.ONE, R.ONE), B2.draw(), B2.unbind(), h11.setBlendFunction(R.ONE, R.ONE_MINUS_SRC_ALPHA), h11.setStencilTestEnabled(true);
  }
  _createOrResizeResources(t12, e8, s7) {
    const { context: a5 } = t12;
    if (this._compositeFBO && this._size[0] === e8 && this._size[1] === s7)
      return;
    this._size[0] = e8, this._size[1] = s7;
    const u8 = [Math.round(e8 / 2), Math.round(s7 / 2)];
    if (this._compositeFBO)
      this._compositeFBO.resize(e8, s7);
    else {
      const t13 = new e4(e8, s7);
      t13.internalFormat = G.RGBA, t13.wrapMode = D.CLAMP_TO_EDGE, this._compositeFBO = new x(a5, t13);
    }
    if (this._intensityFBO)
      this._intensityFBO.resize(u8[0], u8[1]);
    else {
      const t13 = new e4(u8[0], u8[1]);
      t13.internalFormat = G.RGBA, t13.wrapMode = D.CLAMP_TO_EDGE, this._intensityFBO = new x(a5, t13);
    }
    for (let l8 = 0; l8 < this._nMips; l8++) {
      if (this._mipsFBOs[l8])
        this._mipsFBOs[l8].horizontal.resize(u8[0], u8[1]), this._mipsFBOs[l8].vertical.resize(u8[0], u8[1]);
      else {
        const t13 = new e4(u8[0], u8[1]);
        t13.internalFormat = G.RGBA, t13.wrapMode = D.CLAMP_TO_EDGE, this._mipsFBOs[l8] = { horizontal: new x(a5, t13), vertical: new x(a5, t13) };
      }
      u8[0] = Math.round(u8[0] / 2), u8[1] = Math.round(u8[1] / 2);
    }
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/effects/post-processing/Blur.js
var n11 = [1, 0];
var o10 = [0, 1];
var u6 = class {
  constructor() {
    this._blurFBO = null, this._size = [0, 0], this._programDesc = { gaussianBlur: { vsPath: "post-processing/pp", fsPath: "post-processing/blur/gaussianBlur", attributes: /* @__PURE__ */ new Map([["a_position", 0]]) }, radialBlur: { vsPath: "post-processing/pp", fsPath: "post-processing/blur/radial-blur", attributes: /* @__PURE__ */ new Map([["a_position", 0]]) }, blit: { vsPath: "post-processing/pp", fsPath: "post-processing/blit", attributes: /* @__PURE__ */ new Map([["a_position", 0]]) } };
  }
  dispose() {
    this._blurFBO && (this._blurFBO.dispose(), this._blurFBO = null);
  }
  draw(t12, s7, r7) {
    const { context: i12 } = t12, { type: a5, radius: n13 } = r7;
    if (0 === n13)
      return;
    this._createOrResizeResources(t12), this._quad || (this._quad = new n5(i12, [-1, -1, 1, -1, -1, 1, 1, 1]));
    const o12 = this._quad;
    o12.bind(), "blur" === a5 ? this._gaussianBlur(t12, s7, n13) : this._radialBlur(t12, s7), o12.unbind();
  }
  _gaussianBlur(e8, s7, r7) {
    const { context: i12, state: a5, painter: u8, pixelRatio: l8 } = e8, { size: d6 } = a5, { materialManager: b } = u8, c5 = this._programDesc, _5 = this._quad, p = [Math.round(l8 * d6[0]), Math.round(l8 * d6[1])], h11 = this._blurFBO, m4 = b.getProgram(c5.gaussianBlur, [{ name: "radius", value: Math.ceil(r7) }]);
    i12.useProgram(m4), i12.setBlendingEnabled(false), i12.bindFramebuffer(h11), i12.bindTexture(s7.colorTexture, 4), m4.setUniform1i("u_colorTexture", 4), m4.setUniform2fv("u_texSize", p), m4.setUniform2fv("u_direction", n11), m4.setUniform1f("u_sigma", r7), _5.draw(), i12.bindFramebuffer(s7), i12.setStencilWriteMask(0), i12.setStencilTestEnabled(false), i12.setDepthWriteEnabled(false), i12.setDepthTestEnabled(false), i12.bindTexture(h11 == null ? void 0 : h11.colorTexture, 5), m4.setUniform1i("u_colorTexture", 5), m4.setUniform2fv("u_direction", o10), _5.draw(), i12.setBlendingEnabled(true), i12.setBlendFunction(R.ONE, R.ONE_MINUS_SRC_ALPHA), i12.setStencilTestEnabled(true);
  }
  _radialBlur(e8, s7) {
    const { context: r7, painter: i12 } = e8, { materialManager: a5 } = i12, n13 = this._programDesc, o12 = this._quad, u8 = this._blurFBO;
    r7.bindFramebuffer(u8);
    const l8 = a5.getProgram(n13.radialBlur);
    r7.useProgram(l8), r7.setBlendingEnabled(false), r7.bindTexture(s7.colorTexture, 4), l8.setUniform1i("u_colorTexture", 4), o12.draw(), r7.bindFramebuffer(s7), r7.setStencilWriteMask(0), r7.setStencilTestEnabled(false), r7.setDepthWriteEnabled(false), r7.setDepthTestEnabled(false), r7.setBlendingEnabled(true);
    const d6 = a5.getProgram(n13.blit);
    r7.useProgram(d6), r7.bindTexture(u8 == null ? void 0 : u8.colorTexture, 5), d6.setUniform1i("u_texture", 5), r7.setBlendFunction(R.ONE, R.ONE_MINUS_SRC_ALPHA), o12.draw();
  }
  _createOrResizeResources(e8) {
    const { context: t12, state: n13, pixelRatio: o12 } = e8, { size: u8 } = n13, l8 = Math.round(o12 * u8[0]), d6 = Math.round(o12 * u8[1]);
    if (!this._blurFBO || this._size[0] !== l8 || this._size[1] !== d6)
      if (this._size[0] = l8, this._size[1] = d6, this._blurFBO)
        this._blurFBO.resize(l8, d6);
      else {
        const e9 = new e4(l8, d6);
        e9.internalFormat = G.RGBA, e9.wrapMode = D.CLAMP_TO_EDGE, this._blurFBO = new x(t12, e9);
      }
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/effects/post-processing/Colorize.js
var n12 = class {
  constructor() {
    this._layerFBOTexture = null, this._size = [0, 0], this._programDesc = { vsPath: "post-processing/pp", fsPath: "post-processing/filterEffect", attributes: /* @__PURE__ */ new Map([["a_position", 0]]) };
  }
  dispose() {
    this._layerFBOTexture = t(this._layerFBOTexture);
  }
  draw(e8, t12, s7) {
    const { width: i12, height: o12 } = t12;
    this._createOrResizeResources(e8, i12, o12);
    const { context: a5, painter: n13 } = e8, { materialManager: c5 } = n13, l8 = this._programDesc, u8 = this._quad, _5 = s7.colorMatrix;
    u8.bind();
    const h11 = this._layerFBOTexture;
    a5.bindFramebuffer(t12), t12.copyToTexture(0, 0, i12, o12, 0, 0, h11), a5.setBlendingEnabled(false), a5.setStencilTestEnabled(false);
    const m4 = c5.getProgram(l8);
    a5.useProgram(m4), a5.bindTexture(h11, 2), m4.setUniformMatrix4fv("u_coefficients", _5), m4.setUniform1i("u_colorTexture", 2), u8.draw(), a5.setBlendingEnabled(true), a5.setBlendFunction(R.ONE, R.ONE_MINUS_SRC_ALPHA), a5.setStencilTestEnabled(true), u8.unbind();
  }
  _createOrResizeResources(e8, r7, n13) {
    const { context: c5 } = e8;
    if (!this._layerFBOTexture || this._size[0] !== r7 || this._size[1] !== n13) {
      if (this._size[0] = r7, this._size[1] = n13, this._layerFBOTexture)
        this._layerFBOTexture.resize(r7, n13);
      else {
        const e9 = new e4();
        e9.internalFormat = G.RGBA, e9.wrapMode = D.CLAMP_TO_EDGE, e9.width = r7, e9.height = n13, this._layerFBOTexture = new T2(c5, e9);
      }
      this._quad || (this._quad = new n5(c5, [-1, -1, 1, -1, -1, 1, 1, 1]));
    }
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/effects/post-processing/DropShadow.js
var u7 = [1, 0];
var h10 = [0, 1];
var _4 = class {
  constructor() {
    this._layerFBOTexture = null, this._horizontalBlurFBO = null, this._verticalBlurFBO = null, this._size = [0, 0], this._quad = null, this._programDesc = { blur: { vsPath: "post-processing/pp", fsPath: "post-processing/blur/gaussianBlur", attributes: /* @__PURE__ */ new Map([["a_position", 0]]) }, composite: { vsPath: "post-processing/pp", fsPath: "post-processing/drop-shadow/composite", attributes: /* @__PURE__ */ new Map([["a_position", 0]]) }, blit: { vsPath: "post-processing/pp", fsPath: "post-processing/blit", attributes: /* @__PURE__ */ new Map([["a_position", 0]]) } };
  }
  dispose() {
    this._layerFBOTexture = t(this._layerFBOTexture), this._horizontalBlurFBO = t(this._horizontalBlurFBO), this._verticalBlurFBO = t(this._verticalBlurFBO);
  }
  draw(e8, i12, o12) {
    const { context: a5, state: n13, painter: l8 } = e8, { materialManager: _5 } = l8, c5 = this._programDesc, p = i12.width, m4 = i12.height, f5 = [Math.round(p), Math.round(m4)], { blurRadius: B2, offsetX: d6, offsetY: b, color: O2 } = o12, F3 = [u(d6), u(b)];
    this._createOrResizeResources(e8, p, m4, f5);
    const w3 = this._horizontalBlurFBO, T4 = this._verticalBlurFBO;
    a5.setStencilWriteMask(0), a5.setStencilTestEnabled(false), a5.setDepthWriteEnabled(false), a5.setDepthTestEnabled(false);
    const x2 = this._layerFBOTexture;
    i12.copyToTexture(0, 0, p, m4, 0, 0, x2), this._quad || (this._quad = new n5(a5, [-1, -1, 1, -1, -1, 1, 1, 1])), a5.setViewport(0, 0, f5[0], f5[1]);
    const g2 = this._quad;
    g2.bind(), a5.setBlendingEnabled(false);
    const z = _5.getProgram(c5.blur, [{ name: "radius", value: Math.ceil(B2) }]);
    a5.useProgram(z), a5.bindFramebuffer(w3), a5.bindTexture(i12.colorTexture, 4), z.setUniform1i("u_colorTexture", 4), z.setUniform2fv("u_texSize", f5), z.setUniform2fv("u_direction", u7), z.setUniform1f("u_sigma", B2), g2.draw(), a5.bindFramebuffer(T4), a5.bindTexture(w3 == null ? void 0 : w3.colorTexture, 5), z.setUniform1i("u_colorTexture", 5), z.setUniform2fv("u_direction", h10), g2.draw(), a5.bindFramebuffer(i12), a5.setViewport(0, 0, p, m4);
    const M3 = _5.getProgram(c5.composite);
    a5.useProgram(M3), a5.bindTexture(T4 == null ? void 0 : T4.colorTexture, 2), M3.setUniform1i("u_blurTexture", 2), a5.bindTexture(x2, 3), M3.setUniform1i("u_layerFBOTexture", 3), M3.setUniform4fv("u_shadowColor", [O2[3] * (O2[0] / 255), O2[3] * (O2[1] / 255), O2[3] * (O2[2] / 255), O2[3]]), M3.setUniformMatrix3fv("u_displayViewMat3", n13.displayMat3), M3.setUniform2fv("u_shadowOffset", F3), g2.draw(), a5.setBlendingEnabled(true), a5.setStencilTestEnabled(true), a5.setBlendFunction(R.ONE, R.ONE_MINUS_SRC_ALPHA), g2.unbind();
  }
  _createOrResizeResources(e8, t12, r7, s7) {
    const { context: u8 } = e8;
    if (!this._horizontalBlurFBO || this._size[0] !== t12 || this._size[1] !== r7) {
      if (this._size[0] = t12, this._size[1] = r7, this._horizontalBlurFBO)
        this._horizontalBlurFBO.resize(s7[0], s7[1]);
      else {
        const e9 = new e4(s7[0], s7[1]);
        e9.internalFormat = G.RGBA, e9.wrapMode = D.CLAMP_TO_EDGE, this._horizontalBlurFBO = new x(u8, e9);
      }
      if (this._verticalBlurFBO)
        this._verticalBlurFBO.resize(s7[0], s7[1]);
      else {
        const e9 = new e4(s7[0], s7[1]);
        e9.internalFormat = G.RGBA, e9.wrapMode = D.CLAMP_TO_EDGE, this._verticalBlurFBO = new x(u8, e9);
      }
      if (this._layerFBOTexture)
        this._layerFBOTexture.resize(t12, r7);
      else {
        const e9 = new e4();
        e9.internalFormat = G.RGBA, e9.wrapMode = D.CLAMP_TO_EDGE, e9.width = t12, e9.height = r7, this._layerFBOTexture = new T2(u8, e9);
      }
    }
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/effects/post-processing/Opacity.js
var l7 = class {
  constructor() {
    this._size = [0, 0], this._layerFBOTexture = null;
  }
  dispose() {
    this._layerFBOTexture = t(this._layerFBOTexture);
  }
  draw(e8, r7, s7) {
    const { width: i12, height: o12 } = r7;
    this._createOrResizeResources(e8, i12, o12);
    const { context: l8, painter: a5 } = e8, { amount: n13 } = s7, h11 = l8.gl, u8 = this._layerFBOTexture;
    l8.bindFramebuffer(r7), r7.copyToTexture(0, 0, i12, o12, 0, 0, u8), l8.setBlendingEnabled(true), l8.setStencilTestEnabled(false), l8.setDepthTestEnabled(false), l8.setClearColor(0, 0, 0, 0), l8.clear(h11.COLOR_BUFFER_BIT), a5.blitTexture(l8, u8, L.NEAREST, n13);
  }
  _createOrResizeResources(e8, l8, a5) {
    const { context: n13 } = e8;
    if (!this._layerFBOTexture || this._size[0] !== l8 || this._size[1] !== a5)
      if (this._size[0] = l8, this._size[1] = a5, this._layerFBOTexture)
        this._layerFBOTexture.resize(l8, a5);
      else {
        const e9 = new e4();
        e9.internalFormat = G.RGBA, e9.wrapMode = D.CLAMP_TO_EDGE, e9.samplingMode = L.NEAREST, e9.width = l8, e9.height = a5, this._layerFBOTexture = new T2(n13, e9);
      }
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/effects/post-processing/EffectManager.js
function c4(o12) {
  switch (o12) {
    case "bloom":
    case "blur":
    case "opacity":
    case "drop-shadow":
      return o12;
    default:
      return "colorize";
  }
}
var f4 = { colorize: () => new n12(), blur: () => new u6(), bloom: () => new h9(), opacity: () => new l7(), "drop-shadow": () => new _4() };
var i11 = class {
  constructor() {
    this._effectMap = /* @__PURE__ */ new Map();
  }
  dispose() {
    this._effectMap.forEach((o12) => o12.dispose()), this._effectMap.clear();
  }
  getPostProcessingEffects(o12) {
    if (!o12 || 0 === o12.length)
      return [];
    const e8 = [];
    for (const t12 of o12) {
      const o13 = c4(t12.type);
      let s7 = this._effectMap.get(o13);
      s7 || (s7 = f4[o13](), this._effectMap.set(o13, s7)), e8.push({ postProcessingEffect: s7, effect: t12 });
    }
    return e8;
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/painter/RenderPass.js
var o11 = class {
  constructor(e8, r7) {
    this.brushes = e8, this.name = r7.name, this.drawPhase = r7.drawPhase || T.MAP, this._targetFn = r7.target, this.effects = r7.effects || [], this.enableDefaultDraw = r7.enableDefaultDraw ?? (() => true), this.forceDrawByDisplayOrder = !!r7.forceDrawByDisplayOrder;
  }
  render(e8) {
    const { context: t12, profiler: r7 } = e8, s7 = this._targetFn(), n13 = this.drawPhase & e8.drawPhase;
    if (r7.recordPassStart(this.name), n13) {
      this.enableDefaultDraw() && this._doRender(e8, s7), r7.recordPassEnd();
      for (const r8 of this.effects) {
        if (!r8.enable())
          continue;
        const n14 = r8.apply, o12 = r8.args && r8.args(), a5 = t12.getViewport(), i12 = t12.getBoundFramebufferObject(), f5 = e8.passOptions;
        this._bindEffect(e8, n14, o12), this._doRender(e8, s7, n14.defines), this._drawAndUnbindEffect(e8, n14, a5, i12, f5, o12);
      }
    }
  }
  _doRender(e8, t12, o12) {
    if (null == t12)
      return;
    const { profiler: a5, context: i12 } = e8;
    if (this.forceDrawByDisplayOrder) {
      for (const r7 of this.brushes) {
        if (a5.recordBrushStart(r7.name), null != r7.brushEffect) {
          const s7 = i12.getViewport(), n13 = i12.getBoundFramebufferObject(), a6 = e8.passOptions;
          this._bindEffect(e8, r7.brushEffect), this._drawWithBrush(r7, e8, t12, o12), this._drawAndUnbindEffect(e8, r7.brushEffect, s7, n13, a6);
        } else
          this._drawWithBrush(r7, e8, t12, o12);
        a5.recordBrushEnd();
      }
      const f5 = t12, c5 = e8;
      c5.attributeView.bindTextures(e8.context);
      for (const e9 of f5) {
        if (!e9.visible)
          continue;
        e9.commit(c5), c5.context.setStencilFunction(I.EQUAL, e9.stencilRef, 255);
        const t13 = e9.getGeometry(E3.MARKER), a6 = e9.getGeometry(E3.TEXT);
        if (null != t13 && t13.records && null != a6 && a6.records) {
          const n13 = /* @__PURE__ */ new Map(), i13 = t13.records.getCursor();
          for (; i13.next(); )
            n13.set(i13.id, [i13.getDrawInfo(t13, E3.MARKER)]);
          const f6 = a6.records.getCursor();
          for (; f6.next(); ) {
            const e10 = n13.get(f6.id), t14 = f6.getDrawInfo(a6, E3.TEXT);
            e10 ? e10.push(t14) : n13.set(f6.id, [t14]);
          }
          const d6 = Array.from(n13.entries()).sort(([e10, t14], [r7, s7]) => r7 - e10);
          for (const [t14, r7] of d6)
            for (const n14 of r7) {
              const t15 = c5.painter.getBrush(n14.geometryType, S.DEFAULT);
              t15.prepareState(c5, o12), t15.drawGeometry(c5, e9, n14, o12);
            }
        } else if (t13) {
          const n13 = c5.painter.getBrush(E3.MARKER, S.DEFAULT);
          n13.prepareState(c5, o12), t13.forEachCommand((t14) => {
            n13.drawGeometry(c5, e9, t14, o12);
          });
        } else if (a6) {
          const t14 = c5.painter.getBrush(E3.TEXT, S.DEFAULT);
          t14.prepareState(c5, o12), a6.forEachCommand((r7) => {
            t14.drawGeometry(c5, e9, r7, o12);
          });
        }
      }
    } else
      for (const r7 of this.brushes) {
        if (a5.recordBrushStart(r7.name), null != r7.brushEffect) {
          const s7 = i12.getViewport(), n13 = i12.getBoundFramebufferObject(), a6 = e8.passOptions;
          this._bindEffect(e8, r7.brushEffect), this._drawWithBrush(r7, e8, t12, o12), this._drawAndUnbindEffect(e8, r7.brushEffect, s7, n13, a6);
        } else
          this._drawWithBrush(r7, e8, t12, o12);
        a5.recordBrushEnd();
      }
  }
  _drawWithBrush(t12, r7, s7, n13) {
    d(s7) ? (t12.prepareState(r7, n13), t12.drawMany(r7, s7, n13)) : s7.visible && (t12.prepareState(r7, n13), t12.draw(r7, s7, n13));
  }
  _bindEffect(e8, t12, r7) {
    const { profiler: s7 } = e8;
    s7.recordPassStart(this.name + "." + t12.name), t12.bind(e8, r7);
    const n13 = t12.createOptions(e8, r7);
    e8.passOptions = n13;
  }
  _drawAndUnbindEffect(e8, t12, r7, s7, n13, o12) {
    const { profiler: a5, context: i12 } = e8;
    e8.passOptions = n13, a5.recordBrushStart(t12.name), t12.draw(e8, o12), t12.unbind(e8, o12), i12.bindFramebuffer(s7);
    const { x: f5, y: c5, width: d6, height: h11 } = r7;
    i12.setViewport(f5, c5, d6, h11), a5.recordBrushEnd(), a5.recordPassEnd();
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/Painter.js
function S3(e8, s7) {
  switch (e8) {
    case E3.LINE:
      return w.line;
    case E3.TEXT:
      return w.text;
    case E3.LABEL:
      return w.label;
    case E3.FILL:
      return s7 === S.DOT_DENSITY ? w.dotDensity : w.fill;
    case E3.MARKER:
      switch (s7) {
        case S.HEATMAP:
          return w.heatmap;
        case S.PIE_CHART:
          return w.pieChart;
        default:
          return w.marker;
      }
  }
}
var P3 = class {
  constructor(e8, t12, i12) {
    this.context = e8, this._blitRenderer = new _2(), this._worldExtentClipRenderer = new f3(), this._isClippedToWorldExtent = false, this._brushCache = /* @__PURE__ */ new Map(), this._lastWidth = null, this._lastHeight = null, this._prevFBO = null, this._vtlMaterialManager = new o7(), this._blendEffect = new m2(), this._stencilBuf = null, this._fbos = null, this._fboPool = [], this._renderTarget = null, this.effects = { highlight: new l5(), hittest: new o9(), hittestVTL: new i10(), integrate: new s5(), insideEffect: new r6("inside"), outsideEffect: new r6("outside") }, this.materialManager = new i9(e8), this.textureManager = new Y(t12, i12, e8.type === n2.WEBGL2), this.textureUploadManager = new n10(e8, t12), this._effectsManager = new i11();
  }
  get vectorTilesMaterialManager() {
    return this._vtlMaterialManager;
  }
  getRenderTarget() {
    return this._renderTarget;
  }
  setRenderTarget(e8) {
    this._renderTarget = e8;
  }
  getFbos(e8, t12) {
    if (e8 !== this._lastWidth || t12 !== this._lastHeight) {
      if (this._lastWidth = e8, this._lastHeight = t12, this._fbos) {
        let s8;
        for (s8 in this._fbos)
          this._fbos[s8].resize(e8, t12);
        return this._fbos;
      }
      const s7 = new e4(e8, t12);
      s7.samplingMode = L.NEAREST, s7.wrapMode = D.CLAMP_TO_EDGE;
      const r7 = new i3(B.DEPTH_STENCIL, e8, t12);
      this._stencilBuf = new n3(this.context, r7), this._fbos = { output: new x(this.context, s7, this._stencilBuf), blend: new x(this.context, s7, this._stencilBuf), effect0: new x(this.context, s7, this._stencilBuf) };
    }
    return this._fbos;
  }
  acquireFbo(e8, t12) {
    let s7;
    if (this._fboPool.length > 0)
      s7 = this._fboPool.pop();
    else {
      const r7 = new e4(e8, t12);
      r7.samplingMode = L.NEAREST, r7.wrapMode = D.CLAMP_TO_EDGE, s7 = new x(this.context, r7, this._stencilBuf);
    }
    return s7.width === e8 && s7.height === t12 || s7.resize(e8, t12), s7;
  }
  releaseFbo(e8) {
    this._fboPool.push(e8);
  }
  getSharedStencilBuffer() {
    return this._stencilBuf;
  }
  beforeRenderLayers(e8, t12 = null) {
    const { width: s7, height: r7 } = e8.getViewport();
    this._prevFBO = e8.getBoundFramebufferObject();
    const i12 = this.getFbos(s7, r7);
    if (e8.bindFramebuffer(i12 == null ? void 0 : i12.output), e8.setColorMask(true, true, true, true), null != t12) {
      const { r: s8, g: r8, b: i13, a: n13 } = t12;
      e8.setClearColor(n13 * s8 / 255, n13 * r8 / 255, n13 * i13 / 255, n13);
    } else
      e8.setClearColor(0, 0, 0, 0);
    e8.setDepthWriteEnabled(true), e8.setClearDepth(1), e8.clear(e8.gl.COLOR_BUFFER_BIT | e8.gl.DEPTH_BUFFER_BIT), e8.setDepthWriteEnabled(false);
  }
  beforeRenderLayer(e8, t12, s7) {
    var _a;
    const { context: r7, blendMode: i12, effects: n13, requireFBO: o12, drawPhase: l8 } = e8;
    if (o12 || L4(l8, i12, n13, s7))
      r7.bindFramebuffer((_a = this._fbos) == null ? void 0 : _a.blend), r7.setColorMask(true, true, true, true), r7.setClearColor(0, 0, 0, 0), r7.setDepthWriteEnabled(true), r7.setClearDepth(1), r7.clear(r7.gl.COLOR_BUFFER_BIT | r7.gl.DEPTH_BUFFER_BIT), r7.setDepthWriteEnabled(false);
    else {
      const e9 = this._getOutputFBO();
      r7.bindFramebuffer(e9);
    }
    r7.setDepthWriteEnabled(false), r7.setDepthTestEnabled(false), r7.setStencilTestEnabled(true), r7.setClearStencil(t12), r7.setStencilWriteMask(255), r7.clear(r7.gl.STENCIL_BUFFER_BIT);
  }
  compositeLayer(e8, t12) {
    const { context: s7, blendMode: r7, effects: n13, requireFBO: o12, drawPhase: l8 } = e8;
    if (o12 || L4(l8, r7, n13, t12)) {
      null != n13 && n13.length > 0 && l8 === T.MAP && this._applyEffects(e8, n13);
      const o13 = this._getOutputFBO();
      s7.bindFramebuffer(o13), s7.setStencilTestEnabled(false), s7.setStencilWriteMask(0), s7.setBlendingEnabled(true), s7.setBlendFunctionSeparate(R.ONE, R.ONE_MINUS_SRC_ALPHA, R.ONE, R.ONE_MINUS_SRC_ALPHA), s7.setColorMask(true, true, true, true);
      const a5 = null == r7 || l8 === T.HIGHLIGHT ? "normal" : r7, f5 = this._fbos;
      (f5 == null ? void 0 : f5.blend.colorTexture) && this._blendEffect.draw(e8, f5.blend.colorTexture, L.NEAREST, a5, t12);
    }
  }
  renderLayers(e8) {
    e8.bindFramebuffer(this._prevFBO);
    const t12 = this._getOutputFBO();
    t12 && (e8.setDepthTestEnabled(false), e8.setStencilWriteMask(0), this._isClippedToWorldExtent ? (e8.setStencilTestEnabled(true), e8.setStencilFunction(I.EQUAL, 1, 255)) : e8.setStencilTestEnabled(false), this.blitTexture(e8, t12.colorTexture, L.NEAREST));
  }
  prepareDisplay(e8, t12, s7) {
    const { context: r7 } = e8;
    if (r7.bindFramebuffer(this._prevFBO), r7.setColorMask(true, true, true, true), null != t12) {
      const { r: e9, g: s8, b: i12, a: n13 } = t12;
      r7.setClearColor(n13 * e9 / 255, n13 * s8 / 255, n13 * i12 / 255, n13);
    } else
      r7.setClearColor(0, 0, 0, 0);
    r7.setStencilWriteMask(255), r7.setClearStencil(0), r7.clear(r7.gl.COLOR_BUFFER_BIT | r7.gl.STENCIL_BUFFER_BIT), this._isClippedToWorldExtent = this._worldExtentClipRenderer.render(e8, s7);
  }
  dispose() {
    if (this.materialManager.dispose(), this.textureManager.dispose(), this.textureUploadManager.destroy(), this._blitRenderer = t(this._blitRenderer), this._worldExtentClipRenderer = t(this._worldExtentClipRenderer), this._brushCache && (this._brushCache.forEach((e8) => e8.dispose()), this._brushCache.clear(), this._brushCache = null), this._fbos) {
      let e8;
      for (e8 in this._fbos)
        this._fbos[e8] && this._fbos[e8].dispose();
    }
    for (const e8 of this._fboPool)
      e8.dispose();
    if (this._fboPool.length = 0, this.effects) {
      let e8;
      for (e8 in this.effects)
        this.effects[e8] && this.effects[e8].dispose();
    }
    this._effectsManager.dispose(), this._vtlMaterialManager = t(this._vtlMaterialManager), this._prevFBO = null;
  }
  getBrush(e8, t12) {
    const s7 = S3(e8, t12);
    let r7 = this._brushCache.get(s7);
    return void 0 === r7 && (r7 = new s7(), this._brushCache.set(s7, r7)), r7;
  }
  renderObject(e8, s7, r7, i12) {
    const n13 = w[r7];
    if (!n13)
      return;
    let o12 = this._brushCache.get(n13);
    void 0 === o12 && (o12 = new n13(), this._brushCache.set(n13, o12)), o12.prepareState(e8, i12), o12.draw(e8, s7, i12);
  }
  renderObjects(e8, s7, r7, i12) {
    const n13 = w[r7];
    if (!n13)
      return;
    let o12 = this._brushCache.get(n13);
    void 0 === o12 && (o12 = new n13(), this._brushCache.set(n13, o12)), o12.drawMany(e8, s7, i12);
  }
  registerRenderPass(e8) {
    const t12 = e8.brushes.map((e9) => (this._brushCache.has(e9) || this._brushCache.set(e9, new e9()), this._brushCache.get(e9)));
    return new o11(t12, e8);
  }
  blitTexture(e8, t12, s7, r7 = 1) {
    e8.setBlendingEnabled(true), e8.setBlendFunctionSeparate(R.ONE, R.ONE_MINUS_SRC_ALPHA, R.ONE, R.ONE_MINUS_SRC_ALPHA), e8.setColorMask(true, true, true, true), this._blitRenderer.render(e8, t12, s7, r7);
  }
  getPostProcessingEffects(e8) {
    return this._effectsManager.getPostProcessingEffects(e8);
  }
  _getOutputFBO() {
    var _a;
    return null != this._renderTarget ? this._renderTarget : ((_a = this._fbos) == null ? void 0 : _a.output) ?? null;
  }
  _applyEffects(e8, t12) {
    var _a;
    const s7 = (_a = this._fbos) == null ? void 0 : _a.blend;
    if (!s7)
      return;
    const { context: r7 } = e8, i12 = this._effectsManager.getPostProcessingEffects(t12);
    for (const { postProcessingEffect: n13, effect: o12 } of i12)
      r7.bindFramebuffer(s7), n13.draw(e8, s7, o12);
  }
};
function L4(e8, t12, s7, r7) {
  return e8 !== T.HIGHLIGHT && (1 !== r7 || null != t12 && "normal" !== t12 || null != s7 && s7.length > 0);
}

// node_modules/@arcgis/core/views/2d/engine/Stage.js
var j2 = 2e3;
var T3 = class extends h5 {
  constructor(r7, i12) {
    super(), this._trash = /* @__PURE__ */ new Set(), this._renderRemainingTime = 0, this._lastFrameRenderTime = 0, this.renderRequested = false, this.stage = this, this._stationary = true;
    const { canvas: a5 = document.createElement("canvas"), alpha: h11 = true, stencil: p = true, contextOptions: u8 = {} } = i12;
    this._canvas = a5;
    const f5 = o3("2d", a5, { alpha: h11, antialias: false, depth: true, stencil: p });
    this.context = new P2(f5 ?? null, u8), this.resourceManager = new h4(), this.painter = new P3(this.context, this, this.resourceManager), has("esri-2d-profiler") && (this._debugOutput = document.createElement("div"), this._debugOutput.setAttribute("style", "margin: 24px 64px; position: absolute; color: red;"), r7.appendChild(this._debugOutput));
    const _5 = () => this._highlightGradient;
    this._renderParameters = { drawPhase: 0, state: this.state, pixelRatio: window.devicePixelRatio, stationary: false, globalOpacity: 1, blendMode: null, deltaTime: -1, time: 0, inFadeTransition: false, effects: null, context: this.context, painter: this.painter, timeline: i12.timeline || new e7(), renderingOptions: i12.renderingOptions, requestRender: () => this.requestRender(), allowDelayedRender: false, requireFBO: false, profiler: new n8(this.context, this._debugOutput), dataUploadCounter: 0, get highlightGradient() {
      return _5();
    } }, this._taskHandle = A({ render: (e8) => this.renderFrame(e8) }), this._taskHandle.pause(), this._lostWebGLContextHandle = r(a5, "webglcontextlost", (t12) => {
      this.emit("webgl-error", { error: new s("webgl-context-lost", t12.statusMessage) });
    }), this._bufferPool = new i6(), a5.setAttribute("style", "width: 100%; height:100%; display:block;"), r7.appendChild(a5);
  }
  destroy() {
    var _a, _b, _c;
    this.removeAllChildren(), this._emptyTrash(), this._taskHandle = o(this._taskHandle), this._lostWebGLContextHandle = o(this._lostWebGLContextHandle), (_a = this._canvas.parentNode) == null ? void 0 : _a.removeChild(this._canvas), (_c = (_b = this._debugOutput) == null ? void 0 : _b.parentNode) == null ? void 0 : _c.removeChild(this._debugOutput), this._bufferPool.destroy(), this.resourceManager.destroy(), this.painter.dispose(), this.context.dispose(), this._canvas = null;
  }
  get backgroundColor() {
    return this._backgroundColor;
  }
  set backgroundColor(e8) {
    this._backgroundColor = e8, this.requestRender();
  }
  get bufferPool() {
    return this._bufferPool;
  }
  get renderingOptions() {
    return this._renderingOptions;
  }
  set renderingOptions(e8) {
    this._renderingOptions = e8, this.requestRender();
  }
  get state() {
    return this._state;
  }
  set state(e8) {
    this._state = e8, this.requestRender();
  }
  get stationary() {
    return this._stationary;
  }
  set stationary(e8) {
    this._stationary !== e8 && (this._stationary = e8, this.requestRender());
  }
  trashDisplayObject(e8) {
    this._trash.add(e8), this.requestRender();
  }
  untrashDisplayObject(e8) {
    return this._trash.delete(e8);
  }
  requestRender() {
    this._renderRemainingTime = j2, this.renderRequested || (this.renderRequested = true, this.emit("will-render"), this._taskHandle.resume());
  }
  renderFrame(e8) {
    const t12 = this._lastFrameRenderTime ? e8.time - this._lastFrameRenderTime : 0;
    this._renderRemainingTime -= t12, this._renderRemainingTime <= 0 && this._taskHandle.pause(), this._lastFrameRenderTime = e8.time, this.renderRequested = false, this._renderParameters.state = this._state, this._renderParameters.stationary = this.stationary, this._renderParameters.pixelRatio = window.devicePixelRatio, this._renderParameters.globalOpacity = 1, this._renderParameters.time = e8.time, this._renderParameters.deltaTime = e8.deltaTime, this._renderParameters.effects = null, this.processRender(this._renderParameters), this._emptyTrash(), this.emit("post-render");
  }
  _createTransforms() {
    return { dvs: e3() };
  }
  renderChildren(e8) {
    for (const t12 of this.children)
      t12.beforeRender(e8);
    this._renderChildren(this.children, e8);
    for (const t12 of this.children)
      t12.afterRender(e8);
  }
  _renderChildren(e8, t12) {
    const r7 = this.context;
    this.painter.textureUploadManager.upload(), r7.resetInfo(), t12.profiler.recordStart("drawLayers"), t12.dataUploadCounter = 0, t12.drawPhase = T.MAP, this.painter.beforeRenderLayers(r7, this.backgroundColor);
    for (const s7 of e8)
      s7.processRender(t12);
    this.painter.prepareDisplay(t12, this.backgroundColor, this.state.padding), this.painter.renderLayers(r7), t12.drawPhase = T.HIGHLIGHT, this.painter.beforeRenderLayers(r7);
    for (const s7 of e8)
      s7.processRender(t12);
    this.painter.renderLayers(r7);
    if (this._isLabelDrawPhaseRequired(e8)) {
      t12.drawPhase = T.LABEL, this.painter.beforeRenderLayers(r7);
      for (const r8 of e8)
        r8.processRender(t12);
      this.painter.renderLayers(r7);
    }
    if (has("esri-tiles-debug")) {
      t12.drawPhase = T.DEBUG, this.painter.beforeRenderLayers(r7);
      for (const r8 of e8)
        r8.processRender(t12);
      this.painter.renderLayers(r7);
    }
    t12.profiler.recordEnd("drawLayers"), r7.logInfo();
  }
  doRender(e8) {
    const t12 = this.context, { state: r7, pixelRatio: s7 } = e8;
    this._resizeCanvas(e8), t12.setViewport(0, 0, s7 * r7.size[0], s7 * r7.size[1]), t12.setDepthWriteEnabled(true), t12.setStencilWriteMask(255), super.doRender(e8);
  }
  async takeScreenshot(e8) {
    const t12 = Math.round(this.state.size[0] * e8.resolutionScale), r7 = Math.round(this.state.size[1] * e8.resolutionScale), s7 = e8.resolutionScale, i12 = this.context, n13 = this._state.clone();
    if (null != e8.rotation) {
      const t13 = n13.viewpoint;
      n13.viewpoint.rotation = e8.rotation, n13.viewpoint = t13;
    }
    const a5 = { ...this._renderParameters, drawPhase: null, globalOpacity: 1, stationary: true, state: n13, pixelRatio: s7, time: performance.now(), deltaTime: 0, blendMode: null, effects: null, inFadeTransition: false }, o12 = n6(i12.gl), h11 = new e4(t12, r7);
    h11.wrapMode = D.CLAMP_TO_EDGE, h11.internalFormat = o12 ? P.RGBA8 : G.RGBA, h11.isImmutable = o12;
    const d6 = new x(i12, h11, new i3(B.DEPTH_STENCIL, t12, r7)), l8 = i12.getBoundFramebufferObject(), c5 = i12.getViewport();
    i12.bindFramebuffer(d6), i12.setViewport(0, 0, t12, r7), this._renderChildren(e8.children, a5);
    const m4 = this._readbackScreenshot(d6, { ...e8.cropArea, y: r7 - (e8.cropArea.y + e8.cropArea.height) });
    i12.bindFramebuffer(l8), i12.setViewport(c5.x, c5.y, c5.width, c5.height), this.requestRender();
    const b = await m4;
    let y2;
    return 1 === e8.outputScale ? y2 = b : (y2 = new ImageData(Math.round(b.width * e8.outputScale), Math.round(b.height * e8.outputScale)), w2(b, y2, true)), d6.dispose(), y2;
  }
  async _readbackScreenshot(e8, t12) {
    const r7 = e2(t12.width, t12.height, document.createElement("canvas"));
    return await e8.readPixelsAsync(t12.x, t12.y, t12.width, t12.height, G.RGBA, U.UNSIGNED_BYTE, new Uint8Array(r7.data.buffer)), r7;
  }
  _resizeCanvas(e8) {
    const t12 = this._canvas, r7 = t12.style, { state: { size: s7 }, pixelRatio: i12 } = e8, n13 = s7[0], a5 = s7[1], o12 = Math.round(n13 * i12), h11 = Math.round(a5 * i12);
    t12.width === o12 && t12.height === h11 || (t12.width = o12, t12.height = h11), r7.width = n13 + "px", r7.height = a5 + "px";
  }
  _emptyTrash() {
    for (; this._trash.size > 0; ) {
      const e8 = Array.from(this._trash);
      this._trash.clear();
      for (const t12 of e8)
        t12.processDetach();
    }
  }
  _isLabelDrawPhaseRequired(e8) {
    let t12 = false;
    for (const r7 of e8) {
      if (!(r7 instanceof h5)) {
        t12 = t12 || false;
        break;
      }
      if ("hasLabels" in r7 && r7.hasLabels)
        return true;
      t12 = t12 || this._isLabelDrawPhaseRequired(r7.children);
    }
    return t12;
  }
};

// node_modules/@arcgis/core/views/magnifier/resources.js
async function s6(s7) {
  const r7 = import("./mask-svg-Q6UZ4O7M.js"), i12 = import("./overlay-svg-NGLKWSG5.js"), o12 = t4((await r7).default, { signal: s7 }), e8 = t4((await i12).default, { signal: s7 }), m4 = { mask: await o12, overlay: await e8 };
  return s2(s7), m4;
}

// node_modules/@arcgis/core/views/2d/magnifier/MagnifierView2D.js
var A2 = class extends i4 {
  constructor() {
    super(), this._handles = new t2(), this._resourcePixelRatio = 1, this.visible = false;
  }
  destroy() {
    this._handles = l(this._handles), this._disposeRenderResources(), this._resourcesTask = e(this._resourcesTask);
  }
  get backgroundColor() {
    return this._backgroundColor;
  }
  set backgroundColor(e8) {
    this._backgroundColor = e8, this.requestRender();
  }
  get magnifier() {
    return this._magnifier;
  }
  set magnifier(e8) {
    this._magnifier = e8, this._handles.removeAll(), this._handles.add([l2(() => e8.version, () => {
      this.visible = e8.visible && null != e8.position && e8.size > 0, this.requestRender();
    }, h2), l2(() => [e8.maskUrl, e8.overlayUrl], () => this._reloadResources()), l2(() => e8.size, () => {
      this._disposeRenderResources(), this.requestRender();
    })]);
  }
  _createTransforms() {
    return { dvs: e3() };
  }
  doRender(e8) {
    const r7 = e8.context;
    if (!this._resourcesTask)
      return void this._reloadResources();
    if (e8.drawPhase !== T.MAP || !this._canRender())
      return;
    this._updateResources(e8);
    const s7 = this._magnifier;
    if (null == s7.position)
      return;
    const i12 = e8.pixelRatio, o12 = s7.size * i12, a5 = 1 / s7.factor, n13 = Math.ceil(a5 * o12);
    this._readbackTexture.resize(n13, n13);
    const { size: l8 } = e8.state, h11 = i12 * l8[0], u8 = i12 * l8[1], m4 = 0.5 * n13, c5 = 0.5 * n13, _5 = i2(i12 * s7.position.x, m4, h11 - m4 - 1), p = i2(u8 - i12 * s7.position.y, c5, u8 - c5 - 1);
    r7.setBlendingEnabled(true);
    const f5 = _5 - m4, g2 = p - c5, b = this._readbackTexture;
    r7.bindTexture(b, 0), r7.gl.copyTexImage2D(b.descriptor.target, 0, b.descriptor.pixelFormat, f5, g2, n13, n13, 0);
    const T4 = this.backgroundColor, y2 = T4 ? [T4.a * T4.r / 255, T4.a * T4.g / 255, T4.a * T4.b / 255, T4.a] : [1, 1, 1, 1], k = (_5 + s7.offset.x * i12) / h11 * 2 - 1, R3 = (p - s7.offset.y * i12) / u8 * 2 - 1, v2 = o12 / h11 * 2, j3 = o12 / u8 * 2, A3 = this._program;
    r7.bindVAO(this._vertexArrayObject), r7.bindTexture(this._overlayTexture, 6), r7.bindTexture(this._maskTexture, 7), r7.useProgram(A3), A3.setUniform4fv("u_background", y2), A3.setUniform1i("u_readbackTexture", 0), A3.setUniform1i("u_overlayTexture", 6), A3.setUniform1i("u_maskTexture", 7), A3.setUniform4f("u_drawPos", k, R3, v2, j3), A3.setUniform1i("u_maskEnabled", s7.maskEnabled ? 1 : 0), A3.setUniform1i("u_overlayEnabled", s7.overlayEnabled ? 1 : 0), r7.setStencilTestEnabled(false), r7.setColorMask(true, true, true, true), r7.drawArrays(E.TRIANGLE_STRIP, 0, 4), r7.bindVAO();
  }
  _canRender() {
    return this.mask && this.overlay && null != this._magnifier;
  }
  _reloadResources() {
    this._resourcesTask && this._resourcesTask.abort();
    const s7 = null != this._magnifier ? this._magnifier.maskUrl : null, t12 = null != this._magnifier ? this._magnifier.overlayUrl : null;
    this._resourcesTask = d2(async (r7) => {
      const i12 = null == s7 || null == t12 ? s6(r7) : null, o12 = null != s7 ? j(s7, { responseType: "image", signal: r7 }).then((e8) => e8.data) : i12.then((e8) => e8.mask), a5 = null != t12 ? j(t12, { responseType: "image", signal: r7 }).then((e8) => e8.data) : i12.then((e8) => e8.overlay), [n13, l8] = await Promise.all([o12, a5]);
      this.mask = n13, this.overlay = l8, this._disposeRenderResources(), this.requestRender();
    });
  }
  _disposeRenderResources() {
    this._readbackTexture = t(this._readbackTexture), this._overlayTexture = t(this._overlayTexture), this._maskTexture = t(this._maskTexture), this._vertexArrayObject = t(this._vertexArrayObject), this._program = t(this._program);
  }
  _updateResources(e8) {
    if (e8.pixelRatio !== this._resourcePixelRatio && this._disposeRenderResources(), this._readbackTexture)
      return;
    const r7 = e8.context;
    this._resourcePixelRatio = e8.pixelRatio;
    const s7 = Math.ceil(this._magnifier.size * e8.pixelRatio);
    this._program = t9(r7);
    const t12 = new Uint16Array([0, 1, 0, 0, 1, 1, 1, 0]), i12 = a.attributes;
    this._vertexArrayObject = new u2(r7, i12, m, { geometry: c.createVertex(r7, F.STATIC_DRAW, t12) }), this.overlay.width = s7, this.overlay.height = s7;
    const o12 = new e4();
    o12.internalFormat = G.RGBA, o12.wrapMode = D.CLAMP_TO_EDGE, o12.samplingMode = L.NEAREST, o12.flipped = true, o12.preMultiplyAlpha = !vt(this.overlay.src) || !e8.context.driverTest.svgPremultipliesAlpha.result, this._overlayTexture = new T2(r7, o12, this.overlay), this.mask.width = s7, this.mask.height = s7, o12.pixelFormat = o12.internalFormat = G.ALPHA, this._maskTexture = new T2(r7, o12, this.mask);
    const a5 = 1 / this._magnifier.factor;
    o12.pixelFormat = o12.internalFormat = G.RGBA, o12.width = o12.height = Math.ceil(a5 * s7), o12.samplingMode = L.LINEAR, o12.flipped = false, this._readbackTexture = new T2(r7, o12);
  }
};
export {
  i7 as GraphicContainer,
  oe as GraphicsView2D,
  d3 as LabelManager,
  A2 as MagnifierView2D,
  y as MapViewNavigation,
  T3 as Stage
};
//# sourceMappingURL=mapViewDeps-MGAZQIEU.js.map
