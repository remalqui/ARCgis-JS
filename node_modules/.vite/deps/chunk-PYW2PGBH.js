import {
  h
} from "./chunk-4SARN32Z.js";
import {
  k
} from "./chunk-QA4FMJA6.js";
import {
  j2
} from "./chunk-VFQINJTY.js";
import {
  i
} from "./chunk-KTEJJM3A.js";
import {
  o as o3
} from "./chunk-4H5JODOT.js";
import {
  j,
  m2 as m
} from "./chunk-TCASQSKO.js";
import {
  o2,
  r,
  x2 as x
} from "./chunk-SFV6XLDZ.js";
import {
  o
} from "./chunk-VBD33VNW.js";
import {
  l
} from "./chunk-7A5C2EQ3.js";
import {
  y3 as y
} from "./chunk-OYBXMT5R.js";
import {
  a2 as a
} from "./chunk-CIDWM2UN.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";

// node_modules/@arcgis/core/rest/support/networkEnums.js
var i2 = o()({ esriCentimeters: "centimeters", esriDecimalDegrees: "decimal-degrees", esriDecimeters: "decimeters", esriFeet: "feet", esriInches: "inches", esriKilometers: "kilometers", esriMeters: "meters", esriMiles: "miles", esriMillimeters: "millimeters", esriNauticalMiles: "nautical-miles", esriPoints: "points", esriUnknownUnits: "unknown", esriYards: "yards" });
var r2 = o()({ esriNAUCentimeters: "centimeters", esriNAUDecimalDegrees: "decimal-degrees", esriNAUDecimeters: "decimeters", esriNAUFeet: "feet", esriNAUInches: "inches", esriNAUKilometers: "kilometers", esriNAUMeters: "meters", esriNAUMiles: "miles", esriNAUMillimeters: "millimeters", esriNAUNauticalMiles: "nautical-miles", esriNAUPoints: "points", esriNAUYards: "yards" });
var t = o()({ esriNAUDays: "days", esriNAUHours: "hours", esriNAUMinutes: "minutes", esriNAUSeconds: "seconds" });
var s = o()({ esriNAUCentimeters: "centimeters", esriNAUDecimalDegrees: "decimal-degrees", esriNAUDecimeters: "decimeters", esriNAUFeet: "feet", esriNAUInches: "inches", esriNAUKilometers: "kilometers", esriNAUMeters: "meters", esriNAUMiles: "miles", esriNAUMillimeters: "millimeters", esriNAUNauticalMiles: "nautical-miles", esriNAUPoints: "points", esriNAUYards: "yards", esriNAUDays: "days", esriNAUHours: "hours", esriNAUMinutes: "minutes", esriNAUSeconds: "seconds", esriNAUKilometersPerHour: "kilometers-per-hour", esriNAUMilesPerHour: "miles-per-hour", esriNAUUnknown: "unknown" });
var a2 = o()({ esriDOTComplete: "complete", esriDOTCompleteNoEvents: "complete-no-events", esriDOTFeatureSets: "featuresets", esriDOTInstructionsOnly: "instructions-only", esriDOTStandard: "standard", esriDOTSummaryOnly: "summary-only" });
var o4 = o()({ esriNAOutputLineNone: "none", esriNAOutputLineStraight: "straight", esriNAOutputLineTrueShape: "true-shape", esriNAOutputLineTrueShapeWithMeasure: "true-shape-with-measure" });
var n = o()({ esriNAOutputPolygonNone: "none", esriNAOutputPolygonSimplified: "simplified", esriNAOutputPolygonDetailed: "detailed" });
var l2 = o()({ esriNFSBAllowBacktrack: "allow-backtrack", esriNFSBAtDeadEndsOnly: "at-dead-ends-only", esriNFSBNoBacktrack: "no-backtrack", esriNFSBAtDeadEndsAndIntersections: "at-dead-ends-and-intersections" });
var d = o()({ esriNATravelDirectionFromFacility: "from-facility", esriNATravelDirectionToFacility: "to-facility" });
var c = o()({ esriNATimeOfDayNotUsed: "not-used", esriNATimeOfDayUseAsStartTime: "start", esriNATimeOfDayUseAsEndTime: "end" });
var m2 = o()({ AUTOMOBILE: "automobile", TRUCK: "truck", WALK: "walk", OTHER: "other" });
var u = o()({ 0: "either-side-of-vehicle", 1: "right-side-of-vehicle", 2: "left-side-of-vehicle", 3: "no-u-turn" }, { useNumericKeys: true });
var h2 = o()({ 0: "stop", 1: "waypoint", 2: "break" }, { useNumericKeys: true });
var p = o()({ 0: "ok", 1: "not-located", 2: "network-element-not-located", 3: "element-not-traversable", 4: "invalid-field-values", 5: "not-reached", 6: "time-window-violation", 7: "not-located-on-closest" }, { useNumericKeys: true });
var v = o()({ 1: "right", 2: "left" }, { useNumericKeys: true });
var A = o()({ 0: "restriction", 1: "added-cost" }, { useNumericKeys: true });
var T = o()({ 0: "permit", 1: "restrict" }, { useNumericKeys: true });
var N = o()({ 1: "header", 50: "arrive", 51: "depart", 52: "straight", 100: "on-ferry", 101: "off-ferry", 102: "central-fork", 103: "roundabout", 104: "u-turn", 150: "door", 151: "stairs", 152: "elevator", 153: "escalator", 154: "pedestrian-ramp", 200: "left-fork", 201: "left-ramp", 202: "clockwise-roundabout", 203: "left-handed-u-turn", 204: "bear-left", 205: "left-turn", 206: "sharp-left", 207: "left-turn-and-immediate-left-turn", 208: "left-turn-and-immediate-right-turn", 300: "right-fork", 301: "right-ramp", 302: "counter-clockwise-roundabout", 303: "right-handed-u-turn", 304: "bear-right", 305: "right-turn", 306: "sharp-right", 307: "right-turn-and-immediate-left-turn", 308: "right-turn-and-immediate-right-turn", 400: "up-elevator", 401: "up-escalator", 402: "up-stairs", 500: "down-elevator", 501: "down-escalator", 502: "down-stairs", 1e3: "general-event", 1001: "landmark", 1002: "time-zone-change", 1003: "traffic-event", 1004: "scaled-cost-barrier-event", 1005: "boundary-crossing", 1006: "restriction-violation" }, { useNumericKeys: true });
var g = o()({ 0: "unknown", 1: "segment", 2: "maneuver-segment", 3: "restriction-violation", 4: "scaled-cost-barrier", 5: "heavy-traffic", 6: "slow-traffic", 7: "moderate-traffic" }, { useNumericKeys: true });
var k2 = o()({ "NA Campus": "campus", "NA Desktop": "desktop", "NA Navigation": "navigation" });
var f = o()({ Kilometers: "kilometers", Miles: "miles", Meters: "meters" }, { ignoreUnknown: false });
var y2 = o()({ Minutes: "minutes", TimeAt1KPH: "time-at-1-kph", TravelTime: "travel-time", TruckMinutes: "truck-minutes", TruckTravelTime: "truck-travel-time", WalkTime: "walk-time" }, { ignoreUnknown: false });
var U = o()({ Kilometers: "kilometers", Miles: "miles", Meters: "meters", Minutes: "minutes", TimeAt1KPH: "time-at-1-kph", TravelTime: "travel-time", TruckMinutes: "truck-minutes", TruckTravelTime: "truck-travel-time", WalkTime: "walk-time" }, { ignoreUnknown: false });
var D = o()({ "Any Hazmat Prohibited": "any-hazmat-prohibited", "Avoid Carpool Roads": "avoid-carpool-roads", "Avoid Express Lanes": "avoid-express-lanes", "Avoid Ferries": "avoid-ferries", "Avoid Gates": "avoid-gates", "Avoid Limited Access Roads": "avoid-limited-access-roads", "Avoid Private Roads": "avoid-private-roads", "Avoid Roads Unsuitable for Pedestrians": "avoid-roads-unsuitable-for-pedestrians", "Avoid Stairways": "avoid-stairways", "Avoid Toll Roads": "avoid-toll-roads", "Avoid Toll Roads for Trucks": "avoid-toll-roads-for-trucks", "Avoid Truck Restricted Roads": "avoid-truck-restricted-roads", "Avoid Unpaved Roads": "avoid-unpaved-roads", "Axle Count Restriction": "axle-count-restriction", "Driving a Bus": "driving-a-bus", "Driving a Taxi": "driving-a-taxi", "Driving a Truck": "driving-a-truck", "Driving an Automobile": "driving-an-automobile", "Driving an Emergency Vehicle": "driving-an-emergency-vehicle", "Height Restriction": "height-restriction", "Kingpin to Rear Axle Length Restriction": "kingpin-to-rear-axle-length-restriction", "Length Restriction": "length-restriction", "Preferred for Pedestrians": "preferred-for-pedestrians", "Riding a Motorcycle": "riding-a-motorcycle", "Roads Under Construction Prohibited": "roads-under-construction-prohibited", "Semi or Tractor with One or More Trailers Prohibited": "semi-or-tractor-with-one-or-more-trailers-prohibited", "Single Axle Vehicles Prohibited": "single-axle-vehicles-prohibited", "Tandem Axle Vehicles Prohibited": "tandem-axle-vehicles-prohibited", "Through Traffic Prohibited": "through-traffic-prohibited", "Truck with Trailers Restriction": "truck-with-trailers-restriction", "Use Preferred Hazmat Routes": "use-preferred-hazmat-routes", "Use Preferred Truck Routes": "use-preferred-truck-routes", Walking: "walking", "Weight Restriction": "weight-restriction" }, { ignoreUnknown: false });
var S = o()({ esriSpatialRelIntersects: "intersects", esriSpatialRelContains: "contains", esriSpatialRelCrosses: "crosses", esriSpatialRelEnvelopeIntersects: "envelope-intersects", esriSpatialRelIndexIntersects: "index-intersects", esriSpatialRelOverlaps: "overlaps", esriSpatialRelTouches: "touches", esriSpatialRelWithin: "within", esriSpatialRelRelation: "relation" });
var w = o()({ esriGeometryPoint: "point", esriGeometryPolyline: "polyline", esriGeometryPolygon: "polygon", esriGeometryEnvelope: "envelope", esriGeometryMultipoint: "multipoint" });
var R = o()({ esriNAUTCost: "cost", esriNAUTDescriptor: "descriptor", esriNAUTRestriction: "restriction", esriNAUTHierarchy: "hierarchy" });
var b = o()({ esriDSTAltName: "alt-name", esriDSTArrive: "arrive", esriDSTBranch: "branch", esriDSTCrossStreet: "cross-street", esriDSTCumulativeLength: "cumulative-length", esriDSTDepart: "depart", esriDSTEstimatedArrivalTime: "estimated-arrival-time", esriDSTExit: "exit", esriDSTGeneral: "general", esriDSTLength: "length", esriDSTServiceTime: "service-time", esriDSTStreetName: "street-name", esriDSTSummary: "summary", esriDSTTime: "time", esriDSTTimeWindow: "time-window", esriDSTToward: "toward", esriDSTViolationTime: "violation-time", esriDSTWaitTime: "wait-time" });

// node_modules/@arcgis/core/rest/support/DirectionLine.js
var d2;
var c2 = d2 = class extends i(l) {
  constructor(e3) {
    super(e3), this.directionLineType = null, this.directionPointId = null, this.distance = null, this.duration = null, this.fromLevel = null, this.geometry = null, this.objectId = null, this.popupTemplate = null, this.symbol = null, this.toLevel = null, this.type = "direction-line";
  }
  static fromGraphic(e3) {
    return new d2({ directionLineType: g.fromJSON(e3.attributes.DirectionLineType), directionPointId: e3.attributes.DirectionPointID, distance: e3.attributes.Meters, duration: e3.attributes.Minutes, fromLevel: e3.attributes.FromLevel ?? null, geometry: e3.geometry, objectId: e3.attributes.ObjectID ?? e3.attributes.__OBJECTID, popupTemplate: e3.popupTemplate, symbol: e3.symbol, toLevel: e3.attributes.ToLevel ?? null });
  }
  toGraphic() {
    const e3 = { ObjectID: this.objectId, DirectionLineType: null != this.directionLineType ? g.toJSON(this.directionLineType) : null, DirectionPointID: this.directionPointId, Meters: this.distance, Minutes: this.duration };
    return null != this.fromLevel && (e3.FromLevel = this.fromLevel), null != this.toLevel && (e3.ToLevel = this.toLevel), new h({ geometry: this.geometry, attributes: e3, symbol: this.symbol, popupTemplate: this.popupTemplate });
  }
};
c2.fields = [{ name: "ObjectID", alias: "ObjectID", type: "esriFieldTypeOID", editable: false, nullable: false, domain: null }, { name: "DirectionLineType", alias: "Line Type", type: "esriFieldTypeInteger", editable: true, nullable: true, visible: true, domain: { type: "codedValue", name: "esriDirectionsLineType", codedValues: [{ name: "Unknown", code: 0 }, { name: "Segment", code: 1 }, { name: "Maneuver Segment", code: 2 }, { name: "Restriction violation", code: 3 }, { name: "Scale cost barrier crossing", code: 4 }, { name: "Heavy Traffic", code: 5 }, { name: "Slow Traffic", code: 6 }, { name: "Moderate Traffic", code: 7 }] } }, { name: "DirectionPointID", alias: "Direction Point ID", type: "esriFieldTypeInteger", editable: true, nullable: true, visible: false }, { name: "FromLevel", alias: "Start from 3D Level", type: "esriFieldTypeInteger", editable: true, nullable: true, visible: false }, { name: "Meters", alias: "Length in Meters", type: "esriFieldTypeDouble", editable: true, nullable: true, visible: true }, { name: "Minutes", alias: "Duration in Minutes", type: "esriFieldTypeDouble", editable: true, nullable: true, visible: true }, { name: "ToLevel", alias: "End at 3D Level", type: "esriFieldTypeInteger", editable: true, nullable: true, visible: false }], c2.popupInfo = { title: "Direction Lines", fieldInfos: [{ fieldName: "DirectionLineType", label: "Line Type", isEditable: false, tooltip: "", visible: true, stringFieldOption: "textbox" }, { fieldName: "Meters", label: "Length in Meters", isEditable: false, tooltip: "", visible: true, format: { places: 2, digitSeparator: true }, stringFieldOption: "textbox" }, { fieldName: "Minutes", label: "Duration in Minutes", isEditable: false, tooltip: "", visible: true, format: { places: 2, digitSeparator: true }, stringFieldOption: "textbox" }, { fieldName: "DirectionPointID", label: "Direction Point ID", isEditable: false, tooltip: "", visible: true, format: { places: 0, digitSeparator: true }, stringFieldOption: "textbox" }, { fieldName: "FromLevel", label: "Start from 3D Level", isEditable: false, tooltip: "", visible: false, format: { places: 0, digitSeparator: true }, stringFieldOption: "textbox" }, { fieldName: "ToLevel", label: "End at 3D Level", isEditable: false, tooltip: "", visible: false, format: { places: 0, digitSeparator: true }, stringFieldOption: "textbox" }], description: null, showAttachments: false, mediaInfos: [] }, e([y({ type: g.apiValues, json: { read: { source: "attributes.DirectionLineType", reader: g.read } } })], c2.prototype, "directionLineType", void 0), e([y({ json: { read: { source: "attributes.DirectionPointID" } } })], c2.prototype, "directionPointId", void 0), e([y({ json: { read: { source: "attributes.Meters" } } })], c2.prototype, "distance", void 0), e([y({ json: { read: { source: "attributes.Minutes" } } })], c2.prototype, "duration", void 0), e([y({ json: { read: { source: "attributes.FromLevel" } } })], c2.prototype, "fromLevel", void 0), e([y({ type: m })], c2.prototype, "geometry", void 0), e([y({ json: { read: { source: "attributes.ObjectID" } } })], c2.prototype, "objectId", void 0), e([y({ type: k })], c2.prototype, "popupTemplate", void 0), e([y({ types: j2 })], c2.prototype, "symbol", void 0), e([y({ json: { read: { source: "attributes.ToLevel" } } })], c2.prototype, "toLevel", void 0), e([y({ readOnly: true, json: { read: false } })], c2.prototype, "type", void 0), c2 = d2 = e([a("esri.rest.support.DirectionLine")], c2);
var m3 = c2;

// node_modules/@arcgis/core/rest/support/DirectionPoint.js
var p2;
var u2 = p2 = class extends i(l) {
  constructor(e3) {
    super(e3), this.alternateName = null, this.arrivalTime = null, this.arrivalTimeOffset = null, this.azimuth = null, this.branchName = null, this.directionPointType = null, this.displayText = null, this.exitName = null, this.geometry = null, this.intersectingName = null, this.level = null, this.name = null, this.objectId = null, this.popupTemplate = null, this.sequence = null, this.shortVoiceInstruction = null, this.stopId = null, this.symbol = null, this.towardName = null, this.type = "direction-point", this.voiceInstruction = null;
  }
  readArrivalTime(e3, t2) {
    return null != t2.attributes.ArrivalTime ? new Date(t2.attributes.ArrivalTime) : null;
  }
  static fromGraphic(e3) {
    return new p2({ alternateName: e3.attributes.AlternateName ?? null, arrivalTime: null != e3.attributes.ArrivalTime ? new Date(e3.attributes.ArrivalTime) : null, arrivalTimeOffset: e3.attributes.ArrivalUTCOffset ?? null, azimuth: e3.attributes.Azimuth ?? null, branchName: e3.attributes.BranchName ?? null, directionPointType: N.fromJSON(e3.attributes.DirectionPointType), displayText: e3.attributes.DisplayText ?? null, exitName: e3.attributes.ExitName ?? null, geometry: e3.geometry, intersectingName: e3.attributes.IntersectingName ?? null, level: e3.attributes.Level ?? null, name: e3.attributes.Name ?? null, objectId: e3.attributes.ObjectID ?? e3.attributes.__OBJECTID, popupTemplate: e3.popupTemplate, sequence: e3.attributes.Sequence, shortVoiceInstruction: e3.attributes.ShortVoiceInstruction ?? null, stopId: e3.attributes.StopID ?? null, symbol: e3.symbol, towardName: e3.attributes.TowardName ?? null, voiceInstruction: e3.attributes.VoiceInstruction ?? null });
  }
  toGraphic() {
    const e3 = { ObjectID: this.objectId, DirectionPointType: null != this.directionPointType ? N.toJSON(this.directionPointType) : null, Sequence: this.sequence, StopID: this.stopId };
    return null != this.alternateName && (e3.AlternateName = this.alternateName), null != this.arrivalTime && (e3.ArrivalTime = this.arrivalTime.getTime()), null != this.arrivalTimeOffset && (e3.ArrivalUTCOffset = this.arrivalTimeOffset), null != this.azimuth && (e3.Azimuth = this.azimuth), null != this.branchName && (e3.BranchName = this.branchName), null != this.displayText && (e3.DisplayText = this.displayText), null != this.exitName && (e3.ExitName = this.exitName), null != this.intersectingName && (e3.IntersectingName = this.intersectingName), null != this.level && (e3.Level = this.level), null != this.name && (e3.Name = this.name), null != this.shortVoiceInstruction && (e3.ShortVoiceInstruction = this.shortVoiceInstruction), null != this.towardName && (e3.TowardName = this.towardName), null != this.voiceInstruction && (e3.VoiceInstruction = this.voiceInstruction), new h({ geometry: this.geometry, attributes: e3, symbol: this.symbol, popupTemplate: this.popupTemplate });
  }
};
u2.fields = [{ name: "ObjectID", alias: "ObjectID", type: "esriFieldTypeOID", editable: false, nullable: false, domain: null }, { name: "AlternateName", alias: "Alternative Feature Name", type: "esriFieldTypeString", length: 2048, editable: true, nullable: true, visible: true, domain: null }, { name: "ArrivalTime", alias: "Maneuver Starts at", type: "esriFieldTypeDate", length: 36, editable: true, nullable: true, visible: true }, { name: "ArrivalUTCOffset", alias: "Offset from UTC in Minutes", type: "esriFieldTypeInteger", editable: true, nullable: true, visible: true }, { name: "Azimuth", alias: "Azimuth", type: "esriFieldTypeDouble", editable: true, nullable: true, visible: true }, { name: "BranchName", alias: "Signpost Branch Name", type: "esriFieldTypeString", length: 2048, editable: true, nullable: true, visible: true, domain: null }, { name: "DirectionPointType", alias: "Directions Item Type", type: "esriFieldTypeInteger", editable: true, nullable: true, visible: true, domain: { type: "codedValue", name: "esriDirectionPointType", codedValues: [{ name: "Unknown", code: 0 }, { name: "", code: 1 }, { name: "Arrive at stop", code: 50 }, { name: "Depart at stop", code: 51 }, { name: "Go straight", code: 52 }, { name: "Take ferry", code: 100 }, { name: "Take off ferry", code: 101 }, { name: "Keep center at fork", code: 102 }, { name: "Take roundabout", code: 103 }, { name: "Make U-Turn", code: 104 }, { name: "Pass the door", code: 150 }, { name: "Take stairs", code: 151 }, { name: "", code: 152 }, { name: "Take escalator", code: 153 }, { name: "Take pedestrian ramp", code: 154 }, { name: "Keep left at fork", code: 200 }, { name: "Ramp left", code: 201 }, { name: "Take left-handed roundabout", code: 202 }, { name: "Make left-handed U-Turn", code: 203 }, { name: "Bear left", code: 204 }, { name: "Turn left", code: 205 }, { name: "Make sharp left", code: 206 }, { name: "Turn left, followed by turn left", code: 207 }, { name: "Turn left, followed by turn right", code: 208 }, { name: "Keep right at fork", code: 300 }, { name: "Ramp right", code: 301 }, { name: "Take right-handed roundabout", code: 302 }, { name: "Make right-handed U-Turn", code: 303 }, { name: "Bear right", code: 304 }, { name: "Turn right", code: 305 }, { name: "Make sharp right", code: 306 }, { name: "Turn right, followed by turn left", code: 307 }, { name: "Turn right, followed by turn right", code: 308 }, { name: "Indicates up direction of elevator", code: 400 }, { name: "Indicates up direction of escalator", code: 401 }, { name: "Take up-stairs", code: 402 }, { name: "Indicates down direction of elevator", code: 500 }, { name: "Indicates down direction of escalator", code: 501 }, { name: "Take down-stairs", code: 502 }, { name: "General event", code: 1e3 }, { name: "Landmark", code: 1001 }, { name: "Time zone change", code: 1002 }, { name: "Heavy traffic segment", code: 1003 }, { name: "Scale cost barrier crossing", code: 1004 }, { name: "Administrative Border crossing", code: 1005 }, { name: "Restriction violation", code: 1006 }] } }, { name: "DisplayText", alias: "Text to Display", type: "esriFieldTypeString", length: 2048, editable: true, nullable: true, visible: true, domain: null }, { name: "ExitName", alias: "Highway Exit Name", type: "esriFieldTypeString", length: 2048, editable: true, nullable: true, visible: true, domain: null }, { name: "IntersectingName", alias: "Intersecting Feature Name", type: "esriFieldTypeString", length: 2048, editable: true, nullable: true, visible: true, domain: null }, { name: "Level", alias: "3D Logical Level", type: "esriFieldTypeInteger", editable: true, nullable: true, visible: true }, { name: "Name", alias: "Primary Feature Name", type: "esriFieldTypeString", length: 2048, editable: true, nullable: true, visible: true, domain: null }, { name: "Sequence", alias: "Sequence", type: "esriFieldTypeInteger", editable: true, nullable: true, visible: true }, { name: "ShortVoiceInstruction", alias: "Voice Instruction", type: "esriFieldTypeString", length: 2048, editable: true, nullable: true, visible: true, domain: null }, { name: "StopID", alias: "Stop ID", type: "esriFieldTypeInteger", editable: true, nullable: true, visible: true }, { name: "TowardName", alias: "Signpost Toward Name", type: "esriFieldTypeString", length: 2048, editable: true, nullable: true, visible: true, domain: null }, { name: "VoiceInstruction", alias: "Voice Full Instruction", type: "esriFieldTypeString", length: 2048, editable: true, nullable: true, visible: true, domain: null }], u2.popupInfo = { title: "{DisplayText}", fieldInfos: [{ fieldName: "DirectionPointType", label: "Directions Item Type", isEditable: false, tooltip: "", visible: true, stringFieldOption: "textbox" }, { fieldName: "DisplayText", label: "Text to Display", isEditable: false, tooltip: "", visible: true, stringFieldOption: "textbox" }, { fieldName: "Sequence", label: "Sequence", isEditable: false, tooltip: "", visible: true, format: { places: 0, digitSeparator: true }, stringFieldOption: "textbox" }, { fieldName: "StopID", label: "Stop ID", isEditable: false, tooltip: "", visible: true, format: { places: 0, digitSeparator: true }, stringFieldOption: "textbox" }, { fieldName: "ArrivalTime", label: "Maneuver Starts at", isEditable: true, tooltip: "", visible: true, format: { dateFormat: "shortDateShortTime24" }, stringFieldOption: "textbox" }, { fieldName: "ArrivalUTCOffset", label: "Offset from UTC in Minutes", isEditable: false, tooltip: "", visible: true, format: { places: 0, digitSeparator: true }, stringFieldOption: "textbox" }, { fieldName: "Azimuth", label: "Azimuth", isEditable: false, tooltip: "", visible: false, format: { places: 0, digitSeparator: true }, stringFieldOption: "textbox" }, { fieldName: "Name", label: "Primary Feature Name", isEditable: false, tooltip: "", visible: true, stringFieldOption: "textbox" }, { fieldName: "AlternateName", label: "Alternative Feature Name", isEditable: false, tooltip: "", visible: true, stringFieldOption: "textbox" }, { fieldName: "ExitName", label: "Highway Exit Name", isEditable: false, tooltip: "", visible: true, stringFieldOption: "textbox" }, { fieldName: "IntersectingName", label: "Intersecting Feature Name", isEditable: false, tooltip: "", visible: true, stringFieldOption: "textbox" }, { fieldName: "BranchName", label: "Signpost Branch Name", isEditable: false, tooltip: "", visible: true, stringFieldOption: "textbox" }, { fieldName: "TowardName", label: "Signpost Toward Name", isEditable: false, tooltip: "", visible: true, stringFieldOption: "textbox" }, { fieldName: "ShortVoiceInstruction", label: "Voice Instruction", isEditable: false, tooltip: "", visible: false, stringFieldOption: "textbox" }, { fieldName: "VoiceInstruction", label: "Voice Full Instruction", isEditable: false, tooltip: "", visible: false, stringFieldOption: "textbox" }], description: null, showAttachments: false, mediaInfos: [] }, e([y()], u2.prototype, "alternateName", void 0), e([y()], u2.prototype, "arrivalTime", void 0), e([o2("arrivalTime", ["attributes.ArrivalTime"])], u2.prototype, "readArrivalTime", null), e([y({ json: { read: { source: "attributes.ArrivalUTCOffset" } } })], u2.prototype, "arrivalTimeOffset", void 0), e([y({ json: { read: { source: "attributes.Azimuth" } } })], u2.prototype, "azimuth", void 0), e([y({ json: { read: { source: "attributes.BranchName" } } })], u2.prototype, "branchName", void 0), e([y({ type: N.apiValues, json: { read: { source: "attributes.DirectionPointType", reader: N.read } } })], u2.prototype, "directionPointType", void 0), e([y({ json: { read: { source: "attributes.DisplayText" } } })], u2.prototype, "displayText", void 0), e([y({ json: { read: { source: "attributes.ExitName" } } })], u2.prototype, "exitName", void 0), e([y({ type: x })], u2.prototype, "geometry", void 0), e([y()], u2.prototype, "intersectingName", void 0), e([y()], u2.prototype, "level", void 0), e([y({ json: { read: { source: "attributes.Name" } } })], u2.prototype, "name", void 0), e([y({ json: { read: { source: "attributes.ObjectID" } } })], u2.prototype, "objectId", void 0), e([y({ type: k })], u2.prototype, "popupTemplate", void 0), e([y({ json: { read: { source: "attributes.Sequence" } } })], u2.prototype, "sequence", void 0), e([y()], u2.prototype, "shortVoiceInstruction", void 0), e([y({ json: { read: { source: "attributes.StopID" } } })], u2.prototype, "stopId", void 0), e([y({ types: j2 })], u2.prototype, "symbol", void 0), e([y({ json: { read: { source: "attributes.TowardName" } } })], u2.prototype, "towardName", void 0), e([y({ readOnly: true, json: { read: false } })], u2.prototype, "type", void 0), e([y()], u2.prototype, "voiceInstruction", void 0), u2 = p2 = e([a("esri.rest.support.DirectionPoint")], u2);
var c3 = u2;

// node_modules/@arcgis/core/rest/route/utils.js
function r3(r4, i4) {
  if (null == r4)
    return null;
  const e3 = {}, s3 = new RegExp(`^${i4}`, "i");
  for (const n3 of Object.keys(r4))
    if (s3.test(n3)) {
      const s4 = n3.substring(i4.length);
      e3[U.fromJSON(s4)] = r4[n3];
    }
  return e3;
}
function i3(r4, i4, e3) {
  if (null != r4) {
    i4.attributes || (i4.attributes = {});
    for (const s3 in r4) {
      const n3 = U.toJSON(s3);
      i4.attributes[`${e3}${n3}`] = r4[s3];
    }
  }
}
function e2(r4) {
  const i4 = {};
  for (const e3 of Object.keys(r4)) {
    const s3 = e3;
    i4[U.fromJSON(s3)] = r4[e3];
  }
  return i4;
}
function s2(r4) {
  const i4 = {};
  for (const e3 of Object.keys(r4)) {
    const s3 = e3;
    i4[U.toJSON(s3)] = r4[e3];
  }
  return i4;
}
function n2(t2, r4) {
  return null == t2 || null == r4 ? null : Math.round((t2 - r4) / 6e4);
}
function o5(t2) {
  var _a, _b, _c;
  const r4 = t2.toJSON(), i4 = r4;
  return i4.accumulateAttributeNames && (i4.accumulateAttributeNames = (_a = r4.accumulateAttributeNames) == null ? void 0 : _a.join()), i4.attributeParameterValues && (i4.attributeParameterValues = JSON.stringify(r4.attributeParameterValues)), i4.barriers && (i4.barriers = JSON.stringify(r4.barriers)), i4.outSR && (i4.outSR = (_b = r4.outSR) == null ? void 0 : _b.wkid), i4.overrides && (i4.overrides = JSON.stringify(r4.overrides)), i4.polygonBarriers && (i4.polygonBarriers = JSON.stringify(r4.polygonBarriers)), i4.polylineBarriers && (i4.polylineBarriers = JSON.stringify(r4.polylineBarriers)), i4.restrictionAttributeNames && (i4.restrictionAttributeNames = (_c = r4.restrictionAttributeNames) == null ? void 0 : _c.join()), i4.stops && (i4.stops = JSON.stringify(r4.stops)), i4.travelMode && (i4.travelMode = JSON.stringify(r4.travelMode)), i4;
}

// node_modules/@arcgis/core/rest/support/PointBarrier.js
var T2;
var S2 = T2 = class extends i(l) {
  constructor(e3) {
    super(e3), this.addedCost = null, this.barrierType = null, this.costs = null, this.curbApproach = null, this.fullEdge = null, this.geometry = null, this.name = null, this.objectId = null, this.popupTemplate = null, this.sideOfEdge = null, this.sourceId = null, this.sourceOid = null, this.status = null, this.symbol = null, this.type = "point-barrier";
  }
  readCosts(e3, t2) {
    return r3(t2.attributes, "Attr_");
  }
  writeCosts(e3, t2) {
    i3(e3, t2, "Attr_");
  }
  static fromGraphic(e3) {
    return new T2({ addedCost: e3.attributes.AddedCost ?? null, barrierType: null != e3.attributes.BarrierType ? A.fromJSON(e3.attributes.BarrierType) : null, costs: null != e3.attributes.Costs ? e2(JSON.parse(e3.attributes.Costs)) : null, curbApproach: null != e3.attributes.CurbApproach ? u.fromJSON(e3.attributes.CurbApproach) : null, fullEdge: null != e3.attributes.FullEdge ? T.fromJSON(e3.attributes.FullEdge) : null, geometry: e3.geometry, name: e3.attributes.Name ?? null, objectId: e3.attributes.ObjectID ?? e3.attributes.__OBJECTID, popupTemplate: e3.popupTemplate, status: null != e3.attributes.Status ? p.fromJSON(e3.attributes.Status) : null, symbol: e3.symbol });
  }
  toGraphic() {
    const e3 = { ObjectID: this.objectId, AddedCost: this.addedCost, BarrierType: null != this.barrierType ? A.toJSON(this.barrierType) : null, Costs: null != this.costs ? JSON.stringify(s2(this.costs)) : null, CurbApproach: null != this.curbApproach ? u.toJSON(this.curbApproach) : null, FullEdge: null != this.fullEdge ? T.toJSON(this.fullEdge) : null, Name: this.name, Status: null != this.status ? p.toJSON(this.status) : null };
    return new h({ geometry: this.geometry, attributes: e3, symbol: this.symbol, popupTemplate: this.popupTemplate });
  }
};
S2.fields = [{ name: "ObjectID", alias: "ObjectID", type: "esriFieldTypeOID", editable: false, nullable: false, domain: null }, { name: "AddedCost", alias: "Added Cost", type: "esriFieldTypeDouble", editable: true, nullable: true, visible: true, domain: null }, { name: "BarrierType", alias: "Barrier Type", type: "esriFieldTypeInteger", editable: true, nullable: true, visible: true, domain: { type: "codedValue", name: "esriNABarrierType", codedValues: [{ name: "Restriction", code: 0 }, { name: "Scaled Cost", code: 1 }, { name: "Added Cost", code: 2 }] } }, { name: "Costs", alias: "Costs", type: "esriFieldTypeString", length: 1048576, editable: true, nullable: true, visible: false, domain: null }, { name: "CurbApproach", alias: "Curb Approach", type: "esriFieldTypeInteger", editable: true, nullable: true, visible: false, domain: { type: "codedValue", name: "esriNACurbApproachType", codedValues: [{ name: "Either side", code: 0 }, { name: "From the right", code: 1 }, { name: "From the left", code: 2 }, { name: "Depart in the same direction", code: 3 }] } }, { name: "FullEdge", alias: "Full Edge", type: "esriFieldTypeInteger", editable: true, nullable: true, visible: true, domain: { type: "codedValue", name: "esriNAIntYesNo", codedValues: [{ name: "No", code: 0 }, { name: "Yes", code: 1 }] } }, { name: "Name", alias: "Name", type: "esriFieldTypeString", length: 255, editable: true, nullable: true, visible: true }, { name: "Status", alias: "Status", type: "esriFieldTypeInteger", editable: true, nullable: true, visible: true, domain: { type: "codedValue", name: "esriNAObjectStatus", codedValues: [{ name: "OK", code: 0 }, { name: "Not Located on Network", code: 1 }, { name: "Network Unbuilt", code: 2 }, { name: "Prohibited Street", code: 3 }, { name: "Invalid Field Values", code: 4 }, { name: "Cannot Reach", code: 5 }, { name: "Time Window Violation", code: 6 }] } }], S2.popupInfo = { title: "Point Barriers", fieldInfos: [{ fieldName: "Name", label: "Name", isEditable: true, tooltip: "", visible: true, stringFieldOption: "textbox" }, { fieldName: "BarrierType", label: "Barrier Type", isEditable: true, tooltip: "", visible: true, stringFieldOption: "textbox" }, { fieldName: "AddedCost", label: "Added Cost", isEditable: true, tooltip: "", visible: true, format: { places: 3, digitSeparator: true }, stringFieldOption: "textbox" }], description: null, showAttachments: false, mediaInfos: [] }, e([y()], S2.prototype, "addedCost", void 0), e([y({ type: A.apiValues, json: { name: "attributes.BarrierType", read: { reader: A.read }, write: { writer: A.write } } })], S2.prototype, "barrierType", void 0), e([y()], S2.prototype, "costs", void 0), e([o2("costs", ["attributes"])], S2.prototype, "readCosts", null), e([r("costs")], S2.prototype, "writeCosts", null), e([y({ type: u.apiValues, json: { read: { source: "attributes.CurbApproach", reader: u.read } } })], S2.prototype, "curbApproach", void 0), e([y({ type: T.apiValues, json: { name: "attributes.FullEdge", read: { reader: T.read }, write: { writer: T.write } } })], S2.prototype, "fullEdge", void 0), e([y({ type: x, json: { write: true } })], S2.prototype, "geometry", void 0), e([y({ json: { name: "attributes.Name" } })], S2.prototype, "name", void 0), e([y({ json: { name: "attributes.ObjectID" } })], S2.prototype, "objectId", void 0), e([y({ type: k })], S2.prototype, "popupTemplate", void 0), e([y({ type: v.apiValues, json: { read: { source: "attributes.SideOfEdge", reader: v.read } } })], S2.prototype, "sideOfEdge", void 0), e([y({ json: { read: { source: "attributes.SourceID" } } })], S2.prototype, "sourceId", void 0), e([y({ json: { read: { source: "attributes.SourceOID" } } })], S2.prototype, "sourceOid", void 0), e([y({ type: p.apiValues, json: { read: { source: "attributes.Status", reader: p.read } } })], S2.prototype, "status", void 0), e([y({ types: j2 })], S2.prototype, "symbol", void 0), e([y({ readOnly: true, json: { read: false } })], S2.prototype, "type", void 0), S2 = T2 = e([a("esri.rest.support.PointBarrier")], S2);
var C = S2;

// node_modules/@arcgis/core/rest/support/PolygonBarrier.js
var j3;
var h3 = j3 = class extends i(l) {
  constructor(e3) {
    super(e3), this.barrierType = null, this.costs = null, this.geometry = null, this.name = null, this.objectId = null, this.popupTemplate = null, this.scaleFactor = null, this.symbol = null, this.type = "polygon-barrier";
  }
  readCosts(e3, t2) {
    return r3(t2.attributes, "Attr_");
  }
  writeCosts(e3, t2) {
    i3(e3, t2, "Attr_");
  }
  static fromGraphic(e3) {
    return new j3({ barrierType: null != e3.attributes.BarrierType ? A.fromJSON(e3.attributes.BarrierType) : null, costs: null != e3.attributes.Costs ? e2(JSON.parse(e3.attributes.Costs)) : null, geometry: e3.geometry, name: e3.attributes.Name ?? null, objectId: e3.attributes.ObjectID ?? e3.attributes.__OBJECTID, popupTemplate: e3.popupTemplate, scaleFactor: e3.attributes.ScaleFactor ?? null, symbol: e3.symbol });
  }
  toGraphic() {
    const e3 = { ObjectID: this.objectId, BarrierType: null != this.barrierType ? A.toJSON(this.barrierType) : null, Costs: null != this.costs ? JSON.stringify(s2(this.costs)) : null, Name: this.name ?? null, ScaleFactor: this.scaleFactor ?? null };
    return new h({ geometry: this.geometry, attributes: e3, symbol: this.symbol, popupTemplate: this.popupTemplate });
  }
};
h3.fields = [{ name: "ObjectID", alias: "ObjectID", type: "esriFieldTypeOID", editable: false, nullable: false, domain: null }, { name: "BarrierType", alias: "Barrier Type", type: "esriFieldTypeInteger", editable: true, nullable: true, visible: true, domain: { type: "codedValue", name: "esriNABarrierType", codedValues: [{ name: "Restriction", code: 0 }, { name: "Scaled Cost", code: 1 }, { name: "Added Cost", code: 2 }] } }, { name: "Costs", alias: "Costs", type: "esriFieldTypeString", length: 1048576, editable: true, nullable: true, visible: false, domain: null }, { name: "Name", alias: "Name", type: "esriFieldTypeString", length: 255, editable: true, nullable: true, visible: true }, { name: "ScaleFactor", alias: "Scale Factor", type: "esriFieldTypeDouble", editable: true, nullable: true, visible: true }], h3.popupInfo = { title: "Polygon Barriers", fieldInfos: [{ fieldName: "Name", label: "Name", isEditable: true, tooltip: "", visible: true, stringFieldOption: "textbox" }, { fieldName: "BarrierType", label: "Barrier Type", isEditable: true, tooltip: "", visible: true, stringFieldOption: "textbox" }, { fieldName: "ScaleFactor", isEditable: true, tooltip: "", visible: true, format: { places: 3, digitSeparator: true }, stringFieldOption: "textbox" }, { fieldName: "Costs", label: "Costs", isEditable: true, tooltip: "", visible: false, stringFieldOption: "textbox" }], description: null, showAttachments: false, mediaInfos: [] }, e([y({ type: A.apiValues, json: { name: "attributes.BarrierType", read: { reader: A.read }, write: { writer: A.write } } })], h3.prototype, "barrierType", void 0), e([y()], h3.prototype, "costs", void 0), e([o2("costs", ["attributes"])], h3.prototype, "readCosts", null), e([r("costs")], h3.prototype, "writeCosts", null), e([y({ type: j, json: { write: true } })], h3.prototype, "geometry", void 0), e([y({ json: { name: "attributes.Name" } })], h3.prototype, "name", void 0), e([y({ json: { name: "attributes.ObjectID" } })], h3.prototype, "objectId", void 0), e([y({ type: k })], h3.prototype, "popupTemplate", void 0), e([y()], h3.prototype, "scaleFactor", void 0), e([y({ types: j2 })], h3.prototype, "symbol", void 0), e([y({ readOnly: true, json: { read: false } })], h3.prototype, "type", void 0), h3 = j3 = e([a("esri.rest.support.PolygonBarrier")], h3);
var T3 = h3;

// node_modules/@arcgis/core/rest/support/PolylineBarrier.js
var d3;
var y3 = d3 = class extends i(l) {
  constructor(e3) {
    super(e3), this.barrierType = null, this.costs = null, this.geometry = null, this.name = null, this.objectId = null, this.popupTemplate = null, this.scaleFactor = null, this.symbol = null, this.type = "polyline-barrier";
  }
  readCosts(e3, t2) {
    return r3(t2.attributes, "Attr_");
  }
  static fromGraphic(e3) {
    return new d3({ barrierType: null != e3.attributes.BarrierType ? A.fromJSON(e3.attributes.BarrierType) : null, costs: null != e3.attributes.Costs ? e2(JSON.parse(e3.attributes.Costs)) : null, geometry: e3.geometry, name: e3.attributes.Name ?? null, objectId: e3.attributes.ObjectID ?? e3.attributes.__OBJECTID, popupTemplate: e3.popupTemplate, scaleFactor: e3.attributes.ScaleFactor ?? null, symbol: e3.symbol });
  }
  toGraphic() {
    const e3 = { ObjectID: this.objectId, BarrierType: null != this.barrierType ? A.toJSON(this.barrierType) : null, Costs: null != this.costs ? JSON.stringify(s2(this.costs)) : null, Name: this.name, ScaleFactor: this.scaleFactor };
    return new h({ geometry: this.geometry, attributes: e3, symbol: this.symbol, popupTemplate: this.popupTemplate });
  }
};
y3.fields = [{ name: "ObjectID", alias: "ObjectID", type: "esriFieldTypeOID", editable: false, nullable: false, domain: null }, { name: "BarrierType", alias: "Barrier Type", type: "esriFieldTypeInteger", editable: true, nullable: true, visible: true, domain: { type: "codedValue", name: "esriNABarrierType", codedValues: [{ name: "Restriction", code: 0 }, { name: "Scaled Cost", code: 1 }, { name: "Added Cost", code: 2 }] } }, { name: "Costs", alias: "Costs", type: "esriFieldTypeString", length: 1048576, editable: true, nullable: true, visible: false, domain: null }, { name: "Name", alias: "Name", type: "esriFieldTypeString", length: 255, editable: true, nullable: true, visible: true }, { name: "ScaleFactor", alias: "Scale Factor", type: "esriFieldTypeDouble", editable: true, nullable: true, visible: true }], y3.popupInfo = { title: "Line Barriers", fieldInfos: [{ fieldName: "Name", label: "Name", isEditable: true, tooltip: "", visible: true, stringFieldOption: "textbox" }, { fieldName: "BarrierType", label: "Barrier Type", isEditable: true, tooltip: "", visible: true, stringFieldOption: "textbox" }, { fieldName: "ScaleFactor", isEditable: true, tooltip: "", visible: true, format: { places: 3, digitSeparator: true }, stringFieldOption: "textbox" }, { fieldName: "Costs", label: "Costs", isEditable: true, tooltip: "", visible: false, stringFieldOption: "textbox" }], description: null, showAttachments: false, mediaInfos: [] }, e([y({ type: A.apiValues, json: { read: { source: "attributes.BarrierType", reader: A.read } } })], y3.prototype, "barrierType", void 0), e([y()], y3.prototype, "costs", void 0), e([o2("costs", ["attributes"])], y3.prototype, "readCosts", null), e([y({ type: m, json: { write: true } })], y3.prototype, "geometry", void 0), e([y({ json: { name: "attributes.Name" } })], y3.prototype, "name", void 0), e([y({ json: { name: "attributes.ObjectID" } })], y3.prototype, "objectId", void 0), e([y({ type: k })], y3.prototype, "popupTemplate", void 0), e([y()], y3.prototype, "scaleFactor", void 0), e([y({ types: j2 })], y3.prototype, "symbol", void 0), e([y({ readOnly: true, json: { read: false } })], y3.prototype, "type", void 0), y3 = d3 = e([a("esri.rest.support.PolylineBarrier")], y3);
var j4 = y3;

// node_modules/@arcgis/core/rest/support/TravelMode.js
var b2 = class extends i(l) {
  constructor(t2) {
    super(t2), this.attributeParameterValues = null, this.description = null, this.distanceAttributeName = null, this.id = null, this.impedanceAttributeName = null, this.name = null, this.restrictionAttributeNames = null, this.simplificationTolerance = null, this.simplificationToleranceUnits = null, this.timeAttributeName = null, this.type = null, this.useHierarchy = null, this.uturnAtJunctions = null;
  }
  readId(t2, r4) {
    return r4.id ?? r4.itemId ?? null;
  }
  readRestrictionAttributes(t2, r4) {
    const { restrictionAttributeNames: e3 } = r4;
    return null == e3 ? null : e3.map((t3) => D.fromJSON(t3));
  }
  writeRestrictionAttributes(t2, r4, e3) {
    null != t2 && (r4[e3] = t2.map((t3) => D.toJSON(t3)));
  }
};
e([y({ type: [Object], json: { write: true } })], b2.prototype, "attributeParameterValues", void 0), e([y({ type: String, json: { write: true } })], b2.prototype, "description", void 0), e([o3(f, { ignoreUnknown: false })], b2.prototype, "distanceAttributeName", void 0), e([y({ type: String, json: { write: true } })], b2.prototype, "id", void 0), e([o2("id", ["id", "itemId"])], b2.prototype, "readId", null), e([o3(U, { ignoreUnknown: false })], b2.prototype, "impedanceAttributeName", void 0), e([y({ type: String, json: { write: true } })], b2.prototype, "name", void 0), e([y({ type: [String], json: { write: true } })], b2.prototype, "restrictionAttributeNames", void 0), e([o2("restrictionAttributeNames")], b2.prototype, "readRestrictionAttributes", null), e([r("restrictionAttributeNames")], b2.prototype, "writeRestrictionAttributes", null), e([y({ type: Number, json: { write: { allowNull: true } } })], b2.prototype, "simplificationTolerance", void 0), e([o3(i2)], b2.prototype, "simplificationToleranceUnits", void 0), e([o3(y2, { ignoreUnknown: false })], b2.prototype, "timeAttributeName", void 0), e([o3(m2)], b2.prototype, "type", void 0), e([y({ type: Boolean, json: { write: true } })], b2.prototype, "useHierarchy", void 0), e([o3(l2)], b2.prototype, "uturnAtJunctions", void 0), b2 = e([a("esri.rest.support.TravelMode")], b2);
var j5 = b2;

// node_modules/@arcgis/core/rest/support/RouteSettings.js
var a3 = class extends l {
  constructor(t2) {
    super(t2), this.accumulateAttributes = null, this.directionsLanguage = null, this.findBestSequence = null, this.preserveFirstStop = null, this.preserveLastStop = null, this.startTimeIsUTC = null, this.timeWindowsAreUTC = null, this.travelMode = null;
  }
  readAccumulateAttributes(t2) {
    return null == t2 ? null : t2.map((t3) => U.fromJSON(t3));
  }
  writeAccumulateAttributes(t2, e3, r4) {
    null != t2 && t2.length && (e3[r4] = t2.map((t3) => U.toJSON(t3)));
  }
};
e([y({ type: [String], json: { name: "accumulateAttributeNames", write: true } })], a3.prototype, "accumulateAttributes", void 0), e([o2("accumulateAttributes")], a3.prototype, "readAccumulateAttributes", null), e([r("accumulateAttributes")], a3.prototype, "writeAccumulateAttributes", null), e([y({ type: String, json: { write: true } })], a3.prototype, "directionsLanguage", void 0), e([y({ type: Boolean, json: { write: true } })], a3.prototype, "findBestSequence", void 0), e([y({ type: Boolean, json: { write: true } })], a3.prototype, "preserveFirstStop", void 0), e([y({ type: Boolean, json: { write: true } })], a3.prototype, "preserveLastStop", void 0), e([y({ type: Boolean, json: { write: true } })], a3.prototype, "startTimeIsUTC", void 0), e([y({ type: Boolean, json: { write: true } })], a3.prototype, "timeWindowsAreUTC", void 0), e([y({ type: j5, json: { write: true } })], a3.prototype, "travelMode", void 0), a3 = e([a("esri.layers.support.RouteSettings")], a3);
var l3 = a3;

// node_modules/@arcgis/core/rest/support/RouteInfo.js
var f2;
var y4 = f2 = class extends i(l) {
  constructor(t2) {
    super(t2), this.analysisSettings = null, this.endTime = null, this.endTimeOffset = null, this.firstStopId = null, this.geometry = null, this.lastStopId = null, this.messages = null, this.name = null, this.objectId = null, this.popupTemplate = null, this.startTime = null, this.startTimeOffset = null, this.stopCount = null, this.symbol = null, this.totalCosts = null, this.totalDistance = null, this.totalDuration = null, this.totalLateDuration = null, this.totalViolations = null, this.totalWait = null, this.totalWaitDuration = null, this.type = "route-info", this.version = "1.0.0";
  }
  readEndTime(t2, e3) {
    return null != e3.attributes.EndTimeUTC ? new Date(e3.attributes.EndTimeUTC) : null;
  }
  readEndTimeOffset(t2, e3) {
    return n2(e3.attributes.EndTime, e3.attributes.EndTimeUTC);
  }
  readStartTime(t2, e3) {
    return null != e3.attributes.StartTimeUTC ? new Date(e3.attributes.StartTimeUTC) : null;
  }
  readStartTimeOffset(t2, e3) {
    return n2(e3.attributes.StartTime, e3.attributes.StartTimeUTC);
  }
  readTotalCosts(t2, e3) {
    return r3(e3.attributes, "Total_");
  }
  readTotalViolations(t2, e3) {
    return r3(e3.attributes, "TotalViolation_");
  }
  readTotalWait(t2, e3) {
    return r3(e3.attributes, "TotalWait_");
  }
  static fromGraphic(t2) {
    return new f2({ analysisSettings: null != t2.attributes.AnalysisSettings ? l3.fromJSON(JSON.parse(t2.attributes.AnalysisSettings)) : null, endTime: null != t2.attributes.EndTime ? new Date(t2.attributes.EndTime) : null, endTimeOffset: t2.attributes.EndUTCOffset ?? null, geometry: t2.geometry, messages: null != t2.attributes.Messages ? JSON.parse(t2.attributes.Messages) : null, name: t2.attributes.RouteName, objectId: t2.attributes.ObjectID ?? t2.attributes.__OBJECTID, popupTemplate: t2.popupTemplate, startTime: null != t2.attributes.StartTime ? new Date(t2.attributes.StartTime) : null, startTimeOffset: t2.attributes.StartUTCOffset ?? null, symbol: t2.symbol, totalCosts: null != t2.attributes.TotalCosts ? e2(JSON.parse(t2.attributes.TotalCosts)) : null, totalDistance: t2.attributes.TotalMeters ?? null, totalDuration: t2.attributes.TotalMinutes ?? null, totalLateDuration: t2.attributes.TotalLateMinutes ?? null, totalWaitDuration: t2.attributes.TotalWaitMinutes ?? null, version: t2.attributes.Version });
  }
  toGraphic() {
    const t2 = { ObjectID: this.objectId, AnalysisSettings: null != this.analysisSettings ? JSON.stringify(this.analysisSettings.toJSON()) : null, EndTime: null != this.endTime ? this.endTime.getTime() : null, EndUTCOffset: this.endTimeOffset, Messages: null != this.messages ? JSON.stringify(this.messages) : null, RouteName: this.name, StartTime: null != this.startTime ? this.startTime.getTime() : null, StartUTCOffset: this.startTimeOffset, TotalCosts: null != this.totalCosts ? JSON.stringify(s2(this.totalCosts)) : null, TotalLateMinutes: this.totalLateDuration, TotalMeters: this.totalDistance, TotalMinutes: this.totalDuration, TotalWaitMinutes: this.totalWaitDuration, Version: this.version };
    return new h({ geometry: this.geometry, attributes: t2, symbol: this.symbol, popupTemplate: this.popupTemplate });
  }
};
y4.fields = [{ name: "ObjectID", alias: "ObjectID", type: "esriFieldTypeOID", editable: false, nullable: false, domain: null }, { name: "AnalysisSettings", alias: "Analysis Settings", type: "esriFieldTypeString", length: 1048576, editable: true, nullable: true, visible: false, domain: null }, { name: "EndTime", alias: "End Time", type: "esriFieldTypeDate", length: 36, editable: true, nullable: true, visible: true }, { name: "EndUTCOffset", alias: "End Time: Offset from UTC in Minutes", type: "esriFieldTypeInteger", editable: true, nullable: true, visible: true }, { name: "Messages", alias: "Analysis Messages", type: "esriFieldTypeString", length: 1048576, editable: true, nullable: true, visible: false, domain: null }, { name: "RouteName", alias: "Route Name", type: "esriFieldTypeString", length: 1024, editable: true, nullable: true, visible: true, domain: null }, { name: "StartTime", alias: "Start Time", type: "esriFieldTypeDate", length: 36, editable: true, nullable: true, visible: true }, { name: "StartUTCOffset", alias: "Start Time: Offset from UTC in Minutes", type: "esriFieldTypeInteger", editable: true, nullable: true, visible: true }, { name: "TotalCosts", alias: "Total Costs", type: "esriFieldTypeString", length: 1048576, editable: true, nullable: true, visible: false, domain: null }, { name: "TotalLateMinutes", alias: "Total Late Minutes", type: "esriFieldTypeDouble", editable: true, nullable: true, visible: false }, { name: "TotalMeters", alias: "Total Meters", type: "esriFieldTypeDouble", editable: true, nullable: true, visible: true }, { name: "TotalMinutes", alias: "Total Minutes", type: "esriFieldTypeDouble", editable: true, nullable: true, visible: true }, { name: "TotalWaitMinutes", alias: "Total Wait Minutes", type: "esriFieldTypeDouble", editable: true, nullable: true, visible: false }, { name: "Version", alias: "Version", type: "esriFieldTypeString", length: 16, editable: true, nullable: true, visible: true, domain: null }], y4.popupInfo = { title: "Route Details", fieldInfos: [{ fieldName: "RouteName", label: "Route Name", isEditable: false, tooltip: "", visible: true, stringFieldOption: "textbox" }, { fieldName: "TotalMinutes", label: "Total Minutes", isEditable: false, tooltip: "", visible: true, format: { places: 2, digitSeparator: true }, stringFieldOption: "textbox" }, { fieldName: "TotalMeters", label: "Total Meters", isEditable: false, tooltip: "", visible: true, format: { places: 2, digitSeparator: true }, stringFieldOption: "textbox" }, { fieldName: "TotalLateMinutes", label: "Total Late Minutes", isEditable: false, tooltip: "", visible: false, format: { places: 2, digitSeparator: true }, stringFieldOption: "textbox" }, { fieldName: "TotalWaitMinutes", label: "Total Wait Minutes", isEditable: false, tooltip: "", visible: false, format: { places: 2, digitSeparator: true }, stringFieldOption: "textbox" }, { fieldName: "TotalCosts", label: "Total Costs", isEditable: false, tooltip: "", visible: false, stringFieldOption: "textbox" }, { fieldName: "StartTime", label: "Start Time", isEditable: false, tooltip: "", visible: true, format: { dateFormat: "shortDateShortTime24" }, stringFieldOption: "textbox" }, { fieldName: "StartUTCOffset", label: "Start Time: Offset from UTC in Minutes", isEditable: false, tooltip: "", visible: true, format: { places: 0, digitSeparator: true }, stringFieldOption: "textbox" }, { fieldName: "EndTime", label: "End Time", isEditable: false, tooltip: "", visible: true, format: { dateFormat: "shortDateShortTime24" }, stringFieldOption: "textbox" }, { fieldName: "EndUTCOffset", label: "End Time: Offset from UTC in Minutes", isEditable: false, tooltip: "", visible: true, format: { places: 0, digitSeparator: true }, stringFieldOption: "textbox" }, { fieldName: "Messages", label: "Analysis Messages", isEditable: false, tooltip: "", visible: false, stringFieldOption: "textbox" }, { fieldName: "AnalysisSettings", isEditable: false, tooltip: "", visible: false, stringFieldOption: "textbox" }, { fieldName: "Version", label: "Version", isEditable: false, tooltip: "", visible: true, stringFieldOption: "textbox" }], description: null, showAttachments: false, mediaInfos: [] }, e([y()], y4.prototype, "analysisSettings", void 0), e([y()], y4.prototype, "endTime", void 0), e([o2("endTime", ["attributes.EndTimeUTC"])], y4.prototype, "readEndTime", null), e([y()], y4.prototype, "endTimeOffset", void 0), e([o2("endTimeOffset", ["attributes.EndTime", "attributes.EndTimeUTC"])], y4.prototype, "readEndTimeOffset", null), e([y({ json: { read: { source: "attributes.FirstStopID" } } })], y4.prototype, "firstStopId", void 0), e([y({ type: m })], y4.prototype, "geometry", void 0), e([y({ json: { read: { source: "attributes.LastStopID" } } })], y4.prototype, "lastStopId", void 0), e([y()], y4.prototype, "messages", void 0), e([y({ json: { read: { source: "attributes.Name" } } })], y4.prototype, "name", void 0), e([y({ json: { read: { source: "attributes.ObjectID" } } })], y4.prototype, "objectId", void 0), e([y({ type: k })], y4.prototype, "popupTemplate", void 0), e([y()], y4.prototype, "startTime", void 0), e([o2("startTime", ["attributes.StartTimeUTC"])], y4.prototype, "readStartTime", null), e([y()], y4.prototype, "startTimeOffset", void 0), e([o2("startTimeOffset", ["attributes.StartTime", "attributes.StartTimeUTC"])], y4.prototype, "readStartTimeOffset", null), e([y({ json: { read: { source: "attributes.StopCount" } } })], y4.prototype, "stopCount", void 0), e([y({ types: j2 })], y4.prototype, "symbol", void 0), e([y()], y4.prototype, "totalCosts", void 0), e([o2("totalCosts", ["attributes"])], y4.prototype, "readTotalCosts", null), e([y()], y4.prototype, "totalDistance", void 0), e([y()], y4.prototype, "totalDuration", void 0), e([y()], y4.prototype, "totalLateDuration", void 0), e([y()], y4.prototype, "totalViolations", void 0), e([o2("totalViolations", ["attributes"])], y4.prototype, "readTotalViolations", null), e([y()], y4.prototype, "totalWait", void 0), e([o2("totalWait", ["attributes"])], y4.prototype, "readTotalWait", null), e([y()], y4.prototype, "totalWaitDuration", void 0), e([y({ readOnly: true, json: { read: false } })], y4.prototype, "type", void 0), e([y()], y4.prototype, "version", void 0), y4 = f2 = e([a("esri.rest.support.RouteInfo")], y4);
var S3 = y4;

// node_modules/@arcgis/core/rest/support/Stop.js
var C2;
var S4 = C2 = class extends i(l) {
  constructor(e3) {
    super(e3), this.arriveCurbApproach = null, this.arriveTime = null, this.arriveTimeOffset = null, this.bearing = null, this.bearingTol = null, this.cumulativeCosts = null, this.cumulativeDistance = null, this.cumulativeDuration = null, this.curbApproach = null, this.departCurbApproach = null, this.departTime = null, this.departTimeOffset = null, this.distanceToNetworkInMeters = null, this.geometry = null, this.lateDuration = null, this.locationType = null, this.name = null, this.navLatency = null, this.objectId = null, this.popupTemplate = null, this.posAlong = null, this.routeName = null, this.serviceCosts = null, this.serviceDistance = null, this.serviceDuration = null, this.sequence = null, this.sideOfEdge = null, this.snapX = null, this.snapY = null, this.snapZ = null, this.sourceId = null, this.sourceOid = null, this.status = null, this.symbol = null, this.timeWindowEnd = null, this.timeWindowEndOffset = null, this.timeWindowStart = null, this.timeWindowStartOffset = null, this.type = "stop", this.violations = null, this.waitDuration = null, this.wait = null;
  }
  readArriveTimeOffset(e3, t2) {
    return n2(t2.attributes.ArriveTime, t2.attributes.ArriveTimeUTC);
  }
  readCumulativeCosts(e3, t2) {
    return r3(t2.attributes, "Cumul_");
  }
  readDepartTimeOffset(e3, t2) {
    return n2(t2.attributes.DepartTime, t2.attributes.DepartTimeUTC);
  }
  readServiceCosts(e3, t2) {
    return r3(t2.attributes, "Attr_");
  }
  writeServiceCosts(e3, t2) {
    i3(e3, t2, "Attr_");
  }
  writeTimeWindowEnd(e3, t2) {
    null != e3 && (t2.attributes || (t2.attributes = {}), t2.attributes.TimeWindowEnd = e3.getTime());
  }
  writeTimeWindowStart(e3, t2) {
    null != e3 && (t2.attributes || (t2.attributes = {}), t2.attributes.TimeWindowStart = e3.getTime());
  }
  readViolations(e3, t2) {
    return r3(t2.attributes, "Violation_");
  }
  readWait(e3, t2) {
    return r3(t2.attributes, "Wait_");
  }
  static fromGraphic(e3) {
    return new C2({ arriveCurbApproach: null != e3.attributes.ArrivalCurbApproach ? u.fromJSON(e3.attributes.ArrivalCurbApproach) : null, arriveTime: null != e3.attributes.ArrivalTime ? new Date(e3.attributes.ArrivalTime) : null, arriveTimeOffset: e3.attributes.ArrivalUTCOffset, cumulativeCosts: null != e3.attributes.CumulativeCosts ? e2(JSON.parse(e3.attributes.CumulativeCosts)) : null, cumulativeDistance: e3.attributes.CumulativeMeters ?? null, cumulativeDuration: e3.attributes.CumulativeMinutes ?? null, curbApproach: null != e3.attributes.CurbApproach ? u.fromJSON(e3.attributes.CurbApproach) : null, departCurbApproach: null != e3.attributes.DepartureCurbApproach ? u.fromJSON(e3.attributes.DepartureCurbApproach) : null, departTime: null != e3.attributes.DepartureTime ? new Date(e3.attributes.DepartureTime) : null, departTimeOffset: e3.attributes.DepartureUTCOffset ?? null, geometry: e3.geometry, lateDuration: e3.attributes.LateMinutes ?? null, locationType: null != e3.attributes.LocationType ? h2.fromJSON(e3.attributes.LocationType) : null, name: e3.attributes.Name, objectId: e3.attributes.ObjectID ?? e3.attributes.__OBJECTID, popupTemplate: e3.popupTemplate, routeName: e3.attributes.RouteName, sequence: e3.attributes.Sequence ?? null, serviceCosts: null != e3.attributes.ServiceCosts ? e2(JSON.parse(e3.attributes.ServiceCosts)) : null, serviceDistance: e3.attributes.ServiceMeters ?? null, serviceDuration: e3.attributes.ServiceMinutes ?? null, status: null != e3.attributes.Status ? p.fromJSON(e3.attributes.Status) : null, symbol: e3.symbol, timeWindowEnd: null != e3.attributes.TimeWindowEnd ? new Date(e3.attributes.TimeWindowEnd) : null, timeWindowEndOffset: e3.attributes.TimeWindowEndUTCOffset ?? null, timeWindowStart: null != e3.attributes.TimeWindowStart ? new Date(e3.attributes.TimeWindowStart) : null, timeWindowStartOffset: e3.attributes.TimeWindowStartUTCOffset ?? null, waitDuration: e3.attributes.WaitMinutes ?? null });
  }
  toGraphic() {
    const e3 = { ObjectID: this.objectId, ArrivalCurbApproach: null != this.arriveCurbApproach ? u.toJSON(this.arriveCurbApproach) : null, ArrivalTime: null != this.arriveTime ? this.arriveTime.getTime() : null, ArrivalUTCOffset: this.arriveTimeOffset, CumulativeCosts: null != this.cumulativeCosts ? JSON.stringify(s2(this.cumulativeCosts)) : null, CumulativeMeters: this.cumulativeDistance, CumulativeMinutes: this.cumulativeDuration, CurbApproach: null != this.curbApproach ? u.toJSON(this.curbApproach) : null, DepartureCurbApproach: null != this.departCurbApproach ? u.toJSON(this.departCurbApproach) : null, DepartureTime: null != this.departTime ? this.departTime.getTime() : null, DepartureUTCOffset: this.departTimeOffset, LateMinutes: this.lateDuration, LocationType: null != this.locationType ? h2.toJSON(this.locationType) : null, Name: this.name, RouteName: this.routeName, Sequence: this.sequence, ServiceCosts: null != this.serviceCosts ? JSON.stringify(s2(this.serviceCosts)) : null, ServiceMeters: this.serviceDistance, ServiceMinutes: this.serviceDuration, Status: null != this.status ? p.toJSON(this.status) : null, TimeWindowEnd: null != this.timeWindowEnd ? this.timeWindowEnd.getTime() : null, TimeWindowEndUTCOffset: this.timeWindowEndOffset ?? this.arriveTimeOffset, TimeWindowStart: null != this.timeWindowStart ? this.timeWindowStart.getTime() : null, TimeWindowStartUTCOffset: this.timeWindowStartOffset ?? this.arriveTimeOffset, WaitMinutes: this.waitDuration };
    return new h({ geometry: this.geometry, attributes: e3, symbol: this.symbol, popupTemplate: this.popupTemplate });
  }
};
S4.fields = [{ name: "ObjectID", alias: "ObjectID", type: "esriFieldTypeOID", editable: false, nullable: false, domain: null }, { name: "ArrivalCurbApproach", alias: "Arrival Curb Approach", type: "esriFieldTypeInteger", editable: true, nullable: true, visible: true, domain: { type: "codedValue", name: "esriNACurbApproachType", codedValues: [{ name: "Either side", code: 0 }, { name: "From the right", code: 1 }, { name: "From the left", code: 2 }, { name: "Depart in the same direction", code: 3 }] } }, { name: "ArrivalTime", alias: "Arrival Time", type: "esriFieldTypeDate", length: 36, editable: true, nullable: true, visible: true }, { name: "ArrivalUTCOffset", alias: "Arrival Time: Offset from UTC in Minutes", type: "esriFieldTypeInteger", editable: true, nullable: true, visible: true }, { name: "CumulativeCosts", alias: "Cumulative Costs", type: "esriFieldTypeString", length: 1048576, editable: true, nullable: true, visible: false, domain: null }, { name: "CumulativeMeters", alias: "Cumulative Meters", type: "esriFieldTypeDouble", editable: true, nullable: true, visible: true }, { name: "CumulativeMinutes", alias: "Cumulative Minutes", type: "esriFieldTypeDouble", editable: true, nullable: true, visible: true }, { name: "CurbApproach", alias: "Curb Approach", type: "esriFieldTypeInteger", editable: true, nullable: true, visible: false, domain: { type: "codedValue", name: "esriNACurbApproachType", codedValues: [{ name: "Either side", code: 0 }, { name: "From the right", code: 1 }, { name: "From the left", code: 2 }, { name: "Depart in the same direction", code: 3 }] } }, { name: "DepartureCurbApproach", alias: "Departure Curb Approach", type: "esriFieldTypeInteger", editable: true, nullable: true, visible: true, domain: { type: "codedValue", name: "esriNACurbApproachType", codedValues: [{ name: "Either side", code: 0 }, { name: "From the right", code: 1 }, { name: "From the left", code: 2 }, { name: "Depart in the same direction", code: 3 }] } }, { name: "DepartureTime", alias: "Departure Time", type: "esriFieldTypeDate", length: 36, editable: true, nullable: true, visible: true }, { name: "DepartureUTCOffset", alias: "Departure Time: Offset from UTC in Minutes", type: "esriFieldTypeInteger", editable: true, nullable: true, visible: true }, { name: "LateMinutes", alias: "Minutes Late", type: "esriFieldTypeDouble", editable: true, nullable: true, visible: false }, { name: "LocationType", alias: "Location Type", type: "esriFieldTypeInteger", editable: true, nullable: true, visible: true, domain: { type: "codedValue", name: "esriNALocationType", codedValues: [{ name: "Stop", code: 0 }, { name: "Waypoint", code: 1 }] } }, { name: "Name", alias: "Name", type: "esriFieldTypeString", length: 255, editable: true, nullable: true, visible: true }, { name: "RouteName", alias: "Route Name", type: "esriFieldTypeString", length: 255, editable: true, nullable: true, visible: true }, { name: "Sequence", alias: "Sequence", type: "esriFieldTypeInteger", editable: true, nullable: true, visible: true }, { name: "ServiceCosts", alias: "Service Costs", type: "esriFieldTypeString", length: 1048576, editable: true, nullable: true, visible: false, domain: null }, { name: "ServiceMeters", alias: "Service Meters", type: "esriFieldTypeDouble", editable: true, nullable: true, visible: false }, { name: "ServiceMinutes", alias: "Service Minutes", type: "esriFieldTypeDouble", editable: true, nullable: true, visible: false }, { name: "Status", alias: "Status", type: "esriFieldTypeInteger", editable: true, nullable: true, visible: true, domain: { type: "codedValue", name: "esriNAObjectStatus", codedValues: [{ name: "OK", code: 0 }, { name: "Not Located on Network", code: 1 }, { name: "Network Unbuilt", code: 2 }, { name: "Prohibited Street", code: 3 }, { name: "Invalid Field Values", code: 4 }, { name: "Cannot Reach", code: 5 }, { name: "Time Window Violation", code: 6 }] } }, { name: "TimeWindowEnd", alias: "Time Window End", type: "esriFieldTypeDate", length: 36, editable: true, nullable: true, visible: false }, { name: "TimeWindowEndUTCOffset", alias: "Time Window End: Offset from UTC in Minutes", type: "esriFieldTypeInteger", editable: true, nullable: true, visible: true }, { name: "TimeWindowStart", alias: "Time Window Start", type: "esriFieldTypeDate", length: 36, editable: true, nullable: true, visible: false }, { name: "TimeWindowStartUTCOffset", alias: "Time Window Start: Offset from UTC in Minutes", type: "esriFieldTypeInteger", editable: true, nullable: true, visible: true }, { name: "WaitMinutes", alias: "Minutes Early", type: "esriFieldTypeDouble", editable: true, nullable: true, visible: false }], S4.popupInfo = { title: "{Name}", fieldInfos: [{ fieldName: "Name", label: "Name", isEditable: true, tooltip: "", visible: true, stringFieldOption: "textbox" }, { fieldName: "RouteName", label: "Route Name", isEditable: true, tooltip: "", visible: true, stringFieldOption: "textbox" }, { fieldName: "Sequence", label: "Sequence", isEditable: false, tooltip: "", visible: true, format: { places: 0, digitSeparator: true }, stringFieldOption: "textbox" }, { fieldName: "ArrivalTime", label: "Arrival Time", isEditable: true, tooltip: "", visible: true, format: { dateFormat: "shortDateShortTime24" }, stringFieldOption: "textbox" }, { fieldName: "ArrivalUTCOffset", label: "Arrival Time: Offset from UTC in Minutes", isEditable: false, tooltip: "", visible: true, format: { places: 0, digitSeparator: true }, stringFieldOption: "textbox" }, { fieldName: "DepartureTime", label: "Departure Time", isEditable: true, tooltip: "", visible: true, format: { dateFormat: "shortDateShortTime24" }, stringFieldOption: "textbox" }, { fieldName: "DepartureUTCOffset", label: "Departure Time: Offset from UTC in Minutes", isEditable: false, tooltip: "", visible: true, format: { places: 0, digitSeparator: true }, stringFieldOption: "textbox" }, { fieldName: "CurbApproach", label: "Curb Approach", isEditable: true, tooltip: "", visible: false, format: { places: 0, digitSeparator: true }, stringFieldOption: "textbox" }, { fieldName: "ArrivalCurbApproach", label: "Arrival Curb Approach", isEditable: false, tooltip: "", visible: true, format: { places: 0, digitSeparator: true }, stringFieldOption: "textbox" }, { fieldName: "DepartureCurbApproach", label: "Departure Curb Approach", isEditable: false, tooltip: "", visible: true, format: { places: 0, digitSeparator: true }, stringFieldOption: "textbox" }, { fieldName: "Status", label: "Status", isEditable: false, tooltip: "", visible: true, format: { places: 0, digitSeparator: true }, stringFieldOption: "textbox" }, { fieldName: "LocationType", label: "Location Type", isEditable: false, tooltip: "", visible: true, format: { places: 0, digitSeparator: true }, stringFieldOption: "textbox" }, { fieldName: "TimeWindowStart", label: "Time Window Start", isEditable: true, tooltip: "", visible: false, format: { dateFormat: "shortDateShortTime24" }, stringFieldOption: "textbox" }, { fieldName: "TimeWindowStartUTCOffset", label: "Time Window Start: Offset from UTC in Minutes", isEditable: false, tooltip: "", visible: false, format: { places: 0, digitSeparator: true }, stringFieldOption: "textbox" }, { fieldName: "TimeWindowEnd", label: "Time Window End", isEditable: true, tooltip: "", visible: false, format: { dateFormat: "shortDateShortTime24" }, stringFieldOption: "textbox" }, { fieldName: "TimeWindowEndUTCOffset", label: "Time Window End: Offset from UTC in Minutes", isEditable: false, tooltip: "", visible: false, format: { places: 0, digitSeparator: true }, stringFieldOption: "textbox" }, { fieldName: "ServiceMinutes", label: "Service Minutes", isEditable: true, tooltip: "", visible: false, format: { places: 2, digitSeparator: true }, stringFieldOption: "textbox" }, { fieldName: "ServiceMeters", label: "Service Meters", isEditable: true, tooltip: "", visible: false, format: { places: 2, digitSeparator: true }, stringFieldOption: "textbox" }, { fieldName: "ServiceCosts", label: "Service Costs", isEditable: true, tooltip: "", visible: false, stringFieldOption: "textbox" }, { fieldName: "CumulativeMinutes", label: "Cumulative Minutes", isEditable: false, tooltip: "", visible: true, format: { places: 2, digitSeparator: true }, stringFieldOption: "textbox" }, { fieldName: "CumulativeMeters", label: "Cumulative Meters", isEditable: false, tooltip: "", visible: true, format: { places: 2, digitSeparator: true }, stringFieldOption: "textbox" }, { fieldName: "CumulativeCosts", label: "Cumulative Costs", isEditable: true, tooltip: "", visible: false, stringFieldOption: "textbox" }, { fieldName: "LateMinutes", label: "Minutes Late", isEditable: false, tooltip: "", visible: false, format: { places: 2, digitSeparator: true }, stringFieldOption: "textbox" }, { fieldName: "WaitMinutes", label: "Minutes Early", isEditable: false, tooltip: "", visible: false, format: { places: 2, digitSeparator: true }, stringFieldOption: "textbox" }], description: null, showAttachments: false, mediaInfos: [] }, e([y({ type: u.apiValues, json: { read: { source: "attributes.ArrivalCurbApproach", reader: u.read } } })], S4.prototype, "arriveCurbApproach", void 0), e([y({ type: Date, json: { read: { source: "attributes.ArriveTimeUTC" } } })], S4.prototype, "arriveTime", void 0), e([y()], S4.prototype, "arriveTimeOffset", void 0), e([o2("arriveTimeOffset", ["attributes.ArriveTime", "attributes.ArriveTimeUTC"])], S4.prototype, "readArriveTimeOffset", null), e([y({ json: { name: "attributes.Bearing", read: false, write: true } })], S4.prototype, "bearing", void 0), e([y({ json: { name: "attributes.BearingTol", read: false, write: true } })], S4.prototype, "bearingTol", void 0), e([y()], S4.prototype, "cumulativeCosts", void 0), e([o2("cumulativeCosts", ["attributes"])], S4.prototype, "readCumulativeCosts", null), e([y()], S4.prototype, "cumulativeDistance", void 0), e([y()], S4.prototype, "cumulativeDuration", void 0), e([y({ type: u.apiValues, json: { name: "attributes.CurbApproach", read: { reader: u.read }, write: { writer: u.write } } })], S4.prototype, "curbApproach", void 0), e([y({ type: u.apiValues, json: { read: { source: "attributes.DepartCurbApproach", reader: u.read } } })], S4.prototype, "departCurbApproach", void 0), e([y({ type: Date, json: { read: { source: "attributes.DepartTimeUTC" } } })], S4.prototype, "departTime", void 0), e([y()], S4.prototype, "departTimeOffset", void 0), e([o2("departTimeOffset", ["attributes.DepartTime", "attributes.DepartTimeUTC"])], S4.prototype, "readDepartTimeOffset", null), e([y({ json: { read: { source: "attributes.DistanceToNetworkInMeters" } } })], S4.prototype, "distanceToNetworkInMeters", void 0), e([y({ type: x, json: { write: true } })], S4.prototype, "geometry", void 0), e([y()], S4.prototype, "lateDuration", void 0), e([y({ type: h2.apiValues, json: { name: "attributes.LocationType", read: { reader: h2.read }, write: { writer: h2.write } } })], S4.prototype, "locationType", void 0), e([y({ json: { name: "attributes.Name" } })], S4.prototype, "name", void 0), e([y({ json: { name: "attributes.NavLatency", read: false, write: true } })], S4.prototype, "navLatency", void 0), e([y({ json: { name: "attributes.ObjectID" } })], S4.prototype, "objectId", void 0), e([y({ type: k })], S4.prototype, "popupTemplate", void 0), e([y({ json: { read: { source: "attributes.PosAlong" } } })], S4.prototype, "posAlong", void 0), e([y({ json: { name: "attributes.RouteName" } })], S4.prototype, "routeName", void 0), e([y()], S4.prototype, "serviceCosts", void 0), e([o2("serviceCosts", ["attributes"])], S4.prototype, "readServiceCosts", null), e([r("serviceCosts")], S4.prototype, "writeServiceCosts", null), e([y()], S4.prototype, "serviceDistance", void 0), e([y()], S4.prototype, "serviceDuration", void 0), e([y({ json: { name: "attributes.Sequence" } })], S4.prototype, "sequence", void 0), e([y({ type: v.apiValues, json: { read: { source: "attributes.SideOfEdge", reader: v.read } } })], S4.prototype, "sideOfEdge", void 0), e([y({ json: { read: { source: "attributes.SnapX" } } })], S4.prototype, "snapX", void 0), e([y({ json: { read: { source: "attributes.SnapY" } } })], S4.prototype, "snapY", void 0), e([y({ json: { read: { source: "attributes.SnapZ" } } })], S4.prototype, "snapZ", void 0), e([y({ json: { read: { source: "attributes.SourceID" } } })], S4.prototype, "sourceId", void 0), e([y({ json: { read: { source: "attributes.SourceOID" } } })], S4.prototype, "sourceOid", void 0), e([y({ type: p.apiValues, json: { read: { source: "attributes.Status", reader: p.read } } })], S4.prototype, "status", void 0), e([y({ types: j2 })], S4.prototype, "symbol", void 0), e([y({ type: Date, json: { name: "attributes.TimeWindowEnd" } })], S4.prototype, "timeWindowEnd", void 0), e([r("timeWindowEnd")], S4.prototype, "writeTimeWindowEnd", null), e([y()], S4.prototype, "timeWindowEndOffset", void 0), e([y({ type: Date, json: { name: "attributes.TimeWindowStart" } })], S4.prototype, "timeWindowStart", void 0), e([r("timeWindowStart")], S4.prototype, "writeTimeWindowStart", null), e([y()], S4.prototype, "timeWindowStartOffset", void 0), e([y({ readOnly: true, json: { read: false } })], S4.prototype, "type", void 0), e([y()], S4.prototype, "violations", void 0), e([o2("violations", ["attributes"])], S4.prototype, "readViolations", null), e([y()], S4.prototype, "waitDuration", void 0), e([y()], S4.prototype, "wait", void 0), e([o2("wait", ["attributes"])], S4.prototype, "readWait", null), S4 = C2 = e([a("esri.rest.support.Stop")], S4);
var O = S4;

export {
  i2 as i,
  r2 as r,
  s,
  a2 as a,
  o4 as o,
  l2 as l,
  k2 as k,
  y2 as y,
  U,
  D,
  S,
  w,
  R,
  b,
  j5 as j,
  n2 as n,
  o5 as o2,
  m3 as m,
  c3 as c,
  C,
  T3 as T,
  j4 as j2,
  l3 as l2,
  S3 as S2,
  O
};
//# sourceMappingURL=chunk-PYW2PGBH.js.map
