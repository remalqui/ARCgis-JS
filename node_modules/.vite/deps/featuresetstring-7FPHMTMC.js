import {
  A
} from "./chunk-CIYZZPIM.js";
import {
  E,
  Ge,
  Je,
  Le,
  Pe,
  Q,
  V,
  Ye,
  _e,
  b,
  be,
  ge,
  he,
  oe,
  se,
  v
} from "./chunk-RFI4CCAC.js";
import "./chunk-YAWND7HF.js";
import "./chunk-5CIVT7RW.js";
import "./chunk-RR2V4HRU.js";
import "./chunk-WZAASLQW.js";
import {
  e,
  t
} from "./chunk-FJYIB7HF.js";
import "./chunk-4H5JODOT.js";
import "./chunk-TCASQSKO.js";
import "./chunk-5HAVROZG.js";
import "./chunk-MOPR7RFH.js";
import "./chunk-KW3ZNPTA.js";
import "./chunk-TJB4CGOM.js";
import "./chunk-ODFH3BSN.js";
import "./chunk-JZM5YUHA.js";
import "./chunk-3GSONYPC.js";
import "./chunk-SFV6XLDZ.js";
import "./chunk-3PLRSFLA.js";
import "./chunk-VBD33VNW.js";
import "./chunk-7A5C2EQ3.js";
import "./chunk-OYBXMT5R.js";
import "./chunk-CIDWM2UN.js";
import "./chunk-PD5Q7TDW.js";
import "./chunk-SHJI4PR4.js";
import "./chunk-2YSHZRCT.js";
import "./chunk-MH2LNFJK.js";
import "./chunk-O3CHVGVF.js";
import "./chunk-HNHXEGH2.js";
import "./chunk-DWOEYHKS.js";
import "./chunk-W2N7YT6I.js";
import "./chunk-I5JT24BO.js";
import "./chunk-I4U7MQNO.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/arcade/functions/featuresetstring.js
function h(a, e2) {
  return a && a.domain ? "coded-value" === a.domain.type || "codedValue" === a.domain.type ? A.convertObjectToArcadeDictionary({ type: "codedValue", name: a.domain.name, dataType: b[a.field.type], codedValues: a.domain.codedValues.map((n) => ({ name: n.name, code: n.code })) }, Pe(e2)) : A.convertObjectToArcadeDictionary({ type: "range", name: a.domain.name, dataType: b[a.field.type], min: a.domain.min, max: a.domain.max }, Pe(e2)) : null;
}
function b2(T) {
  "async" === T.mode && (T.functions.domain = function(n, d) {
    return T.standardFunctionAsync(n, d, async (u, m, f) => {
      if (Q(f, 2, 3, n, d), E(f[0])) {
        return h(_e(f[0], oe(f[1]), void 0 === f[2] ? void 0 : f[2]), n);
      }
      if (V(f[0])) {
        await f[0]._ensureLoaded();
        return h(be(oe(f[1]), f[0], null, void 0 === f[2] ? void 0 : f[2]), n);
      }
      throw new t(n, e.InvalidParameter, d);
    });
  }, T.functions.subtypes = function(o, i) {
    return T.standardFunctionAsync(o, i, async (s, m, f) => {
      if (Q(f, 1, 1, o, i), E(f[0])) {
        const a = Le(f[0]);
        return a ? A.convertObjectToArcadeDictionary(a, Pe(o)) : null;
      }
      if (V(f[0])) {
        await f[0]._ensureLoaded();
        const a = f[0].subtypes();
        return a ? A.convertObjectToArcadeDictionary(a, Pe(o)) : null;
      }
      throw new t(o, e.InvalidParameter, i);
    });
  }, T.functions.domainname = function(n, o) {
    return T.standardFunctionAsync(n, o, async (d, u, l) => {
      if (Q(l, 2, 4, n, o), E(l[0]))
        return Ye(l[0], oe(l[1]), l[2], void 0 === l[3] ? void 0 : l[3]);
      if (V(l[0])) {
        await l[0]._ensureLoaded();
        const n2 = be(oe(l[1]), l[0], null, void 0 === l[3] ? void 0 : l[3]);
        return ge(n2, l[2]);
      }
      throw new t(n, e.InvalidParameter, o);
    });
  }, T.signatures.push({ name: "domainname", min: 2, max: 4 }), T.functions.domaincode = function(n, o) {
    return T.standardFunctionAsync(n, o, async (d, u, m) => {
      if (Q(m, 2, 4, n, o), E(m[0]))
        return Je(m[0], oe(m[1]), m[2], void 0 === m[3] ? void 0 : m[3]);
      if (V(m[0])) {
        await m[0]._ensureLoaded();
        const n2 = be(oe(m[1]), m[0], null, void 0 === m[3] ? void 0 : m[3]);
        return he(n2, m[2]);
      }
      throw new t(n, e.InvalidParameter, o);
    });
  }, T.signatures.push({ name: "domaincode", min: 2, max: 4 })), T.functions.text = function(n, a) {
    return T.standardFunctionAsync(n, a, (e2, r, o) => {
      if (Q(o, 1, 2, n, a), !V(o[0]))
        return se(o[0], o[1]);
      {
        const n2 = v(o[1], "");
        if ("" === n2)
          return o[0].castToText();
        if ("schema" === n2.toLowerCase())
          return o[0].convertToText("schema", e2.abortSignal);
        if ("featureset" === n2.toLowerCase())
          return o[0].convertToText("featureset", e2.abortSignal);
      }
    });
  }, T.functions.gdbversion = function(n, o) {
    return T.standardFunctionAsync(n, o, async (i, s, d) => {
      if (Q(d, 1, 1, n, o), E(d[0]))
        return d[0].gdbVersion();
      if (V(d[0])) {
        return (await d[0].load()).gdbVersion;
      }
      throw new t(n, e.InvalidParameter, o);
    });
  }, T.functions.schema = function(o, i) {
    return T.standardFunctionAsync(o, i, async (s, d, m) => {
      if (Q(m, 1, 1, o, i), V(m[0]))
        return await m[0].load(), A.convertObjectToArcadeDictionary(m[0].schema(), Pe(o));
      if (E(m[0])) {
        const a = Ge(m[0]);
        return a ? A.convertObjectToArcadeDictionary(a, Pe(o)) : null;
      }
      throw new t(o, e.InvalidParameter, i);
    });
  };
}
export {
  b2 as registerFunctions
};
//# sourceMappingURL=featuresetstring-7FPHMTMC.js.map
