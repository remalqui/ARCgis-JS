import {
  o
} from "./chunk-IUXYWQJG.js";
import {
  p
} from "./chunk-X34I34RW.js";
import {
  a as a2
} from "./chunk-5NBE4HDI.js";
import "./chunk-4NLQ63FV.js";
import "./chunk-Y7HVH6RU.js";
import {
  t
} from "./chunk-2HDAD5Q3.js";
import {
  c
} from "./chunk-PPU6QR6F.js";
import {
  O
} from "./chunk-PCVJI7J2.js";
import "./chunk-HZHMZHPT.js";
import "./chunk-NYLF7BL2.js";
import "./chunk-32JSK7KN.js";
import {
  j as j2,
  p as p2
} from "./chunk-PX3FFFQ5.js";
import {
  t as t2
} from "./chunk-Y2ZDD3I4.js";
import "./chunk-42RWGG3D.js";
import "./chunk-OO4A3EBQ.js";
import "./chunk-KTSEQWMB.js";
import "./chunk-EIE3W25Z.js";
import "./chunk-7KM4XBUC.js";
import "./chunk-OZXJDVTE.js";
import {
  b
} from "./chunk-XU2Q4SCK.js";
import "./chunk-KIEN3CY2.js";
import "./chunk-GJ5WE5D3.js";
import "./chunk-Y2CLYMXQ.js";
import "./chunk-4RFFPIT2.js";
import "./chunk-KSQTM6XI.js";
import "./chunk-J4R3XNTP.js";
import "./chunk-BVNZ3ETW.js";
import "./chunk-FJQ7HIY7.js";
import "./chunk-T4XWQYGC.js";
import "./chunk-TCASQSKO.js";
import {
  i
} from "./chunk-5HAVROZG.js";
import "./chunk-MOPR7RFH.js";
import "./chunk-KW3ZNPTA.js";
import "./chunk-TJB4CGOM.js";
import "./chunk-WBSPL6CJ.js";
import "./chunk-N5ULYWRU.js";
import {
  M
} from "./chunk-3GSONYPC.js";
import {
  f,
  x2 as x
} from "./chunk-SFV6XLDZ.js";
import "./chunk-3PLRSFLA.js";
import {
  s as s2
} from "./chunk-VBD33VNW.js";
import "./chunk-7A5C2EQ3.js";
import {
  y3 as y
} from "./chunk-OYBXMT5R.js";
import {
  a2 as a
} from "./chunk-CIDWM2UN.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";
import "./chunk-SHJI4PR4.js";
import "./chunk-2YSHZRCT.js";
import {
  j
} from "./chunk-HKVL2MJK.js";
import "./chunk-MH2LNFJK.js";
import "./chunk-O3CHVGVF.js";
import "./chunk-HNHXEGH2.js";
import "./chunk-DWOEYHKS.js";
import {
  s3 as s
} from "./chunk-W2N7YT6I.js";
import "./chunk-I5JT24BO.js";
import "./chunk-I4U7MQNO.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/layers/BaseTileLayer.js
var h;
var d = new t2("0/0/0", 0, 0, 0, void 0);
var g = h = class extends a2(t(p(b))) {
  constructor() {
    super(...arguments), this.tileInfo = j2.create({ spatialReference: f.WebMercator, size: 256 }), this.type = "base-tile", this.fullExtent = new M(-20037508342787e-6, -2003750834278e-5, 2003750834278e-5, 20037508342787e-6, f.WebMercator), this.spatialReference = f.WebMercator;
  }
  getTileBounds(e2, t3, r, o2) {
    const s3 = o2 || i();
    return d.level = e2, d.row = t3, d.col = r, d.extent = s3, this.tileInfo.updateTileInfo(d), d.extent = void 0, s3;
  }
  fetchTile(e2, r, o2, s3 = {}) {
    const { signal: i2 } = s3, a3 = this.getTileUrl(e2, r, o2), p3 = { responseType: "image", signal: i2, query: { ...this.refreshParameters } };
    return j(a3 ?? "", p3).then((e3) => e3.data);
  }
  async fetchImageBitmapTile(e2, r, o2, s3 = {}) {
    const { signal: i2 } = s3;
    if (this.fetchTile !== h.prototype.fetchTile) {
      const t3 = await this.fetchTile(e2, r, o2, s3);
      return o(t3, e2, r, o2, i2);
    }
    const a3 = this.getTileUrl(e2, r, o2) ?? "", p3 = { responseType: "blob", signal: i2, query: { ...this.refreshParameters } }, { data: l } = await j(a3, p3);
    return o(l, e2, r, o2, i2);
  }
  getTileUrl() {
    throw new s("basetilelayer:gettileurl-not-implemented", "getTileUrl() is not implemented");
  }
};
e([y({ type: j2 })], g.prototype, "tileInfo", void 0), e([y({ type: ["show", "hide"] })], g.prototype, "listMode", void 0), e([y({ readOnly: true, value: "base-tile" })], g.prototype, "type", void 0), e([y({ nonNullable: true })], g.prototype, "fullExtent", void 0), e([y()], g.prototype, "spatialReference", void 0), g = h = e([a("esri.layers.BaseTileLayer")], g);
var j3 = g;

// node_modules/@arcgis/core/layers/BingMapsLayer.js
var c2 = new s2({ BingMapsAerial: "aerial", BingMapsRoad: "road", BingMapsHybrid: "hybrid" });
var m = "https://dev.virtualearth.net";
var h2 = class extends a2(c(O(j3))) {
  constructor(e2) {
    super(e2), this.type = "bing-maps", this.tileInfo = new j2({ size: [256, 256], dpi: 96, origin: new x({ x: -20037508342787e-6, y: 20037508342787e-6, spatialReference: f.WebMercator }), spatialReference: f.WebMercator, lods: [new p2({ level: 1, resolution: 78271.5169639999, scale: 295828763795777e-6 }), new p2({ level: 2, resolution: 39135.7584820001, scale: 147914381897889e-6 }), new p2({ level: 3, resolution: 19567.8792409999, scale: 73957190948944e-6 }), new p2({ level: 4, resolution: 9783.93962049996, scale: 36978595474472e-6 }), new p2({ level: 5, resolution: 4891.96981024998, scale: 18489297737236e-6 }), new p2({ level: 6, resolution: 2445.98490512499, scale: 9244648868618e-6 }), new p2({ level: 7, resolution: 1222.99245256249, scale: 4622324434309e-6 }), new p2({ level: 8, resolution: 611.49622628138, scale: 2311162217155e-6 }), new p2({ level: 9, resolution: 305.748113140558, scale: 1155581108577e-6 }), new p2({ level: 10, resolution: 152.874056570411, scale: 577790.554289 }), new p2({ level: 11, resolution: 76.4370282850732, scale: 288895.277144 }), new p2({ level: 12, resolution: 38.2185141425366, scale: 144447.638572 }), new p2({ level: 13, resolution: 19.1092570712683, scale: 72223.819286 }), new p2({ level: 14, resolution: 9.55462853563415, scale: 36111.909643 }), new p2({ level: 15, resolution: 4.77731426794937, scale: 18055.954822 }), new p2({ level: 16, resolution: 2.38865713397468, scale: 9027.977411 }), new p2({ level: 17, resolution: 1.19432856685505, scale: 4513.988705 }), new p2({ level: 18, resolution: 0.597164283559817, scale: 2256.994353 }), new p2({ level: 19, resolution: 0.298582141647617, scale: 1128.497176 }), new p2({ level: 20, resolution: 0.1492910708238085, scale: 564.248588 })] }), this.key = null, this.style = "road", this.culture = "en-US", this.region = null, this.portalUrl = null, this.hasAttributionData = true;
  }
  get bingMetadata() {
    return this._get("bingMetadata");
  }
  set bingMetadata(e2) {
    this._set("bingMetadata", e2);
  }
  get copyright() {
    return null != this.bingMetadata ? this.bingMetadata.copyright : null;
  }
  get operationalLayerType() {
    return c2.toJSON(this.style);
  }
  get bingLogo() {
    return null != this.bingMetadata ? this.bingMetadata.brandLogoUri : null;
  }
  load(e2) {
    return this.key ? this.addResolvingPromise(this._getMetadata()) : this.portalUrl ? this.addResolvingPromise(this._getPortalBingKey().then(() => this._getMetadata())) : this.addResolvingPromise(Promise.reject(new s("bingmapslayer:load", "Bing layer must have bing key."))), Promise.resolve(this);
  }
  getTileUrl(e2, t3, r) {
    if (!this.loaded || null == this.bingMetadata)
      return null;
    const o2 = this.bingMetadata.resourceSets[0].resources[0], a3 = o2.imageUrlSubdomains[t3 % o2.imageUrlSubdomains.length], s3 = this._getQuadKey(e2, t3, r);
    return o2.imageUrl.replace("{subdomain}", a3).replace("{quadkey}", s3);
  }
  async fetchAttributionData() {
    return this.load().then(() => {
      if (null == this.bingMetadata)
        return null;
      return { contributors: this.bingMetadata.resourceSets[0].resources[0].imageryProviders.map((e2) => ({ attribution: e2.attribution, coverageAreas: e2.coverageAreas.map((e3) => ({ zoomMin: e3.zoomMin, zoomMax: e3.zoomMax, score: 1, bbox: [e3.bbox[0], e3.bbox[1], e3.bbox[2], e3.bbox[3]] })) })) };
    });
  }
  _getMetadata() {
    const e2 = { road: "roadOnDemand", aerial: "aerial", hybrid: "aerialWithLabelsOnDemand" }[this.style];
    return j(`${m}/REST/v1/Imagery/Metadata/${e2}`, { responseType: "json", query: { include: "ImageryProviders", uriScheme: "https", key: this.key, suppressStatus: true, output: "json", culture: this.culture, userRegion: this.region } }).then((e3) => {
      const t3 = e3.data;
      if (200 !== t3.statusCode)
        throw new s("bingmapslayer:getmetadata", t3.statusDescription);
      if (this.bingMetadata = t3, 0 === this.bingMetadata.resourceSets.length)
        throw new s("bingmapslayer:getmetadata", "no bing resourcesets");
      if (0 === this.bingMetadata.resourceSets[0].resources.length)
        throw new s("bingmapslayer:getmetadata", "no bing resources");
    }).catch((e3) => {
      throw new s("bingmapslayer:getmetadata", e3.message);
    });
  }
  _getPortalBingKey() {
    return j(this.portalUrl ?? "", { responseType: "json", authMode: "no-prompt", query: { f: "json" } }).then((e2) => {
      if (!e2.data.bingKey)
        throw new s("bingmapslayer:getportalbingkey", "The referenced Portal does not contain a valid bing key");
      this.key = e2.data.bingKey;
    }).catch((e2) => {
      throw new s("bingmapslayer:getportalbingkey", e2.message);
    });
  }
  _getQuadKey(e2, t3, r) {
    let o2 = "";
    for (let a3 = e2; a3 > 0; a3--) {
      let e3 = 0;
      const s3 = 1 << a3 - 1;
      0 != (r & s3) && (e3 += 1), 0 != (t3 & s3) && (e3 += 2), o2 += e3.toString();
    }
    return o2;
  }
};
e([y({ json: { read: false, write: false }, value: null })], h2.prototype, "bingMetadata", null), e([y({ json: { read: false, write: false }, value: "bing-maps", readOnly: true })], h2.prototype, "type", void 0), e([y({ type: j2 })], h2.prototype, "tileInfo", void 0), e([y({ type: String, readOnly: true, json: { read: false, write: false } })], h2.prototype, "copyright", null), e([y({ type: String, json: { write: false, read: false } })], h2.prototype, "key", void 0), e([y({ type: c2.apiValues, nonNullable: true, json: { read: { source: "layerType", reader: c2.read } } })], h2.prototype, "style", void 0), e([y({ type: ["BingMapsAerial", "BingMapsHybrid", "BingMapsRoad"] })], h2.prototype, "operationalLayerType", null), e([y({ type: String, json: { write: false, read: false } })], h2.prototype, "culture", void 0), e([y({ type: String, json: { write: false, read: false } })], h2.prototype, "region", void 0), e([y({ type: String, json: { write: true, read: true } })], h2.prototype, "portalUrl", void 0), e([y({ type: Boolean, json: { write: false, read: false } })], h2.prototype, "hasAttributionData", void 0), e([y({ type: String, readOnly: true })], h2.prototype, "bingLogo", null), h2 = e([a("esri.layers.BingMapsLayer")], h2);
var b2 = h2;
export {
  b2 as default
};
//# sourceMappingURL=BingMapsLayer-YNGNYULX.js.map
