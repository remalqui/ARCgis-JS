import {
  S,
  S2,
  b,
  b2,
  c as c2,
  h,
  k,
  k2,
  m,
  m3 as m2,
  n,
  u,
  x,
  y
} from "./chunk-VFQINJTY.js";
import {
  o
} from "./chunk-7E3Q7HTF.js";
import {
  j as j2
} from "./chunk-7KX64CAH.js";
import {
  c
} from "./chunk-MOIETNWJ.js";
import {
  j
} from "./chunk-HKVL2MJK.js";
import {
  K,
  Ut
} from "./chunk-O3CHVGVF.js";
import {
  f
} from "./chunk-HNHXEGH2.js";
import {
  s3 as s
} from "./chunk-W2N7YT6I.js";
import {
  has
} from "./chunk-I4U7MQNO.js";

// node_modules/@arcgis/core/symbols/support/symbolConversion.js
var a = { retainId: false, ignoreDrivers: false, hasLabelingContext: true };
function S3(S4, c5 = a) {
  var _a, _b;
  if (!S4)
    return { symbol: null };
  const { retainId: u3 = a.retainId, ignoreDrivers: d3 = a.ignoreDrivers, hasLabelingContext: j4 = a.hasLabelingContext, retainCIM: D = a.retainCIM } = c5;
  let g = null;
  if (x(S4) || S4 instanceof u)
    g = S4.clone();
  else if ("cim" === S4.type) {
    const o2 = (_b = (_a = S4.data) == null ? void 0 : _a.symbol) == null ? void 0 : _b.type;
    if ("CIMPointSymbol" !== o2)
      return { error: new s("symbol-conversion:unsupported-cim-symbol", `CIM symbol of type '${o2 || "unknown"}' is unsupported in 3D`, { symbol: S4 }) };
    g = D ? S4.clone() : h.fromCIMSymbol(S4);
  } else if (S4 instanceof m)
    g = b2.fromSimpleLineSymbol(S4);
  else if (S4 instanceof y)
    g = h.fromSimpleMarkerSymbol(S4);
  else if (S4 instanceof n)
    g = h.fromPictureMarkerSymbol(S4);
  else if (S4 instanceof S2)
    g = c5.geometryType && "mesh" === c5.geometryType ? c2.fromSimpleFillSymbol(S4) : S.fromSimpleFillSymbol(S4);
  else {
    if (!(S4 instanceof m2))
      return { error: new s("symbol-conversion:unsupported-2d-symbol", `2D symbol of type '${S4.type || S4.declaredClass}' is unsupported in 3D`, { symbol: S4 }) };
    g = j4 ? b.fromTextSymbol(S4) : h.fromTextSymbol(S4);
  }
  return u3 && g && "cim" !== g.type && (g.id = S4.id), d3 && x(g) && g.symbolLayers.forEach((o2) => o2.ignoreDrivers = true), { symbol: g };
}

// node_modules/@arcgis/core/symbols/support/jsonUtils.js
function l(o2, e2, n3, t2) {
  const s2 = a2(o2, {}, { context: t2, isLabelSymbol: false });
  null != s2 && (e2[n3] = s2);
}
function i(o2, e2, n3, t2) {
  const s2 = a2(o2, {}, { context: t2, isLabelSymbol: true });
  null != s2 && (e2[n3] = s2);
}
function m3(o2) {
  return o2 instanceof k || o2 instanceof u;
}
function a2(o2, t2, r) {
  if (null == o2)
    return null;
  const { context: l3, isLabelSymbol: i4 } = r, a3 = l3 == null ? void 0 : l3.origin, b5 = l3 == null ? void 0 : l3.messages;
  if ("web-scene" === a3 && !m3(o2)) {
    const n3 = S3(o2, { retainCIM: true, hasLabelingContext: i4 });
    return null != n3.symbol ? n3.symbol.write(t2, l3) : (b5 == null ? void 0 : b5.push(new s("symbol:unsupported", `Symbols of type '${o2.declaredClass}' are not supported in scenes. Use 3D symbology instead when working with WebScene and SceneView`, { symbol: o2, context: l3, error: n3.error })), null);
  }
  return ("web-map" === a3 || "portal-item" === a3 && !o(l3 == null ? void 0 : l3.layer)) && m3(o2) ? (b5 == null ? void 0 : b5.push(new s("symbol:unsupported", `Symbols of type '${o2.declaredClass}' are not supported in web maps and portal items. Use 2D symbology and CIMSymbol instead when working with MapView`, { symbol: o2, context: l3 })), null) : o2.write(t2, l3);
}
function b3(e2, n3) {
  return k2(e2, null, n3);
}

// node_modules/@arcgis/core/support/featureFlags.js
var e = () => !!has("enable-feature:force-wosr");
var t = () => has.add("enable-feature:direct-3d-object-feature-layer-display", true, true, true);
var i2 = () => has.add("enable-feature:direct-3d-object-feature-layer-display", false, true, true);
var d = () => has.add("enable-i3s-patching", true, true, true);
var c3 = () => has.add("enable-i3s-patching", false, true, true);
var n2 = () => !!has("enable-feature:SceneLayer-editing");
var l2 = (e2 = "i3s-patching") => {
  switch (c3(), i2(), has.add("enable-feature:SceneLayer-editing", true, true, true), e2) {
    case "feature-layer-view":
      t();
      break;
    case "i3s-patching":
      d();
  }
};
l2("i3s-patching");

// node_modules/@arcgis/core/symbols/support/styleUtils.js
var u2 = {};
async function f2(e2, t2) {
  try {
    return { data: (await b4(e2, t2)).data, baseUrl: Ut(e2), styleUrl: e2 };
  } catch (o2) {
    return f(o2), null;
  }
}
function i3(e2, t2, r) {
  const o2 = null != t2.portal ? t2.portal : j2.getDefault();
  let s2;
  const l3 = `${o2.url} - ${o2.user && o2.user.username} - ${e2}`;
  return u2[l3] || (u2[l3] = y2(e2, o2, r).then((e3) => (s2 = e3, e3.fetchData())).then((t3) => ({ data: t3, baseUrl: s2.itemUrl ?? "", styleName: e2 }))), u2[l3];
}
function y2(e2, r, o2) {
  return r.load(o2).then(() => {
    const t2 = new c({ disableExtraQuery: true, query: `owner:${h2} AND type:${j3} AND typekeywords:"${e2}"` });
    return r.queryItems(t2, o2);
  }).then(({ results: r2 }) => {
    var _a;
    let s2 = null;
    const n3 = e2.toLowerCase();
    if (r2 && Array.isArray(r2))
      for (const e3 of r2) {
        const t2 = (_a = e3.typeKeywords) == null ? void 0 : _a.some((e4) => e4.toLowerCase() === n3);
        if (t2 && e3.type === j3 && e3.owner === h2) {
          s2 = e3;
          break;
        }
      }
    if (!s2)
      throw new s("symbolstyleutils:style-not-found", `The style '${e2}' could not be found`, { styleName: e2 });
    return s2.load(o2);
  });
}
function c4(e2, r, o2) {
  return e2 && null != e2.styleUrl ? f2(e2.styleUrl, o2) : e2 && null != e2.styleName ? i3(e2.styleName, r, o2) : Promise.reject(new s("symbolstyleutils:style-url-and-name-missing", "Either styleUrl or styleName is required to resolve a style"));
}
function p(e2) {
  return null === e2 || "CIMSymbolReference" === e2.type ? e2 : { type: "CIMSymbolReference", symbol: e2 };
}
function d2(e2, t2, r = ["gltf"]) {
  if ("cimRef" === t2)
    return e2.cimRef;
  if (e2.formatInfos && !e())
    for (const o2 of r) {
      const t3 = e2.formatInfos.find((e3) => e3.type === o2);
      if (t3)
        return t3.href;
    }
  return e2.webRef;
}
function b4(t2, r) {
  const s2 = { responseType: "json", query: { f: "json" }, ...r };
  return j(K(t2), s2);
}
var h2 = "esri_en";
var j3 = "Style";
var w = "https://cdn.arcgis.com/sharing/rest/content/items/220936cc6ed342c9937abd8f180e7d1e/resources/styles/cim/{SymbolName}.json?f=json";

export {
  l,
  i,
  b3 as b,
  n2 as n,
  c4 as c,
  p,
  d2 as d,
  b4 as b2,
  w
};
//# sourceMappingURL=chunk-UX5D32RO.js.map
