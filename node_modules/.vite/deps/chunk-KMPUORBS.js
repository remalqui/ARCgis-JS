import {
  m,
  n3 as n
} from "./chunk-TBMS67KR.js";
import {
  c,
  u,
  x
} from "./chunk-PEYWLFGJ.js";
import {
  T,
  e2 as e
} from "./chunk-NE5U5H4D.js";
import {
  D,
  E,
  F,
  G,
  L,
  U,
  _
} from "./chunk-BCDDCNQ2.js";
import {
  t
} from "./chunk-DWOEYHKS.js";

// node_modules/@arcgis/core/views/webgl/WebGLDriverTestModule.js
var t2 = class {
  constructor() {
    this._result = false;
  }
  dispose() {
    this._program = t(this._program);
  }
  get result() {
    return null != this._program && (this._result = this._test(this._program), this.dispose()), this._result;
  }
};

// node_modules/@arcgis/core/views/webgl/testSVGPremultipliedAlpha.js
var f = class extends t2 {
  constructor(e2) {
    super(), this._rctx = e2;
    const r = "\n    precision highp float;\n\n    attribute vec2 a_pos;\n    varying vec2 v_uv;\n\n    void main() {\n      v_uv = a_pos;\n      gl_Position = vec4(a_pos * 2.0 - 1.0, 0.0, 1.0);\n    }\n    ", t4 = "\n    precision highp float;\n\n    varying vec2 v_uv;\n\n    uniform sampler2D u_texture;\n\n    void main() {\n      gl_FragColor = texture2D(u_texture, v_uv);\n    }\n    ";
    this._program = e2.programCache.acquire(r, t4, /* @__PURE__ */ new Map([["a_pos", 0]]));
  }
  dispose() {
    super.dispose();
  }
  _test(g) {
    const f2 = this._rctx;
    if (!f2.gl)
      return g.dispose(), true;
    const l = new e(1);
    l.wrapMode = D.CLAMP_TO_EDGE, l.samplingMode = L.NEAREST;
    const w = new x(f2, l), v = c.createVertex(f2, F.STATIC_DRAW, new Uint16Array([0, 0, 1, 0, 0, 1, 1, 1])), x2 = new u(f2, /* @__PURE__ */ new Map([["a_pos", 0]]), m, { geometry: v }), h = new e();
    h.samplingMode = L.LINEAR, h.wrapMode = D.CLAMP_TO_EDGE;
    const b = new T(f2, h, _2);
    f2.useProgram(g), f2.bindTexture(b, 0), g.setUniform1i("u_texture", 0);
    const A = f2.getBoundFramebufferObject(), { x: E3, y: T3, width: j, height: C } = f2.getViewport();
    f2.bindFramebuffer(w), f2.setViewport(0, 0, 1, 1), f2.setClearColor(0, 0, 0, 0), f2.setBlendingEnabled(false), f2.clearSafe(_.COLOR_BUFFER_BIT), f2.bindVAO(x2), f2.drawArrays(E.TRIANGLE_STRIP, 0, 4);
    const y = new Uint8Array(4);
    return w.readPixels(0, 0, 1, 1, G.RGBA, U.UNSIGNED_BYTE, y), x2.dispose(), w.dispose(), b.dispose(), f2.setViewport(E3, T3, j, C), f2.bindFramebuffer(A), 255 !== y[0];
  }
};
var _2 = new Image();
_2.src = "data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='5' height='5' version='1.1' viewBox='0 0 5 5' xmlns='http://www.w3.org/2000/svg'%3E%3Crect width='5' height='5' fill='%23f00' fill-opacity='.5'/%3E%3C/svg%3E%0A", _2.width = 5, _2.height = 5, _2.decode();

// node_modules/@arcgis/core/views/webgl/capabilities/DisjointTimerQuery.js
var t3 = class {
  constructor(e2, t4, E3, T3, r, _3, i, u2, s) {
    this.createQuery = e2, this.deleteQuery = t4, this.resultAvailable = E3, this.getResult = T3, this.disjoint = r, this.beginTimeElapsed = _3, this.endTimeElapsed = i, this.createTimestamp = u2, this.timestampBits = s;
  }
};
var E2 = false;
function T2(T3, r) {
  if (r.disjointTimerQuery)
    return null;
  let _3 = T3.getExtension("EXT_disjoint_timer_query_webgl2");
  return _3 && n(T3) ? new t3(() => T3.createQuery(), (e2) => {
    T3.deleteQuery(e2), E2 = false;
  }, (e2) => T3.getQueryParameter(e2, T3.QUERY_RESULT_AVAILABLE), (e2) => T3.getQueryParameter(e2, T3.QUERY_RESULT), () => T3.getParameter(_3.GPU_DISJOINT_EXT), (e2) => {
    E2 || (E2 = true, T3.beginQuery(_3.TIME_ELAPSED_EXT, e2));
  }, () => {
    T3.endQuery(_3.TIME_ELAPSED_EXT), E2 = false;
  }, (e2) => _3.queryCounterEXT(e2, _3.TIMESTAMP_EXT), () => T3.getQuery(_3.TIMESTAMP_EXT, _3.QUERY_COUNTER_BITS_EXT)) : (_3 = T3.getExtension("EXT_disjoint_timer_query"), _3 ? new t3(() => _3.createQueryEXT(), (e2) => {
    _3.deleteQueryEXT(e2), E2 = false;
  }, (e2) => _3.getQueryObjectEXT(e2, _3.QUERY_RESULT_AVAILABLE_EXT), (e2) => _3.getQueryObjectEXT(e2, _3.QUERY_RESULT_EXT), () => T3.getParameter(_3.GPU_DISJOINT_EXT), (e2) => {
    E2 || (E2 = true, _3.beginQueryEXT(_3.TIME_ELAPSED_EXT, e2));
  }, () => {
    _3.endQueryEXT(_3.TIME_ELAPSED_EXT), E2 = false;
  }, (e2) => _3.queryCounterEXT(e2, _3.TIMESTAMP_EXT), () => _3.getQueryEXT(_3.TIMESTAMP_EXT, _3.QUERY_COUNTER_BITS_EXT)) : null);
}

export {
  T2 as T,
  t2 as t,
  f
};
//# sourceMappingURL=chunk-KMPUORBS.js.map
