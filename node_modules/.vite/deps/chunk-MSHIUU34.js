import {
  t
} from "./chunk-OVCZ34SK.js";
import {
  oe
} from "./chunk-I7LOFSTE.js";
import {
  A as A2,
  L,
  N as N2,
  R,
  S,
  T as T3,
  a as a2,
  f as f3,
  f2 as f4,
  g,
  g2,
  h as h2,
  m as m2,
  m2 as m3,
  p as p4,
  t as t3,
  u as u3,
  v
} from "./chunk-EX7KRNYS.js";
import {
  n as n7
} from "./chunk-BDD7KT6D.js";
import {
  n as n6,
  s as s3
} from "./chunk-4QESYAV3.js";
import {
  a,
  s as s4
} from "./chunk-P2MEGQP6.js";
import {
  Be
} from "./chunk-3SADEOML.js";
import {
  n as n4,
  x as x3
} from "./chunk-YM46NRFF.js";
import {
  n as n5
} from "./chunk-QRIMDBVP.js";
import {
  d
} from "./chunk-RNXN3MSP.js";
import {
  d as d2
} from "./chunk-RL6GG46M.js";
import {
  b,
  m
} from "./chunk-YC4PIRSZ.js";
import {
  K
} from "./chunk-YIJWIXDP.js";
import {
  r as r2
} from "./chunk-EISDT6B4.js";
import {
  f as f2,
  n as n3,
  o as o2,
  s as s2,
  t as t2
} from "./chunk-Z36PKTLY.js";
import {
  A
} from "./chunk-CIYZZPIM.js";
import {
  c as c2
} from "./chunk-SXL2EDR4.js";
import {
  Fe,
  N,
  P,
  T as T2,
  i2 as i,
  n2,
  o,
  ve,
  we,
  x as x2
} from "./chunk-RFI4CCAC.js";
import {
  c
} from "./chunk-YAWND7HF.js";
import {
  y
} from "./chunk-RR2V4HRU.js";
import {
  h
} from "./chunk-4SARN32Z.js";
import {
  o as o3,
  u as u2
} from "./chunk-XR4HIGQP.js";
import {
  x
} from "./chunk-D5MIJ6WT.js";
import {
  p as p3
} from "./chunk-T4XWQYGC.js";
import {
  f,
  p2
} from "./chunk-SFV6XLDZ.js";
import {
  j
} from "./chunk-HKVL2MJK.js";
import {
  n
} from "./chunk-MH2LNFJK.js";
import {
  T,
  p
} from "./chunk-HNHXEGH2.js";
import {
  r,
  u
} from "./chunk-DWOEYHKS.js";
import {
  s3 as s
} from "./chunk-W2N7YT6I.js";
import {
  has
} from "./chunk-I4U7MQNO.js";

// node_modules/@arcgis/core/arcade/featureSetCollection.js
var e = class {
  constructor() {
    this.declaredRootClass = "esri.arcade.featureSetCollection", this._layerById = {}, this._layerByName = {};
  }
  add(e3, t5, a6) {
    this._layerById[t5] = a6, this._layerByName[e3] = a6;
  }
  async featureSetByName(e3, t5 = true, a6 = ["*"]) {
    return void 0 === this._layerByName[e3] ? null : this._layerByName[e3];
  }
  async featureSetById(e3, t5 = true, a6 = ["*"]) {
    return void 0 === this._layerById[e3] ? null : this._layerById[e3];
  }
  castToText(e3 = false) {
    return "object, FeatureSetCollection";
  }
};

// node_modules/@arcgis/core/arcade/featureset/actions/AttributeFilter.js
var c3 = class _c extends v {
  constructor(e3) {
    super(e3), this.declaredClass = "esri.arcade.featureset.actions.AttributeFilter", this._maxProcessing = 1e3, this._parent = e3.parentfeatureset, e3.whereclause instanceof f2 ? (this._whereclause = e3.whereclause, this._whereClauseFunction = null) : (this._whereClauseFunction = e3.whereclause, this._whereclause = null);
  }
  _initialiseFeatureSet() {
    null !== this._parent ? (this.fields = this._parent.fields.slice(0), this.geometryType = this._parent.geometryType, this.objectIdField = this._parent.objectIdField, this.globalIdField = this._parent.globalIdField, this.spatialReference = this._parent.spatialReference, this.hasM = this._parent.hasM, this.hasZ = this._parent.hasZ, this.typeIdField = this._parent.typeIdField, this.types = this._parent.types) : (this.fields = [], this.typeIdField = "", this.objectIdField = "", this.globalIdField = "", this.spatialReference = new f({ wkid: 4326 }), this.geometryType = P.point);
  }
  async _getSet(e3) {
    if (null === this._wset) {
      await this._ensureLoaded();
      const t5 = await this._parent._getFilteredSet("", null, this._whereclause, null, e3);
      return this._checkCancelled(e3), null !== this._whereClauseFunction ? this._wset = new t3(t5._candidates.slice(0).concat(t5._known.slice(0)), [], t5._ordered, this._clonePageDefinition(t5.pagesDefinition)) : this._wset = new t3(t5._candidates.slice(0), t5._known.slice(0), t5._ordered, this._clonePageDefinition(t5.pagesDefinition)), this._wset;
    }
    return this._wset;
  }
  _isInFeatureSet(e3) {
    var _a;
    let t5 = (_a = this._parent) == null ? void 0 : _a._isInFeatureSet(e3);
    return t5 === n2.NotInFeatureSet ? t5 : (t5 = this._idstates[e3], void 0 === t5 ? n2.Unknown : t5);
  }
  _getFeature(e3, t5, s6) {
    return this._parent._getFeature(e3, t5, s6);
  }
  _getFeatures(e3, t5, s6, i2) {
    return this._parent._getFeatures(e3, t5, s6, i2);
  }
  _featureFromCache(e3) {
    return this._parent._featureFromCache(e3);
  }
  executeWhereClause(e3) {
    var _a;
    return ((_a = this._whereclause) == null ? void 0 : _a.testFeature(e3)) ?? false;
  }
  async executeWhereClauseDeferred(e3) {
    if (null !== this._whereClauseFunction) {
      const t5 = this._whereClauseFunction(e3);
      return T(t5), t5;
    }
    return this.executeWhereClause(e3);
  }
  async _fetchAndRefineFeatures(e3, t5, s6) {
    var _a, _b, _c2;
    const r3 = new t3([], e3, false, null), a6 = Math.min(t5, e3.length);
    if (await ((_a = this._parent) == null ? void 0 : _a._getFeatures(r3, -1, a6, s6)), this._checkCancelled(s6), null == this._whereClauseFunction) {
      for (let t6 = 0; t6 < a6; t6++) {
        const s7 = (_b = this._parent) == null ? void 0 : _b._featureFromCache(e3[t6]);
        true === this.executeWhereClause(s7) ? this._idstates[e3[t6]] = n2.InFeatureSet : this._idstates[e3[t6]] = n2.NotInFeatureSet;
      }
      return "success";
    }
    const l2 = [];
    for (let i2 = 0; i2 < a6; i2++) {
      const t6 = (_c2 = this._parent) == null ? void 0 : _c2._featureFromCache(e3[i2]);
      l2.push(await this.executeWhereClauseDeferred(t6));
    }
    for (let i2 = 0; i2 < t5; i2++)
      true === l2[i2] ? this._idstates[e3[i2]] = n2.InFeatureSet : this._idstates[e3[i2]] = n2.NotInFeatureSet;
    return "success";
  }
  async _getFilteredSet(e3, t5, s6, r3, n8) {
    null !== this._whereClauseFunction || (null !== s6 ? null !== this._whereclause && (s6 = m2(this._whereclause, s6)) : s6 = this._whereclause), await this._ensureLoaded();
    const l2 = await this._parent._getFilteredSet(e3, t5, s6, r3, n8);
    let h3;
    return this._checkCancelled(n8), h3 = null !== this._whereClauseFunction ? new t3(l2._candidates.slice(0).concat(l2._known.slice(0)), [], l2._ordered, this._clonePageDefinition(l2.pagesDefinition)) : new t3(l2._candidates.slice(0), l2._known.slice(0), l2._ordered, this._clonePageDefinition(l2.pagesDefinition)), h3;
  }
  async _stat(e3, t5, s6, i2, r3, n8, l2) {
    if (null !== this._whereClauseFunction)
      return null === r3 && "" === s6 && null === i2 ? this._manualStat(e3, t5, n8, l2) : { calculated: false };
    let h3 = this._whereclause;
    null !== r3 && null !== this._whereclause && (h3 = m2(this._whereclause, r3));
    const u4 = await this._parent._stat(e3, t5, s6, i2, h3, n8, l2);
    return false === u4.calculated ? null === r3 && "" === s6 && null === i2 ? this._manualStat(e3, t5, n8, l2) : { calculated: false } : u4;
  }
  async _canDoAggregates(e3, t5, s6, i2, r3) {
    return null === this._whereClauseFunction && (null !== r3 ? null !== this._whereclause && (r3 = m2(this._whereclause, r3)) : r3 = this._whereclause, null !== this._parent && this._parent._canDoAggregates(e3, t5, s6, i2, r3));
  }
  async _getAggregatePagesDataSourceDefinition(s6, i2, r3, n8, l2, h3, u4) {
    if (null === this._parent)
      throw new o2(n3.NeverReach);
    return null !== l2 ? null !== this._whereclause && (l2 = m2(this._whereclause, l2)) : l2 = this._whereclause, this._parent._getAggregatePagesDataSourceDefinition(s6, i2, r3, n8, l2, h3, u4);
  }
  static registerAction() {
    v._featuresetFunctions.filter = function(e3) {
      if ("function" == typeof e3)
        return new _c({ parentfeatureset: this, whereclause: e3 });
      let t5 = null;
      return e3 instanceof f2 && (t5 = e3), new _c({ parentfeatureset: this, whereclause: t5 });
    };
  }
};

// node_modules/@arcgis/core/arcade/featureset/actions/Adapted.js
var W = class {
  constructor(e3) {
    this.field = e3, this.sqlRewritable = false;
  }
  postInitialization(e3, t5) {
  }
};
var A3 = class extends W {
  constructor(e3) {
    super(e3), this.sqlRewritable = true;
  }
  extractValue(e3) {
    return e3.attributes[this.field.name];
  }
  rewriteSql(e3) {
    return { rewritten: this.sqlRewritable, where: e3 };
  }
};
var E = class extends W {
  constructor(e3, t5, r3) {
    super(o(e3)), this.originalField = e3, this.sqlRewritable = true, this.field.name = t5, this.field.alias = r3;
  }
  rewriteSql(e3, t5) {
    return { rewritten: this.sqlRewritable, where: p4(e3, this.field.name, this.originalField.name, t5.getFieldsIndex()) };
  }
  extractValue(e3) {
    return e3.attributes[this.originalField.name];
  }
};
var x4 = class _x extends W {
  constructor(e3, t5, r3) {
    super(e3), this.codefield = t5, this.lkp = r3, this.reverseLkp = {};
    for (const s6 in r3)
      this.reverseLkp[r3[s6]] = s6;
    this.sqlRewritable = true;
  }
  rewriteSql(e3, t5) {
    const r3 = this.evaluateNodeToWhereClause(e3.parseTree, i.Standardised, this.field.name, this.codefield instanceof f2 ? u3(this.codefield, i.Standardised) : this.codefield, e3.parameters);
    return r3.includes(_x.BADNESS) ? { rewritten: false, where: e3 } : { rewritten: this.sqlRewritable, where: f2.create(r3, u(t5._parent).getFieldsIndex()) };
  }
  evaluateNodeToWhereClause(e3, r3, i2 = null, l2 = null, n8) {
    let o4, h3, u4, c5;
    switch (e3.type) {
      case "interval":
        return R(this.evaluateNodeToWhereClause(e3.value, r3, i2, l2, n8), e3.qualifier, e3.op);
      case "case-expression": {
        let t5 = " CASE ";
        "simple" === e3.format && (t5 += this.evaluateNodeToWhereClause(e3.operand, r3, i2, _x.BADNESS, n8));
        for (let s6 = 0; s6 < e3.clauses.length; s6++)
          t5 += " WHEN " + this.evaluateNodeToWhereClause(e3.clauses[s6].operand, r3, i2, _x.BADNESS, n8) + " THEN " + this.evaluateNodeToWhereClause(e3.clauses[s6].value, r3, i2, _x.BADNESS, n8);
        return null !== e3.else && (t5 += " ELSE " + this.evaluateNodeToWhereClause(e3.else, r3, i2, _x.BADNESS, n8)), t5 += " END ", t5;
      }
      case "parameter": {
        const s6 = n8[e3.value.toLowerCase()];
        if ("string" == typeof s6)
          return "'" + s6.toString().replaceAll("'", "''") + "'";
        if (s6 instanceof Date)
          return T3(s6, r3, null);
        if (s6 instanceof c)
          return h2(s6, r3, null);
        if (s6 instanceof Array) {
          const e4 = [];
          for (let a6 = 0; a6 < s6.length; a6++)
            "string" == typeof s6[a6] ? e4.push("'" + s6[a6].toString().replaceAll("'", "''") + "'") : s6[a6] instanceof Date ? e4.push(T3(s6[a6], r3, null)) : s6[a6] instanceof c ? e4.push(h2(s6[a6], r3, null)) : e4.push(s6[a6].toString());
          return e4;
        }
        return s6.toString();
      }
      case "expression-list":
        h3 = [];
        for (const t5 of e3.value)
          h3.push(this.evaluateNodeToWhereClause(t5, r3, i2, l2, n8));
        return h3;
      case "unary-expression":
        return " ( NOT " + this.evaluateNodeToWhereClause(e3.expr, r3, i2, _x.BADNESS, n8) + " ) ";
      case "binary-expression":
        switch (e3.operator) {
          case "AND":
            return " (" + this.evaluateNodeToWhereClause(e3.left, r3, i2, l2, n8) + " AND " + this.evaluateNodeToWhereClause(e3.right, r3, i2, l2, n8) + ") ";
          case "OR":
            return " (" + this.evaluateNodeToWhereClause(e3.left, r3, i2, l2, n8) + " OR " + this.evaluateNodeToWhereClause(e3.right, r3, i2, l2, n8) + ") ";
          case "IS":
            if ("null" !== e3.right.type)
              throw new s2(t2.UnsupportedIsRhs);
            return " (" + this.evaluateNodeToWhereClause(e3.left, r3, i2, l2, n8) + " IS NULL )";
          case "ISNOT":
            if ("null" !== e3.right.type)
              throw new s2(t2.UnsupportedIsRhs);
            return " (" + this.evaluateNodeToWhereClause(e3.left, r3, i2, l2, n8) + " IS NOT NULL )";
          case "IN":
            if (o4 = [], "expression-list" === e3.right.type) {
              if ("column-reference" === e3.left.type && e3.left.column.toUpperCase() === this.field.name.toUpperCase()) {
                const t5 = [];
                let s6 = true;
                for (const r4 of e3.right.value) {
                  if ("string" !== r4.type) {
                    s6 = false;
                    break;
                  }
                  if (void 0 === this.lkp[r4.value]) {
                    s6 = false;
                    break;
                  }
                  t5.push(this.lkp[r4.value].toString());
                }
                if (s6)
                  return " (" + this.evaluateNodeToWhereClause(e3.left, r3, i2, l2, n8) + " IN (" + t5.join(",") + ")) ";
              }
              return o4 = this.evaluateNodeToWhereClause(e3.right, r3, i2, l2, n8), " (" + this.evaluateNodeToWhereClause(e3.left, r3, i2, l2, n8) + " IN (" + o4.join(",") + ")) ";
            }
            return c5 = this.evaluateNodeToWhereClause(e3.right, r3, i2, l2, n8), c5 instanceof Array ? " (" + this.evaluateNodeToWhereClause(e3.left, r3, i2, l2, n8) + " IN (" + c5.join(",") + ")) " : " (" + this.evaluateNodeToWhereClause(e3.left, r3, i2, l2, n8) + " IN (" + c5 + ")) ";
          case "NOT IN":
            if (o4 = [], "expression-list" === e3.right.type) {
              if ("column-reference" === e3.left.type && e3.left.column.toUpperCase() === this.field.name.toUpperCase()) {
                const t5 = [];
                let s6 = true;
                for (const r4 of e3.right.value) {
                  if ("string" !== r4.type) {
                    s6 = false;
                    break;
                  }
                  if (void 0 === this.lkp[r4.value]) {
                    s6 = false;
                    break;
                  }
                  t5.push(this.lkp[r4.value].toString());
                }
                if (s6)
                  return " (" + this.evaluateNodeToWhereClause(e3.left, r3, i2, l2, n8) + " NOT IN (" + t5.join(",") + ")) ";
              }
              return o4 = this.evaluateNodeToWhereClause(e3.right, r3, i2, l2, n8), " (" + this.evaluateNodeToWhereClause(e3.left, r3, i2, l2, n8) + " NOT IN (" + o4.join(",") + ")) ";
            }
            return c5 = this.evaluateNodeToWhereClause(e3.right, r3, i2, l2, n8), c5 instanceof Array ? " (" + this.evaluateNodeToWhereClause(e3.left, r3, i2, l2, n8) + " NOT IN (" + c5.join(",") + ")) " : " (" + this.evaluateNodeToWhereClause(e3.left, r3, i2, l2, n8) + " NOT IN (" + c5 + ")) ";
          case "BETWEEN":
            return u4 = this.evaluateNodeToWhereClause(e3.right, r3, i2, _x.BADNESS, n8), " (" + this.evaluateNodeToWhereClause(e3.left, r3, i2, _x.BADNESS, n8) + " BETWEEN " + u4[0] + " AND " + u4[1] + " ) ";
          case "NOTBETWEEN":
            return u4 = this.evaluateNodeToWhereClause(e3.right, r3, i2, _x.BADNESS, n8), " (" + this.evaluateNodeToWhereClause(e3.left, r3, i2, _x.BADNESS, n8) + " NOT BETWEEN " + u4[0] + " AND " + u4[1] + " ) ";
          case "LIKE":
            return "" !== e3.escape ? " (" + this.evaluateNodeToWhereClause(e3.left, r3, i2, _x.BADNESS, n8) + " LIKE " + this.evaluateNodeToWhereClause(e3.right, r3, i2, _x.BADNESS, n8) + " ESCAPE '" + e3.escape + "') " : " (" + this.evaluateNodeToWhereClause(e3.left, r3, i2, _x.BADNESS, n8) + " LIKE " + this.evaluateNodeToWhereClause(e3.right, r3, i2, _x.BADNESS, n8) + ") ";
          case "NOT LIKE":
            return "" !== e3.escape ? " (" + this.evaluateNodeToWhereClause(e3.left, r3, i2, _x.BADNESS, n8) + " NOT LIKE " + this.evaluateNodeToWhereClause(e3.right, r3, i2, _x.BADNESS, n8) + " ESCAPE '" + e3.escape + "') " : " (" + this.evaluateNodeToWhereClause(e3.left, r3, i2, _x.BADNESS, n8) + " NOT LIKE " + this.evaluateNodeToWhereClause(e3.right, r3, i2, _x.BADNESS, n8) + ") ";
          case "<>":
          case "=":
            if ("column-reference" === e3.left.type && "string" === e3.right.type) {
              if (e3.left.column.toUpperCase() === this.field.name.toUpperCase() && void 0 !== this.lkp[e3.right.value.toString()])
                return " (" + l2 + " " + e3.operator + " " + this.lkp[e3.right.value.toString()].toString() + ") ";
            } else if ("column-reference" === e3.right.type && "string" === e3.left.type && e3.right.column.toUpperCase() === this.field.name.toUpperCase())
              return " (" + this.lkp[e3.right.value.toString()].toString() + " " + e3.operator + " " + l2 + ") ";
            return " (" + this.evaluateNodeToWhereClause(e3.left, r3, i2, _x.BADNESS, n8) + " " + e3.operator + " " + this.evaluateNodeToWhereClause(e3.right, r3, i2, _x.BADNESS, n8) + ") ";
          case "<":
          case ">":
          case ">=":
          case "<=":
          case "*":
          case "-":
          case "+":
          case "/":
          case "||":
            return " (" + this.evaluateNodeToWhereClause(e3.left, r3, i2, _x.BADNESS, n8) + " " + e3.operator + " " + this.evaluateNodeToWhereClause(e3.right, r3, i2, _x.BADNESS, n8) + ") ";
        }
      case "null":
        return "null";
      case "boolean":
        return true === e3.value ? "1" : "0";
      case "string":
        return "'" + e3.value.toString().replaceAll("'", "''") + "'";
      case "timestamp":
      case "date":
        return T3(e3.value, r3, null);
      case "number":
        return e3.value.toString();
      case "current-time":
        return L("date" === e3.mode, r3);
      case "column-reference":
        return i2 && i2.toLowerCase() === e3.column.toLowerCase() ? "(" + l2 + ")" : e3.column;
      case "data-type":
        return e3.value;
      case "function": {
        const t5 = this.evaluateNodeToWhereClause(e3.args, r3, i2, _x.BADNESS, n8);
        return g(e3.name, t5, r3);
      }
    }
    throw new s2(t2.UnsupportedSyntax, { node: e3.type });
  }
  extractValue(e3) {
    return this.codefield instanceof f2 ? this.reverseLkp[this.codefield.calculateValueCompiled(e3)] : this.reverseLkp[e3.attributes[this.codefield]];
  }
};
x4.BADNESS = "_!!!_BAD_LKP_!!!!";
var y2 = class extends W {
  constructor(e3, t5) {
    super(e3), this._sql = t5;
  }
  rewriteSql(e3, t5) {
    return { rewritten: true, where: p4(e3, this.field.name, u3(this._sql, i.Standardised), t5.getFieldsIndex()) };
  }
  extractValue(e3) {
    return this._sql.calculateValueCompiled(e3);
  }
};
var D = class extends v {
  static findField(e3, t5) {
    for (const r3 of e3)
      if (r3.name.toLowerCase() === t5.toString().toLowerCase())
        return r3;
    return null;
  }
  constructor(e3) {
    super(e3), this._calcFunc = null, this.declaredClass = "esri.arcade.featureset.actions.Adapted", this.adaptedFields = [], this._extraFilter = null, this._extraFilter = e3.extraFilter, this._parent = e3.parentfeatureset, this._maxProcessing = 30, this.adaptedFields = e3.adaptedFields;
  }
  _initialiseFeatureSet() {
    null !== this._parent ? (this.geometryType = this._parent.geometryType, this.objectIdField = this._parent.objectIdField, this.globalIdField = this._parent.globalIdField, this.spatialReference = this._parent.spatialReference, this.hasM = this._parent.hasM, this.hasZ = this._parent.hasZ, this.typeIdField = this._parent.typeIdField, this.types = this._parent.types) : (this.spatialReference = new f({ wkid: 4326 }), this.objectIdField = "", this.globalIdField = "", this.geometryType = P.point, this.typeIdField = "", this.types = null), this.fields = [];
    for (const e3 of this.adaptedFields)
      e3.postInitialization(this, this._parent), this.fields.push(e3.field);
  }
  async _getSet(e3) {
    var _a;
    if (null === this._wset) {
      await this._ensureLoaded();
      let t5 = null;
      return t5 = this._extraFilter ? await this._getFilteredSet("", null, null, null, e3) : await ((_a = this._parent) == null ? void 0 : _a._getSet(e3)), this._checkCancelled(e3), r(t5), this._wset = new t3(t5._candidates.slice(0), t5._known.slice(0), t5._ordered, this._clonePageDefinition(t5.pagesDefinition)), this._wset;
    }
    return this._wset;
  }
  _isInFeatureSet(e3) {
    return u(this._parent)._isInFeatureSet(e3);
  }
  async _getFeatures(t5, s6, a6, i2) {
    var _a, _b;
    const l2 = [];
    -1 !== s6 && void 0 === this._featureCache[s6] && l2.push(s6);
    const n8 = this._maxQueryRate();
    if (true === this._checkIfNeedToExpandKnownPage(t5, n8))
      return await this._expandPagedSet(t5, n8, 0, 0, i2), this._getFeatures(t5, s6, a6, i2);
    let h3 = 0;
    for (let e3 = t5._lastFetchedIndex; e3 < t5._known.length && (h3++, h3 <= a6 && (t5._lastFetchedIndex += 1), !(void 0 === this._featureCache[t5._known[e3]] && (t5._known[e3] !== s6 && l2.push(t5._known[e3]), l2.length >= n8))); e3++)
      ;
    if (0 === l2.length)
      return "success";
    t5 = new t3([], l2, t5._ordered, null);
    const u4 = Math.min(l2.length, a6);
    await ((_a = this._parent) == null ? void 0 : _a._getFeatures(t5, -1, u4, i2)), this._checkCancelled(i2);
    const c5 = [];
    for (let e3 = 0; e3 < u4; e3++) {
      const t6 = (_b = this._parent) == null ? void 0 : _b._featureFromCache(l2[e3]);
      void 0 !== t6 && c5.push({ geometry: t6.geometry, attributes: t6.attributes, id: l2[e3] });
    }
    for (const o4 of c5) {
      const t6 = [];
      for (const e3 of this.adaptedFields)
        t6[e3.field.name] = e3.extractValue(o4);
      this._featureCache[o4.id] = new h({ attributes: t6, geometry: c2(o4.geometry) });
    }
    return "success";
  }
  async _fetchAndRefineFeatures() {
    throw new o2(n3.NeverReach);
  }
  async _getFilteredSet(e3, t5, r3, s6, a6) {
    let i2 = false;
    const l2 = this._reformulateWithoutAdaptions(r3);
    i2 = l2.cannot, r3 = l2.where;
    let n8 = false;
    if (null !== s6) {
      n8 = true;
      const e4 = [];
      for (const t6 of this.adaptedFields)
        if (!(t6 instanceof A3) && true === s6.scanForField(t6.field.name)) {
          if (!(t6 instanceof E)) {
            s6 = null, n8 = false;
            break;
          }
          e4.push({ field: t6.field.name, newfield: t6.originalField.name });
        }
      s6 && e4.length > 0 && (s6 = s6.replaceFields(e4));
    }
    null !== r3 ? null !== this._extraFilter && (r3 = m2(this._extraFilter, r3)) : r3 = this._extraFilter, await this._ensureLoaded();
    const h3 = await u(this._parent)._getFilteredSet(e3, t5, r3, s6, a6);
    let u4;
    return this._checkCancelled(a6), u4 = true === i2 ? new t3(h3._candidates.slice(0).concat(h3._known.slice(0)), [], true === n8 && h3._ordered, this._clonePageDefinition(h3.pagesDefinition)) : new t3(h3._candidates.slice(0), h3._known.slice(0), true === n8 && h3._ordered, this._clonePageDefinition(h3.pagesDefinition)), u4;
  }
  _reformulateWithoutAdaptions(e3) {
    const t5 = { cannot: false, where: e3 };
    if (null !== e3) {
      for (const r3 of this.adaptedFields)
        if (true === A2(e3, r3.field.name)) {
          const s6 = r3.rewriteSql(e3, this);
          if (true !== s6.rewritten) {
            t5.cannot = true, t5.where = null;
            break;
          }
          t5.where = s6.where;
        }
    }
    return t5;
  }
  async _stat(e3, t5, r3, s6, a6, i2, l2) {
    let n8 = false, o4 = this._reformulateWithoutAdaptions(t5);
    if (n8 = o4.cannot, t5 = o4.where, o4 = this._reformulateWithoutAdaptions(a6), n8 = n8 || o4.cannot, null !== (a6 = o4.where) ? null !== this._extraFilter && (a6 = m2(this._extraFilter, a6)) : a6 = this._extraFilter, true === n8)
      return null === a6 && "" === r3 && null === s6 ? this._manualStat(e3, t5, i2, l2) : { calculated: false };
    const h3 = await u(this._parent)._stat(e3, t5, r3, s6, a6, i2, l2);
    return false === h3.calculated ? null === a6 && "" === r3 && null === s6 ? this._manualStat(e3, t5, i2, l2) : { calculated: false } : h3;
  }
  async _canDoAggregates(e3, t5, r3, s6, a6) {
    if (null === this._parent)
      return false;
    for (let n8 = 0; n8 < e3.length; n8++)
      for (const t6 of this.adaptedFields)
        if (e3[n8].toLowerCase() === t6.field.name.toLowerCase() && !(t6 instanceof A3))
          return false;
    const i2 = [];
    for (let n8 = 0; n8 < t5.length; n8++) {
      const e4 = t5[n8];
      if (null !== e4.workingexpr) {
        const t6 = this._reformulateWithoutAdaptions(e4.workingexpr);
        if (t6.cannot)
          return false;
        const r4 = e4.clone();
        r4.workingexpr = t6.where, i2.push(r4);
      } else
        i2.push(e4);
    }
    const l2 = this._reformulateWithoutAdaptions(a6);
    return !l2.cannot && (null !== (a6 = l2.where) ? null !== this._extraFilter && (a6 = m2(this._extraFilter, a6)) : a6 = this._extraFilter, this._parent._canDoAggregates(e3, i2, r3, s6, a6));
  }
  async _getAggregatePagesDataSourceDefinition(e3, t5, r3, s6, a6, n8, o4) {
    if (null === this._parent)
      throw new o2(n3.NeverReach);
    const h3 = [];
    for (let c5 = 0; c5 < t5.length; c5++) {
      const e4 = t5[c5];
      if (null !== e4.workingexpr) {
        const t6 = this._reformulateWithoutAdaptions(e4.workingexpr);
        if (t6.cannot)
          throw new o2(n3.NeverReach);
        const r4 = e4.clone();
        r4.workingexpr = t6.where, h3.push(r4);
      } else
        h3.push(e4);
    }
    const u4 = this._reformulateWithoutAdaptions(a6);
    if (u4.cannot)
      throw new o2(n3.NeverReach);
    return null !== (a6 = u4.where) ? null !== this._extraFilter && (a6 = m2(this._extraFilter, a6)) : a6 = this._extraFilter, this._parent._getAggregatePagesDataSourceDefinition(e3, h3, r3, s6, a6, n8, o4);
  }
};

// node_modules/@arcgis/core/arcade/featureset/support/OrderbyClause.js
function t4(t5, e3) {
  return t5 === e3 ? 0 : null === t5 ? -1 : null === e3 ? 1 : t5 < e3 ? -1 : 1;
}
var e2 = class _e {
  constructor(t5) {
    const e3 = t5.split(",");
    this._fields = [], this._directions = [];
    for (let s6 = 0; s6 < e3.length; s6++) {
      const t6 = e3[s6].match(/\S+/g);
      this._fields.push(t6[0]), 2 === t6.length ? "asc" === t6[1].toLowerCase() ? this._directions.push(1) : this._directions.push(0) : this._directions.push(1);
    }
  }
  constructClause() {
    let t5 = "";
    for (let e3 = 0; e3 < this._fields.length; e3++)
      0 !== e3 && (t5 += ","), t5 += this._fields[e3], 1 === this._directions[e3] ? t5 += " ASC" : t5 += " DESC";
    return t5;
  }
  order(e3) {
    e3.sort((e4, s6) => {
      for (let i2 = 0; i2 < this._fields.length; i2++) {
        const r3 = this.featureValue(e4.feature, this._fields[i2], i2), l2 = this.featureValue(s6.feature, this._fields[i2], i2);
        let o4 = 0;
        if (o4 = 1 === this._directions[i2] ? t4(r3, l2) : -1 * t4(r3, l2), 0 !== o4)
          return o4;
      }
      return 0;
    });
  }
  scanForField(t5) {
    for (let e3 = 0; e3 < this._fields.length; e3++)
      if (this._fields[e3].toLowerCase().trim() === t5.toLowerCase().trim())
        return true;
    return false;
  }
  replaceFields(t5) {
    let s6 = "";
    for (let e3 = 0; e3 < this._fields.length; e3++) {
      0 !== e3 && (s6 += ",");
      let i2 = this._fields[e3];
      for (const e4 of t5)
        if (i2.toLowerCase() === e4.field.toLowerCase()) {
          i2 = e4.newfield;
          break;
        }
      s6 += i2, 1 === this._directions[e3] ? s6 += " ASC" : s6 += " DESC";
    }
    return new _e(s6);
  }
  featureValue(t5, e3, s6) {
    const i2 = t5.attributes[e3];
    if (void 0 !== i2)
      return i2;
    for (const r3 in t5.attributes)
      if (e3.toLowerCase() === r3.toLowerCase())
        return this._fields[s6] = r3, t5.attributes[r3];
    return null;
  }
};

// node_modules/@arcgis/core/arcade/featureset/actions/OrderBy.js
var a3 = class _a extends v {
  constructor(e3) {
    super(e3), this._orderbyclause = null, this.declaredClass = "esri.arcade.featureset.actions.OrderBy", this._maxProcessing = 100, this._orderbyclause = e3.orderbyclause, this._parent = e3.parentfeatureset;
  }
  async _getSet(e3) {
    if (null === this._wset) {
      await this._ensureLoaded();
      const t5 = await this._getFilteredSet("", null, null, this._orderbyclause, e3);
      return this._checkCancelled(e3), this._wset = t5, this._wset;
    }
    return this._wset;
  }
  async manualOrderSet(e3, t5) {
    var _a2;
    const r3 = await this.getIdColumnDictionary(e3, [], -1, t5);
    (_a2 = this._orderbyclause) == null ? void 0 : _a2.order(r3);
    const n8 = new t3([], [], true, null);
    for (let s6 = 0; s6 < r3.length; s6++)
      n8._known.push(r3[s6].id);
    return n8;
  }
  async getIdColumnDictionary(t5, r3, n8, s6) {
    if (n8 < t5._known.length - 1) {
      const i2 = this._maxQueryRate();
      if ("GETPAGES" === t5._known[n8 + 1])
        return await Fe(this._parent._expandPagedSet(t5, i2, 0, 0, s6)), this.getIdColumnDictionary(t5, r3, n8, s6);
      let a6 = n8 + 1;
      const o4 = [];
      for (; a6 < t5._known.length && "GETPAGES" !== t5._known[a6]; )
        o4.push(t5._known[a6]), a6++;
      n8 += o4.length;
      const u4 = await Fe(this._parent._getFeatureBatch(o4, s6));
      this._checkCancelled(s6);
      for (const e3 of u4)
        r3.push({ id: e3.attributes[this.objectIdField], feature: e3 });
      return this.getIdColumnDictionary(t5, r3, n8, s6);
    }
    return t5._candidates.length > 0 ? (await Fe(this._refineSetBlock(t5, this._maxProcessingRate(), s6)), this._checkCancelled(s6), this.getIdColumnDictionary(t5, r3, n8, s6)) : r3;
  }
  _isInFeatureSet(e3) {
    return this._parent._isInFeatureSet(e3);
  }
  _getFeatures(e3, t5, r3, n8) {
    return this._parent._getFeatures(e3, t5, r3, n8);
  }
  _featureFromCache(e3) {
    if (void 0 === this._featureCache[e3]) {
      const t5 = this._parent._featureFromCache(e3);
      if (void 0 === t5)
        return;
      return null === t5 ? null : (this._featureCache[e3] = t5, t5);
    }
    return this._featureCache[e3];
  }
  async _fetchAndRefineFeatures() {
    throw new o2(n3.NeverReach);
  }
  async _getFilteredSet(e3, t5, r3, n8, i2) {
    await this._ensureLoaded();
    const a6 = await this._parent._getFilteredSet(e3, t5, r3, null === n8 ? this._orderbyclause : n8, i2);
    this._checkCancelled(i2);
    const o4 = new t3(a6._candidates.slice(0), a6._known.slice(0), a6._ordered, this._clonePageDefinition(a6.pagesDefinition));
    let u4 = true;
    if (a6._candidates.length > 0 && (u4 = false), false === o4._ordered) {
      let e4 = await this.manualOrderSet(o4, i2);
      return false === u4 && (null === t5 && null === r3 || (e4 = new t3(e4._candidates.slice(0).concat(e4._known.slice(0)), [], e4._ordered, this._clonePageDefinition(e4.pagesDefinition)))), e4;
    }
    return o4;
  }
  static registerAction() {
    v._featuresetFunctions.orderBy = function(e3) {
      return "" === e3 ? this : new _a({ parentfeatureset: this, orderbyclause: new e2(e3) });
    };
  }
};

// node_modules/@arcgis/core/arcade/featureset/support/StatsField.js
function s5(s6) {
  if ("function" === s6.parseTree.type) {
    if (0 === s6.parseTree.args.value.length)
      return { name: s6.parseTree.name, expr: null };
    if (s6.parseTree.args.value.length > 1)
      throw new s2(t2.MissingStatisticParameters);
    const a6 = f2.create(f3(s6.parseTree.args.value[0], i.Standardised, s6.parameters), s6.fieldsIndex);
    return { name: s6.parseTree.name, expr: a6 };
  }
  return null;
}
var a4 = class _a {
  constructor() {
    this.field = "", this.tofieldname = "", this.typeofstat = "MIN", this.workingexpr = null;
  }
  clone() {
    const e3 = new _a();
    return e3.field = this.field, e3.tofieldname = this.tofieldname, e3.typeofstat = this.typeofstat, e3.workingexpr = this.workingexpr, e3;
  }
  static parseStatField(r3, n8, o4) {
    const l2 = new _a();
    l2.field = r3;
    const p6 = f2.create(n8, o4), f7 = s5(p6);
    if (null === f7)
      throw new s2(t2.UnsupportedSqlFunction, { function: "" });
    const u4 = f7.name.toUpperCase().trim();
    if ("MIN" === u4) {
      if (l2.typeofstat = "MIN", l2.workingexpr = f7.expr, null === p6)
        throw new s2(t2.InvalidFunctionParameters, { function: "min" });
    } else if ("MAX" === u4) {
      if (l2.typeofstat = "MAX", l2.workingexpr = f7.expr, null === p6)
        throw new s2(t2.InvalidFunctionParameters, { function: "max" });
    } else if ("COUNT" === u4)
      l2.typeofstat = "COUNT", l2.workingexpr = f7.expr;
    else if ("STDEV" === u4) {
      if (l2.typeofstat = "STDDEV", l2.workingexpr = f7.expr, null === p6)
        throw new s2(t2.InvalidFunctionParameters, { function: "stdev" });
    } else if ("SUM" === u4) {
      if (l2.typeofstat = "SUM", l2.workingexpr = f7.expr, null === p6)
        throw new s2(t2.InvalidFunctionParameters, { function: "sum" });
    } else if ("MEAN" === u4) {
      if (l2.typeofstat = "AVG", l2.workingexpr = f7.expr, null === p6)
        throw new s2(t2.InvalidFunctionParameters, { function: u4 });
    } else if ("AVG" === u4) {
      if (l2.typeofstat = "AVG", l2.workingexpr = f7.expr, null === p6)
        throw new s2(t2.InvalidFunctionParameters, { function: "avg" });
    } else {
      if ("VAR" !== u4)
        throw new s2(t2.UnsupportedSqlFunction, { function: u4 });
      if (l2.typeofstat = "VAR", l2.workingexpr = f7.expr, null === p6)
        throw new s2(t2.InvalidFunctionParameters, { function: "var" });
    }
    return l2;
  }
  toStatisticsName() {
    switch (this.typeofstat.toUpperCase()) {
      case "MIN":
        return "min";
      case "MAX":
        return "max";
      case "SUM":
        return "sum";
      case "COUNT":
      default:
        return "count";
      case "VAR":
        return "var";
      case "STDDEV":
        return "stddev";
      case "AVG":
        return "avg";
    }
  }
};

// node_modules/@arcgis/core/arcade/featureset/actions/GroupBy.js
function j2(e3) {
  if (!e3)
    return "COUNT";
  switch (e3.toLowerCase()) {
    case "max":
      return "MAX";
    case "var":
    case "variance":
      return "VAR";
    case "avg":
    case "average":
    case "mean":
      return "AVG";
    case "min":
      return "MIN";
    case "sum":
      return "SUM";
    case "stdev":
    case "stddev":
      return "STDDEV";
    case "count":
      return "COUNT";
  }
  return "COUNT";
}
var C = class _C extends v {
  constructor(e3) {
    super(e3), this._decodedStatsfield = [], this._decodedGroupbyfield = [], this._candosimplegroupby = true, this.phsyicalgroupbyfields = [], this.objectIdField = "ROW__ID", this._internalObjectIdField = "ROW__ID", this._adaptedFields = [], this.declaredClass = "esri.arcade.featureset.actions.Aggregate", this._uniqueIds = 1, this._maxQuery = 10, this._maxProcessing = 10, this._parent = e3.parentfeatureset, this._config = e3;
  }
  isTable() {
    return true;
  }
  async _getSet(e3) {
    if (null === this._wset) {
      const t5 = await this._getFilteredSet("", null, null, null, e3);
      return this._wset = t5, this._wset;
    }
    return this._wset;
  }
  _isInFeatureSet() {
    return n2.InFeatureSet;
  }
  _nextUniqueName(e3) {
    for (; 1 === e3["T" + this._uniqueIds.toString()]; )
      this._uniqueIds++;
    const t5 = "T" + this._uniqueIds.toString();
    return e3[t5] = 1, t5;
  }
  _convertToEsriFieldType(e3) {
    return e3;
  }
  _initialiseFeatureSet() {
    const e3 = {};
    let t5 = false, n8 = 1;
    const r3 = this._parent ? this._parent.getFieldsIndex() : new r2([]);
    for (this.objectIdField = "ROW__ID", this.globalIdField = ""; false === t5; ) {
      let e4 = false;
      for (let t6 = 0; t6 < this._config.groupbyfields.length; t6++)
        if (this._config.groupbyfields[t6].name.toLowerCase() === this.objectIdField.toLowerCase()) {
          e4 = true;
          break;
        }
      if (false === e4) {
        for (let t6 = 0; t6 < this._config.statsfields.length; t6++)
          if (this._config.statsfields[t6].name.toLowerCase() === this.objectIdField.toLowerCase()) {
            e4 = true;
            break;
          }
      }
      false === e4 ? t5 = true : (this.objectIdField = "ROW__ID" + n8.toString(), n8++);
    }
    for (const i2 of this._config.statsfields) {
      const e4 = new a4();
      e4.field = i2.name, e4.tofieldname = i2.name, e4.workingexpr = i2.expression instanceof f2 ? i2.expression : f2.create(i2.expression, r3), e4.typeofstat = j2(i2.statistic), this._decodedStatsfield.push(e4);
    }
    this._decodedGroupbyfield = [];
    for (const i2 of this._config.groupbyfields) {
      const e4 = { name: i2.name, singlefield: null, tofieldname: i2.name, expression: i2.expression instanceof f2 ? i2.expression : f2.create(i2.expression, r3) };
      this._decodedGroupbyfield.push(e4);
    }
    if (null !== this._parent) {
      this.geometryType = this._parent.geometryType, this.spatialReference = this._parent.spatialReference, this.hasM = this._parent.hasM, this.hasZ = this._parent.hasZ, this.typeIdField = "";
      for (const t6 of this._parent.fields)
        e3[t6.name.toUpperCase()] = 1;
      this.types = null;
    } else
      this.geometryType = P.point, this.typeIdField = "", this.types = null, this.spatialReference = new f({ wkid: 4326 });
    this.fields = [];
    const a6 = new a4();
    a6.field = this._nextUniqueName(e3), a6.tofieldname = this.objectIdField, a6.workingexpr = f2.create(this._parent.objectIdField, this._parent.getFieldsIndex()), a6.typeofstat = "MIN", this._decodedStatsfield.push(a6);
    for (const s6 of this._decodedGroupbyfield) {
      const t6 = new y();
      if (s6.name = this._nextUniqueName(e3), t6.name = s6.tofieldname, t6.alias = t6.name, N2(s6.expression)) {
        const e4 = this._parent.getField(u3(s6.expression, i.Standardised));
        if (!e4)
          throw new o2(n3.AggregationFieldNotFound);
        s6.name = e4.name, s6.singlefield = e4.name, this.phsyicalgroupbyfields.push(e4.name), t6.type = e4.type;
      } else {
        t6.type = this._convertToEsriFieldType(S(s6.expression, this._parent.fields));
        const e4 = new y();
        e4.name = s6.name, e4.alias = e4.name, this.phsyicalgroupbyfields.push(s6.name), this._adaptedFields.push(new y2(e4, s6.expression)), this._candosimplegroupby = false;
      }
      this.fields.push(t6);
    }
    if (this._adaptedFields.length > 0)
      for (const i2 of this._parent.fields)
        this._adaptedFields.push(new A3(i2));
    for (let i2 = 0; i2 < this._decodedStatsfield.length; i2++) {
      const t6 = new y();
      let s6 = null;
      const n9 = this._decodedStatsfield[i2];
      n9.field = this._nextUniqueName(e3), n9.tofieldname === this.objectIdField && (this._internalObjectIdField = n9.field), t6.name = n9.tofieldname, t6.alias = t6.name;
      const r4 = null !== n9.workingexpr && N2(n9.workingexpr) ? u3(n9.workingexpr, i.Standardised) : "";
      switch (this._decodedStatsfield[i2].typeofstat) {
        case "SUM":
          if ("" !== r4) {
            if (s6 = this._parent.getField(r4), !s6)
              throw new o2(n3.AggregationFieldNotFound);
            t6.type = s6.type;
          } else
            t6.type = "double";
          break;
        case "MIN":
        case "MAX":
          if ("" !== r4) {
            if (s6 = this._parent.getField(r4), !s6)
              throw new o2(n3.AggregationFieldNotFound);
            t6.type = s6.type;
          } else
            t6.type = "double";
          break;
        case "COUNT":
          t6.type = "integer";
          break;
        case "STDDEV":
        case "VAR":
        case "AVG":
          if ("" !== r4 && (s6 = this._parent.getField(r4), !s6))
            throw new o2(n3.AggregationFieldNotFound);
          t6.type = "double";
      }
      this.fields.push(t6);
    }
  }
  async _canDoAggregates() {
    return false;
  }
  async _getFeatures(e3, t5, i2, s6) {
    -1 !== t5 && this._featureCache[t5];
    const n8 = this._maxQuery;
    return true === this._checkIfNeedToExpandKnownPage(e3, n8) ? (await this._expandPagedSet(e3, n8, 0, 0, s6), this._getFeatures(e3, t5, i2, s6)) : "success";
  }
  async _getFilteredSet(e3, t5, i2, s6, o4) {
    if ("" !== e3)
      return new t3([], [], true, null);
    let u4 = null;
    const f7 = { ordered: false, nowhereclause: false };
    if (await this._ensureLoaded(), null !== i2) {
      for (let n8 = 0; n8 < this._decodedStatsfield.length; n8++)
        if (true === A2(i2, this._decodedStatsfield[n8].tofieldname)) {
          f7.nowhereclause = true, i2 = null;
          break;
        }
    }
    if (null !== s6) {
      f7.ordered = true;
      for (let e4 = 0; e4 < this._decodedStatsfield.length; e4++)
        if (true === s6.scanForField(this._decodedStatsfield[e4].tofieldname)) {
          s6 = null, f7.ordered = false;
          break;
        }
      if (null !== s6) {
        for (const e4 of this._decodedGroupbyfield)
          if (null === e4.singlefield && true === s6.scanForField(e4.tofieldname)) {
            s6 = null, f7.ordered = false;
            break;
          }
      }
    }
    if (false !== this._candosimplegroupby && await this._parent._canDoAggregates(this.phsyicalgroupbyfields, this._decodedStatsfield, "", null, null)) {
      let e4 = null;
      i2 && (e4 = this._reformulateWhereClauseWithoutGroupByFields(i2));
      let t6 = null;
      s6 && (t6 = this._reformulateOrderClauseWithoutGroupByFields(s6));
      const n8 = await this._parent._getAggregatePagesDataSourceDefinition(this.phsyicalgroupbyfields, this._decodedStatsfield, "", null, e4, t6, this._internalObjectIdField);
      return this._checkCancelled(o4), u4 = true === f7.nowhereclause ? new t3(n8._candidates.slice(0).concat(n8._known.slice(0)), [], true === f7.ordered && n8._ordered, this._clonePageDefinition(n8.pagesDefinition)) : new t3(n8._candidates.slice(0), n8._known.slice(0), true === f7.ordered && n8._ordered, this._clonePageDefinition(n8.pagesDefinition)), u4;
    }
    let c5 = this._parent;
    if (this._adaptedFields.length > 0 && (c5 = new D({ parentfeatureset: this._parent, adaptedFields: this._adaptedFields, extraFilter: null })), true === f7.nowhereclause)
      u4 = new t3(["GETPAGES"], [], false, { aggregatefeaturesetpagedefinition: true, resultOffset: 0, resultRecordCount: this._maxQuery, internal: { fullyResolved: false, workingItem: null, type: "manual", iterator: null, set: [], subfeatureset: new a3({ parentfeatureset: c5, orderbyclause: new e2(this.phsyicalgroupbyfields.join(",") + "," + this._parent.objectIdField + " ASC") }) } });
    else {
      let e4 = c5;
      if (null !== i2) {
        let t6 = null;
        i2 && (t6 = this._reformulateWhereClauseWithoutGroupByFields(i2)), e4 = new c3({ parentfeatureset: e4, whereclause: t6 });
      }
      u4 = new t3(["GETPAGES"], [], false, { aggregatefeaturesetpagedefinition: true, resultOffset: 0, resultRecordCount: this._maxQuery, internal: { fullyResolved: false, workingItem: null, type: "manual", iterator: null, set: [], subfeatureset: new a3({ parentfeatureset: e4, orderbyclause: new e2(this.phsyicalgroupbyfields.join(",") + "," + this._parent.objectIdField + " ASC") }) } });
    }
    return u4;
  }
  _reformulateWhereClauseWithoutStatsFields(e3) {
    for (const t5 of this._decodedStatsfield)
      e3 = p4(e3, t5.tofieldname, u3(t5.workingexpr, i.Standardised), this._parent.getFieldsIndex());
    return e3;
  }
  _reformulateWhereClauseWithoutGroupByFields(e3) {
    for (const t5 of this._decodedGroupbyfield)
      t5.tofieldname !== t5.name && (e3 = p4(e3, t5.tofieldname, u3(t5.expression, i.Standardised), this._parent.getFieldsIndex()));
    return e3;
  }
  _reformulateOrderClauseWithoutGroupByFields(e3) {
    const t5 = [];
    for (const i2 of this._decodedGroupbyfield)
      i2.tofieldname !== i2.name && t5.push({ field: i2.tofieldname, newfield: i2.name });
    return t5.length > 0 ? e3.replaceFields(t5) : e3;
  }
  _clonePageDefinition(e3) {
    return null === e3 ? null : true === e3.aggregatefeaturesetpagedefinition ? { aggregatefeaturesetpagedefinition: true, resultRecordCount: e3.resultRecordCount, resultOffset: e3.resultOffset, internal: e3.internal } : this._parent._clonePageDefinition(e3);
  }
  async _refineSetBlock(e3, t5, i2) {
    if (true === this._checkIfNeedToExpandCandidatePage(e3, this._maxQuery))
      return await this._expandPagedSet(e3, this._maxQuery, 0, 0, i2), this._refineSetBlock(e3, t5, i2);
    this._checkCancelled(i2);
    const s6 = e3._candidates.length;
    this._refineKnowns(e3, t5);
    e3._candidates.length;
    return e3._candidates.length, e3;
  }
  _expandPagedSet(e3, t5, i2, s6, n8) {
    return this._expandPagedSetFeatureSet(e3, t5, i2, s6, n8);
  }
  async _getPhysicalPage(t5, i2, s6) {
    if (true === t5.pagesDefinition.aggregatefeaturesetpagedefinition)
      return this._sequentialGetPhysicalItem(t5, t5.pagesDefinition.resultRecordCount, s6, []);
    const n8 = await this._getAgregagtePhysicalPage(t5, i2, s6);
    for (const r3 of n8) {
      const t6 = { geometry: r3.geometry, attributes: {} }, i3 = {};
      for (const e3 in r3.attributes)
        i3[e3.toLowerCase()] = r3.attributes[e3];
      for (const e3 of this._decodedGroupbyfield)
        t6.attributes[e3.tofieldname] = i3[e3.name.toLowerCase()];
      for (const e3 of this._decodedStatsfield)
        t6.attributes[e3.tofieldname] = i3[e3.field.toLowerCase()];
      this._featureCache[t6.attributes[this.objectIdField]] = new h(t6);
    }
    return n8.length;
  }
  _sequentialGetPhysicalItem(e3, t5, i2, s6) {
    return new Promise((n8, r3) => {
      null === e3.pagesDefinition.internal.iterator && (e3.pagesDefinition.internal.iterator = e3.pagesDefinition.internal.subfeatureset.iterator(i2)), true === e3.pagesDefinition.internal.fullyResolved || 0 === t5 ? n8(s6.length) : this._nextAggregateItem(e3, t5, i2, s6, (r4) => {
        null === r4 ? n8(s6.length) : (t5 -= 1, n8(this._sequentialGetPhysicalItem(e3, t5, i2, s6)));
      }, r3);
    });
  }
  _nextAggregateItem(e3, i2, s6, n8, r3, a6) {
    try {
      Fe(e3.pagesDefinition.internal.iterator.next()).then((t5) => {
        if (null === t5)
          if (null !== e3.pagesDefinition.internal.workingItem) {
            const t6 = this._calculateAndAppendAggregateItem(e3.pagesDefinition.internal.workingItem);
            n8.push(t6), e3.pagesDefinition.internal.workingItem = null, e3.pagesDefinition.internal.set.push(t6.attributes[this.objectIdField]), e3.pagesDefinition.internal.fullyResolved = true, r3(null);
          } else
            e3.pagesDefinition.internal.fullyResolved = true, r3(null);
        else {
          const o4 = this._generateAggregateHash(t5);
          if (null === e3.pagesDefinition.internal.workingItem)
            e3.pagesDefinition.internal.workingItem = { features: [t5], id: o4 };
          else {
            if (o4 !== e3.pagesDefinition.internal.workingItem.id) {
              const s7 = this._calculateAndAppendAggregateItem(e3.pagesDefinition.internal.workingItem);
              return n8.push(s7), e3.pagesDefinition.internal.workingItem = null, e3.pagesDefinition.internal.set.push(s7.attributes[this.objectIdField]), i2 -= 1, e3.pagesDefinition.internal.workingItem = { features: [t5], id: o4 }, void r3(s7);
            }
            e3.pagesDefinition.internal.workingItem.features.push(t5);
          }
          this._nextAggregateItem(e3, i2, s6, n8, r3, a6);
        }
      }, a6);
    } catch (o4) {
      a6(o4);
    }
  }
  _calculateFieldStat(e3, t5, i2) {
    const s6 = [];
    for (let n8 = 0; n8 < e3.features.length; n8++)
      if (null !== t5.workingexpr) {
        const i3 = t5.workingexpr.calculateValue(e3.features[n8]);
        null !== i3 && s6.push(i3);
      } else
        s6.push(null);
    switch (t5.typeofstat) {
      case "MIN":
        i2.attributes[t5.tofieldname] = g2("min", s6, -1);
        break;
      case "MAX":
        i2.attributes[t5.tofieldname] = g2("max", s6, -1);
        break;
      case "SUM":
        i2.attributes[t5.tofieldname] = g2("sum", s6, -1);
        break;
      case "COUNT":
        i2.attributes[t5.tofieldname] = s6.length;
        break;
      case "VAR":
        i2.attributes[t5.tofieldname] = g2("var", s6, -1);
        break;
      case "STDDEV":
        i2.attributes[t5.tofieldname] = g2("stddev", s6, -1);
        break;
      case "AVG":
        i2.attributes[t5.tofieldname] = g2("avg", s6, -1);
    }
    return true;
  }
  _calculateAndAppendAggregateItem(t5) {
    const i2 = { attributes: {}, geometry: null };
    for (const e3 of this._decodedGroupbyfield) {
      const s7 = e3.singlefield ? t5.features[0].attributes[e3.singlefield] : e3.expression.calculateValue(t5.features[0]);
      i2.attributes[e3.tofieldname] = s7;
    }
    for (const e3 of this._decodedStatsfield)
      this._calculateFieldStat(t5, e3, i2);
    const s6 = [];
    for (let e3 = 0; e3 < this._decodedStatsfield.length; e3++)
      s6.push(this._calculateFieldStat(t5, this._decodedStatsfield[e3], i2));
    return this._featureCache[i2.attributes[this.objectIdField]] = new h({ attributes: i2.attributes, geometry: i2.geometry }), i2;
  }
  _generateAggregateHash(e3) {
    let t5 = "";
    for (const i2 of this._decodedGroupbyfield) {
      const s6 = i2.singlefield ? e3.attributes[i2.singlefield] : i2.expression.calculateValue(e3);
      t5 += null == s6 ? ":" : ":" + s6.toString();
    }
    return x3(t5, n4.String);
  }
  async _stat() {
    return { calculated: false };
  }
  async getFeatureByObjectId() {
    return null;
  }
  static registerAction() {
    v._featuresetFunctions.groupby = function(e3, t5) {
      return new _C({ parentfeatureset: this, groupbyfields: e3, statsfields: t5 });
    };
  }
};

// node_modules/@arcgis/core/arcade/featureset/actions/Top.js
var a5 = class _a extends v {
  constructor(t5) {
    super(t5), this._topnum = 0, this.declaredClass = "esri.arcade.featureset.actions.Top", this._countedin = 0, this._maxProcessing = 100, this._topnum = t5.topnum, this._parent = t5.parentfeatureset;
  }
  async _getSet(t5) {
    if (null === this._wset) {
      await this._ensureLoaded();
      const e3 = await this._parent._getSet(t5);
      return this._wset = new t3(e3._candidates.slice(0), e3._known.slice(0), false, this._clonePageDefinition(e3.pagesDefinition)), this._setKnownLength(this._wset) > this._topnum && (this._wset._known = this._wset._known.slice(0, this._topnum)), this._setKnownLength(this._wset) >= this._topnum && (this._wset._candidates = []), this._wset;
    }
    return this._wset;
  }
  _setKnownLength(t5) {
    return t5._known.length > 0 && "GETPAGES" === t5._known[t5._known.length - 1] ? t5._known.length - 1 : t5._known.length;
  }
  _isInFeatureSet(t5) {
    const e3 = this._parent._isInFeatureSet(t5);
    if (e3 === n2.NotInFeatureSet)
      return e3;
    const n8 = this._idstates[t5];
    return n8 === n2.InFeatureSet || n8 === n2.NotInFeatureSet ? n8 : e3 === n2.InFeatureSet && void 0 === n8 ? this._countedin < this._topnum ? (this._idstates[t5] = n2.InFeatureSet, this._countedin++, n2.InFeatureSet) : (this._idstates[t5] = n2.NotInFeatureSet, n2.NotInFeatureSet) : n2.Unknown;
  }
  async _expandPagedSet(n8, s6, i2, a6, o4) {
    if (null === this._parent)
      throw new o2(n3.NotImplemented);
    if (s6 > this._topnum && (s6 = this._topnum), this._countedin >= this._topnum && n8.pagesDefinition.internal.set.length <= n8.pagesDefinition.resultOffset) {
      let t5 = n8._known.length;
      return t5 > 0 && "GETPAGES" === n8._known[t5 - 1] && (n8._known.length = t5 - 1), t5 = n8._candidates.length, t5 > 0 && "GETPAGES" === n8._candidates[t5 - 1] && (n8._candidates.length = t5 - 1), "success";
    }
    const r3 = await this._parent._expandPagedSet(n8, s6, i2, a6, o4);
    return this._setKnownLength(n8) > this._topnum && (n8._known.length = this._topnum), this._setKnownLength(n8) >= this._topnum && (n8._candidates.length = 0), r3;
  }
  async _getFeatures(t5, e3, n8, i2) {
    const a6 = [], o4 = this._maxQueryRate();
    if (true === this._checkIfNeedToExpandKnownPage(t5, o4))
      return await this._expandPagedSet(t5, o4, 0, 0, i2), this._getFeatures(t5, e3, n8, i2);
    -1 !== e3 && void 0 === this._featureCache[e3] && a6.push(e3);
    let r3 = 0;
    for (let s6 = t5._lastFetchedIndex; s6 < t5._known.length && (r3++, r3 <= n8 && (t5._lastFetchedIndex += 1), !(void 0 === this._featureCache[t5._known[s6]] && (t5._known[s6] !== e3 && a6.push(t5._known[s6]), a6.length > o4))); s6++)
      ;
    if (0 === a6.length)
      return "success";
    const _ = new t3([], a6, false, null), h3 = Math.min(a6.length, n8);
    await this._parent._getFeatures(_, -1, h3, i2);
    for (let s6 = 0; s6 < h3; s6++) {
      const t6 = this._parent._featureFromCache(a6[s6]);
      void 0 !== t6 && (this._featureCache[a6[s6]] = t6);
    }
    return "success";
  }
  async _getFilteredSet(t5, e3, n8, i2, a6) {
    await this._ensureLoaded();
    const o4 = await this._getSet(a6);
    return new t3(o4._candidates.slice(0).concat(o4._known.slice(0)), [], false, this._clonePageDefinition(o4.pagesDefinition));
  }
  _refineKnowns(t5, e3) {
    let n8 = 0, s6 = null;
    const a6 = [];
    for (let o4 = 0; o4 < t5._candidates.length; o4++) {
      const r3 = this._isInFeatureSet(t5._candidates[o4]);
      if (r3 === n2.InFeatureSet) {
        if (t5._known.push(t5._candidates[o4]), n8 += 1, null === s6 ? s6 = { start: o4, end: o4 } : s6.end === o4 - 1 ? s6.end = o4 : (a6.push(s6), s6 = { start: o4, end: o4 }), t5._known.length >= this._topnum)
          break;
      } else if (r3 === n2.NotInFeatureSet)
        null === s6 ? s6 = { start: o4, end: o4 } : s6.end === o4 - 1 ? s6.end = o4 : (a6.push(s6), s6 = { start: o4, end: o4 }), n8 += 1;
      else if (r3 === n2.Unknown)
        break;
      if (n8 >= e3)
        break;
    }
    null !== s6 && a6.push(s6);
    for (let i2 = a6.length - 1; i2 >= 0; i2--)
      t5._candidates.splice(a6[i2].start, a6[i2].end - a6[i2].start + 1);
    this._setKnownLength(t5) > this._topnum && (t5._known = t5._known.slice(0, this._topnum)), this._setKnownLength(t5) >= this._topnum && (t5._candidates = []);
  }
  async _stat() {
    return { calculated: false };
  }
  async _canDoAggregates() {
    return false;
  }
  static registerAction() {
    v._featuresetFunctions.top = function(t5) {
      return new _a({ parentfeatureset: this, topnum: t5 });
    };
  }
};

// node_modules/@arcgis/core/rest/query/executeQuery.js
async function f5(t5, o4, r3, e3) {
  return m4(o4, await c4(t5, o4, r3, e3), r3, e3);
}
async function c4(t5, o4, r3, e3) {
  var _a;
  const n8 = { ...e3 }, i2 = p5(o4, r3), u4 = null != ((_a = o4.outStatistics) == null ? void 0 : _a[0]), f7 = has("featurelayer-pbf-statistics"), c5 = !u4 || f7;
  let m5;
  if ("pbf" === (r3 == null ? void 0 : r3.format) && c5)
    try {
      m5 = await n7(t5, i2, n8);
    } catch (d5) {
      if ("query:parsing-pbf" !== d5.name)
        throw d5;
      r3.format = "json";
    }
  return "json" !== (r3 == null ? void 0 : r3.format) && c5 || (m5 = await a(t5, i2, n8)), l(r3 == null ? void 0 : r3.fieldsIndex, m5.fields), m5;
}
function l(t5, o4) {
  if (null != t5 && null != o4)
    for (const r3 of o4) {
      const o5 = t5.get(r3.name);
      o5 && Object.assign(r3, o5.toJSON());
    }
}
async function m4(t5, r3, e3, n8) {
  const s6 = e3 == null ? void 0 : e3.infoFor3D;
  if (!(d3(t5, s6) && null != s6 && r3.assetMaps && r3.features && r3.features.length))
    return d.fromJSON(r3);
  const { meshFeatureSetFromJSON: a6 } = await p(import("./meshFeatureSet-GVZ3G46F.js"), n8);
  return a6(t5, s6, r3);
}
function p5(o4, s6) {
  let a6 = b.from(o4);
  a6.sourceSpatialReference = a6.sourceSpatialReference ?? (s6 == null ? void 0 : s6.sourceSpatialReference) ?? null, ((s6 == null ? void 0 : s6.gdbVersion) || (s6 == null ? void 0 : s6.dynamicDataSource)) && (a6 = a6 === o4 ? a6.clone() : a6, a6.gdbVersion = o4.gdbVersion || s6.gdbVersion, a6.dynamicDataSource = o4.dynamicDataSource ? K.from(o4.dynamicDataSource) : s6.dynamicDataSource);
  const i2 = s6 == null ? void 0 : s6.infoFor3D;
  if (null != i2 && d3(o4, i2)) {
    a6 = a6 === o4 ? a6.clone() : a6, a6.formatOf3DObjects = null;
    const { supportedFormats: n8, queryFormats: s7 } = i2, u4 = o3("model/gltf-binary", n8) ?? u2("glb", n8), f7 = o3("model/gltf+json", n8) ?? u2("gtlf", n8);
    for (const t5 of s7) {
      if (t5 === u4) {
        a6.formatOf3DObjects = t5;
        break;
      }
      t5 !== f7 || a6.formatOf3DObjects || (a6.formatOf3DObjects = t5);
    }
    if (!a6.formatOf3DObjects)
      throw new s("query:unsupported-3d-query-formats", "Could not find any supported 3D object query format. Only supported formats are 3D_glb and 3D_gltf");
    if (null == a6.outFields || !a6.outFields.includes("*")) {
      a6 = a6 === o4 ? a6.clone() : a6, null == a6.outFields && (a6.outFields = []);
      const { originX: t5, originY: r3, originZ: e3, translationX: n9, translationY: s8, translationZ: u5, scaleX: f8, scaleY: c5, scaleZ: l2, rotationX: m5, rotationY: p6, rotationZ: d5, rotationDeg: y3 } = i2.transformFieldRoles;
      a6.outFields.push(t5, r3, e3, n9, s8, u5, f8, c5, l2, m5, p6, d5, y3);
    }
  }
  return a6;
}
function d3(t5, o4) {
  return null != o4 && true === t5.returnGeometry && "xyFootprint" !== t5.multipatchOption && !t5.outStatistics;
}

// node_modules/@arcgis/core/arcade/featureset/sources/FeatureLayerDynamic.js
var C2 = class _C extends v {
  constructor(e3) {
    super(e3), this.declaredClass = "esri.arcade.featureset.sources.FeatureLayerDynamic", this._removeGeometry = false, this._overrideFields = null, this.formulaCredential = null, this._pageJustIds = false, this._requestStandardised = false, this._useDefinitionExpression = true, this._cachedDateMetaData = {}, e3.spatialReference && (this.spatialReference = e3.spatialReference), this._transparent = true, this._maxProcessing = 1e3, this._layer = e3.layer, this._wset = null, void 0 !== e3.outFields && (this._overrideFields = e3.outFields), void 0 !== e3.includeGeometry && (this._removeGeometry = false === e3.includeGeometry);
  }
  _maxQueryRate() {
    return T2;
  }
  end() {
    return this._layer;
  }
  optimisePagingFeatureQueries(e3) {
    this._pageJustIds = e3;
  }
  get urlQueryPath() {
    return this._layer.parsedUrl.path || "";
  }
  convertQueryToLruCacheKey(e3) {
    const t5 = this.urlQueryPath + "," + N(e3.toJSON());
    return x3(t5, n4.String);
  }
  async loadImpl() {
    return true === this._layer.loaded ? (this._initialiseFeatureSet(), this) : (await this._layer.load(), this._initialiseFeatureSet(), this);
  }
  _initialiseFeatureSet() {
    var _a, _b, _c, _d, _e, _f;
    if (null == this.spatialReference && (this.spatialReference = this._layer.spatialReference), this.geometryType = this._layer.geometryType, this.fields = this._layer.fields.slice(0), this.hasZ = true === ((_c = (_b = (_a = this._layer) == null ? void 0 : _a.capabilities) == null ? void 0 : _b.data) == null ? void 0 : _c.supportsZ), this.hasM = true === ((_f = (_e = (_d = this._layer) == null ? void 0 : _d.capabilities) == null ? void 0 : _e.data) == null ? void 0 : _f.supportsM), null !== this._overrideFields)
      if (1 === this._overrideFields.length && "*" === this._overrideFields[0])
        this._overrideFields = null;
      else {
        const e3 = [], t5 = [];
        for (const i2 of this.fields)
          if ("oid" === i2.type)
            e3.push(i2), t5.push(i2.name);
          else
            for (const r3 of this._overrideFields)
              if (r3.toLowerCase() === i2.name.toLowerCase()) {
                e3.push(i2), t5.push(i2.name);
                break;
              }
        this.fields = e3, this._overrideFields = t5;
      }
    if (this._layer.source && this._layer.source.sourceJSON) {
      const e3 = this._layer.source.sourceJSON.currentVersion;
      true === this._layer.source.sourceJSON.useStandardizedQueries ? (this._databaseType = i.StandardisedNoInterval, null != e3 && e3 >= 10.61 && (this._databaseType = i.Standardised)) : null != e3 && (e3 >= 10.5 && (this._databaseType = i.StandardisedNoInterval, this._requestStandardised = true), e3 >= 10.61 && (this._databaseType = i.Standardised));
    }
    this.objectIdField = this._layer.objectIdField;
    for (const e3 of this.fields)
      "global-id" === e3.type && (this.globalIdField = e3.name);
    this._layer instanceof oe ? (this.typeIdField = this._layer.subtypeField ?? "", this.types = this._layer.subtypes) : (this.typeIdField = this._layer.typeIdField ?? "", this.types = this._layer.types);
  }
  _isInFeatureSet() {
    return n2.InFeatureSet;
  }
  async _refineSetBlock(e3) {
    return e3;
  }
  _candidateIdTransform(e3) {
    return e3;
  }
  async _getSet(e3) {
    if (null === this._wset) {
      await this._ensureLoaded();
      const t5 = await this._getFilteredSet("", null, null, null, e3);
      return this._wset = t5, t5;
    }
    return this._wset;
  }
  async _runDatabaseProbe(e3) {
    await this._ensureLoaded();
    const t5 = new b();
    this.datesInUnknownTimezone && (t5.timeReferenceUnknownClient = true), t5.where = e3.replace("OBJECTID", this._layer.objectIdField);
    try {
      return await this._layer.queryObjectIds(t5), true;
    } catch (i2) {
      return false;
    }
  }
  _canUsePagination() {
    return !(!this._layer.capabilities || !this._layer.capabilities.query || true !== this._layer.capabilities.query.supportsPagination);
  }
  _cacheableFeatureSetSourceKey() {
    return this._layer.url;
  }
  pbfSupportedForQuery(e3) {
    var _a, _b;
    const t5 = (_b = (_a = this._layer) == null ? void 0 : _a.capabilities) == null ? void 0 : _b.query;
    return !e3.outStatistics && true === (t5 == null ? void 0 : t5.supportsFormatPBF) && true === (t5 == null ? void 0 : t5.supportsQuantizationEditMode);
  }
  async queryPBF(e3) {
    return e3.quantizationParameters = { mode: "edit" }, (await f5(this._layer.parsedUrl, e3, { format: "pbf" }, {})).unquantize();
  }
  get gdbVersion() {
    return this._layer && this._layer.capabilities && this._layer.capabilities.data && this._layer.capabilities.data.isVersioned ? this._layer.gdbVersion || "SDE.DEFAULT" : "";
  }
  nativeCapabilities() {
    return { title: this._layer.title ?? "", source: this, canQueryRelated: true, capabilities: this._layer.capabilities, databaseType: this._databaseType, requestStandardised: this._requestStandardised };
  }
  executeQuery(e3, t5) {
    e3.returnZ = this.hasZ, e3.returnM = this.hasM;
    const i2 = "execute" === t5 ? s4 : "executeForCount" === t5 ? n6 : s3, r3 = "execute" === t5 && this.pbfSupportedForQuery(e3);
    let s6 = null;
    if (this.recentlyUsedQueries) {
      const t6 = this.convertQueryToLruCacheKey(e3);
      s6 = this.recentlyUsedQueries.getFromCache(t6), null === s6 && (s6 = true !== r3 ? i2(this._layer.parsedUrl.path, e3) : this.queryPBF(e3), this.recentlyUsedQueries.addToCache(t6, s6), s6 = s6.catch((e4) => {
        var _a;
        throw (_a = this.recentlyUsedQueries) == null ? void 0 : _a.removeFromCache(t6), e4;
      }));
    }
    return this.featureSetQueryInterceptor && this.featureSetQueryInterceptor.preLayerQueryCallback({ layer: this._layer, query: e3, method: t5 }), null === s6 && (s6 = true !== r3 ? i2(this._layer.parsedUrl.path, e3) : this.queryPBF(e3)), s6;
  }
  async _getFilteredSet(e3, t5, i2, r3, a6) {
    const n8 = await this.databaseType();
    if (this.isTable() && t5 && null !== e3 && "" !== e3) {
      return new t3([], [], true, null);
    }
    if (this._canUsePagination())
      return this._getFilteredSetUsingPaging(e3, t5, i2, r3, a6);
    let l2 = "", o4 = false;
    null !== r3 && this._layer.capabilities && this._layer.capabilities.query && true === this._layer.capabilities.query.supportsOrderBy && (l2 = r3.constructClause(), o4 = true);
    const u4 = new b();
    this.datesInUnknownTimezone && (u4.timeReferenceUnknownClient = true), u4.where = null === i2 ? null === t5 ? "1=1" : "" : u3(i2, n8), this._requestStandardised && (u4.sqlFormat = "standard"), u4.spatialRelationship = this._makeRelationshipEnum(e3), u4.outSpatialReference = this.spatialReference, u4.orderByFields = "" !== l2 ? l2.split(",") : null, u4.geometry = null === t5 ? null : t5, u4.relationParameter = this._makeRelationshipParam(e3);
    let c5 = await this.executeQuery(u4, "executeForIds");
    null === c5 && (c5 = []), this._checkCancelled(a6);
    return new t3([], c5, o4, null);
  }
  _expandPagedSet(e3, t5, i2, r3, s6) {
    return this._expandPagedSetFeatureSet(e3, t5, i2, r3, s6);
  }
  async _getFilteredSetUsingPaging(e3, t5, i2, r3, a6) {
    var _a;
    let n8 = "", l2 = false;
    null !== r3 && this._layer.capabilities && this._layer.capabilities.query && true === this._layer.capabilities.query.supportsOrderBy && (n8 = r3.constructClause(), l2 = true);
    const o4 = await this.databaseType();
    let u4 = null === i2 ? null === t5 ? "1=1" : "" : u3(i2, o4);
    this._layer.definitionExpression && this._useDefinitionExpression && (u4 = "" !== u4 ? "((" + this._layer.definitionExpression + ") AND (" + u4 + "))" : this._layer.definitionExpression);
    let c5 = this._maxQueryRate();
    const h3 = (_a = this._layer.capabilities) == null ? void 0 : _a.query.maxRecordCount;
    null != h3 && h3 < c5 && (c5 = h3);
    let p6 = null;
    if (true === this._pageJustIds)
      p6 = new t3([], ["GETPAGES"], l2, { spatialRel: this._makeRelationshipEnum(e3), relationParam: this._makeRelationshipParam(e3), outFields: this._layer.objectIdField, resultRecordCount: c5, resultOffset: 0, geometry: null === t5 ? null : t5, where: u4, orderByFields: n8, returnGeometry: false, returnIdsOnly: "false", internal: { set: [], lastRetrieved: 0, lastPage: 0, fullyResolved: false } });
    else {
      let i3 = true;
      true === this._removeGeometry && (i3 = false);
      const r4 = this._overrideFields ?? this._fieldsIncludingObjectId(["*"]);
      p6 = new t3([], ["GETPAGES"], l2, { spatialRel: this._makeRelationshipEnum(e3), relationParam: this._makeRelationshipParam(e3), outFields: r4.join(","), resultRecordCount: c5, resultOffset: 0, geometry: null === t5 ? null : t5, where: u4, orderByFields: n8, returnGeometry: i3, returnIdsOnly: "false", internal: { set: [], lastRetrieved: 0, lastPage: 0, fullyResolved: false } });
    }
    return await this._expandPagedSet(p6, c5, 0, 1, a6), p6;
  }
  _clonePageDefinition(e3) {
    return null === e3 ? null : true !== e3.groupbypage ? { groupbypage: false, spatialRel: e3.spatialRel, relationParam: e3.relationParam, outFields: e3.outFields, resultRecordCount: e3.resultRecordCount, resultOffset: e3.resultOffset, geometry: e3.geometry, where: e3.where, orderByFields: e3.orderByFields, returnGeometry: e3.returnGeometry, returnIdsOnly: e3.returnIdsOnly, internal: e3.internal } : { groupbypage: true, spatialRel: e3.spatialRel, relationParam: e3.relationParam, outFields: e3.outFields, resultRecordCount: e3.resultRecordCount, useOIDpagination: e3.useOIDpagination, generatedOid: e3.generatedOid, groupByFieldsForStatistics: e3.groupByFieldsForStatistics, resultOffset: e3.resultOffset, outStatistics: e3.outStatistics, geometry: e3.geometry, where: e3.where, orderByFields: e3.orderByFields, returnGeometry: e3.returnGeometry, returnIdsOnly: e3.returnIdsOnly, internal: e3.internal };
  }
  async _getPhysicalPage(e3, t5, i2) {
    const r3 = e3.pagesDefinition.internal.lastRetrieved, s6 = r3, a6 = e3.pagesDefinition.internal.lastPage, n8 = new b();
    this._requestStandardised && (n8.sqlFormat = "standard"), this.datesInUnknownTimezone && (n8.timeReferenceUnknownClient = true), n8.spatialRelationship = e3.pagesDefinition.spatialRel, n8.relationParameter = e3.pagesDefinition.relationParam, n8.outFields = e3.pagesDefinition.outFields.split(","), n8.num = e3.pagesDefinition.resultRecordCount, n8.start = e3.pagesDefinition.internal.lastPage, n8.geometry = e3.pagesDefinition.geometry, n8.where = e3.pagesDefinition.where, n8.orderByFields = "" !== e3.pagesDefinition.orderByFields ? e3.pagesDefinition.orderByFields.split(",") : null, n8.returnGeometry = e3.pagesDefinition.returnGeometry, n8.outSpatialReference = this.spatialReference;
    const l2 = await this.executeQuery(n8, "execute");
    if (this._checkCancelled(i2), e3.pagesDefinition.internal.lastPage !== a6)
      return "done";
    const o4 = this._layer.objectIdField;
    for (let u4 = 0; u4 < l2.features.length; u4++)
      e3.pagesDefinition.internal.set[s6 + u4] = l2.features[u4].attributes[o4];
    if (false === this._pageJustIds)
      for (let u4 = 0; u4 < l2.features.length; u4++)
        this._featureCache[l2.features[u4].attributes[o4]] = l2.features[u4];
    return (void 0 === l2.exceededTransferLimit && l2.features.length !== e3.pagesDefinition.resultRecordCount || false === l2.exceededTransferLimit) && (e3.pagesDefinition.internal.fullyResolved = true), e3.pagesDefinition.internal.lastRetrieved = r3 + l2.features.length, e3.pagesDefinition.internal.lastPage += e3.pagesDefinition.resultRecordCount, "done";
  }
  _fieldsIncludingObjectId(e3) {
    if (null === e3)
      return [this.objectIdField];
    const t5 = e3.slice(0);
    if (t5.includes("*"))
      return t5;
    let i2 = false;
    for (const r3 of t5)
      if (r3.toUpperCase() === this.objectIdField.toUpperCase()) {
        i2 = true;
        break;
      }
    return false === i2 && t5.push(this.objectIdField), t5;
  }
  async _getFeatures(e3, t5, i2, r3) {
    const s6 = [];
    if (-1 !== t5 && void 0 === this._featureCache[t5] && s6.push(t5), true === this._checkIfNeedToExpandKnownPage(e3, this._maxProcessingRate()))
      return await this._expandPagedSet(e3, this._maxProcessingRate(), 0, 0, r3), this._getFeatures(e3, t5, i2, r3);
    let a6 = 0;
    for (let u4 = e3._lastFetchedIndex; u4 < e3._known.length; u4++) {
      if (e3._lastFetchedIndex += 1, a6++, void 0 === this._featureCache[e3._known[u4]]) {
        let i3 = false;
        if (null !== this._layer._mode && void 0 !== this._layer._mode) {
          const t6 = this._layer._mode;
          if (void 0 !== t6._featureMap[e3._known[u4]]) {
            const r4 = t6._featureMap[e3._known[u4]];
            null !== r4 && (i3 = true, this._featureCache[e3._known[u4]] = r4);
          }
        }
        if (false === i3 && (e3._known[u4] !== t5 && s6.push(e3._known[u4]), s6.length >= this._maxProcessingRate() - 1))
          break;
      }
      if (a6 >= i2 && 0 === s6.length)
        break;
    }
    if (0 === s6.length)
      return "success";
    const n8 = new b();
    this._requestStandardised && (n8.sqlFormat = "standard"), this.datesInUnknownTimezone && (n8.timeReferenceUnknownClient = true), n8.objectIds = s6, n8.outFields = this._overrideFields ?? this._fieldsIncludingObjectId(["*"]), n8.returnGeometry = true, true === this._removeGeometry && (n8.returnGeometry = false), n8.outSpatialReference = this.spatialReference;
    const l2 = await this.executeQuery(n8, "execute");
    if (this._checkCancelled(r3), void 0 !== l2.error)
      throw new o2(n3.RequestFailed, { reason: l2.error });
    const o4 = this._layer.objectIdField;
    for (let u4 = 0; u4 < l2.features.length; u4++)
      this._featureCache[l2.features[u4].attributes[o4]] = l2.features[u4];
    return "success";
  }
  async _getDistinctPages(e3, t5, i2, r3, s6, a6, n8, l2, o4) {
    var _a;
    await this._ensureLoaded();
    const u4 = await this.databaseType();
    let c5 = i2.parseTree.column;
    const h3 = this._layer.fields ?? [];
    for (let d5 = 0; d5 < h3.length; d5++)
      if (h3[d5].name.toLowerCase() === c5.toLowerCase()) {
        c5 = h3[d5].name;
        break;
      }
    const p6 = new b();
    this._requestStandardised && (p6.sqlFormat = "standard"), this.datesInUnknownTimezone && (p6.timeReferenceUnknownClient = true);
    let y3 = null === a6 ? null === s6 ? "1=1" : "" : u3(a6, u4);
    this._layer.definitionExpression && this._useDefinitionExpression && (y3 = "" !== y3 ? "((" + this._layer.definitionExpression + ") AND (" + y3 + "))" : this._layer.definitionExpression), p6.where = y3, p6.spatialRelationship = this._makeRelationshipEnum(r3), p6.relationParameter = this._makeRelationshipParam(r3), p6.geometry = null === s6 ? null : s6, p6.returnDistinctValues = true, p6.returnGeometry = false, p6.outFields = [c5];
    const f7 = await this.executeQuery(p6, "execute");
    if (this._checkCancelled(o4), !f7.hasOwnProperty("features"))
      throw new o2(n3.InvalidStatResponse);
    let m5 = false;
    for (let d5 = 0; d5 < h3.length; d5++)
      if (h3[d5].name === c5) {
        "date" === h3[d5].type && (m5 = true);
        break;
      }
    for (let d5 = 0; d5 < f7.features.length; d5++) {
      if (m5) {
        const e4 = f7.features[d5].attributes[c5];
        null !== e4 ? l2.push(new Date(e4)) : l2.push(e4);
      } else
        l2.push(f7.features[d5].attributes[c5]);
      if (l2.length >= n8)
        break;
    }
    if (0 === f7.features.length)
      return l2;
    if (f7.features.length === ((_a = this._layer.capabilities) == null ? void 0 : _a.query.maxRecordCount) && l2.length < n8) {
      return { calculated: true, result: await this._getDistinctPages(e3 + f7.features.length, t5, i2, r3, s6, a6, n8, l2, o4) };
    }
    return l2;
  }
  async _distinctStat(e3, t5, i2, r3, s6, a6, n8) {
    return { calculated: true, result: await this._getDistinctPages(0, e3, t5, i2, r3, s6, a6, [], n8) };
  }
  isTable() {
    return this._layer.isTable || null === this._layer.geometryType || "table" === this._layer.type || "" === this._layer.geometryType || "esriGeometryNull" === this._layer.geometryType;
  }
  async _countstat(e3, t5, i2, r3) {
    const s6 = await this.databaseType(), a6 = new b();
    if (this._requestStandardised && (a6.sqlFormat = "standard"), this.isTable() && i2 && null !== t5 && "" !== t5)
      return { calculated: true, result: 0 };
    let n8 = null === r3 ? null === i2 ? "1=1" : "" : u3(r3, s6);
    this._layer.definitionExpression && this._useDefinitionExpression && (n8 = "" !== n8 ? "((" + this._layer.definitionExpression + ") AND (" + n8 + "))" : this._layer.definitionExpression), a6.where = n8, this.datesInUnknownTimezone && (a6.timeReferenceUnknownClient = true), a6.where = n8, a6.spatialRelationship = this._makeRelationshipEnum(t5), a6.relationParameter = this._makeRelationshipParam(t5), a6.geometry = null === i2 ? null : i2, a6.returnGeometry = false;
    return { calculated: true, result: await this.executeQuery(a6, "executeForCount") };
  }
  async _stats(e3, t5, i2, r3, s6, a6, n8) {
    await this._ensureLoaded();
    const l2 = this._layer.capabilities && this._layer.capabilities.query && true === this._layer.capabilities.query.supportsSqlExpression, o4 = this._layer.capabilities && this._layer.capabilities.query && true === this._layer.capabilities.query.supportsStatistics, u4 = this._layer.capabilities && this._layer.capabilities.query && true === this._layer.capabilities.query.supportsDistinct;
    if ("count" === e3)
      return u4 ? this._countstat(e3, i2, r3, s6) : { calculated: false };
    if (false === o4 || false === N2(t5) && false === l2 || false === t5.isStandardized)
      return "" !== i2 || null !== s6 ? { calculated: false } : this._manualStat(e3, t5, a6, n8);
    if ("distinct" === e3)
      return false === u4 ? "" !== i2 || null !== s6 ? { calculated: false } : this._manualStat(e3, t5, a6, n8) : this._distinctStat(e3, t5, i2, r3, s6, a6, n8);
    const p6 = await this.databaseType();
    if (this.isTable() && r3 && null !== i2 && "" !== i2)
      return { calculated: true, result: null };
    const y3 = new b();
    this._requestStandardised && (y3.sqlFormat = "standard");
    let f7 = null === s6 ? null === r3 ? "1=1" : "" : u3(s6, p6);
    this._layer.definitionExpression && this._useDefinitionExpression && (f7 = "" !== f7 ? "((" + this._layer.definitionExpression + ") AND (" + f7 + "))" : this._layer.definitionExpression), y3.where = f7, y3.spatialRelationship = this._makeRelationshipEnum(i2), y3.relationParameter = this._makeRelationshipParam(i2), y3.geometry = null === r3 ? null : r3, this.datesInUnknownTimezone && (y3.timeReferenceUnknownClient = true);
    const m5 = new m();
    m5.statisticType = m3(e3), m5.onStatisticField = u3(t5, p6), m5.outStatisticFieldName = "ARCADE_STAT_RESULT", y3.returnGeometry = false;
    let _ = "ARCADE_STAT_RESULT";
    y3.outStatistics = [m5];
    const g4 = await this.executeQuery(y3, "execute");
    if (!g4.hasOwnProperty("features") || 0 === g4.features.length)
      throw new o2(n3.InvalidStatResponse);
    let R2 = false;
    const S3 = g4.fields ?? [];
    for (let d5 = 0; d5 < S3.length; d5++)
      if ("ARCADE_STAT_RESULT" === S3[d5].name.toUpperCase()) {
        _ = S3[d5].name, "date" === S3[d5].type && (R2 = true);
        break;
      }
    if (R2) {
      let e4 = g4.features[0].attributes[_];
      return null !== e4 && (e4 = new Date(g4.features[0].attributes[_])), { calculated: true, result: e4 };
    }
    return { calculated: true, result: g4.features[0].attributes[_] };
  }
  _stat(e3, t5, i2, r3, s6, a6, n8) {
    return this._stats(e3, t5, i2, r3, s6, a6, n8);
  }
  async _canDoAggregates(e3, t5) {
    var _a, _b;
    await this._ensureLoaded();
    let i2 = false;
    const r3 = (_a = this._layer.capabilities) == null ? void 0 : _a.query, s6 = true === (r3 == null ? void 0 : r3.supportsSqlExpression);
    if (null != r3 && true === r3.supportsStatistics && true === r3.supportsOrderBy && (i2 = true), i2)
      for (let a6 = 0; a6 < t5.length - 1; a6++)
        (false === ((_b = t5[a6].workingexpr) == null ? void 0 : _b.isStandardized) || false === N2(t5[a6].workingexpr) && false === s6) && (i2 = false);
    return false !== i2;
  }
  _makeRelationshipEnum(e3) {
    if (e3.includes("esriSpatialRelRelation"))
      return "relation";
    switch (e3) {
      case "esriSpatialRelRelation":
        return "relation";
      case "esriSpatialRelIntersects":
        return "intersects";
      case "esriSpatialRelContains":
        return "contains";
      case "esriSpatialRelOverlaps":
        return "overlaps";
      case "esriSpatialRelWithin":
        return "within";
      case "esriSpatialRelTouches":
        return "touches";
      case "esriSpatialRelCrosses":
        return "crosses";
      case "esriSpatialRelEnvelopeIntersects":
        return "envelope-intersects";
    }
    return e3;
  }
  _makeRelationshipParam(e3) {
    return e3.includes("esriSpatialRelRelation") ? e3.split(":")[1] : "";
  }
  async _getAggregatePagesDataSourceDefinition(e3, t5, i2, r3, a6, n8, l2) {
    var _a;
    await this._ensureLoaded();
    const o4 = await this.databaseType();
    let u4 = "", c5 = false, h3 = false;
    null !== n8 && this._layer.capabilities && this._layer.capabilities.query && true === this._layer.capabilities.query.supportsOrderBy && (u4 = n8.constructClause(), h3 = true), this._layer.capabilities && this._layer.capabilities.query && false === this._layer.capabilities.query.supportsPagination && (h3 = false, c5 = true, u4 = this._layer.objectIdField);
    const p6 = [];
    for (let s6 = 0; s6 < t5.length; s6++) {
      const e4 = new m();
      e4.onStatisticField = null !== t5[s6].workingexpr ? u3(t5[s6].workingexpr, o4) : "", e4.outStatisticFieldName = t5[s6].field, e4.statisticType = t5[s6].toStatisticsName(), p6.push(e4);
    }
    "" === u4 && (u4 = e3.join(","));
    let y3 = this._maxQueryRate();
    const f7 = (_a = this._layer.capabilities) == null ? void 0 : _a.query.maxRecordCount;
    null != f7 && f7 < y3 && (y3 = f7);
    let m5 = null === a6 ? null === r3 ? "1=1" : "" : u3(a6, o4);
    this._layer.definitionExpression && this._useDefinitionExpression && (m5 = "" !== m5 ? "((" + this._layer.definitionExpression + ") AND (" + m5 + "))" : this._layer.definitionExpression);
    return new t3([], ["GETPAGES"], h3, { groupbypage: true, spatialRel: this._makeRelationshipEnum(i2), relationParam: this._makeRelationshipParam(i2), outFields: ["*"], useOIDpagination: c5, generatedOid: l2, resultRecordCount: y3, resultOffset: 0, groupByFieldsForStatistics: e3, outStatistics: p6, geometry: null === r3 ? null : r3, where: m5, orderByFields: u4, returnGeometry: false, returnIdsOnly: false, internal: { lastMaxId: -1, set: [], lastRetrieved: 0, lastPage: 0, fullyResolved: false } });
  }
  async _getAgregagtePhysicalPage(t5, i2, r3) {
    let s6 = t5.pagesDefinition.where;
    true === t5.pagesDefinition.useOIDpagination && (s6 = "" !== s6 ? "(" + s6 + ") AND (" + t5.pagesDefinition.generatedOid + ">" + t5.pagesDefinition.internal.lastMaxId.toString() + ")" : t5.pagesDefinition.generatedOid + ">" + t5.pagesDefinition.internal.lastMaxId.toString());
    const a6 = t5.pagesDefinition.internal.lastRetrieved, n8 = a6, l2 = t5.pagesDefinition.internal.lastPage, o4 = new b();
    if (this._requestStandardised && (o4.sqlFormat = "standard"), o4.where = s6, o4.spatialRelationship = t5.pagesDefinition.spatialRel, o4.relationParameter = t5.pagesDefinition.relationParam, o4.outFields = t5.pagesDefinition.outFields, o4.outStatistics = t5.pagesDefinition.outStatistics, o4.geometry = t5.pagesDefinition.geometry, o4.groupByFieldsForStatistics = t5.pagesDefinition.groupByFieldsForStatistics, o4.num = t5.pagesDefinition.resultRecordCount, o4.start = t5.pagesDefinition.internal.lastPage, o4.returnGeometry = t5.pagesDefinition.returnGeometry, this.datesInUnknownTimezone && (o4.timeReferenceUnknownClient = true), o4.orderByFields = "" !== t5.pagesDefinition.orderByFields ? t5.pagesDefinition.orderByFields.split(",") : null, this.isTable() && o4.geometry && o4.spatialRelationship)
      return [];
    const u4 = await this.executeQuery(o4, "execute");
    if (this._checkCancelled(r3), !u4.hasOwnProperty("features"))
      throw new o2(n3.InvalidStatResponse);
    const d5 = [];
    if (t5.pagesDefinition.internal.lastPage !== l2)
      return [];
    u4.features.length > 0 && void 0 === u4.features[0].attributes[t5.pagesDefinition.generatedOid] && (t5.pagesDefinition.generatedOid = t5.pagesDefinition.generatedOid.toLowerCase());
    for (let e3 = 0; e3 < u4.features.length; e3++)
      t5.pagesDefinition.internal.set[n8 + e3] = u4.features[e3].attributes[t5.pagesDefinition.generatedOid];
    for (let c5 = 0; c5 < u4.features.length; c5++)
      d5.push(new h({ attributes: u4.features[c5].attributes, geometry: null }));
    return true === t5.pagesDefinition.useOIDpagination ? 0 === u4.features.length ? t5.pagesDefinition.internal.fullyResolved = true : t5.pagesDefinition.internal.lastMaxId = u4.features[u4.features.length - 1].attributes[t5.pagesDefinition.generatedOid] : (void 0 === u4.exceededTransferLimit && u4.features.length !== t5.pagesDefinition.resultRecordCount || false === u4.exceededTransferLimit) && (t5.pagesDefinition.internal.fullyResolved = true), t5.pagesDefinition.internal.lastRetrieved = a6 + u4.features.length, t5.pagesDefinition.internal.lastPage += t5.pagesDefinition.resultRecordCount, d5;
  }
  static create(e3, t5, i2, r3, s6) {
    const a6 = new Be({ url: e3, outFields: null === t5 ? ["*"] : t5 });
    return new _C({ layer: a6, spatialReference: i2, lrucache: r3, interceptor: s6 });
  }
  relationshipMetaData() {
    return this._layer && this._layer.source && this._layer.source.sourceJSON && this._layer.source.sourceJSON.relationships ? this._layer.source.sourceJSON.relationships : [];
  }
  serviceUrl() {
    return x2(this._layer.parsedUrl.path);
  }
  async queryAttachments(e3, t5, r3, s6, a6) {
    const n8 = this._layer.capabilities;
    if ((n8 == null ? void 0 : n8.data.supportsAttachment) && (n8 == null ? void 0 : n8.operations.supportsQueryAttachments)) {
      const n9 = { objectIds: [e3], returnMetadata: a6 };
      (t5 && t5 > 0 || r3 && r3 > 0) && (n9.size = [t5 && t5 > 0 ? t5 : 0, r3 && r3 > 0 ? r3 : t5 + 1]), s6 && s6.length > 0 && (n9.attachmentTypes = s6), this.featureSetQueryInterceptor && this.featureSetQueryInterceptor.preLayerQueryCallback({ layer: this._layer, query: n9, method: "attachments" });
      const l2 = await this._layer.queryAttachments(n9), o4 = [];
      return l2 && l2[e3] && l2[e3].forEach((t6) => {
        const r4 = this._layer.parsedUrl.path + "/" + e3.toString() + "/attachments/" + t6.id.toString();
        let s7 = null;
        a6 && t6.exifInfo && (s7 = A.convertJsonToArcade(t6.exifInfo, "system", true)), o4.push(new t(t6.id, t6.name, t6.contentType, t6.size, r4, s7, t6.keywords ?? null));
      }), o4;
    }
    return [];
  }
  async queryRelatedFeatures(i2) {
    var _a;
    const r3 = { f: "json", relationshipId: i2.relationshipId.toString(), definitionExpression: i2.where, outFields: (_a = i2.outFields) == null ? void 0 : _a.join(","), returnGeometry: i2.returnGeometry.toString() };
    void 0 !== i2.resultOffset && null !== i2.resultOffset && (r3.resultOffset = i2.resultOffset.toString()), void 0 !== i2.resultRecordCount && null !== i2.resultRecordCount && (r3.resultRecordCount = i2.resultRecordCount.toString()), i2.orderByFields && (r3.orderByFields = i2.orderByFields.join(",")), i2.objectIds && i2.objectIds.length > 0 && (r3.objectIds = i2.objectIds.join(",")), i2.outSpatialReference && (r3.outSR = JSON.stringify(i2.outSpatialReference.toJSON())), this.featureSetQueryInterceptor && this.featureSetQueryInterceptor.preRequestCallback({ layer: this._layer, queryPayload: r3, method: "relatedrecords", url: this._layer.parsedUrl.path + "/queryRelatedRecords" });
    const s6 = await j(this._layer.parsedUrl.path + "/queryRelatedRecords", { responseType: "json", query: r3 });
    if (s6.data) {
      const t5 = {}, i3 = s6.data;
      if (i3 && i3.relatedRecordGroups) {
        const r4 = i3.spatialReference;
        for (const s7 of i3.relatedRecordGroups) {
          const a6 = s7.objectId, n8 = [];
          for (const t6 of s7.relatedRecords) {
            t6.geometry && (t6.geometry.spatialReference = r4);
            const i4 = new h({ geometry: t6.geometry ? p3(t6.geometry) : null, attributes: t6.attributes });
            n8.push(i4);
          }
          t5[a6] = { features: n8, exceededTransferLimit: true === i3.exceededTransferLimit };
        }
      }
      return t5;
    }
    throw new o2(n3.InvalidRequest);
  }
  async getFeatureByObjectId(e3, t5) {
    const i2 = new b();
    i2.outFields = t5, i2.returnGeometry = false, i2.outSpatialReference = this.spatialReference, i2.where = this.objectIdField + "=" + e3.toString(), this.datesInUnknownTimezone && (i2.timeReferenceUnknownClient = true), this.featureSetQueryInterceptor && this.featureSetQueryInterceptor.preLayerQueryCallback({ layer: this._layer, query: i2, method: "execute" });
    const r3 = await s4(this._layer.parsedUrl.path, i2);
    return 1 === r3.features.length ? r3.features[0] : null;
  }
  async getIdentityUser() {
    var _a;
    await this.load();
    const e3 = (_a = n) == null ? void 0 : _a.findCredential(this._layer.url);
    return e3 ? e3.userId : null;
  }
  async getOwningSystemUrl() {
    var _a;
    await this.load();
    const e3 = (_a = n) == null ? void 0 : _a.findServerInfo(this._layer.url);
    if (e3)
      return e3.owningSystemUrl;
    let i2 = this._layer.url;
    const r3 = i2.toLowerCase().indexOf("/rest/services");
    if (i2 = r3 > -1 ? i2.substring(0, r3) : i2, i2) {
      i2 += "/rest/info";
      try {
        const e4 = await j(i2, { query: { f: "json" } });
        let r4 = "";
        return e4.data && e4.data.owningSystemUrl && (r4 = e4.data.owningSystemUrl), r4;
      } catch (s6) {
        return "";
      }
    }
    return "";
  }
  getDataSourceFeatureSet() {
    const e3 = new _C({ layer: this._layer, spatialReference: this.spatialReference ?? void 0, outFields: this._overrideFields ?? void 0, includeGeometry: !this._removeGeometry, lrucache: this.recentlyUsedQueries ?? void 0, interceptor: this.featureSetQueryInterceptor ?? void 0 });
    return e3._useDefinitionExpression = false, e3;
  }
  get preferredTimeReference() {
    var _a, _b;
    return void 0 === this._cachedDateMetaData.preferredTimeReference && (this._cachedDateMetaData.preferredTimeReference = ((_b = (_a = this._layer) == null ? void 0 : _a.preferredTimeReference) == null ? void 0 : _b.toJSON()) ?? null), this._cachedDateMetaData.preferredTimeReference;
  }
  get dateFieldsTimeReference() {
    var _a, _b;
    return void 0 === this._cachedDateMetaData.dateFieldsTimeReference && (this._cachedDateMetaData.dateFieldsTimeReference = ((_b = (_a = this._layer) == null ? void 0 : _a.dateFieldsTimeReference) == null ? void 0 : _b.toJSON()) ?? null), this._cachedDateMetaData.dateFieldsTimeReference;
  }
  get datesInUnknownTimezone() {
    return this._layer.datesInUnknownTimezone;
  }
  get editFieldsInfo() {
    var _a, _b;
    return void 0 === this._cachedDateMetaData.editFieldsInfo && (this._cachedDateMetaData.editFieldsInfo = ((_b = (_a = this._layer) == null ? void 0 : _a.editFieldsInfo) == null ? void 0 : _b.toJSON()) ?? null), this._cachedDateMetaData.editFieldsInfo;
  }
  get timeInfo() {
    var _a, _b;
    return void 0 === this._cachedDateMetaData.timeInfo && (this._cachedDateMetaData.timeInfo = ((_b = (_a = this._layer) == null ? void 0 : _a.timeInfo) == null ? void 0 : _b.toJSON()) ?? null), this._cachedDateMetaData.timeInfo;
  }
};

// node_modules/@arcgis/core/arcade/featureset/sources/FeatureLayerMemory.js
var f6 = class _f extends v {
  constructor(e3) {
    super(e3), this.declaredClass = "esri.arcade.featureset.sources.FeatureLayerMemory", this._removeGeometry = false, this._overrideFields = null, this._forceIsTable = false, e3.spatialReference && (this.spatialReference = e3.spatialReference), this._transparent = true, this._maxProcessing = 1e3, this._layer = e3.layer, this._wset = null, true === e3.isTable && (this._forceIsTable = true), void 0 !== e3.outFields && (this._overrideFields = e3.outFields), void 0 !== e3.includeGeometry && (this._removeGeometry = false === e3.includeGeometry);
  }
  _maxQueryRate() {
    return T2;
  }
  end() {
    return this._layer;
  }
  optimisePagingFeatureQueries() {
  }
  async loadImpl() {
    return true === this._layer.loaded ? (this._initialiseFeatureSet(), this) : (await this._layer.load(), this._initialiseFeatureSet(), this);
  }
  get gdbVersion() {
    return "";
  }
  _initialiseFeatureSet() {
    var _a, _b, _c, _d, _e, _f2;
    if (null == this.spatialReference && (this.spatialReference = this._layer.spatialReference), this.geometryType = this._layer.geometryType, this.fields = this._layer.fields.slice(0), null !== this._overrideFields)
      if (1 === this._overrideFields.length && "*" === this._overrideFields[0])
        this._overrideFields = null;
      else {
        const e3 = [], t5 = [];
        for (const r3 of this.fields)
          if ("oid" === r3.type)
            e3.push(r3), t5.push(r3.name);
          else
            for (const s6 of this._overrideFields)
              if (s6.toLowerCase() === r3.name.toLowerCase()) {
                e3.push(r3), t5.push(r3.name);
                break;
              }
        this.fields = e3, this._overrideFields = t5;
      }
    this.objectIdField = this._layer.objectIdField;
    for (const e3 of this.fields)
      "global-id" === e3.type && (this.globalIdField = e3.name);
    this._databaseType = i.Standardised, this.hasZ = true === ((_c = (_b = (_a = this._layer) == null ? void 0 : _a.capabilities) == null ? void 0 : _b.data) == null ? void 0 : _c.supportsZ), this.hasM = true === ((_f2 = (_e = (_d = this._layer) == null ? void 0 : _d.capabilities) == null ? void 0 : _e.data) == null ? void 0 : _f2.supportsM), this._layer instanceof oe ? (this.typeIdField = this._layer.subtypeField ?? "", this.types = this._layer.subtypes) : (this.typeIdField = this._layer.typeIdField ?? "", this.types = this._layer.types);
  }
  isTable() {
    return this._forceIsTable || this._layer.isTable || "table" === this._layer.type || !this._layer.geometryType;
  }
  _isInFeatureSet() {
    return n2.InFeatureSet;
  }
  _candidateIdTransform(e3) {
    return e3;
  }
  async _getSet(e3) {
    if (null === this._wset) {
      await this._ensureLoaded();
      const t5 = await this._getFilteredSet("", null, null, null, e3);
      return this._wset = t5, t5;
    }
    return this._wset;
  }
  _changeFeature(t5) {
    const r3 = {};
    for (const e3 of this.fields)
      r3[e3.name] = t5.attributes[e3.name];
    return new h({ geometry: true === this._removeGeometry ? null : t5.geometry, attributes: r3 });
  }
  async _getFilteredSet(e3, t5, r3, s6, a6) {
    let l2 = "", u4 = false;
    if (null !== s6 && (l2 = s6.constructClause(), u4 = true), this.isTable() && t5 && null !== e3 && "" !== e3) {
      return new t3([], [], true, null);
    }
    const h3 = new b();
    h3.returnZ = this.hasZ, h3.returnM = this.hasM, h3.where = null === r3 ? null === t5 ? "1=1" : "" : u3(r3, i.Standardised), h3.spatialRelationship = this._makeRelationshipEnum(e3), h3.outSpatialReference = this.spatialReference, h3.orderByFields = "" !== l2 ? l2.split(",") : null, h3.geometry = null === t5 ? null : t5, h3.returnGeometry = true, h3.relationParameter = this._makeRelationshipParam(e3);
    const c5 = await this._layer.queryFeatures(h3);
    if (null === c5)
      return new t3([], [], u4, null);
    this._checkCancelled(a6);
    const y3 = [];
    c5.features.forEach((e4) => {
      const t6 = e4.attributes[this._layer.objectIdField];
      y3.push(t6), this._featureCache[t6] = this._changeFeature(e4);
    });
    return new t3([], y3, u4, null);
  }
  _makeRelationshipEnum(e3) {
    if (e3.includes("esriSpatialRelRelation"))
      return "relation";
    switch (e3) {
      case "esriSpatialRelRelation":
        return "relation";
      case "esriSpatialRelIntersects":
        return "intersects";
      case "esriSpatialRelContains":
        return "contains";
      case "esriSpatialRelOverlaps":
        return "overlaps";
      case "esriSpatialRelWithin":
        return "within";
      case "esriSpatialRelTouches":
        return "touches";
      case "esriSpatialRelCrosses":
        return "crosses";
      case "esriSpatialRelEnvelopeIntersects":
        return "envelope-intersects";
    }
    return e3;
  }
  _makeRelationshipParam(e3) {
    return e3.includes("esriSpatialRelRelation") ? e3.split(":")[1] : "";
  }
  async _queryAllFeatures() {
    if (this._wset)
      return this._wset;
    const e3 = new b();
    if (e3.where = "1=1", await this._ensureLoaded(), this._layer.source && this._layer.source.items) {
      const e4 = [];
      return this._layer.source.items.forEach((t6) => {
        const r4 = t6.attributes[this._layer.objectIdField];
        e4.push(r4), this._featureCache[r4] = this._changeFeature(t6);
      }), this._wset = new t3([], e4, false, null), this._wset;
    }
    e3.returnZ = this.hasZ, e3.returnM = this.hasM;
    const t5 = await this._layer.queryFeatures(e3), r3 = [];
    return t5.features.forEach((e4) => {
      const t6 = e4.attributes[this._layer.objectIdField];
      r3.push(t6), this._featureCache[t6] = this._changeFeature(e4);
    }), this._wset = new t3([], r3, false, null), this._wset;
  }
  async _getFeatures(e3, s6, i2) {
    const a6 = [];
    -1 !== s6 && void 0 === this._featureCache[s6] && a6.push(s6);
    for (let t5 = e3._lastFetchedIndex; t5 < e3._known.length && (e3._lastFetchedIndex += 1, !(void 0 === this._featureCache[e3._known[t5]] && (e3._known[t5] !== s6 && a6.push(e3._known[t5]), a6.length > i2))); t5++)
      ;
    if (0 === a6.length)
      return "success";
    throw new o2(n3.MissingFeatures);
  }
  async _refineSetBlock(e3) {
    return e3;
  }
  async _stat() {
    return { calculated: false };
  }
  async _canDoAggregates() {
    return false;
  }
  relationshipMetaData() {
    return [];
  }
  static _cloneAttr(e3) {
    const t5 = {};
    for (const r3 in e3)
      t5[r3] = e3[r3];
    return t5;
  }
  nativeCapabilities() {
    return { title: this._layer.title ?? "", canQueryRelated: false, source: this, capabilities: this._layer.capabilities, databaseType: this._databaseType, requestStandardised: true };
  }
  static create(e3, t5) {
    var _a, _b, _c, _d;
    let r3 = e3.layerDefinition.objectIdField;
    const s6 = e3.layerDefinition.typeIdField ?? "", i2 = [];
    if (e3.layerDefinition.types)
      for (const u4 of e3.layerDefinition.types)
        i2.push(n5.fromJSON(u4));
    let a6 = e3.layerDefinition.geometryType;
    void 0 === a6 && (a6 = e3.featureSet.geometryType || "");
    let n8 = e3.featureSet.features;
    const l2 = t5.toJSON();
    if (!r3) {
      let t6 = false;
      for (const s7 of e3.layerDefinition.fields)
        if ("oid" === s7.type || "esriFieldTypeOID" === s7.type) {
          r3 = s7.name, t6 = true;
          break;
        }
      if (false === t6) {
        let t7 = "FID", s7 = true, i3 = 0;
        for (; s7; ) {
          let r4 = true;
          for (const s8 of e3.layerDefinition.fields)
            if (s8.name === t7) {
              r4 = false;
              break;
            }
          true === r4 ? s7 = false : (i3++, t7 = "FID" + i3.toString());
        }
        e3.layerDefinition.fields.push({ type: "esriFieldTypeOID", name: t7, alias: t7 });
        const a7 = [];
        for (let r4 = 0; r4 < n8.length; r4++)
          a7.push({ geometry: e3.featureSet.features[r4].geometry, attributes: e3.featureSet.features[r4].attributes ? this._cloneAttr(e3.featureSet.features[r4].attributes) : {} }), a7[r4].attributes[t7] = r4;
        n8 = a7, r3 = t7;
      }
    }
    const o4 = [];
    for (const u4 of e3.layerDefinition.fields)
      u4 instanceof y ? o4.push(u4) : o4.push(y.fromJSON(u4));
    let c5 = a6;
    switch (c5 || (c5 = ""), c5) {
      case "esriGeometryPoint":
        c5 = "point";
        break;
      case "esriGeometryPolyline":
        c5 = "polyline";
        break;
      case "esriGeometryPolygon":
        c5 = "polygon";
        break;
      case "esriGeometryEnvelope":
        c5 = "extent";
        break;
      case "esriGeometryMultipoint":
        c5 = "multipoint";
        break;
      case "":
      case "esriGeometryNull":
        c5 = "esriGeometryNull";
    }
    if ("esriGeometryNull" !== c5)
      for (const h3 of n8)
        h3.geometry && h3.geometry instanceof p2 == false && (h3.geometry.type = c5, void 0 === h3.geometry.spatialReference && (h3.geometry.spatialReference = l2));
    else
      for (const u4 of n8)
        u4.geometry && (u4.geometry = null);
    const d5 = { outFields: ["*"], source: n8, fields: o4, hasZ: true === ((_a = e3 == null ? void 0 : e3.layerDefinition) == null ? void 0 : _a.hasZ) || true === ((_b = e3 == null ? void 0 : e3.featureSet) == null ? void 0 : _b.hasZ), hasM: true === ((_c = e3 == null ? void 0 : e3.layerDefinition) == null ? void 0 : _c.hasM) || true === ((_d = e3 == null ? void 0 : e3.featureSet) == null ? void 0 : _d.hasM), types: i2, typeIdField: s6, objectIdField: r3, spatialReference: t5 }, m5 = "esriGeometryNull" === c5 || null === c5;
    m5 || (d5.geometryType = c5);
    const _ = new Be(d5);
    return new _f({ layer: _, spatialReference: t5, isTable: m5 });
  }
  async queryAttachments() {
    return [];
  }
  async getFeatureByObjectId(e3) {
    const t5 = new b();
    t5.where = this.objectIdField + "=" + e3.toString(), t5.returnZ = this.hasZ, t5.returnM = this.hasM;
    const r3 = await this._layer.queryFeatures(t5);
    return 1 === r3.features.length ? r3.features[0] : null;
  }
  async getOwningSystemUrl() {
    return "";
  }
  async getIdentityUser() {
    return "";
  }
  get preferredTimeReference() {
    var _a, _b;
    return ((_b = (_a = this._layer) == null ? void 0 : _a.preferredTimeReference) == null ? void 0 : _b.toJSON()) ?? null;
  }
  get dateFieldsTimeReference() {
    var _a, _b;
    return ((_b = (_a = this._layer) == null ? void 0 : _a.dateFieldsTimeReference) == null ? void 0 : _b.toJSON()) ?? null;
  }
  get datesInUnknownTimezone() {
    var _a;
    return (_a = this._layer) == null ? void 0 : _a.datesInUnknownTimezone;
  }
  get editFieldsInfo() {
    var _a, _b;
    return ((_b = (_a = this._layer) == null ? void 0 : _a.editFieldsInfo) == null ? void 0 : _b.toJSON()) ?? null;
  }
  get timeInfo() {
    var _a, _b;
    return ((_b = (_a = this._layer) == null ? void 0 : _a.timeInfo) == null ? void 0 : _b.toJSON()) ?? null;
  }
};

// node_modules/@arcgis/core/arcade/featureset/sources/FeatureLayerRelated.js
var d4 = class extends v {
  constructor(e3) {
    super(e3), this.declaredClass = "esri.arcade.featureset.sources.FeatureLayerRelated", this._findObjectId = -1, this._requestStandardised = false, this._removeGeometry = false, this._overrideFields = null, this.featureObjectId = null, e3.spatialReference && (this.spatialReference = e3.spatialReference), this._transparent = true, this._maxProcessing = 1e3, this._layer = e3.layer, this._wset = null, this._findObjectId = e3.objectId, this.featureObjectId = e3.objectId, this.relationship = e3.relationship, this._relatedLayer = e3.relatedLayer, void 0 !== e3.outFields && (this._overrideFields = e3.outFields), void 0 !== e3.includeGeometry && (this._removeGeometry = false === e3.includeGeometry);
  }
  _maxQueryRate() {
    return T2;
  }
  end() {
    return this._layer;
  }
  optimisePagingFeatureQueries() {
  }
  async loadImpl() {
    var _a;
    return await Promise.all([this._layer.load(), (_a = this._relatedLayer) == null ? void 0 : _a.load()]), this._initialiseFeatureSet(), this;
  }
  nativeCapabilities() {
    return this._relatedLayer.nativeCapabilities();
  }
  _initialiseFeatureSet() {
    if (null == this.spatialReference && (this.spatialReference = this._layer.spatialReference), this.geometryType = this._relatedLayer.geometryType, this.fields = this._relatedLayer.fields.slice(0), this.hasZ = this._relatedLayer.hasZ, this.hasM = this._relatedLayer.hasM, null !== this._overrideFields)
      if (1 === this._overrideFields.length && "*" === this._overrideFields[0])
        this._overrideFields = null;
      else {
        const e4 = [], t5 = [];
        for (const r3 of this.fields)
          if ("oid" === r3.type)
            e4.push(r3), t5.push(r3.name);
          else
            for (const i2 of this._overrideFields)
              if (i2.toLowerCase() === r3.name.toLowerCase()) {
                e4.push(r3), t5.push(r3.name);
                break;
              }
        this.fields = e4, this._overrideFields = t5;
      }
    const e3 = this._layer.nativeCapabilities();
    e3 && (this._databaseType = e3.databaseType, this._requestStandardised = e3.requestStandardised), this.objectIdField = this._relatedLayer.objectIdField, this.globalIdField = this._relatedLayer.globalIdField, this.hasM = this._relatedLayer.supportsM, this.hasZ = this._relatedLayer.supportsZ, this.typeIdField = this._relatedLayer.typeIdField, this.types = this._relatedLayer.types;
  }
  async databaseType() {
    return await this._relatedLayer.databaseType(), this._databaseType = this._relatedLayer._databaseType, this._databaseType;
  }
  isTable() {
    return this._relatedLayer.isTable();
  }
  _isInFeatureSet() {
    return n2.InFeatureSet;
  }
  _candidateIdTransform(e3) {
    return e3;
  }
  async _getSet(e3) {
    if (null === this._wset) {
      await this._ensureLoaded();
      const t5 = await this._getFilteredSet("", null, null, null, e3);
      return this._wset = t5, t5;
    }
    return this._wset;
  }
  _changeFeature(t5) {
    const r3 = {};
    for (const e3 of this.fields)
      r3[e3.name] = t5.attributes[e3.name];
    return new h({ geometry: true === this._removeGeometry ? null : t5.geometry, attributes: r3 });
  }
  async _getFilteredSet(e3, t5, r3, i2, a6) {
    var _a;
    if (await this.databaseType(), this.isTable() && t5 && null !== e3 && "" !== e3) {
      return new t3([], [], true, null);
    }
    const n8 = this._layer.nativeCapabilities();
    if (false === n8.canQueryRelated) {
      return new t3([], [], true, null);
    }
    if (((_a = n8.capabilities) == null ? void 0 : _a.queryRelated) && n8.capabilities.queryRelated.supportsPagination)
      return this._getFilteredSetUsingPaging(e3, t5, r3, i2, a6);
    let d5 = "", o4 = false;
    null !== i2 && n8.capabilities && n8.capabilities.queryRelated && true === n8.capabilities.queryRelated.supportsOrderBy && (d5 = i2.constructClause(), o4 = true);
    const u4 = new d2();
    u4.objectIds = [this._findObjectId];
    const h3 = null !== this._overrideFields ? this._overrideFields : this._fieldsIncludingObjectId(this._relatedLayer.fields ? this._relatedLayer.fields.map((e4) => e4.name) : ["*"]);
    u4.outFields = h3, u4.relationshipId = this.relationship.id, u4.where = "1=1";
    let c5 = true;
    true === this._removeGeometry && (c5 = false), u4.returnGeometry = c5, this._requestStandardised && (u4.sqlFormat = "standard"), u4.outSpatialReference = this.spatialReference, u4.orderByFields = "" !== d5 ? d5.split(",") : null;
    const y3 = await n8.source.queryRelatedFeatures(u4);
    this._checkCancelled(a6);
    const p6 = y3[this._findObjectId] ? y3[this._findObjectId].features : [], _ = [];
    for (let s6 = 0; s6 < p6.length; s6++)
      this._featureCache[p6[s6].attributes[this._relatedLayer.objectIdField]] = p6[s6], _.push(p6[s6].attributes[this._relatedLayer.objectIdField]);
    const f7 = t5 && null !== e3 && "" !== e3, g4 = null != r3;
    return new t3(f7 || g4 ? _ : [], f7 || g4 ? [] : _, o4, null);
  }
  _fieldsIncludingObjectId(e3) {
    if (null === e3)
      return [this.objectIdField];
    const t5 = e3.slice(0);
    if (t5.includes("*"))
      return t5;
    let r3 = false;
    for (const i2 of t5)
      if (i2.toUpperCase() === this.objectIdField.toUpperCase()) {
        r3 = true;
        break;
      }
    return false === r3 && t5.push(this.objectIdField), t5;
  }
  async _getFilteredSetUsingPaging(e3, t5, r3, i2, a6) {
    var _a, _b;
    let n8 = "", l2 = false;
    const d5 = this._layer.nativeCapabilities();
    null !== i2 && d5 && ((_a = d5.capabilities) == null ? void 0 : _a.queryRelated) && true === d5.capabilities.queryRelated.supportsOrderBy && (n8 = i2.constructClause(), l2 = true), await this.databaseType();
    const o4 = "1=1";
    let u4 = this._maxQueryRate();
    const h3 = (_b = d5.capabilities) == null ? void 0 : _b.query.maxRecordCount;
    null != h3 && h3 < u4 && (u4 = h3);
    const c5 = t5 && null !== e3 && "" !== e3, y3 = null != r3;
    let p6 = null, _ = true;
    true === this._removeGeometry && (_ = false);
    const f7 = null !== this._overrideFields ? this._overrideFields : this._fieldsIncludingObjectId(this._relatedLayer.fields ? this._relatedLayer.fields.map((e4) => e4.name) : ["*"]);
    return p6 = new t3(c5 || y3 ? ["GETPAGES"] : [], c5 || y3 ? [] : ["GETPAGES"], l2, { outFields: f7.join(","), resultRecordCount: u4, resultOffset: 0, objectIds: [this._findObjectId], where: o4, orderByFields: n8, returnGeometry: _, returnIdsOnly: "false", internal: { set: [], lastRetrieved: 0, lastPage: 0, fullyResolved: false } }), await this._expandPagedSet(p6, u4, 0, 0, a6), p6;
  }
  _expandPagedSet(e3, t5, r3, i2, s6) {
    return this._expandPagedSetFeatureSet(e3, t5, r3, i2, s6);
  }
  _clonePageDefinition(e3) {
    return null === e3 ? null : true !== e3.groupbypage ? { groupbypage: false, outFields: e3.outFields, resultRecordCount: e3.resultRecordCount, resultOffset: e3.resultOffset, where: e3.where, objectIds: e3.objectIds, orderByFields: e3.orderByFields, returnGeometry: e3.returnGeometry, returnIdsOnly: e3.returnIdsOnly, internal: e3.internal } : { groupbypage: true, outFields: e3.outFields, resultRecordCount: e3.resultRecordCount, useOIDpagination: e3.useOIDpagination, generatedOid: e3.generatedOid, groupByFieldsForStatistics: e3.groupByFieldsForStatistics, resultOffset: e3.resultOffset, outStatistics: e3.outStatistics, geometry: e3.geometry, where: e3.where, objectIds: e3.objectIds, orderByFields: e3.orderByFields, returnGeometry: e3.returnGeometry, returnIdsOnly: e3.returnIdsOnly, internal: e3.internal };
  }
  async _getPhysicalPage(e3, t5, r3) {
    const i2 = e3.pagesDefinition.internal.lastRetrieved, s6 = i2, a6 = e3.pagesDefinition.internal.lastPage, n8 = this._layer.nativeCapabilities(), d5 = new d2();
    true === this._requestStandardised && (d5.sqlFormat = "standard"), d5.relationshipId = this.relationship.id, d5.objectIds = e3.pagesDefinition.objectIds, d5.resultOffset = e3.pagesDefinition.internal.lastPage, d5.resultRecordCount = e3.pagesDefinition.resultRecordCount, d5.outFields = e3.pagesDefinition.outFields.split(","), d5.where = e3.pagesDefinition.where, d5.orderByFields = "" !== e3.pagesDefinition.orderByFields ? e3.pagesDefinition.orderByFields.split(",") : null, d5.returnGeometry = e3.pagesDefinition.returnGeometry, d5.outSpatialReference = this.spatialReference;
    const o4 = await n8.source.queryRelatedFeatures(d5);
    if (this._checkCancelled(r3), e3.pagesDefinition.internal.lastPage !== a6)
      return 0;
    const u4 = o4[this._findObjectId] ? o4[this._findObjectId].features : [];
    for (let l2 = 0; l2 < u4.length; l2++)
      e3.pagesDefinition.internal.set[s6 + l2] = u4[l2].attributes[this._relatedLayer.objectIdField];
    for (let l2 = 0; l2 < u4.length; l2++)
      this._featureCache[u4[l2].attributes[this._relatedLayer.objectIdField]] = u4[l2];
    const h3 = !o4[this._findObjectId] || false === o4[this._findObjectId].exceededTransferLimit;
    return u4.length !== e3.pagesDefinition.resultRecordCount && h3 && (e3.pagesDefinition.internal.fullyResolved = true), e3.pagesDefinition.internal.lastRetrieved = i2 + u4.length, e3.pagesDefinition.internal.lastPage += e3.pagesDefinition.resultRecordCount, u4.length;
  }
  async _getFeatures(e3, i2, s6, a6) {
    const n8 = [];
    -1 !== i2 && void 0 === this._featureCache[i2] && n8.push(i2);
    const l2 = this._maxQueryRate();
    if (true === this._checkIfNeedToExpandKnownPage(e3, l2))
      return await this._expandPagedSet(e3, l2, 0, 0, a6), this._getFeatures(e3, i2, s6, a6);
    let d5 = 0;
    for (let t5 = e3._lastFetchedIndex; t5 < e3._known.length && (d5++, d5 <= s6 && (e3._lastFetchedIndex += 1), !("GETPAGES" !== e3._known[t5] && void 0 === this._featureCache[e3._known[t5]] && (e3._known[t5] !== i2 && n8.push(e3._known[t5]), n8.length > s6))) && !(d5 >= s6 && 0 === n8.length); t5++)
      ;
    if (0 === n8.length)
      return "success";
    throw new o2(n3.MissingFeatures);
  }
  async _refineSetBlock(e3, t5, r3) {
    return e3;
  }
  async _stat(e3, t5, r3, i2, s6, a6, n8) {
    return { calculated: false };
  }
  get gdbVersion() {
    return this._relatedLayer.gdbVersion;
  }
  async _canDoAggregates(e3, t5, r3, i2, s6) {
    return false;
  }
  relationshipMetaData() {
    return this._relatedLayer.relationshipMetaData();
  }
  serviceUrl() {
    return this._relatedLayer.serviceUrl();
  }
  queryAttachments(e3, t5, r3, i2, s6) {
    return this._relatedLayer.queryAttachments(e3, t5, r3, i2, s6);
  }
  getFeatureByObjectId(e3, t5) {
    return this._relatedLayer.getFeatureByObjectId(e3, t5);
  }
  getOwningSystemUrl() {
    return this._relatedLayer.getOwningSystemUrl();
  }
  getIdentityUser() {
    return this._relatedLayer.getIdentityUser();
  }
  getDataSourceFeatureSet() {
    return this._relatedLayer;
  }
  get preferredTimeReference() {
    var _a;
    return ((_a = this._relatedLayer) == null ? void 0 : _a.preferredTimeReference) ?? null;
  }
  get dateFieldsTimeReference() {
    var _a;
    return ((_a = this._relatedLayer) == null ? void 0 : _a.dateFieldsTimeReference) ?? null;
  }
  get datesInUnknownTimezone() {
    var _a;
    return (_a = this._relatedLayer) == null ? void 0 : _a.datesInUnknownTimezone;
  }
  get editFieldsInfo() {
    var _a;
    return ((_a = this._relatedLayer) == null ? void 0 : _a.editFieldsInfo) ?? null;
  }
  get timeInfo() {
    var _a;
    return ((_a = this._relatedLayer) == null ? void 0 : _a.timeInfo) ?? null;
  }
};

// node_modules/@arcgis/core/arcade/featureSetUtils.js
function S2() {
  null === a2.applicationCache && (a2.applicationCache = new a2());
}
async function I(e3, t5) {
  if (a2.applicationCache) {
    const r3 = a2.applicationCache.getLayerInfo(e3);
    if (r3) {
      const a6 = await r3;
      return new Be({ url: e3, outFields: t5, sourceJSON: a6 });
    }
    const n8 = new Be({ url: e3, outFields: t5 }), i2 = (async () => (await n8.load(), n8.sourceJSON))();
    if (a2.applicationCache) {
      a2.applicationCache.setLayerInfo(e3, i2);
      try {
        return await i2, n8;
      } catch (a6) {
        throw a2.applicationCache.clearLayerInfo(e3), a6;
      }
    }
    return await i2, n8;
  }
  return new Be({ url: e3, outFields: t5 });
}
async function F(e3, t5, a6, r3, n8, i2 = null) {
  return g3(await I(e3, ["*"]), t5, a6, r3, n8, i2);
}
function g3(e3, t5 = null, r3 = null, n8 = true, i2 = null, s6 = null) {
  var _a;
  if (e3 instanceof Be || ve(e3)) {
    const a6 = { layer: e3, spatialReference: t5, outFields: r3, includeGeometry: n8, lrucache: i2, interceptor: s6 };
    return true == !(e3.url || !e3.source) ? new f6(a6) : new C2(a6);
  }
  return g3(e3.parent, t5, r3, n8, i2, s6).filter(f2.create(e3.parent.subtypeField + "=" + e3.subtypeCode.toString(), (_a = e3.parent) == null ? void 0 : _a.fieldsIndex));
}
async function A4(t5) {
  if (null !== a2.applicationCache) {
    const e3 = a2.applicationCache.getLayerInfo(t5);
    if (null !== e3)
      return e3;
  }
  const a6 = (async () => {
    const a7 = await j(t5, { responseType: "json", query: { f: "json" } });
    return a7.data ? a7.data : null;
  })();
  if (null !== a2.applicationCache) {
    a2.applicationCache.setLayerInfo(t5, a6);
    try {
      return await a6;
    } catch (r3) {
      throw a2.applicationCache.clearLayerInfo(t5), r3;
    }
  }
  return a6;
}
async function N3(t5, a6) {
  const r3 = "QUERYDATAELEMTS:" + a6.toString() + ":" + t5;
  if (null !== a2.applicationCache) {
    const e3 = a2.applicationCache.getLayerInfo(r3);
    if (null !== e3)
      return e3;
  }
  const n8 = (async () => {
    const r4 = await j(t5 + "/queryDataElements", { method: "post", responseType: "json", query: { layers: JSON.stringify([a6.toString()]), f: "json" } });
    if (r4.data) {
      const e3 = r4.data;
      if (e3.layerDataElements && e3.layerDataElements[0])
        return e3.layerDataElements[0];
    }
    throw new o2(n3.DataElementsNotFound);
  })();
  if (null !== a2.applicationCache) {
    a2.applicationCache.setLayerInfo(r3, n8);
    try {
      return await n8;
    } catch (i2) {
      throw a2.applicationCache.clearLayerInfo(r3), i2;
    }
  }
  return n8;
}
async function C3(t5) {
  if (null !== a2.applicationCache) {
    const e3 = a2.applicationCache.getLayerInfo(t5);
    if (null !== e3)
      return e3;
  }
  const a6 = (async () => {
    const a7 = await j(t5, { responseType: "json", query: { f: "json" } });
    if (a7.data) {
      const e3 = a7.data;
      return e3.layers || (e3.layers = []), e3.tables || (e3.tables = []), e3;
    }
    return { layers: [], tables: [] };
  })();
  if (null !== a2.applicationCache) {
    a2.applicationCache.setLayerInfo(t5, a6);
    try {
      return await a6;
    } catch (r3) {
      throw a2.applicationCache.clearLayerInfo(t5), r3;
    }
  }
  return a6;
}
async function T4(e3, t5) {
  const a6 = { metadata: null, networkId: -1, unVersion: 3, terminals: [], queryelem: null, layerNameLkp: {}, lkp: null }, r3 = await C3(e3);
  if (a6.metadata = r3, r3.controllerDatasetLayers && void 0 !== r3.controllerDatasetLayers.utilityNetworkLayerId && null !== r3.controllerDatasetLayers.utilityNetworkLayerId) {
    if (r3.layers)
      for (const e4 of r3.layers)
        a6.layerNameLkp[e4.id] = e4.name;
    if (r3.tables)
      for (const e4 of r3.tables)
        a6.layerNameLkp[e4.id] = e4.name;
    const n8 = r3.controllerDatasetLayers.utilityNetworkLayerId;
    a6.networkId = n8;
    const i2 = await N3(e3, n8);
    if (i2) {
      a6.queryelem = i2, a6.queryelem && a6.queryelem.dataElement && void 0 !== a6.queryelem.dataElement.schemaGeneration && (a6.unVersion = a6.queryelem.dataElement.schemaGeneration), a6.lkp = {}, a6.queryelem.dataElement.domainNetworks || (a6.queryelem.dataElement.domainNetworks = []);
      for (const e4 of a6.queryelem.dataElement.domainNetworks) {
        for (const t6 of e4.edgeSources ?? []) {
          const e5 = { layerId: t6.layerId, sourceId: t6.sourceId, className: a6.layerNameLkp[t6.layerId] ?? null };
          e5.className && (a6.lkp[e5.className] = e5);
        }
        for (const t6 of e4.junctionSources ?? []) {
          const e5 = { layerId: t6.layerId, sourceId: t6.sourceId, className: a6.layerNameLkp[t6.layerId] ?? null };
          e5.className && (a6.lkp[e5.className] = e5);
        }
      }
      if (a6.queryelem.dataElement.terminalConfigurations)
        for (const e4 of a6.queryelem.dataElement.terminalConfigurations)
          for (const t6 of e4.terminals)
            a6.terminals.push({ terminalId: t6.terminalId, terminalName: t6.terminalName });
      const r4 = await A4(e3 + "/" + n8);
      if (r4.systemLayers && void 0 !== r4.systemLayers.associationsTableId && null !== r4.systemLayers.associationsTableId) {
        const n9 = [];
        a6.unVersion >= 4 && (n9.push("STATUS"), n9.push("PERCENTALONG"));
        let i3 = await F(e3 + "/" + r4.systemLayers.associationsTableId.toString(), t5, ["OBJECTID", "FROMNETWORKSOURCEID", "TONETWORKSOURCEID", "FROMGLOBALID", "TOGLOBALID", "TOTERMINALID", "FROMTERMINALID", "ASSOCIATIONTYPE", "ISCONTENTVISIBLE", "GLOBALID", ...n9], false, null, null);
        return await i3.load(), a6.unVersion >= 4 && (i3 = i3.filter(f2.create("STATUS NOT IN (1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62,63)", i3.getFieldsIndex())), await i3.load()), { lkp: a6.lkp, associations: i3, unVersion: a6.unVersion, terminals: a6.terminals };
      }
      return { associations: null, unVersion: a6.unVersion, lkp: null, terminals: [] };
    }
    return { associations: null, unVersion: a6.unVersion, lkp: null, terminals: [] };
  }
  return { associations: null, unVersion: a6.unVersion, lkp: null, terminals: [] };
}
async function k(e3, t5, a6, r3 = null, n8 = null, i2 = true, s6 = null, l2 = null) {
  let o4 = e3.serviceUrl();
  if (!o4)
    return null;
  o4 = "/" === o4.charAt(o4.length - 1) ? o4 + t5.relatedTableId.toString() : o4 + "/" + t5.relatedTableId.toString();
  const u4 = await F(o4, r3, n8, i2, s6, l2);
  return new d4({ layer: e3, relatedLayer: u4, relationship: t5, objectId: a6, spatialReference: r3, outFields: n8, includeGeometry: i2, lrucache: s6, interceptor: l2 });
}
c3.registerAction(), C.registerAction(), a3.registerAction(), f4.registerAction(), a5.registerAction();
var b2 = class extends e {
  constructor(e3, t5 = null, a6 = null, r3 = null) {
    super(), this._map = e3, this._overridespref = t5, this._lrucache = a6, this._interceptor = r3, this._instantLayers = [];
  }
  _makeAndAddFeatureSet(e3, t5 = true, a6 = null) {
    const r3 = g3(e3, this._overridespref, null === a6 ? ["*"] : a6, t5, this._lrucache, this._interceptor);
    return this._instantLayers.push({ featureset: r3, opitem: e3, includeGeometry: t5, outFields: JSON.stringify(a6) }), r3;
  }
  async featureSetByName(e3, t5 = true, r3 = null) {
    if (void 0 !== this._map.loaded && void 0 !== this._map.load && false === this._map.loaded)
      return await this._map.load(), this.featureSetByName(e3, t5, r3);
    null === r3 && (r3 = ["*"]), r3 = (r3 = r3.slice(0)).sort();
    const n8 = JSON.stringify(r3);
    for (let a6 = 0; a6 < this._instantLayers.length; a6++) {
      const r4 = this._instantLayers[a6];
      if (r4.opitem.title === e3 && r4.includeGeometry === t5 && r4.outFields === n8)
        return this._instantLayers[a6].featureset;
    }
    const i2 = [], s6 = this._map.allLayers.find((t6) => {
      if (t6 instanceof Be) {
        if (t6.title === e3)
          return true;
      } else if (ve(t6)) {
        if (t6.title === e3)
          return true;
        i2.push(t6);
      }
      return false;
    });
    if (s6)
      return this._makeAndAddFeatureSet(s6, t5, r3);
    if (this._map.tables) {
      const a6 = this._map.tables.find((t6) => !!(t6.title && t6.title === e3 || t6.title && t6.title === e3));
      if (a6) {
        if (a6 instanceof Be)
          return this._makeAndAddFeatureSet(a6, t5, r3);
        if (a6._materializedTable)
          ;
        else {
          const e4 = a6.outFields ? a6 : { ...a6, outFields: ["*"] };
          a6._materializedTable = new Be(e4);
        }
        return await a6._materializedTable.load(), this._makeAndAddFeatureSet(a6._materializedTable, t5, r3);
      }
    }
    for (const a6 of i2) {
      if ("not-loaded" === a6.loadStatus || "loading" === a6.loadStatus)
        try {
          await a6.load();
        } catch (l2) {
        }
      const n9 = a6.sublayers.find((t6) => t6.title === e3);
      if (n9)
        return this._makeAndAddFeatureSet(n9, t5, r3);
    }
    return null;
  }
  async featureSetById(e3, t5 = true, r3 = ["*"]) {
    if (void 0 !== this._map.loaded && void 0 !== this._map.load && false === this._map.loaded)
      return await this._map.load(), this.featureSetById(e3, t5, r3);
    null === r3 && (r3 = ["*"]), r3 = (r3 = r3.slice(0)).sort();
    const n8 = JSON.stringify(r3);
    for (let a6 = 0; a6 < this._instantLayers.length; a6++) {
      const r4 = this._instantLayers[a6];
      if (r4.opitem.id === e3 && r4.includeGeometry === t5 && r4.outFields === n8)
        return this._instantLayers[a6].featureset;
    }
    const i2 = [], s6 = this._map.allLayers.find((t6) => {
      if (t6 instanceof Be) {
        if (t6.id === e3)
          return true;
      } else if (ve(t6)) {
        if (t6.id === e3)
          return true;
        i2.push(t6);
      }
      return false;
    });
    if (s6)
      return this._makeAndAddFeatureSet(s6, t5, r3);
    if (this._map.tables) {
      const a6 = this._map.tables.find((t6) => t6.id === e3);
      if (a6) {
        if (a6 instanceof Be)
          return this._makeAndAddFeatureSet(a6, t5, r3);
        if (a6._materializedTable)
          ;
        else {
          const e4 = { ...a6, outFields: ["*"] };
          a6._materializedTable = new Be(e4);
        }
        return await a6._materializedTable.load(), this._makeAndAddFeatureSet(a6._materializedTable, t5, r3);
      }
    }
    for (const a6 of i2) {
      if ("not-loaded" === a6.loadStatus || "loading" === a6.loadStatus)
        try {
          await a6.load();
        } catch (l2) {
        }
      const n9 = a6.sublayers.find((t6) => t6.id === e3);
      if (n9)
        return this._makeAndAddFeatureSet(n9, t5, r3);
    }
    return null;
  }
};
var O = class _O extends e {
  constructor(e3, t5 = null, a6 = null, r3 = null) {
    super(), this._url = e3, this._overridespref = t5, this._lrucache = a6, this._interceptor = r3, this.metadata = null, this._instantLayers = [];
  }
  get url() {
    return this._url;
  }
  _makeAndAddFeatureSet(e3, t5 = true, a6 = null) {
    const r3 = g3(e3, this._overridespref, null === a6 ? ["*"] : a6, t5, this._lrucache);
    return this._instantLayers.push({ featureset: r3, opitem: e3, includeGeometry: t5, outFields: JSON.stringify(a6) }), r3;
  }
  async _loadMetaData() {
    const e3 = await C3(this._url);
    return this.metadata = e3, e3;
  }
  load() {
    return this._loadMetaData();
  }
  clone() {
    return new _O(this._url, this._overridespref, this._lrucache, this._interceptor);
  }
  async featureSetByName(e3, t5 = true, a6 = null) {
    null === a6 && (a6 = ["*"]), a6 = (a6 = a6.slice(0)).sort();
    const r3 = JSON.stringify(a6);
    for (let s6 = 0; s6 < this._instantLayers.length; s6++) {
      const a7 = this._instantLayers[s6];
      if (a7.opitem.title === e3 && a7.includeGeometry === t5 && a7.outFields === r3)
        return this._instantLayers[s6].featureset;
    }
    const n8 = await this._loadMetaData();
    let i2 = null;
    for (const s6 of n8.layers ?? [])
      s6.name === e3 && (i2 = s6);
    if (!i2)
      for (const s6 of n8.tables ?? [])
        s6.name === e3 && (i2 = s6);
    if (i2) {
      const e4 = await I(this._url + "/" + i2.id, ["*"]);
      return this._makeAndAddFeatureSet(e4, t5, a6);
    }
    return null;
  }
  async featureSetById(e3, t5 = true, a6 = ["*"]) {
    null === a6 && (a6 = ["*"]), a6 = (a6 = a6.slice(0)).sort();
    const r3 = JSON.stringify(a6);
    e3 = null != e3 ? e3.toString() : "";
    for (let s6 = 0; s6 < this._instantLayers.length; s6++) {
      const a7 = this._instantLayers[s6];
      if (a7.opitem.id === e3 && a7.includeGeometry === t5 && a7.outFields === r3)
        return this._instantLayers[s6].featureset;
    }
    const n8 = await this._loadMetaData();
    let i2 = null;
    for (const s6 of n8.layers ?? [])
      null !== s6.id && void 0 !== s6.id && s6.id.toString() === e3 && (i2 = s6);
    if (!i2)
      for (const s6 of n8.tables ?? [])
        null !== s6.id && void 0 !== s6.id && s6.id.toString() === e3 && (i2 = s6);
    if (i2) {
      const e4 = await I(this._url + "/" + i2.id, ["*"]);
      return this._makeAndAddFeatureSet(e4, t5, a6);
    }
    return null;
  }
};
function E2(e3, t5, a6 = null, r3 = null) {
  return new b2(e3, t5, a6, r3);
}
function D2(e3, t5, a6 = null, r3 = null) {
  return new O(e3, t5, a6, r3);
}
function j3(e3, t5, n8, i2, s6) {
  if (null === e3)
    return null;
  if (e3 instanceof Be) {
    switch (t5) {
      case "datasource":
        return g3(e3, s6, e3.outFields, true, n8, i2).getDataSourceFeatureSet();
      case "parent":
      case "root":
        return g3(e3, s6, e3.outFields, true, n8, i2);
    }
    return null;
  }
  if (ve(e3)) {
    switch (t5) {
      case "datasource":
        return g3(e3, s6, e3.outFields, true, n8, i2).getDataSourceFeatureSet();
      case "parent":
      case "root":
        return g3(e3, s6, e3.outFields, true, n8, i2);
    }
    return null;
  }
  if (we(e3)) {
    switch (t5) {
      case "datasource":
        return g3(e3.parent, s6, e3.parent.outFields, true, n8, i2).getDataSourceFeatureSet();
      case "parent":
      case "root":
        return g3(e3, s6, e3.parent.outFields, true, n8, i2);
    }
    return null;
  }
  if (e3 instanceof v)
    switch (t5) {
      case "datasource":
        return e3.getDataSourceFeatureSet();
      case "parent":
        return e3;
      case "root":
        return e3.getRootFeatureSet();
    }
  return null;
}
async function q(e3, t5, a6, r3, n8, i2, s6, l2 = null) {
  if (a2.applicationCache) {
    const o5 = a2.applicationCache.getLayerInfo(e3 + ":" + i2.url);
    if (o5) {
      const e4 = await o5;
      return g3(new Be({ url: x2(e4.url) + "/" + t5, outFields: ["*"] }), a6, r3, n8, s6, l2);
    }
  }
  const o4 = new x({ id: e3, portal: i2 }).load();
  a2.applicationCache && a2.applicationCache.setLayerInfo(e3 + ":" + i2.url, o4);
  try {
    const e4 = await o4;
    return g3(new Be({ url: x2(e4.url ?? "") + "/" + t5, outFields: ["*"] }), a6, r3, n8, s6, l2);
  } catch (u4) {
    throw a2.applicationCache && a2.applicationCache.clearLayerInfo(e3 + ":" + i2.url), u4;
  }
}

export {
  e,
  c3 as c,
  A3 as A,
  E,
  x4 as x,
  y2 as y,
  D,
  e2,
  a3 as a,
  a5 as a2,
  f6 as f,
  S2 as S,
  F,
  g3 as g,
  T4 as T,
  k,
  E2,
  D2,
  j3 as j,
  q
};
//# sourceMappingURL=chunk-MSHIUU34.js.map
