import {
  r2 as r
} from "./chunk-OYBXMT5R.js";

// node_modules/@arcgis/core/layers/support/sublayerUtils.js
function e(r2, e2, n2) {
  const o2 = e2.flatten(({ sublayers: r3 }) => r3).length;
  if (o2 !== r2.length)
    return true;
  return !!r2.some((r3) => r3.originIdOf("minScale") > n2 || r3.originIdOf("maxScale") > n2 || r3.originIdOf("renderer") > n2 || r3.originIdOf("labelingInfo") > n2 || r3.originIdOf("opacity") > n2 || r3.originIdOf("labelsVisible") > n2 || r3.originIdOf("source") > n2) || !i(r2, e2);
}
function n(e2, n2, o2) {
  return !!e2.some((e3) => {
    const n3 = e3.source;
    return !(!n3 || "map-layer" === n3.type && n3.mapLayerId === e3.id && (null == n3.gdbVersion || n3.gdbVersion === o2)) || e3.originIdOf("renderer") > r.SERVICE || e3.originIdOf("labelingInfo") > r.SERVICE || e3.originIdOf("opacity") > r.SERVICE || e3.originIdOf("labelsVisible") > r.SERVICE;
  }) || !i(e2, n2);
}
function i(r2, e2) {
  if (!r2 || !r2.length || null == e2)
    return true;
  const n2 = e2.slice().reverse().flatten(({ sublayers: r3 }) => r3 && r3.toArray().reverse()).map((r3) => r3.id).toArray();
  if (r2.length > n2.length)
    return false;
  let i2 = 0;
  const o2 = n2.length;
  for (const { id: t } of r2) {
    for (; i2 < o2 && n2[i2] !== t; )
      i2++;
    if (i2 >= o2)
      return false;
  }
  return true;
}
function o(r2) {
  return !!r2 && r2.some((r3) => null != r3.minScale || r3.layerDefinition && null != r3.layerDefinition.minScale);
}

export {
  e,
  n,
  o
};
//# sourceMappingURL=chunk-2XVUXMWQ.js.map
