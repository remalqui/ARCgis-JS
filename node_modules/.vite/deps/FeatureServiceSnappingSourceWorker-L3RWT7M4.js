import {
  E
} from "./chunk-WWUAHPIM.js";
import {
  h,
  r as r2
} from "./chunk-NYLF7BL2.js";
import {
  S,
  c as c4,
  m as m3,
  p
} from "./chunk-HTY52TPQ.js";
import {
  b as b2
} from "./chunk-YC4PIRSZ.js";
import "./chunk-MSLDEOHR.js";
import "./chunk-B5TYSRH2.js";
import "./chunk-32JSK7KN.js";
import "./chunk-YIJWIXDP.js";
import {
  c as c5,
  t as t3
} from "./chunk-7X3AVCRM.js";
import {
  a as a3
} from "./chunk-6DURKJBD.js";
import "./chunk-FN5LEP6H.js";
import {
  m as m2
} from "./chunk-M72PBKGH.js";
import {
  o as o2
} from "./chunk-APDPMAO5.js";
import {
  ee
} from "./chunk-R6YQG4NY.js";
import "./chunk-LLQHB2ZB.js";
import "./chunk-BKDPNGLX.js";
import "./chunk-D5EV57FM.js";
import "./chunk-EISDT6B4.js";
import {
  e as e3
} from "./chunk-LREUW66K.js";
import "./chunk-PM3CFO6N.js";
import "./chunk-6VJWKAPY.js";
import "./chunk-UQOM5GR4.js";
import "./chunk-YBMFRTPB.js";
import {
  ft,
  it,
  yt
} from "./chunk-KKGVORR5.js";
import "./chunk-WTKN55TU.js";
import "./chunk-TDPKDZC3.js";
import "./chunk-M5UHI5WR.js";
import "./chunk-Z36PKTLY.js";
import "./chunk-S2P7FTAG.js";
import "./chunk-RR2V4HRU.js";
import "./chunk-WZAASLQW.js";
import "./chunk-FJYIB7HF.js";
import "./chunk-PRUCXFZ4.js";
import "./chunk-KLV5OJVG.js";
import "./chunk-TQGXXOXA.js";
import "./chunk-SO7CVIZK.js";
import {
  j as j2
} from "./chunk-PX3FFFQ5.js";
import {
  t as t2
} from "./chunk-Y2ZDD3I4.js";
import "./chunk-MUO4EIZP.js";
import "./chunk-42RWGG3D.js";
import {
  w
} from "./chunk-G5WJIWPP.js";
import {
  c as c3,
  d as d2
} from "./chunk-LNMNRMVX.js";
import "./chunk-OO4A3EBQ.js";
import "./chunk-ITRH3PGV.js";
import "./chunk-BRDC7DKL.js";
import "./chunk-ZBWBCN2I.js";
import "./chunk-GZTLZ6RD.js";
import "./chunk-KTEJJM3A.js";
import "./chunk-SO6DBMQG.js";
import "./chunk-KTSEQWMB.js";
import "./chunk-QXGO5RRL.js";
import "./chunk-7KM4XBUC.js";
import "./chunk-OZXJDVTE.js";
import {
  b,
  d
} from "./chunk-UKJF25H6.js";
import "./chunk-KSQTM6XI.js";
import "./chunk-BVNZ3ETW.js";
import "./chunk-FJQ7HIY7.js";
import "./chunk-T4XWQYGC.js";
import "./chunk-4H5JODOT.js";
import "./chunk-TCASQSKO.js";
import {
  c as c2,
  i,
  l as l2,
  o,
  q
} from "./chunk-5HAVROZG.js";
import "./chunk-MOPR7RFH.js";
import "./chunk-KW3ZNPTA.js";
import "./chunk-TJB4CGOM.js";
import {
  U,
  j,
  l
} from "./chunk-XN5VV437.js";
import "./chunk-ODFH3BSN.js";
import {
  n
} from "./chunk-WBSPL6CJ.js";
import "./chunk-LQVUN6IS.js";
import {
  M
} from "./chunk-3GSONYPC.js";
import {
  T2 as T,
  f as f2
} from "./chunk-SFV6XLDZ.js";
import "./chunk-3PLRSFLA.js";
import "./chunk-VBD33VNW.js";
import "./chunk-7A5C2EQ3.js";
import {
  m,
  t2 as t,
  y3 as y
} from "./chunk-OYBXMT5R.js";
import {
  a2,
  e as e2
} from "./chunk-CIDWM2UN.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";
import "./chunk-SHJI4PR4.js";
import {
  r
} from "./chunk-2YSHZRCT.js";
import "./chunk-HKVL2MJK.js";
import "./chunk-MH2LNFJK.js";
import "./chunk-O3CHVGVF.js";
import {
  C,
  f,
  s as s3
} from "./chunk-HNHXEGH2.js";
import "./chunk-DWOEYHKS.js";
import {
  s2
} from "./chunk-W2N7YT6I.js";
import {
  a,
  c
} from "./chunk-I5JT24BO.js";
import {
  s
} from "./chunk-I4U7MQNO.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/views/interactive/snapping/featureSources/snappingCandidateElevationAlignment.js
function i2(e5 = false, t6) {
  if (e5) {
    const { elevationInfo: e6, alignPointsInFeatures: s5, spatialReference: n4 } = t6;
    return new c6(e6, s5, n4);
  }
  return new a4();
}
var a4 = class {
  async alignCandidates(e5, t6) {
    return e5;
  }
  notifyElevationSourceChange() {
  }
};
var r3 = 1024;
var c6 = class {
  constructor(t6, s5, o4) {
    this._elevationInfo = t6, this._alignPointsInFeatures = s5, this.spatialReference = o4, this._alignmentsCache = new e3(r3), this._cacheVersion = 0, this._metersPerVerticalUnit = T(o4);
  }
  async alignCandidates(e5, t6) {
    const s5 = this._elevationInfo;
    return null == s5 || "absolute-height" !== s5.mode || s5.featureExpressionInfo ? this._alignComputedElevationCandidates(e5, t6) : (this._alignAbsoluteElevationCandidates(e5, s5), e5);
  }
  notifyElevationSourceChange() {
    this._alignmentsCache.clear(), this._cacheVersion++;
  }
  _alignAbsoluteElevationCandidates(e5, t6) {
    const { offset: s5, unit: n4 } = t6;
    if (null == s5)
      return;
    const i5 = s5 * (r2(n4 ?? "meters") / this._metersPerVerticalUnit);
    for (const o4 of e5)
      switch (o4.type) {
        case "edge":
          o4.start.z += i5, o4.end.z += i5;
          continue;
        case "vertex":
          o4.target.z += i5;
          continue;
      }
  }
  async _alignComputedElevationCandidates(e5, n4) {
    const o4 = /* @__PURE__ */ new Map();
    for (const s5 of e5)
      r(o4, s5.objectId, d3).push(s5);
    const [i5, a7, r8] = this._prepareQuery(o4), c9 = await this._alignPointsInFeatures(i5, n4);
    s3(n4);
    if (r8 !== this._cacheVersion)
      return this._alignComputedElevationCandidates(e5, n4);
    this._applyCacheAndResponse(i5, c9, a7);
    const { drapedObjectIds: l4, failedObjectIds: h3 } = c9, u2 = [];
    for (const t6 of e5) {
      const { objectId: e6 } = t6;
      l4.has(e6) && "edge" === t6.type && (t6.draped = true), h3.has(e6) || u2.push(t6);
    }
    return u2;
  }
  _prepareQuery(e5) {
    const t6 = [], s5 = [];
    for (const [n4, o4] of e5) {
      const e6 = [];
      for (const t7 of o4)
        this._addToQueriesOrCachedResult(n4, t7.target, e6, s5), "edge" === t7.type && (this._addToQueriesOrCachedResult(n4, t7.start, e6, s5), this._addToQueriesOrCachedResult(n4, t7.end, e6, s5));
      0 !== e6.length && t6.push({ objectId: n4, points: e6 });
    }
    return [t6, s5, this._cacheVersion];
  }
  _addToQueriesOrCachedResult(e5, t6, s5, n4) {
    const o4 = h2(e5, t6), i5 = this._alignmentsCache.get(o4);
    null == i5 ? s5.push(t6) : n4.push(new l3(t6, i5));
  }
  _applyCacheAndResponse(e5, { elevations: t6, drapedObjectIds: s5, failedObjectIds: n4 }, o4) {
    for (const r8 of o4)
      r8.apply();
    let i5 = 0;
    const a7 = this._alignmentsCache;
    for (const { objectId: r8, points: c9 } of e5) {
      if (n4.has(r8)) {
        i5 += c9.length;
        continue;
      }
      const e6 = !s5.has(r8);
      for (const s6 of c9) {
        const n5 = h2(r8, s6), o5 = t6[i5++];
        s6.z = o5, e6 && a7.put(n5, o5, 1);
      }
    }
  }
};
var l3 = class {
  constructor(e5, t6) {
    this.point = e5, this.z = t6;
  }
  apply() {
    this.point.z = this.z;
  }
};
function h2(e5, { x: t6, y: s5, z: n4 }) {
  return `${e5}-${t6}-${s5}-${n4 ?? 0}}`;
}
function d3() {
  return [];
}

// node_modules/@arcgis/core/views/interactive/snapping/featureSources/snappingCandidateElevationFilter.js
var t4 = class {
  filter(t6, n4) {
    return n4;
  }
  notifyElevationSourceChange() {
  }
};
var n2 = class {
  filter(t6, n4) {
    const { point: r8, distance: c9 } = t6, { z: i5 } = r8;
    if (!(null != i5))
      return n4;
    if (0 === n4.length)
      return n4;
    const o4 = s4(c9), u2 = this._updateCandidatesTo3D(n4, r8, o4).filter(e4);
    return u2.sort(a5), u2;
  }
  _updateCandidatesTo3D(t6, n4, e5) {
    for (const r8 of t6)
      switch (r8.type) {
        case "edge":
          c7(r8, n4, e5);
          continue;
        case "vertex":
          o3(r8, n4, e5);
          continue;
      }
    return t6;
  }
};
function e4(t6) {
  return t6.distance <= 1;
}
function r4(e5 = false) {
  return e5 ? new n2() : new t4();
}
function c7(t6, n4, { x: e5, y: r8, z: c9 }) {
  const { start: o4, end: s5, target: a7 } = t6;
  t6.draped || i3(a7, n4, o4, s5);
  const u2 = (n4.x - a7.x) / e5, d4 = (n4.y - a7.y) / r8, f3 = (n4.z - a7.z) / c9;
  t6.distance = Math.sqrt(u2 * u2 + d4 * d4 + f3 * f3);
}
function i3(t6, n4, e5, r8) {
  const c9 = r8.x - e5.x, i5 = r8.y - e5.y, o4 = r8.z - e5.z, s5 = c9 * c9 + i5 * i5 + o4 * o4, a7 = (n4.x - e5.x) * c9 + (n4.y - e5.y) * i5 + o4 * (n4.z - e5.z), u2 = Math.min(1, Math.max(0, a7 / s5)), d4 = e5.x + c9 * u2, f3 = e5.y + i5 * u2, x = e5.z + o4 * u2;
  t6.x = d4, t6.y = f3, t6.z = x;
}
function o3(t6, n4, { x: e5, y: r8, z: c9 }) {
  const { target: i5 } = t6, o4 = (n4.x - i5.x) / e5, s5 = (n4.y - i5.y) / r8, a7 = (n4.z - i5.z) / c9, u2 = Math.sqrt(o4 * o4 + s5 * s5 + a7 * a7);
  t6.distance = u2;
}
function s4(t6) {
  return "number" == typeof t6 ? { x: t6, y: t6, z: t6 } : t6;
}
function a5(t6, n4) {
  return t6.distance - n4.distance;
}

// node_modules/@arcgis/core/views/interactive/snapping/featureSources/symbologySnappingCandidates.js
function n3(t6 = false, e5) {
  return t6 ? new i4(e5) : new c8();
}
var c8 = class {
  async fetch() {
    return [];
  }
  notifySymbologyChange() {
  }
};
var r5 = 1024;
var i4 = class {
  constructor(t6) {
    this._getSymbologyCandidates = t6, this._candidatesCache = new e3(r5), this._cacheVersion = 0;
  }
  async fetch(e5, o4) {
    if (0 === e5.length)
      return [];
    const n4 = [], c9 = [], r8 = this._candidatesCache;
    for (const s5 of e5) {
      const e6 = a6(s5), o5 = r8.get(e6);
      if (o5)
        for (const s6 of o5)
          c9.push(a(s6));
      else
        n4.push(s5), r8.put(e6, [], 1);
    }
    if (0 === n4.length)
      return c9;
    const i5 = this._cacheVersion, { candidates: h3, sourceCandidateIndices: d4 } = await this._getSymbologyCandidates(n4, o4);
    s3(o4);
    if (i5 !== this._cacheVersion)
      return this.fetch(e5, o4);
    const f3 = [], { length: g2 } = h3;
    for (let s5 = 0; s5 < g2; ++s5) {
      const e6 = h3[s5], o5 = a6(n4[d4[s5]]), c10 = r8.get(o5);
      c10.push(e6), r8.put(o5, c10, c10.length), f3.push(a(e6));
    }
    return c9.concat(f3);
  }
  notifySymbologyChange() {
    this._candidatesCache.clear(), this._cacheVersion++;
  }
};
function a6(t6) {
  switch (t6.type) {
    case "vertex": {
      const { objectId: e5, target: s5 } = t6, n4 = `${e5}-vertex-${s5.x}-${s5.y}-${s5.z ?? 0}`;
      return c(n4).toString();
    }
    case "edge": {
      const { objectId: e5, start: s5, end: n4 } = t6, c9 = `${e5}-edge-${s5.x}-${s5.y}-${s5.z ?? 0}-to-${n4.x}-${n4.y}-${n4.z ?? 0}`;
      return c(c9).toString();
    }
    default:
      return "";
  }
}

// node_modules/@arcgis/core/core/AsyncSequence.js
var r6 = class extends m {
  constructor() {
    super(...arguments), this.updating = false, this._pending = [];
  }
  push(s5, t6) {
    this._pending.push({ promise: s5, callback: t6 }), 1 === this._pending.length && this._process();
  }
  _process() {
    if (!this._pending.length)
      return void (this.updating = false);
    this.updating = true;
    const s5 = this._pending[0];
    s5.promise.then((t6) => s5.callback(t6)).catch(() => {
    }).then(() => {
      this._pending.shift(), this._process();
    });
  }
};
e([y()], r6.prototype, "updating", void 0), r6 = e([a2("esri.core.AsyncSequence")], r6);

// node_modules/@arcgis/core/views/interactive/snapping/featureSources/featureServiceSource/PendingFeatureTile.js
var r7 = class {
  constructor(t6, e5) {
    this.data = t6, this.resolution = e5, this.state = { type: u.CREATED }, this.alive = true;
  }
  process(t6) {
    switch (this.state.type) {
      case u.CREATED:
        return this.state = this._gotoFetchCount(this.state, t6), this.state.task.promise.then(t6.resume, t6.resume);
      case u.FETCH_COUNT:
        break;
      case u.FETCHED_COUNT:
        return this.state = this._gotoFetchFeatures(this.state, t6), this.state.task.promise.then(t6.resume, t6.resume);
      case u.FETCH_FEATURES:
        break;
      case u.FETCHED_FEATURES:
        this.state = this._goToDone(this.state, t6);
      case u.DONE:
    }
    return null;
  }
  get debugInfo() {
    return { data: this.data, featureCount: this._featureCount, state: this._stateToString };
  }
  get _featureCount() {
    switch (this.state.type) {
      case u.CREATED:
      case u.FETCH_COUNT:
        return 0;
      case u.FETCHED_COUNT:
        return this.state.featureCount;
      case u.FETCH_FEATURES:
        return this.state.previous.featureCount;
      case u.FETCHED_FEATURES:
        return this.state.features.length;
      case u.DONE:
        return this.state.previous.features.length;
    }
  }
  get _stateToString() {
    switch (this.state.type) {
      case u.CREATED:
        return "created";
      case u.FETCH_COUNT:
        return "fetch-count";
      case u.FETCHED_COUNT:
        return "fetched-count";
      case u.FETCH_FEATURES:
        return "fetch-features";
      case u.FETCHED_FEATURES:
        return "fetched-features";
      case u.DONE:
        return "done";
    }
  }
  _gotoFetchCount(s5, a7) {
    return { type: u.FETCH_COUNT, previous: s5, task: d(async (t6) => {
      const s6 = await b(a7.fetchCount(this, t6));
      this.state.type === u.FETCH_COUNT && (this.state = this._gotoFetchedCount(this.state, s6.ok ? s6.value : 1 / 0));
    }) };
  }
  _gotoFetchedCount(t6, e5) {
    return { type: u.FETCHED_COUNT, featureCount: e5, previous: t6 };
  }
  _gotoFetchFeatures(s5, a7) {
    return { type: u.FETCH_FEATURES, previous: s5, task: d(async (t6) => {
      const E5 = await b(a7.fetchFeatures(this, s5.featureCount, t6));
      this.state.type === u.FETCH_FEATURES && (this.state = this._gotoFetchedFeatures(this.state, E5.ok ? E5.value : []));
    }) };
  }
  _gotoFetchedFeatures(t6, e5) {
    return { type: u.FETCHED_FEATURES, previous: t6, features: e5 };
  }
  _goToDone(t6, e5) {
    return e5.finish(this, t6.features), { type: u.DONE, previous: t6 };
  }
  reset() {
    const t6 = this.state;
    switch (this.state = { type: u.CREATED }, t6.type) {
      case u.CREATED:
      case u.FETCHED_COUNT:
      case u.FETCHED_FEATURES:
      case u.DONE:
        break;
      case u.FETCH_COUNT:
      case u.FETCH_FEATURES:
        t6.task.abort();
    }
  }
  intersects(t6) {
    return null == t6 || !this.data.extent || (o(t6, T2), q(this.data.extent, T2));
  }
};
var u;
!function(t6) {
  t6[t6.CREATED = 0] = "CREATED", t6[t6.FETCH_COUNT = 1] = "FETCH_COUNT", t6[t6.FETCHED_COUNT = 2] = "FETCHED_COUNT", t6[t6.FETCH_FEATURES = 3] = "FETCH_FEATURES", t6[t6.FETCHED_FEATURES = 4] = "FETCHED_FEATURES", t6[t6.DONE = 5] = "DONE";
}(u || (u = {}));
var T2 = i();

// node_modules/@arcgis/core/views/interactive/snapping/featureSources/featureServiceSource/FeatureServiceTiledFetcher.js
var I = class extends d2 {
  get _minimumVerticesPerFeature() {
    var _a;
    switch ((_a = this.store) == null ? void 0 : _a.featureStore.geometryType) {
      case "esriGeometryPoint":
      case "esriGeometryMultipoint":
        return 1;
      case "esriGeometryPolygon":
        return 4;
      case "esriGeometryPolyline":
        return 2;
    }
  }
  set filter(e5) {
    const t6 = this._get("filter"), i5 = this._filterProperties(e5);
    JSON.stringify(t6) !== JSON.stringify(i5) && this._set("filter", i5);
  }
  set customParameters(e5) {
    const t6 = this._get("customParameters");
    JSON.stringify(t6) !== JSON.stringify(e5) && this._set("customParameters", e5);
  }
  get _configuration() {
    return { filter: this.filter, customParameters: this.customParameters, tileInfo: this.tileInfo, tileSize: this.tileSize };
  }
  set tileInfo(e5) {
    const t6 = this._get("tileInfo");
    t6 !== e5 && (null != e5 && null != t6 && JSON.stringify(e5) === JSON.stringify(t6) || (this._set("tileInfo", e5), this.store.tileInfo = e5));
  }
  set tileSize(e5) {
    this._get("tileSize") !== e5 && this._set("tileSize", e5);
  }
  get updating() {
    return this.updatingExcludingEdits || this._pendingEdits.updating;
  }
  get updatingExcludingEdits() {
    return this.updatingHandles.updating;
  }
  get hasZ() {
    return this.store.featureStore.hasZ;
  }
  constructor(e5) {
    super(e5), this.tilesOfInterest = [], this.availability = 0, this._pendingTiles = /* @__PURE__ */ new Map(), this._pendingEdits = new r6(), this._pendingEditsAbortController = new AbortController();
  }
  initialize() {
    this._initializeFetchExtent(), this.updatingHandles.add(() => this._configuration, () => this.refresh()), this.updatingHandles.add(() => this.tilesOfInterest, (e5, i5) => {
      s(e5, i5, ({ id: e6 }, { id: t6 }) => e6 === t6) || this._process();
    }, U);
  }
  destroy() {
    this._pendingTiles.forEach((e5) => this._deletePendingTile(e5)), this._pendingTiles.clear(), this.store.destroy(), this.tilesOfInterest.length = 0, this._pendingEditsAbortController.abort(), this._pendingEditsAbortController = null;
  }
  refresh() {
    this.store.refresh(), this._pendingTiles.forEach((e5) => this._deletePendingTile(e5)), this._process();
  }
  applyEdits(e5) {
    this._pendingEdits.push(e5, async (e6) => {
      if (0 === e6.addedFeatures.length && 0 === e6.updatedFeatures.length && 0 === e6.deletedFeatures.length)
        return;
      for (const [, i5] of this._pendingTiles)
        i5.reset();
      const t6 = { ...e6, deletedFeatures: e6.deletedFeatures.map(({ objectId: e7, globalId: t7 }) => e7 && -1 !== e7 ? e7 : this._lookupObjectIdByGlobalId(t7)) };
      await this.updatingHandles.addPromise(this.store.processEdits(t6, (e7, t7) => this._queryFeaturesById(e7, t7), this._pendingEditsAbortController.signal)), this._processPendingTiles();
    });
  }
  _initializeFetchExtent() {
    if (!this.capabilities.query.supportsExtent || !w(this.url))
      return;
    const e5 = d(async (e6) => {
      var _a;
      try {
        const t6 = await S(this.url, new b2({ where: "1=1", outSpatialReference: this.spatialReference, cacheHint: this.capabilities.query.supportsCacheHint ?? void 0 }), { query: this._configuration.customParameters, signal: e6 });
        this.store.extent = M.fromJSON((_a = t6.data) == null ? void 0 : _a.extent);
      } catch (t6) {
        f(t6), s2.getLogger(this).warn("Failed to fetch data extent", t6);
      }
    });
    this.updatingHandles.addPromise(e5.promise.then(() => this._process())), this.handles.add(e2(() => e5.abort()));
  }
  get debugInfo() {
    return { numberOfFeatures: this.store.featureStore.numFeatures, tilesOfInterest: this.tilesOfInterest, pendingTiles: Array.from(this._pendingTiles.values()).map((e5) => e5.debugInfo), storedTiles: this.store.debugInfo };
  }
  _process() {
    this._markTilesNotAlive(), this._createPendingTiles(), this._deletePendingTiles(), this._processPendingTiles();
  }
  _markTilesNotAlive() {
    for (const [, e5] of this._pendingTiles)
      e5.alive = false;
  }
  _createPendingTiles() {
    const e5 = this._collectMissingTilesInfo();
    if (this._setAvailability(null == e5 ? 1 : e5.coveredArea / e5.fullArea), null != e5)
      for (const { data: t6, resolution: i5 } of e5.missingTiles) {
        const e6 = this._pendingTiles.get(t6.id);
        e6 ? (e6.resolution = i5, e6.alive = true) : this._createPendingTile(t6, i5);
      }
  }
  _collectMissingTilesInfo() {
    let e5 = null;
    for (let t6 = this.tilesOfInterest.length - 1; t6 >= 0; t6--) {
      const i5 = this.tilesOfInterest[t6], s5 = this.store.process(i5, (e6, t7) => this._verifyTileComplexity(e6, t7));
      null == e5 ? e5 = s5 : e5.prepend(s5);
    }
    return e5;
  }
  _deletePendingTiles() {
    for (const [, e5] of this._pendingTiles)
      e5.alive || this._deletePendingTile(e5);
  }
  _processPendingTiles() {
    const e5 = { fetchCount: (e6, t6) => this._fetchCount(e6, t6), fetchFeatures: (e6, t6, i5) => this._fetchFeatures(e6, t6, i5), finish: (e6, t6) => this._finishPendingTile(e6, t6), resume: () => this._processPendingTiles() };
    if (this._ensureFetchAllCounts(e5))
      for (const [, t6] of this._pendingTiles)
        this._verifyTileComplexity(this.store.getFeatureCount(t6.data), t6.resolution) && this.updatingHandles.addPromise(t6.process(e5));
  }
  _verifyTileComplexity(e5, t6) {
    return this._verifyVertexComplexity(e5) && this._verifyFeatureDensity(e5, t6);
  }
  _verifyVertexComplexity(e5) {
    return e5 * this._minimumVerticesPerFeature < C2;
  }
  _verifyFeatureDensity(e5, t6) {
    if (null == this.tileInfo)
      return false;
    const i5 = this.tileSize * t6;
    return e5 * (E2 / (i5 * i5)) < S2;
  }
  _ensureFetchAllCounts(e5) {
    let t6 = true;
    for (const [, i5] of this._pendingTiles)
      i5.state.type < u.FETCHED_COUNT && this.updatingHandles.addPromise(i5.process(e5)), i5.state.type <= u.FETCH_COUNT && (t6 = false);
    return t6;
  }
  _finishPendingTile(e5, t6) {
    this.store.add(e5.data, t6), this._deletePendingTile(e5), this._updateAvailability();
  }
  _updateAvailability() {
    const e5 = this._collectMissingTilesInfo();
    this._setAvailability(null == e5 ? 1 : e5.coveredArea / e5.fullArea);
  }
  _setAvailability(e5) {
    this._set("availability", e5);
  }
  _createPendingTile(e5, t6) {
    const i5 = new r7(e5, t6);
    return this._pendingTiles.set(e5.id, i5), i5;
  }
  _deletePendingTile(e5) {
    e5.reset(), this._pendingTiles.delete(e5.data.id);
  }
  async _fetchCount(e5, t6) {
    return this.store.fetchCount(e5.data, this.url, this._createCountQuery(e5), { query: this.customParameters, timeout: O, signal: t6 });
  }
  async _fetchFeatures(e5, t6, i5) {
    let s5 = 0;
    const r8 = [];
    let n4 = 0, o4 = t6;
    for (; ; ) {
      const a7 = this._createFeaturesQuery(e5), l4 = this._setPagingParameters(a7, s5, o4), { features: u2, exceededTransferLimit: c9 } = await this._queryFeatures(a7, i5);
      l4 && (s5 += a7.num), n4 += u2.length;
      for (const e6 of u2)
        r8.push(e6);
      if (o4 = t6 - n4, !l4 || !c9 || o4 <= 0)
        return r8;
    }
  }
  _filterProperties(e5) {
    return null == e5 ? { where: "1=1", gdbVersion: void 0, timeExtent: void 0 } : { where: e5.where || "1=1", timeExtent: e5.timeExtent, gdbVersion: e5.gdbVersion };
  }
  _lookupObjectIdByGlobalId(e5) {
    const t6 = this.globalIdField, i5 = this.objectIdField;
    if (null == t6)
      throw new Error("Expected globalIdField to be defined");
    let s5 = null;
    if (this.store.featureStore.forEach((r8) => {
      e5 === r8.attributes[t6] && (s5 = r8.objectId ?? r8.attributes[i5]);
    }), null == s5)
      throw new Error(`Expected to find a feature with globalId ${e5}`);
    return s5;
  }
  _queryFeaturesById(e5, t6) {
    const i5 = this._createFeaturesQuery();
    return i5.objectIds = e5, this._queryFeatures(i5, t6);
  }
  _queryFeatures(e5, t6) {
    return this.capabilities.query.supportsFormatPBF ? this._queryFeaturesPBF(e5, t6) : this._queryFeaturesJSON(e5, t6);
  }
  async _queryFeaturesPBF(e5, t6) {
    const { sourceSpatialReference: i5 } = this, { data: s5 } = await c4(this.url, e5, new a3({ sourceSpatialReference: i5 }), { query: this._configuration.customParameters, timeout: O, signal: t6 });
    return ft(s5);
  }
  async _queryFeaturesJSON(e5, t6) {
    const { sourceSpatialReference: i5 } = this, { data: s5 } = await m3(this.url, e5, i5, { query: this._configuration.customParameters, timeout: O, signal: t6 });
    return it(s5, this.objectIdField);
  }
  _createCountQuery(e5) {
    const t6 = this._createBaseQuery(e5);
    return this.capabilities.query.supportsCacheHint && (t6.cacheHint = true), t6;
  }
  _createFeaturesQuery(e5 = null) {
    const t6 = this._createBaseQuery(e5);
    return t6.outFields = this.globalIdField ? [this.globalIdField, this.objectIdField] : [this.objectIdField], t6.returnGeometry = true, null != e5 && (this.capabilities.query.supportsResultType ? t6.resultType = "tile" : this.capabilities.query.supportsCacheHint && (t6.cacheHint = true)), t6;
  }
  _createBaseQuery(e5) {
    const t6 = new b2({ returnZ: this.hasZ, returnM: false, geometry: null != this.tileInfo && null != e5 ? c2(e5.data.extent, this.tileInfo.spatialReference) : void 0 }), i5 = this._configuration.filter;
    return null != i5 && (t6.where = i5.where, t6.gdbVersion = i5.gdbVersion, t6.timeExtent = i5.timeExtent), t6.outSpatialReference = this.spatialReference, t6;
  }
  _setPagingParameters(e5, t6, i5) {
    if (!this.capabilities.query.supportsPagination)
      return false;
    const { supportsMaxRecordCountFactor: s5, supportsCacheHint: r8, tileMaxRecordCount: n4, maxRecordCount: o4, supportsResultType: a7 } = this.capabilities.query, l4 = s5 ? b2.MAX_MAX_RECORD_COUNT_FACTOR : 1, u2 = l4 * ((a7 || r8) && n4 ? n4 : o4 || v);
    return e5.start = t6, s5 ? (e5.maxRecordCountFactor = Math.min(l4, Math.ceil(i5 / u2)), e5.num = Math.min(i5, e5.maxRecordCountFactor * u2)) : e5.num = Math.min(i5, u2), true;
  }
};
e([y({ constructOnly: true })], I.prototype, "url", void 0), e([y({ constructOnly: true })], I.prototype, "objectIdField", void 0), e([y({ constructOnly: true })], I.prototype, "globalIdField", void 0), e([y({ constructOnly: true })], I.prototype, "capabilities", void 0), e([y({ constructOnly: true })], I.prototype, "sourceSpatialReference", void 0), e([y({ constructOnly: true })], I.prototype, "spatialReference", void 0), e([y({ constructOnly: true })], I.prototype, "store", void 0), e([y({ readOnly: true })], I.prototype, "_minimumVerticesPerFeature", null), e([y()], I.prototype, "filter", null), e([y()], I.prototype, "customParameters", null), e([y({ readOnly: true })], I.prototype, "_configuration", null), e([y()], I.prototype, "tileInfo", null), e([y()], I.prototype, "tileSize", null), e([y()], I.prototype, "tilesOfInterest", void 0), e([y({ readOnly: true })], I.prototype, "updating", null), e([y({ readOnly: true })], I.prototype, "updatingExcludingEdits", null), e([y({ readOnly: true })], I.prototype, "availability", void 0), e([y()], I.prototype, "hasZ", null), I = e([a2("esri.views.interactive.snapping.featureSources.featureServiceSource.FeatureServiceTiledFetcher")], I);
var v = 2e3;
var O = 6e5;
var C2 = 1e6;
var E2 = 25;
var S2 = 1;

// node_modules/@arcgis/core/views/interactive/snapping/featureSources/featureServiceSource/FeatureServiceTileCache.js
var t5 = class {
  constructor() {
    this._store = /* @__PURE__ */ new Map(), this._byteSize = 0;
  }
  set(t6, e5) {
    this.delete(t6), this._store.set(t6, e5), this._byteSize += e5.byteSize;
  }
  delete(t6) {
    const e5 = this._store.get(t6);
    return !!this._store.delete(t6) && (null != e5 && (this._byteSize -= e5.byteSize), true);
  }
  get(t6) {
    return this._used(t6), this._store.get(t6);
  }
  has(t6) {
    return this._used(t6), this._store.has(t6);
  }
  clear() {
    this._store.clear();
  }
  applyByteSizeLimit(t6, e5) {
    for (const [s5, r8] of this._store) {
      if (this._byteSize <= t6)
        break;
      this.delete(s5), e5(r8);
    }
  }
  values() {
    return this._store.values();
  }
  [Symbol.iterator]() {
    return this._store[Symbol.iterator]();
  }
  _used(t6) {
    const e5 = this._store.get(t6);
    e5 && (this._store.delete(t6), this._store.set(t6, e5));
  }
};

// node_modules/@arcgis/core/views/interactive/snapping/featureSources/featureServiceSource/FeatureServiceTileStore.js
var g = class extends m {
  constructor(e5) {
    super(e5), this.tileInfo = null, this.extent = null, this.maximumByteSize = 10 * E.MEGABYTES, this._tileBounds = new o2(), this._tiles = new t5(), this._refCounts = /* @__PURE__ */ new Map(), this._tileFeatureCounts = /* @__PURE__ */ new Map(), this._tmpBoundingRect = i();
  }
  add(e5, t6) {
    const s5 = [];
    for (const i5 of t6)
      this._referenceFeature(i5.objectId) === I2.ADDED && s5.push(i5);
    this._addTileStorage(e5, new Set(t6.map((e6) => e6.objectId)), y2(t6)), this.featureStore.addMany(s5), this._tiles.applyByteSizeLimit(this.maximumByteSize, (e6) => this._removeTileStorage(e6));
  }
  destroy() {
    this.clear(), this._tileFeatureCounts.clear();
  }
  clear() {
    this.featureStore.clear(), this._tileBounds.clear(), this._tiles.clear(), this._refCounts.clear();
  }
  refresh() {
    this.clear(), this._tileFeatureCounts.clear();
  }
  processEdits(e5, t6, s5) {
    return this._processEditsDelete(e5.deletedFeatures.concat(e5.updatedFeatures)), this._processEditsRefetch(e5.addedFeatures.concat(e5.updatedFeatures), t6, s5);
  }
  _addTileStorage(e5, t6, s5) {
    const i5 = e5.id;
    this._tiles.set(i5, new E3(e5, t6, s5)), this._tileBounds.set(i5, e5.extent), this._tileFeatureCounts.set(i5, t6.size);
  }
  _remove({ id: e5 }) {
    const t6 = this._tiles.get(e5);
    t6 && this._removeTileStorage(t6);
  }
  _removeTileStorage(e5) {
    const t6 = [];
    for (const i5 of e5.objectIds)
      this._unreferenceFeature(i5) === I2.REMOVED && t6.push(i5);
    this.featureStore.removeManyById(t6);
    const s5 = e5.data.id;
    this._tiles.delete(s5), this._tileBounds.delete(s5);
  }
  _processEditsDelete(e5) {
    this.featureStore.removeManyById(e5);
    for (const [, t6] of this._tiles) {
      for (const s5 of e5)
        t6.objectIds.delete(s5);
      this._tileFeatureCounts.set(t6.data.id, t6.objectIds.size);
    }
    for (const t6 of e5)
      this._refCounts.delete(t6);
  }
  async _processEditsRefetch(e5, t6, s5) {
    const i5 = (await t6(e5, s5)).features, { hasZ: r8, hasM: o4 } = this.featureStore;
    for (const n4 of i5) {
      const e6 = yt(this._tmpBoundingRect, n4.geometry, r8, o4);
      null != e6 && this._tileBounds.forEachInBounds(e6, (e7) => {
        const t7 = this._tiles.get(e7);
        this.featureStore.add(n4);
        const s6 = n4.objectId;
        t7.objectIds.has(s6) || (t7.objectIds.add(s6), this._referenceFeature(s6), this._tileFeatureCounts.set(t7.data.id, t7.objectIds.size));
      });
    }
  }
  process(e5, t6 = () => true) {
    if (null == this.tileInfo || !e5.extent || null != this.extent && !q(o(this.extent, this._tmpBoundingRect), e5.extent))
      return new T3(e5);
    if (this._tiles.has(e5.id))
      return new T3(e5);
    const s5 = this._createTileTree(e5, this.tileInfo);
    return this._simplify(s5, t6, null, 0, 1), this._collectMissingTiles(e5, s5, this.tileInfo);
  }
  get debugInfo() {
    return Array.from(this._tiles.values()).map(({ data: e5 }) => ({ data: e5, featureCount: this._tileFeatureCounts.get(e5.id) || 0 }));
  }
  getFeatureCount(e5) {
    return this._tileFeatureCounts.get(e5.id) ?? 0;
  }
  async fetchCount(e5, t6, s5, i5) {
    const r8 = this._tileFeatureCounts.get(e5.id);
    if (null != r8)
      return r8;
    const o4 = await p(t6, s5, i5);
    return this._tileFeatureCounts.set(e5.id, o4.data.count), o4.data.count;
  }
  _createTileTree(e5, t6) {
    const s5 = new S3(e5.level, e5.row, e5.col);
    return t6.updateTileInfo(s5, j2.ExtrapolateOptions.POWER_OF_TWO), this._tileBounds.forEachInBounds(e5.extent, (i5) => {
      var _a;
      const r8 = (_a = this._tiles.get(i5)) == null ? void 0 : _a.data;
      r8 && this._tilesAreRelated(e5, r8) && this._populateChildren(s5, r8, t6, this._tileFeatureCounts.get(r8.id) || 0);
    }), s5;
  }
  _tilesAreRelated(e5, t6) {
    if (!e5 || !t6)
      return false;
    if (e5.level === t6.level)
      return e5.row === t6.row && e5.col === t6.col;
    const s5 = e5.level < t6.level, i5 = s5 ? e5 : t6, r8 = s5 ? t6 : e5, o4 = 1 << r8.level - i5.level;
    return Math.floor(r8.row / o4) === i5.row && Math.floor(r8.col / o4) === i5.col;
  }
  _populateChildren(e5, t6, s5, i5) {
    const r8 = t6.level - e5.level - 1;
    if (r8 < 0)
      return void (e5.isLeaf = true);
    const o4 = t6.row >> r8, n4 = t6.col >> r8, l4 = e5.row << 1, a7 = n4 - (e5.col << 1) + (o4 - l4 << 1), c9 = e5.children[a7];
    if (null != c9)
      this._populateChildren(c9, t6, s5, i5);
    else {
      const r9 = new S3(e5.level + 1, o4, n4);
      s5.updateTileInfo(r9, j2.ExtrapolateOptions.POWER_OF_TWO), e5.children[a7] = r9, this._populateChildren(r9, t6, s5, i5);
    }
  }
  _simplify(e5, t6, s5, i5, r8) {
    const o4 = r8 * r8;
    if (e5.isLeaf)
      return t6(this.getFeatureCount(e5), r8) ? 0 : (this._remove(e5), null != s5 && (s5.children[i5] = null), o4);
    const n4 = r8 / 2, l4 = n4 * n4;
    let a7 = 0;
    for (let c9 = 0; c9 < e5.children.length; c9++) {
      const s6 = e5.children[c9];
      a7 += null != s6 ? this._simplify(s6, t6, e5, c9, n4) : l4;
    }
    return 0 === a7 ? this._mergeChildren(e5) : 1 - a7 / o4 < j3 && (this._purge(e5), null != s5 && (s5.children[i5] = null), a7 = o4), a7;
  }
  _mergeChildren(e5) {
    const t6 = /* @__PURE__ */ new Set();
    let s5 = 0;
    this._forEachLeaf(e5, (e6) => {
      const i5 = this._tiles.get(e6.id);
      if (i5) {
        s5 += i5.byteSize;
        for (const e7 of i5.objectIds)
          t6.has(e7) || (t6.add(e7), this._referenceFeature(e7));
        this._remove(e6);
      }
    }), this._addTileStorage(e5, t6, s5), e5.isLeaf = true, e5.children[0] = e5.children[1] = e5.children[2] = e5.children[3] = null, this._tileFeatureCounts.set(e5.id, t6.size);
  }
  _forEachLeaf(e5, t6) {
    for (const s5 of e5.children)
      null != s5 && (s5.isLeaf ? t6(s5) : this._forEachLeaf(s5, t6));
  }
  _purge(e5) {
    if (null != e5)
      if (e5.isLeaf)
        this._remove(e5);
      else
        for (let t6 = 0; t6 < e5.children.length; t6++) {
          const s5 = e5.children[t6];
          this._purge(s5), e5.children[t6] = null;
        }
  }
  _collectMissingTiles(e5, t6, s5) {
    const i5 = new F(s5, e5, this.extent);
    return this._collectMissingTilesRecurse(t6, i5, 1), i5.info;
  }
  _collectMissingTilesRecurse(e5, t6, s5) {
    if (e5.isLeaf)
      return;
    if (!e5.hasChildren)
      return void t6.addMissing(e5.level, e5.row, e5.col, s5);
    const i5 = s5 / 2;
    for (let r8 = 0; r8 < e5.children.length; r8++) {
      const s6 = e5.children[r8];
      null == s6 ? t6.addMissing(e5.level + 1, (e5.row << 1) + ((2 & r8) >> 1), (e5.col << 1) + (1 & r8), i5) : this._collectMissingTilesRecurse(s6, t6, i5);
    }
  }
  _referenceFeature(e5) {
    const t6 = (this._refCounts.get(e5) || 0) + 1;
    return this._refCounts.set(e5, t6), 1 === t6 ? I2.ADDED : I2.UNCHANGED;
  }
  _unreferenceFeature(e5) {
    const t6 = (this._refCounts.get(e5) || 0) - 1;
    return 0 === t6 ? (this._refCounts.delete(e5), I2.REMOVED) : (t6 > 0 && this._refCounts.set(e5, t6), I2.UNCHANGED);
  }
  get test() {
    return { tiles: Array.from(this._tiles.values()).map((e5) => `${e5.data.id}:[${Array.from(e5.objectIds)}]`), featureReferences: Array.from(this._refCounts.keys()).map((e5) => `${e5}:${this._refCounts.get(e5)}`) };
  }
};
function y2(e5) {
  return e5.reduce((e6, t6) => e6 + v2(t6), 0);
}
function v2(e5) {
  return 32 + C3(e5.geometry) + t3(e5.attributes);
}
function C3(e5) {
  if (null == e5)
    return 0;
  const t6 = c5(e5.lengths, 4);
  return 32 + c5(e5.coords, 8) + t6;
}
e([y({ constructOnly: true })], g.prototype, "featureStore", void 0), e([y()], g.prototype, "tileInfo", void 0), e([y()], g.prototype, "extent", void 0), e([y()], g.prototype, "maximumByteSize", void 0), g = e([a2("esri.views.interactive.snapping.featureSources.featureServiceSource.FeatureServiceTileStore")], g);
var E3 = class {
  constructor(e5, t6, s5) {
    this.data = e5, this.objectIds = t6, this.byteSize = s5;
  }
};
var S3 = class {
  constructor(e5, t6, s5) {
    this.level = e5, this.row = t6, this.col = s5, this.isLeaf = false, this.extent = null, this.children = [null, null, null, null];
  }
  get hasChildren() {
    return !this.isLeaf && (null != this.children[0] || null != this.children[1] || null != this.children[2] || null != this.children[3]);
  }
};
var T3 = class {
  constructor(e5, t6 = []) {
    this.missingTiles = t6, this.fullArea = 0, this.coveredArea = 0, this.fullArea = l2(e5.extent), this.coveredArea = this.fullArea;
  }
  prepend(e5) {
    this.missingTiles = e5.missingTiles.concat(this.missingTiles), this.coveredArea += e5.coveredArea, this.fullArea += e5.fullArea;
  }
};
var F = class {
  constructor(e5, t6, s5) {
    this._tileInfo = e5, this._extent = null, this.info = new T3(t6), null != s5 && (this._extent = o(s5));
  }
  addMissing(e5, t6, s5, i5) {
    const r8 = new t2(null, e5, t6, s5);
    this._tileInfo.updateTileInfo(r8, j2.ExtrapolateOptions.POWER_OF_TWO), null == r8.extent || null != this._extent && !q(this._extent, r8.extent) || (this.info.missingTiles.push({ data: r8, resolution: i5 }), this.info.coveredArea -= l2(r8.extent));
  }
};
var j3 = 0.18751;
var I2;
!function(e5) {
  e5[e5.ADDED = 0] = "ADDED", e5[e5.REMOVED = 1] = "REMOVED", e5[e5.UNCHANGED = 2] = "UNCHANGED";
}(I2 || (I2 = {}));

// node_modules/@arcgis/core/views/interactive/snapping/featureSources/featureServiceSource/FeatureServiceSnappingSourceWorker.js
var I3 = class extends n.EventedAccessor {
  constructor() {
    super(...arguments), this._isInitializing = true, this.remoteClient = null, this._whenSetup = C(), this._elevationAligner = i2(), this._elevationFilter = r4(), this._symbologyCandidatesFetcher = n3(), this._handles = new t(), this._updatingHandles = new c3(), this._editsUpdatingHandles = new c3(), this._pendingApplyEdits = /* @__PURE__ */ new Map(), this._alignPointsInFeatures = async (e5, t6) => {
      const i5 = { points: e5 }, r8 = await this.remoteClient.invoke("alignElevation", i5, { signal: t6 });
      return s3(t6), r8;
    }, this._getSymbologyCandidates = async (e5, t6) => {
      const i5 = { candidates: e5, spatialReference: this._spatialReference.toJSON() }, r8 = await this.remoteClient.invoke("getSymbologyCandidates", i5, { signal: t6 });
      return s3(t6), r8;
    };
  }
  get updating() {
    return this.updatingExcludingEdits || this._editsUpdatingHandles.updating || this._featureFetcher.updating;
  }
  get updatingExcludingEdits() {
    return this._featureFetcher.updatingExcludingEdits || this._isInitializing || this._updatingHandles.updating;
  }
  destroy() {
    var _a, _b, _c, _d;
    (_a = this._featureFetcher) == null ? void 0 : _a.destroy(), (_b = this._queryEngine) == null ? void 0 : _b.destroy(), (_c = this._featureStore) == null ? void 0 : _c.clear(), (_d = this._handles) == null ? void 0 : _d.destroy();
  }
  async setup(e5) {
    if (this.destroyed)
      return { result: {} };
    const { geometryType: t6, objectIdField: i5, timeInfo: r8, fields: s5 } = e5.serviceInfo, { hasZ: a7 } = e5, l4 = f2.fromJSON(e5.spatialReference);
    this._spatialReference = l4, this._featureStore = new m2({ ...e5.serviceInfo, hasZ: a7, hasM: false }), this._queryEngine = new ee({ spatialReference: e5.spatialReference, featureStore: this._featureStore, geometryType: t6, fields: s5, hasZ: a7, hasM: false, objectIdField: i5, timeInfo: r8 }), this._featureFetcher = new I({ store: new g({ featureStore: this._featureStore }), url: e5.serviceInfo.url, objectIdField: e5.serviceInfo.objectIdField, globalIdField: e5.serviceInfo.globalIdField, capabilities: e5.serviceInfo.capabilities, spatialReference: l4, sourceSpatialReference: f2.fromJSON(e5.serviceInfo.spatialReference) });
    const d4 = "3d" === e5.configuration.viewType;
    return this._elevationAligner = i2(d4, { elevationInfo: null != e5.elevationInfo ? h.fromJSON(e5.elevationInfo) : null, alignPointsInFeatures: this._alignPointsInFeatures, spatialReference: l4 }), this._elevationFilter = r4(d4), this._handles.add([l(() => this._featureFetcher.availability, (e6) => this.emit("notify-availability", { availability: e6 }), U), l(() => this.updating, () => this._notifyUpdating())]), this._whenSetup.resolve(), this._isInitializing = false, this.configure(e5.configuration);
  }
  async configure(e5) {
    return await this._updatingHandles.addPromise(this._whenSetup.promise), this._updateFeatureFetcherConfiguration(e5), { result: {} };
  }
  async fetchCandidates(e5, t6) {
    await this._whenSetup.promise, s3(t6);
    const i5 = E4(e5), r8 = null != t6 ? t6.signal : null, n4 = await this._queryEngine.executeQueryForSnapping(i5, r8);
    s3(r8);
    const a7 = await this._elevationAligner.alignCandidates(n4.candidates, r8);
    s3(r8);
    const o4 = await this._symbologyCandidatesFetcher.fetch(a7, r8);
    s3(r8);
    const l4 = 0 === o4.length ? a7 : a7.concat(o4);
    return { result: { candidates: this._elevationFilter.filter(i5, l4) } };
  }
  async updateTiles(e5, t6) {
    return await this._updatingHandles.addPromise(this._whenSetup.promise), s3(t6), this._featureFetcher.tileSize = e5.tileSize, this._featureFetcher.tilesOfInterest = e5.tiles, this._featureFetcher.tileInfo = null != e5.tileInfo ? j2.fromJSON(e5.tileInfo) : null, b3;
  }
  async refresh(e5, t6) {
    return await this._updatingHandles.addPromise(this._whenSetup.promise), s3(t6), this._featureFetcher.refresh(), b3;
  }
  async whenNotUpdating(e5, t6) {
    return await this._updatingHandles.addPromise(this._whenSetup.promise), s3(t6), await j(() => !this.updatingExcludingEdits, t6), s3(t6), b3;
  }
  async getDebugInfo(e5, t6) {
    return s3(t6), { result: this._featureFetcher.debugInfo };
  }
  async beginApplyEdits(e5, t6) {
    this._updatingHandles.addPromise(this._whenSetup.promise), s3(t6);
    const i5 = C();
    return this._pendingApplyEdits.set(e5.id, i5), this._featureFetcher.applyEdits(i5.promise), this._editsUpdatingHandles.addPromise(i5.promise), b3;
  }
  async endApplyEdits(e5, t6) {
    const i5 = this._pendingApplyEdits.get(e5.id);
    return i5 && i5.resolve(e5.edits), s3(t6), b3;
  }
  async notifyElevationSourceChange(e5, t6) {
    return this._elevationAligner.notifyElevationSourceChange(), b3;
  }
  async notifySymbologyChange(e5, t6) {
    return this._symbologyCandidatesFetcher.notifySymbologyChange(), b3;
  }
  async setSymbologySnappingSupported(e5) {
    return this._symbologyCandidatesFetcher = n3(e5, this._getSymbologyCandidates), b3;
  }
  _updateFeatureFetcherConfiguration(e5) {
    this._featureFetcher.filter = null != e5.filter ? b2.fromJSON(e5.filter) : null, this._featureFetcher.customParameters = e5.customParameters;
  }
  _notifyUpdating() {
    this.emit("notify-updating", { updating: this.updating });
  }
};
e([y({ readOnly: true })], I3.prototype, "updating", null), e([y({ readOnly: true })], I3.prototype, "updatingExcludingEdits", null), e([y()], I3.prototype, "_isInitializing", void 0), I3 = e([a2("esri.views.interactive.snapping.featureSources.featureServiceSource.FeatureServiceSnappingSourceWorker")], I3);
var w2 = I3;
function E4(e5) {
  return { point: e5.point, mode: e5.mode, distance: e5.distance, returnEdge: e5.returnEdge, returnVertex: e5.returnVertex, query: null != e5.filter ? e5.filter : { where: "1=1" } };
}
var b3 = { result: {} };
export {
  w2 as default
};
//# sourceMappingURL=FeatureServiceSnappingSourceWorker-L3RWT7M4.js.map
