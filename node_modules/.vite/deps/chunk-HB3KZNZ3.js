import {
  T
} from "./chunk-7KM4XBUC.js";
import {
  h
} from "./chunk-KKGH4SRQ.js";
import {
  o as o2
} from "./chunk-4H5JODOT.js";
import {
  o2 as o,
  r
} from "./chunk-SFV6XLDZ.js";
import {
  s
} from "./chunk-VBD33VNW.js";
import {
  l
} from "./chunk-7A5C2EQ3.js";
import {
  y3 as y
} from "./chunk-OYBXMT5R.js";
import {
  a2
} from "./chunk-CIDWM2UN.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";
import {
  a,
  c
} from "./chunk-I5JT24BO.js";

// node_modules/@arcgis/core/symbols/Symbol.js
var p = new s({ esriSMS: "simple-marker", esriPMS: "picture-marker", esriSLS: "simple-line", esriSFS: "simple-fill", esriPFS: "picture-fill", esriTS: "text", esriSHD: "shield-label-symbol", PointSymbol3D: "point-3d", LineSymbol3D: "line-3d", PolygonSymbol3D: "polygon-3d", WebStyleSymbol: "web-style", MeshSymbol3D: "mesh-3d", LabelSymbol3D: "label-3d", CIMSymbolReference: "cim" });
var c2 = 0;
var m = class extends l {
  constructor(r2) {
    super(r2), this.id = "sym" + c2++, this.type = null, this.color = new h([0, 0, 0, 1]);
  }
  readColor(r2) {
    return r2 && null != r2[0] ? [r2[0], r2[1], r2[2], r2[3] / 255] : r2;
  }
  async collectRequiredFields(r2, o3) {
  }
  hash() {
    return JSON.stringify(this.toJSON());
  }
  clone() {
  }
};
e([y({ type: p.apiValues, readOnly: true, json: { read: false, write: { ignoreOrigin: true, writer: p.write } } })], m.prototype, "type", void 0), e([y({ type: h, json: { write: { allowNull: true } } })], m.prototype, "color", void 0), e([o("color")], m.prototype, "readColor", null), m = e([a2("esri.symbols.Symbol")], m);
var a3 = m;

// node_modules/@arcgis/core/symbols/CIMSymbol.js
var n;
var l2 = n = class extends a3 {
  constructor(r2) {
    super(r2), this.data = null, this.type = "cim";
  }
  readData(r2, o3) {
    return o3;
  }
  writeData(r2, o3) {
    Object.assign(o3, r2);
  }
  async collectRequiredFields(r2, o3) {
    var _a;
    if ("CIMSymbolReference" === ((_a = this.data) == null ? void 0 : _a.type)) {
      const t = this.data.primitiveOverrides;
      if (t) {
        const e2 = t.map((t2) => {
          const e3 = t2.valueExpressionInfo;
          return T(r2, o3, e3.expression);
        });
        await Promise.all(e2);
      }
    }
  }
  clone() {
    return new n({ data: a(this.data) });
  }
  hash() {
    return c(JSON.stringify(this.data)).toString();
  }
};
e([y({ json: { write: false } })], l2.prototype, "color", void 0), e([y({ json: { write: true } })], l2.prototype, "data", void 0), e([o("data", ["symbol"])], l2.prototype, "readData", null), e([r("data", {})], l2.prototype, "writeData", null), e([o2({ CIMSymbolReference: "cim" }, { readOnly: true })], l2.prototype, "type", void 0), l2 = n = e([a2("esri.symbols.CIMSymbol")], l2);
var d = l2;

export {
  a3 as a,
  d
};
//# sourceMappingURL=chunk-HB3KZNZ3.js.map
