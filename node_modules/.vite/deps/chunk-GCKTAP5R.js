import {
  t
} from "./chunk-E4GDJ764.js";
import {
  d
} from "./chunk-RNXN3MSP.js";
import {
  k
} from "./chunk-QA4FMJA6.js";
import {
  B,
  C,
  i,
  o
} from "./chunk-ZBWBCN2I.js";
import {
  m
} from "./chunk-TCASQSKO.js";
import {
  f
} from "./chunk-SFV6XLDZ.js";
import {
  j
} from "./chunk-HKVL2MJK.js";
import {
  n
} from "./chunk-MH2LNFJK.js";
import {
  kt
} from "./chunk-O3CHVGVF.js";
import {
  s
} from "./chunk-W2N7YT6I.js";
import {
  a
} from "./chunk-I5JT24BO.js";

// node_modules/@arcgis/core/layers/support/kmlUtils.js
var c = { esriGeometryPoint: "points", esriGeometryPolyline: "polylines", esriGeometryPolygon: "polygons" };
function d2(e) {
  const o2 = e.folders || [], t2 = o2.slice(), r = /* @__PURE__ */ new Map(), n2 = /* @__PURE__ */ new Map(), i2 = /* @__PURE__ */ new Map(), f2 = /* @__PURE__ */ new Map(), a2 = /* @__PURE__ */ new Map(), l = { esriGeometryPoint: n2, esriGeometryPolyline: i2, esriGeometryPolygon: f2 };
  (e.featureCollection && e.featureCollection.layers || []).forEach((e2) => {
    const o3 = a(e2);
    o3.featureSet.features = [];
    const t3 = e2.featureSet.geometryType;
    r.set(t3, o3);
    const a3 = e2.layerDefinition.objectIdField;
    "esriGeometryPoint" === t3 ? G(n2, a3, e2.featureSet.features) : "esriGeometryPolyline" === t3 ? G(i2, a3, e2.featureSet.features) : "esriGeometryPolygon" === t3 && G(f2, a3, e2.featureSet.features);
  }), e.groundOverlays && e.groundOverlays.forEach((e2) => {
    a2.set(e2.id, e2);
  }), o2.forEach((o3) => {
    o3.networkLinkIds.forEach((r2) => {
      const s2 = P(r2, o3.id, e.networkLinks);
      s2 && t2.push(s2);
    });
  }), t2.forEach((e2) => {
    var _a;
    if (e2.featureInfos) {
      e2.points = a(r.get("esriGeometryPoint")), e2.polylines = a(r.get("esriGeometryPolyline")), e2.polygons = a(r.get("esriGeometryPolygon")), e2.mapImages = [];
      for (const o3 of e2.featureInfos)
        switch (o3.type) {
          case "esriGeometryPoint":
          case "esriGeometryPolyline":
          case "esriGeometryPolygon": {
            const t3 = l[o3.type].get(o3.id);
            t3 && ((_a = e2[c[o3.type]]) == null ? void 0 : _a.featureSet.features.push(t3));
            break;
          }
          case "GroundOverlay": {
            const t3 = a2.get(o3.id);
            t3 && e2.mapImages.push(t3);
            break;
          }
        }
      e2.fullExtent = j2([e2]);
    }
  });
  const u = j2(t2);
  return { folders: o2, sublayers: t2, extent: u };
}
function g(t2, s2, i2, f2) {
  const a2 = n && n.findCredential(t2);
  t2 = kt(t2, { token: a2 && a2.token });
  const l = s.kmlServiceUrl;
  return j(l, { query: { url: t2, model: "simple", folders: "", refresh: 0 !== i2 || void 0, outSR: JSON.stringify(s2) }, responseType: "json", signal: f2 });
}
function S(e, o2, t2 = null, r = []) {
  const s2 = [], n2 = {}, i2 = o2.sublayers, f2 = o2.folders.map((e2) => e2.id);
  return i2.forEach((o3) => {
    var _a;
    const i3 = new e();
    if (t2 ? i3.read(o3, t2) : i3.read(o3), r.length && f2.includes(i3.id) && (i3.visible = r.includes(i3.id)), n2[o3.id] = i3, null != o3.parentFolderId && -1 !== o3.parentFolderId) {
      const e2 = n2[o3.parentFolderId];
      e2.sublayers || (e2.sublayers = []), (_a = e2.sublayers) == null ? void 0 : _a.unshift(i3);
    } else
      s2.unshift(i3);
  }), s2;
}
function G(e, o2, t2) {
  t2.forEach((t3) => {
    e.set(t3.attributes[o2], t3);
  });
}
function h(e, o2) {
  let t2;
  return o2.some((o3) => o3.id === e && (t2 = o3, true)), t2;
}
function P(e, o2, t2) {
  const r = h(e, t2);
  return r && (r.parentFolderId = o2, r.networkLink = r), r;
}
async function b(e) {
  const o2 = d.fromJSON(e.featureSet).features, r = e.layerDefinition, s2 = t(r.drawingInfo.renderer), n2 = k.fromJSON(e.popupInfo), i2 = [];
  for (const t2 of o2) {
    const e2 = await s2.getSymbolAsync(t2);
    t2.symbol = e2, t2.popupTemplate = n2, t2.visible = true, i2.push(t2);
  }
  return i2;
}
function j2(e) {
  const o2 = i(C), t2 = i(C);
  for (const r of e) {
    if (r.polygons && r.polygons.featureSet && r.polygons.featureSet.features)
      for (const e2 of r.polygons.featureSet.features)
        m(o2, e2.geometry), o(t2, o2);
    if (r.polylines && r.polylines.featureSet && r.polylines.featureSet.features)
      for (const e2 of r.polylines.featureSet.features)
        m(o2, e2.geometry), o(t2, o2);
    if (r.points && r.points.featureSet && r.points.featureSet.features)
      for (const e2 of r.points.featureSet.features)
        m(o2, e2.geometry), o(t2, o2);
    if (r.mapImages)
      for (const e2 of r.mapImages)
        m(o2, e2.extent), o(t2, o2);
  }
  return B(t2, C) ? void 0 : { xmin: t2[0], ymin: t2[1], zmin: t2[2], xmax: t2[3], ymax: t2[4], zmax: t2[5], spatialReference: f.WGS84 };
}

export {
  d2 as d,
  g,
  S,
  b,
  j2 as j
};
//# sourceMappingURL=chunk-GCKTAP5R.js.map
