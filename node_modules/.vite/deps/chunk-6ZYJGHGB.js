import {
  r as r2
} from "./chunk-DTEODQ6R.js";
import {
  c,
  p
} from "./chunk-OO4A3EBQ.js";
import {
  i
} from "./chunk-KTEJJM3A.js";
import {
  h
} from "./chunk-KKGH4SRQ.js";
import {
  o2 as o,
  r
} from "./chunk-SFV6XLDZ.js";
import {
  l
} from "./chunk-7A5C2EQ3.js";
import {
  y3 as y
} from "./chunk-OYBXMT5R.js";
import {
  a2 as a
} from "./chunk-CIDWM2UN.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";
import {
  v
} from "./chunk-2YSHZRCT.js";

// node_modules/@arcgis/core/geometry/support/MeshTexture.js
var p2;
var h2 = /* @__PURE__ */ new WeakMap();
var d = 0;
var u = p2 = class extends l {
  constructor(t) {
    super(t), this.wrap = "repeat";
  }
  get url() {
    return this._get("url") || null;
  }
  set url(t) {
    this._set("url", t), t && this._set("data", null);
  }
  get data() {
    return this._get("data") || null;
  }
  set data(t) {
    this._set("data", t), t && this._set("url", null);
  }
  writeData(t, e2, a3, r3) {
    if (t instanceof HTMLImageElement) {
      const s = { type: "image-element", src: c(t.src, r3), crossOrigin: t.crossOrigin };
      e2[a3] = s;
    } else if (t instanceof HTMLCanvasElement) {
      const r4 = t.getContext("2d").getImageData(0, 0, t.width, t.height), s = { type: "canvas-element", imageData: this._encodeImageData(r4) };
      e2[a3] = s;
    } else if (t instanceof HTMLVideoElement) {
      const s = { type: "video-element", src: c(t.src, r3), autoplay: t.autoplay, loop: t.loop, muted: t.muted, crossOrigin: t.crossOrigin, preload: t.preload };
      e2[a3] = s;
    } else if (t instanceof ImageData) {
      const r4 = { type: "image-data", imageData: this._encodeImageData(t) };
      e2[a3] = r4;
    }
  }
  readData(t) {
    switch (t.type) {
      case "image-element": {
        const e2 = new Image();
        return e2.src = t.src, e2.crossOrigin = t.crossOrigin, e2;
      }
      case "canvas-element": {
        const e2 = this._decodeImageData(t.imageData), a3 = document.createElement("canvas");
        return a3.width = e2.width, a3.height = e2.height, a3.getContext("2d").putImageData(e2, 0, 0), a3;
      }
      case "image-data":
        return this._decodeImageData(t.imageData);
      case "video-element": {
        const e2 = document.createElement("video");
        return e2.src = t.src, e2.crossOrigin = t.crossOrigin, e2.autoplay = t.autoplay, e2.loop = t.loop, e2.muted = t.muted, e2.preload = t.preload, e2;
      }
      default:
        return;
    }
  }
  get transparent() {
    const t = this.data, e2 = this.url;
    if (t instanceof HTMLCanvasElement)
      return this._imageDataContainsTransparent(t.getContext("2d").getImageData(0, 0, t.width, t.height));
    if (t instanceof ImageData)
      return this._imageDataContainsTransparent(t);
    if (e2) {
      const t2 = e2.substr(e2.length - 4, 4).toLowerCase(), a3 = e2.substr(0, 15).toLocaleLowerCase();
      if (".png" === t2 || "data:image/png;" === a3)
        return true;
    }
    return false;
  }
  set transparent(t) {
    this._overrideIfSome("transparent", t);
  }
  get contentHash() {
    const t = "string" == typeof this.wrap ? this.wrap : "object" == typeof this.wrap ? `${this.wrap.horizontal}/${this.wrap.vertical}` : "", e2 = (e3 = "") => `d:${e3},t:${this.transparent},w:${t}`;
    return null != this.url ? e2(this.url) : null != this.data ? this.data instanceof HTMLImageElement || this.data instanceof HTMLVideoElement ? e2(this.data.src) : (h2.has(this.data) || h2.set(this.data, ++d), e2(h2.get(this.data))) : e2();
  }
  get memoryUsage() {
    let t = 0;
    if (t += null != this.url ? this.url.length : 0, null != this.data) {
      const e2 = this.data;
      "data" in e2 ? t += e2.data.byteLength : e2 instanceof HTMLImageElement ? t += e2.naturalWidth * e2.naturalHeight * 3 : e2 instanceof HTMLCanvasElement && (t += e2.width * e2.height * 3);
    }
    return t;
  }
  clone() {
    const t = { url: this.url, data: this.data, wrap: this._cloneWrap() };
    return new p2(t);
  }
  cloneWithDeduplication(t) {
    const e2 = t.get(this);
    if (e2)
      return e2;
    const a3 = this.clone();
    return t.set(this, a3), a3;
  }
  _cloneWrap() {
    return "string" == typeof this.wrap ? this.wrap : { horizontal: this.wrap.horizontal, vertical: this.wrap.vertical };
  }
  _encodeImageData(t) {
    let e2 = "";
    for (let a3 = 0; a3 < t.data.length; a3++)
      e2 += String.fromCharCode(t.data[a3]);
    return { data: btoa(e2), width: t.width, height: t.height };
  }
  _decodeImageData(t) {
    const a3 = atob(t.data), r3 = new Uint8ClampedArray(a3.length);
    for (let e2 = 0; e2 < a3.length; e2++)
      r3[e2] = a3.charCodeAt(e2);
    return r2(r3, t.width, t.height);
  }
  _imageDataContainsTransparent(t) {
    for (let e2 = 3; e2 < t.data.length; e2 += 4)
      if (255 !== t.data[e2])
        return true;
    return false;
  }
  static from(t) {
    return "string" == typeof t ? new p2({ url: t }) : t instanceof HTMLImageElement || t instanceof HTMLCanvasElement || t instanceof ImageData || t instanceof HTMLVideoElement ? new p2({ data: t }) : v(p2, t);
  }
};
e([y({ type: String, json: { write: p } })], u.prototype, "url", null), e([y({ json: { write: { overridePolicy() {
  return { enabled: !this.url };
} } } }), y()], u.prototype, "data", null), e([r("data")], u.prototype, "writeData", null), e([o("data")], u.prototype, "readData", null), e([y({ type: Boolean, json: { write: { overridePolicy() {
  return { enabled: this._isOverridden("transparent") };
} } } })], u.prototype, "transparent", null), e([y({ json: { write: true } })], u.prototype, "wrap", void 0), e([y({ readOnly: true })], u.prototype, "contentHash", null), u = p2 = e([a("esri.geometry.support.MeshTexture")], u);
var m = u;

// node_modules/@arcgis/core/geometry/support/MeshTextureTransform.js
var p3 = class extends i(l) {
  constructor(o2) {
    super(o2), this.offset = [0, 0], this.rotation = 0, this.scale = [1, 1];
  }
};
e([y({ type: [Number], nonNullable: true, json: { write: true } })], p3.prototype, "offset", void 0), e([y({ type: Number, nonNullable: true, json: { write: true } })], p3.prototype, "rotation", void 0), e([y({ type: [Number], nonNullable: true, json: { write: true } })], p3.prototype, "scale", void 0), p3 = e([a("esri.geometry.support.MeshTextureTransform")], p3);
var c2 = p3;

// node_modules/@arcgis/core/geometry/support/MeshMaterial.js
var n;
var u2 = n = class extends l {
  constructor(o2) {
    super(o2), this.color = null, this.colorTexture = null, this.colorTextureTransform = null, this.normalTexture = void 0, this.normalTextureTransform = void 0, this.alphaMode = "auto", this.alphaCutoff = 0.5, this.doubleSided = true;
  }
  clone() {
    return this.cloneWithDeduplication(null, /* @__PURE__ */ new Map());
  }
  cloneWithDeduplication(o2, r3) {
    const e2 = null != o2 ? o2.get(this) : null;
    if (e2)
      return e2;
    const t = new n(this.clonePropertiesWithDeduplication(r3));
    return null != o2 && o2.set(this, t), t;
  }
  clonePropertiesWithDeduplication(o2) {
    var _a, _b, _c, _d;
    return { color: null != this.color ? this.color.clone() : null, colorTexture: (_a = this.colorTexture) == null ? void 0 : _a.cloneWithDeduplication(o2), normalTexture: (_b = this.normalTexture) == null ? void 0 : _b.cloneWithDeduplication(o2), alphaMode: this.alphaMode, alphaCutoff: this.alphaCutoff, doubleSided: this.doubleSided, colorTextureTransform: (_c = this.colorTextureTransform) == null ? void 0 : _c.clone(), normalTextureTransform: (_d = this.normalTextureTransform) == null ? void 0 : _d.clone() };
  }
  get memoryUsage() {
    return this.getMemoryUsage();
  }
  getMemoryUsage() {
    let o2 = 0;
    return o2 += null != this.color ? 16 : 0, null != this.colorTexture && (o2 += this.colorTexture.memoryUsage), o2 += null != this.colorTextureTransform ? 20 : 0, null != this.normalTexture && (o2 += this.normalTexture.memoryUsage), o2 += null != this.normalTextureTransform ? 20 : 0, o2;
  }
};
e([y({ type: h, json: { write: true } })], u2.prototype, "color", void 0), e([y({ type: m, json: { write: true } })], u2.prototype, "colorTexture", void 0), e([y({ type: c2, json: { write: true } })], u2.prototype, "colorTextureTransform", void 0), e([y({ type: m, json: { write: true } })], u2.prototype, "normalTexture", void 0), e([y({ type: c2, json: { write: true } })], u2.prototype, "normalTextureTransform", void 0), e([y({ nonNullable: true, json: { write: true } })], u2.prototype, "alphaMode", void 0), e([y({ nonNullable: true, json: { write: true } })], u2.prototype, "alphaCutoff", void 0), e([y({ nonNullable: true, json: { write: true } })], u2.prototype, "doubleSided", void 0), u2 = n = e([a("esri.geometry.support.MeshMaterial")], u2);
var a2 = u2;

// node_modules/@arcgis/core/geometry/support/MeshMaterialMetallicRoughness.js
var n2;
var u3 = n2 = class extends a2 {
  constructor(e2) {
    super(e2), this.emissiveColor = null, this.emissiveTexture = null, this.emissiveTextureTransform = void 0, this.occlusionTexture = null, this.occlusionTextureTransform = void 0, this.metallic = 1, this.roughness = 1, this.metallicRoughnessTexture = null, this.metallicRoughnessTextureTransform = void 0;
  }
  clone() {
    return this.cloneWithDeduplication(null, /* @__PURE__ */ new Map());
  }
  cloneWithDeduplication(e2, s) {
    const t = null != e2 ? e2.get(this) : null;
    if (t)
      return t;
    const o2 = new n2(this.clonePropertiesWithDeduplication(s));
    return null != e2 && e2.set(this, o2), o2;
  }
  getMemoryUsage() {
    let e2 = super.getMemoryUsage();
    return e2 += null != this.emissiveColor ? 16 : 0, null != this.emissiveTexture && (e2 += this.emissiveTexture.memoryUsage), e2 += null != this.emissiveTextureTransform ? 20 : 0, null != this.occlusionTexture && (e2 += this.occlusionTexture.memoryUsage), e2 += null != this.occlusionTextureTransform ? 20 : 0, null != this.metallicRoughnessTexture && (e2 += this.metallicRoughnessTexture.memoryUsage), e2 += null != this.metallicRoughnessTextureTransform ? 20 : 0, e2;
  }
  clonePropertiesWithDeduplication(e2) {
    var _a, _b, _c, _d, _e, _f, _g;
    return { ...super.clonePropertiesWithDeduplication(e2), emissiveColor: (_a = this.emissiveColor) == null ? void 0 : _a.clone(), emissiveTexture: (_b = this.emissiveTexture) == null ? void 0 : _b.cloneWithDeduplication(e2), emissiveTextureTransform: (_c = this.emissiveTextureTransform) == null ? void 0 : _c.clone(), occlusionTexture: (_d = this.occlusionTexture) == null ? void 0 : _d.cloneWithDeduplication(e2), occlusionTextureTransform: (_e = this.occlusionTextureTransform) == null ? void 0 : _e.clone(), metallic: this.metallic, roughness: this.roughness, metallicRoughnessTexture: (_f = this.metallicRoughnessTexture) == null ? void 0 : _f.cloneWithDeduplication(e2), metallicRoughnessTextureTransform: (_g = this.metallicRoughnessTextureTransform) == null ? void 0 : _g.clone() };
  }
};
e([y({ type: h, json: { write: true } })], u3.prototype, "emissiveColor", void 0), e([y({ type: m, json: { write: true } })], u3.prototype, "emissiveTexture", void 0), e([y({ type: c2, json: { write: true } })], u3.prototype, "emissiveTextureTransform", void 0), e([y({ type: m, json: { write: true } })], u3.prototype, "occlusionTexture", void 0), e([y({ type: c2, json: { write: true } })], u3.prototype, "occlusionTextureTransform", void 0), e([y({ type: Number, nonNullable: true, json: { write: true }, range: { min: 0, max: 1 } })], u3.prototype, "metallic", void 0), e([y({ type: Number, nonNullable: true, json: { write: true }, range: { min: 0, max: 1 } })], u3.prototype, "roughness", void 0), e([y({ type: m, json: { write: true } })], u3.prototype, "metallicRoughnessTexture", void 0), e([y({ type: c2, json: { write: true } })], u3.prototype, "metallicRoughnessTextureTransform", void 0), u3 = n2 = e([a("esri.geometry.support.MeshMaterialMetallicRoughness")], u3);
var c3 = u3;

export {
  m,
  c2 as c,
  a2 as a,
  c3 as c2
};
//# sourceMappingURL=chunk-6ZYJGHGB.js.map
