import {
  o
} from "./chunk-AER5JAFS.js";
import {
  T,
  l as l2,
  m as m2,
  t as t5
} from "./chunk-WXCIKTAW.js";
import {
  E,
  I
} from "./chunk-FKEHFW5J.js";
import {
  a as a2,
  l,
  m,
  n as n3,
  o as o2,
  p,
  u
} from "./chunk-7HZ72XIE.js";
import "./chunk-2735WBYK.js";
import {
  c as c2,
  i,
  r as r2
} from "./chunk-ZO32FGGH.js";
import {
  C
} from "./chunk-PX3Q44FM.js";
import {
  t as t3
} from "./chunk-XYJMHUDA.js";
import {
  N,
  _,
  e,
  e2,
  f,
  h,
  h2,
  i as i2,
  n as n2,
  r as r3,
  t as t2,
  t2 as t4
} from "./chunk-CSLWFQJE.js";
import "./chunk-TDXHXKUI.js";
import {
  i as i3
} from "./chunk-PR2OEILG.js";
import "./chunk-JSMUQBPG.js";
import "./chunk-FF5LS3YE.js";
import "./chunk-BCDDCNQ2.js";
import {
  n
} from "./chunk-FN5LEP6H.js";
import "./chunk-O62OS3ME.js";
import "./chunk-OZXJDVTE.js";
import "./chunk-KKGH4SRQ.js";
import "./chunk-Y2CLYMXQ.js";
import "./chunk-MOPR7RFH.js";
import "./chunk-KW3ZNPTA.js";
import "./chunk-TJB4CGOM.js";
import "./chunk-LQVUN6IS.js";
import {
  t
} from "./chunk-SHJI4PR4.js";
import "./chunk-2YSHZRCT.js";
import "./chunk-HKVL2MJK.js";
import "./chunk-MH2LNFJK.js";
import "./chunk-O3CHVGVF.js";
import {
  a,
  d
} from "./chunk-HNHXEGH2.js";
import {
  r
} from "./chunk-DWOEYHKS.js";
import "./chunk-W2N7YT6I.js";
import {
  c
} from "./chunk-I5JT24BO.js";
import "./chunk-I4U7MQNO.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/ScriptUtils.js
function e3(e5) {
  return 746 === e5 || 747 === e5 || !(e5 < 4352) && (e5 >= 12704 && e5 <= 12735 || (e5 >= 12544 && e5 <= 12591 || (e5 >= 65072 && e5 <= 65103 && !(e5 >= 65097 && e5 <= 65103) || (e5 >= 63744 && e5 <= 64255 || (e5 >= 13056 && e5 <= 13311 || (e5 >= 11904 && e5 <= 12031 || (e5 >= 12736 && e5 <= 12783 || (e5 >= 12288 && e5 <= 12351 && !(e5 >= 12296 && e5 <= 12305 || e5 >= 12308 && e5 <= 12319 || 12336 === e5) || (e5 >= 13312 && e5 <= 19903 || (e5 >= 19968 && e5 <= 40959 || (e5 >= 12800 && e5 <= 13055 || (e5 >= 12592 && e5 <= 12687 || (e5 >= 43360 && e5 <= 43391 || (e5 >= 55216 && e5 <= 55295 || (e5 >= 4352 && e5 <= 4607 || (e5 >= 44032 && e5 <= 55215 || (e5 >= 12352 && e5 <= 12447 || (e5 >= 12272 && e5 <= 12287 || (e5 >= 12688 && e5 <= 12703 || (e5 >= 12032 && e5 <= 12255 || (e5 >= 12784 && e5 <= 12799 || (e5 >= 12448 && e5 <= 12543 && 12540 !== e5 || (e5 >= 65280 && e5 <= 65519 && !(65288 === e5 || 65289 === e5 || 65293 === e5 || e5 >= 65306 && e5 <= 65310 || 65339 === e5 || 65341 === e5 || 65343 === e5 || e5 >= 65371 && e5 <= 65503 || 65507 === e5 || e5 >= 65512 && e5 <= 65519) || (e5 >= 65104 && e5 <= 65135 && !(e5 >= 65112 && e5 <= 65118 || e5 >= 65123 && e5 <= 65126) || (e5 >= 5120 && e5 <= 5759 || (e5 >= 6320 && e5 <= 6399 || (e5 >= 65040 && e5 <= 65055 || (e5 >= 19904 && e5 <= 19967 || (e5 >= 40960 && e5 <= 42127 || e5 >= 42128 && e5 <= 42191)))))))))))))))))))))))))))));
}
function c3(e5) {
  return !(e5 < 11904) && (e5 >= 12704 && e5 <= 12735 || (e5 >= 12544 && e5 <= 12591 || (e5 >= 65072 && e5 <= 65103 || (e5 >= 63744 && e5 <= 64255 || (e5 >= 13056 && e5 <= 13311 || (e5 >= 11904 && e5 <= 12031 || (e5 >= 12736 && e5 <= 12783 || (e5 >= 12288 && e5 <= 12351 || (e5 >= 13312 && e5 <= 19903 || (e5 >= 19968 && e5 <= 40959 || (e5 >= 12800 && e5 <= 13055 || (e5 >= 65280 && e5 <= 65519 || (e5 >= 12352 && e5 <= 12447 || (e5 >= 12272 && e5 <= 12287 || (e5 >= 12032 && e5 <= 12255 || (e5 >= 12784 && e5 <= 12799 || (e5 >= 12448 && e5 <= 12543 || (e5 >= 65040 && e5 <= 65055 || (e5 >= 42128 && e5 <= 42191 || e5 >= 40960 && e5 <= 42127)))))))))))))))))));
}
function s(e5) {
  switch (e5) {
    case 10:
    case 32:
    case 38:
    case 40:
    case 41:
    case 43:
    case 45:
    case 47:
    case 173:
    case 183:
    case 8203:
    case 8208:
    case 8211:
    case 8231:
      return true;
  }
  return false;
}
function a3(e5) {
  switch (e5) {
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 32:
      return true;
  }
  return false;
}

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/TextShaping.js
var c4 = 24;
var h3 = 17;
var l3 = class {
  constructor(t8, e5, i5, o5, s5, c5, h5) {
    this._glyphItems = t8, this._maxWidth = e5, this._lineHeight = i5, this._letterSpacing = o5, this._hAnchor = s5, this._vAnchor = c5, this._justify = h5;
  }
  getShaping(s5, c5, h5) {
    const l5 = this._letterSpacing, n5 = this._lineHeight, a5 = this._justify, r8 = this._maxWidth, m3 = [];
    let f3 = 0, p3 = 0;
    for (const t8 of s5) {
      const e5 = t8.codePointAt(0);
      if (null == e5)
        continue;
      const i5 = h5 && e3(e5);
      let s6;
      for (const t9 of this._glyphItems)
        if (s6 = t9[e5], s6)
          break;
      m3.push({ codePoint: e5, x: f3, y: p3, vertical: i5, glyphMosaicItem: s6 }), s6 && (f3 += s6.metrics.advance + l5);
    }
    let g2 = f3;
    if (r8 > 0) {
      g2 = f3 / Math.max(1, Math.ceil(f3 / r8));
    }
    const y2 = s5.includes("â€‹"), d2 = [], x2 = m3.length;
    for (let e5 = 0; e5 < x2 - 1; e5++) {
      const o5 = m3[e5].codePoint, s6 = c3(o5);
      if (s(o5) || s6) {
        let t8 = 0;
        if (10 === o5)
          t8 -= 1e4;
        else if (s6 && y2)
          t8 += 150;
        else {
          40 !== o5 && 65288 !== o5 || (t8 += 50);
          const i5 = m3[e5 + 1].codePoint;
          41 !== i5 && 65289 !== i5 || (t8 += 50);
        }
        d2.push(this._buildBreak(e5 + 1, m3[e5].x, g2, d2, t8, false));
      }
    }
    const u4 = this._optimalBreaks(this._buildBreak(x2, f3, g2, d2, 0, true));
    let M = 0;
    const _2 = c5 ? -n5 : n5;
    let I4 = 0;
    for (let t8 = 0; t8 < u4.length; t8++) {
      const i5 = u4[t8];
      let o5 = I4;
      for (; o5 < i5 && a3(m3[o5].codePoint); )
        m3[o5].glyphMosaicItem = null, ++o5;
      let s6 = i5 - 1;
      for (; s6 > o5 && a3(m3[s6].codePoint); )
        m3[s6].glyphMosaicItem = null, --s6;
      if (o5 <= s6) {
        const t9 = m3[o5].x;
        for (let i6 = o5; i6 <= s6; i6++)
          m3[i6].x -= t9, m3[i6].y = p3;
        let e5 = m3[s6].x;
        m3[s6].glyphMosaicItem && (e5 += m3[s6].glyphMosaicItem.metrics.advance), M = Math.max(e5, M), a5 && this._applyJustification(m3, o5, s6);
      }
      I4 = i5, p3 += _2;
    }
    if (m3.length > 0) {
      const t8 = u4.length - 1, e5 = (a5 - this._hAnchor) * M;
      let i5 = (-this._vAnchor * (t8 + 1) + 0.5) * n5;
      c5 && t8 && (i5 += t8 * n5);
      for (const o5 of m3)
        o5.x += e5, o5.y += i5;
    }
    return m3.filter((t8) => t8.glyphMosaicItem);
  }
  static getTextBox(t8, e5) {
    if (!t8.length)
      return null;
    let i5 = 1 / 0, o5 = 1 / 0, s5 = 0, c5 = 0;
    for (const l5 of t8) {
      const t9 = l5.glyphMosaicItem.metrics.advance, n5 = l5.x, a5 = l5.y - h3, r8 = n5 + t9, m3 = a5 + e5;
      i5 = Math.min(i5, n5), s5 = Math.max(s5, r8), o5 = Math.min(o5, a5), c5 = Math.max(c5, m3);
    }
    return { x: i5, y: o5, width: s5 - i5, height: c5 - o5 };
  }
  static getBox(t8) {
    if (!t8.length)
      return null;
    let e5 = 1 / 0, i5 = 1 / 0, o5 = 0, s5 = 0;
    for (const c5 of t8) {
      const { height: t9, left: h5, top: l5, width: n5 } = c5.glyphMosaicItem.metrics, a5 = c5.x, r8 = c5.y - (t9 - Math.abs(l5)), m3 = a5 + n5 + h5, f3 = r8 + t9;
      e5 = Math.min(e5, a5), o5 = Math.max(o5, m3), i5 = Math.min(i5, r8), s5 = Math.max(s5, f3);
    }
    return { x: e5, y: i5, width: o5 - e5, height: s5 - i5 };
  }
  static addDecoration(t8, e5) {
    const i5 = t8.length;
    if (0 === i5)
      return;
    const o5 = 3;
    let c5 = t8[0].x + t8[0].glyphMosaicItem.metrics.left, h5 = t8[0].y;
    for (let n5 = 1; n5 < i5; n5++) {
      const i6 = t8[n5];
      if (i6.y !== h5) {
        const l6 = t8[n5 - 1].x + t8[n5 - 1].glyphMosaicItem.metrics.left + t8[n5 - 1].glyphMosaicItem.metrics.width;
        t8.push({ codePoint: 0, x: c5, y: h5 + e5 - o5, vertical: false, glyphMosaicItem: { sdf: true, rect: new t3(4, 0, 4, 8), metrics: { width: l6 - c5, height: 2 + 2 * o5, left: 0, top: 0, advance: 0 }, page: 0, code: 0 } }), h5 = i6.y, c5 = i6.x + i6.glyphMosaicItem.metrics.left;
      }
    }
    const l5 = t8[i5 - 1].x + t8[i5 - 1].glyphMosaicItem.metrics.left + t8[i5 - 1].glyphMosaicItem.metrics.width;
    t8.push({ codePoint: 0, x: c5, y: h5 + e5 - o5, vertical: false, glyphMosaicItem: { sdf: true, rect: new t3(4, 0, 4, 8), metrics: { width: l5 - c5, height: 2 + 2 * o5, left: 0, top: 0, advance: 0 }, page: 0, code: 0 } });
  }
  _breakScore(t8, e5, i5, o5) {
    const s5 = (t8 - e5) * (t8 - e5);
    return o5 ? t8 < e5 ? s5 / 2 : 2 * s5 : s5 + Math.abs(i5) * i5;
  }
  _buildBreak(t8, e5, i5, o5, s5, c5) {
    let h5 = null, l5 = this._breakScore(e5, i5, s5, c5);
    for (const n5 of o5) {
      const t9 = e5 - n5.x, o6 = this._breakScore(t9, i5, s5, c5) + n5.score;
      o6 <= l5 && (h5 = n5, l5 = o6);
    }
    return { index: t8, x: e5, score: l5, previousBreak: h5 };
  }
  _optimalBreaks(t8) {
    return t8 ? this._optimalBreaks(t8.previousBreak).concat(t8.index) : [];
  }
  _applyJustification(t8, e5, i5) {
    const o5 = t8[i5], s5 = o5.vertical ? c4 : o5.glyphMosaicItem ? o5.glyphMosaicItem.metrics.advance : 0, h5 = (o5.x + s5) * this._justify;
    for (let c5 = e5; c5 <= i5; c5++)
      t8[c5].x -= h5;
  }
};

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/Placement.js
var x = 4096;
var p2 = 8;
var w = 0.5;
var T2 = 2;
var y = class {
  constructor(e5, t8, i5 = 0, n5 = -1, s5 = w) {
    this.x = e5, this.y = t8, this.angle = i5, this.segment = n5, this.minzoom = s5;
  }
};
var f2 = class {
  constructor(e5, t8, i5, s5, o5, a5 = w, l5 = n2) {
    this.anchor = e5, this.labelAngle = t8, this.glyphAngle = i5, this.page = s5, this.alternateVerticalGlyph = o5, this.minzoom = a5, this.maxzoom = l5;
  }
};
var I2 = class {
  constructor(e5, t8, i5, n5, s5, o5, a5, l5, h5, r8, c5, g2) {
    this.tl = e5, this.tr = t8, this.bl = i5, this.br = n5, this.mosaicRect = s5, this.labelAngle = o5, this.minAngle = a5, this.maxAngle = l5, this.anchor = h5, this.minzoom = r8, this.maxzoom = c5, this.page = g2;
  }
};
var u2 = class {
  constructor(e5) {
    this.shapes = e5;
  }
};
var b = class {
  getIconPlacement(n5, s5, o5) {
    const a5 = new h(n5.x, n5.y), l5 = o5.rotationAlignment === l.MAP, h5 = o5.keepUpright;
    let r8 = o5.rotate * e2;
    l5 && (r8 += n5.angle);
    const m3 = new u2([]);
    return o5.allowOverlap && o5.ignorePlacement || !o || (m3.iconColliders = []), this._addIconPlacement(m3, a5, s5, o5, r8), l5 && h5 && this._addIconPlacement(m3, a5, s5, o5, r8 + t4), m3;
  }
  _addIconPlacement(t8, i5, s5, o5, a5) {
    const l5 = s5.pixelRatio, h5 = s5.width / l5, r8 = s5.height / l5, g2 = o5.offset;
    let x2 = g2[0], d2 = g2[1];
    switch (o5.anchor) {
      case m.CENTER:
        x2 -= h5 / 2, d2 -= r8 / 2;
        break;
      case m.LEFT:
        d2 -= r8 / 2;
        break;
      case m.RIGHT:
        x2 -= h5, d2 -= r8 / 2;
        break;
      case m.TOP:
        x2 -= h5 / 2;
        break;
      case m.BOTTOM:
        x2 -= h5 / 2, d2 -= r8;
        break;
      case m.TOP_LEFT:
        break;
      case m.BOTTOM_LEFT:
        d2 -= r8;
        break;
      case m.TOP_RIGHT:
        x2 -= h5;
        break;
      case m.BOTTOM_RIGHT:
        x2 -= h5, d2 -= r8;
    }
    const p3 = s5.rect, T4 = 2 / l5, y2 = x2 - T4, f3 = d2 - T4, u4 = y2 + p3.width / l5, b3 = f3 + p3.height / l5, P = new h(y2, f3), O = new h(u4, b3), _2 = new h(y2, b3), k = new h(u4, f3);
    if (0 !== a5) {
      const e5 = Math.cos(a5), t9 = Math.sin(a5);
      P.rotate(e5, t9), O.rotate(e5, t9), _2.rotate(e5, t9), k.rotate(e5, t9);
    }
    const M = new I2(P, k, _2, O, p3, a5, 0, 256, i5, w, n2, 0);
    if (t8.shapes.push(M), (!o5.allowOverlap || !o5.ignorePlacement) && o) {
      const e5 = o5.size, s6 = o5.padding, l6 = { xTile: i5.x, yTile: i5.y, dxPixels: x2 * e5 - s6, dyPixels: d2 * e5 - s6, hard: !o5.optional, partIndex: 0, width: h5 * e5 + 2 * s6, height: r8 * e5 + 2 * s6, angle: a5, minLod: w, maxLod: n2 };
      t8.iconColliders.push(l6);
    }
  }
  getTextPlacement(s5, o5, a5, c5) {
    const x2 = new h(s5.x, s5.y), d2 = c5.rotate * e2, y2 = c5.rotationAlignment === l.MAP, b3 = c5.keepUpright, P = c5.padding;
    let O = w;
    const _2 = !y2 ? 0 : s5.angle, k = s5.segment >= 0 && y2, M = c5.allowOverlap && c5.ignorePlacement ? null : [], E2 = [], G = 4, N2 = !k;
    let A2 = Number.POSITIVE_INFINITY, L2 = Number.NEGATIVE_INFINITY, z = A2, F = L2;
    const v = (k || y2) && b3, R = c5.size / c4;
    let B2 = false;
    for (const e5 of o5)
      if (e5.vertical) {
        B2 = true;
        break;
      }
    let H, V = 0, j = 0;
    if (!k && B2) {
      const e5 = l3.getTextBox(o5, c5.lineHeight * c4);
      switch (c5.anchor) {
        case m.LEFT:
          V = e5.height / 2, j = -e5.width / 2;
          break;
        case m.RIGHT:
          V = -e5.height / 2, j = e5.width / 2;
          break;
        case m.TOP:
          V = e5.height / 2, j = e5.width / 2;
          break;
        case m.BOTTOM:
          V = -e5.height / 2, j = -e5.width / 2;
          break;
        case m.TOP_LEFT:
          V = e5.height;
          break;
        case m.BOTTOM_LEFT:
          j = -e5.width;
          break;
        case m.TOP_RIGHT:
          j = e5.width;
          break;
        case m.BOTTOM_RIGHT:
          V = -e5.height;
      }
    }
    V += c5.offset[0] * c4, j += c5.offset[1] * c4;
    for (const t8 of o5) {
      const o6 = t8.glyphMosaicItem;
      if (!o6 || o6.rect.isEmpty)
        continue;
      const l5 = o6.rect, h5 = o6.metrics, g2 = o6.page;
      if (M && N2) {
        if (void 0 !== H && H !== t8.y) {
          let e5, t9, i5, o7;
          B2 ? (e5 = -F + V, t9 = A2 + j, i5 = F - z, o7 = L2 - A2) : (e5 = A2 + V, t9 = z + j, i5 = L2 - A2, o7 = F - z);
          const a6 = { xTile: s5.x, yTile: s5.y, dxPixels: e5 * R - P, dyPixels: t9 * R - P, hard: !c5.optional, partIndex: 1, width: i5 * R + 2 * P, height: o7 * R + 2 * P, angle: d2, minLod: w, maxLod: n2 };
          M.push(a6), A2 = Number.POSITIVE_INFINITY, L2 = Number.NEGATIVE_INFINITY, z = A2, F = L2;
        }
        H = t8.y;
      }
      const m3 = [];
      if (k) {
        const e5 = 0.5 * o6.metrics.width, i5 = (t8.x + h5.left - G + e5) * R * p2;
        if (O = this._placeGlyph(s5, O, i5, a5, s5.segment, 1, t8.vertical, g2, m3), b3 && (O = this._placeGlyph(s5, O, i5, a5, s5.segment, -1, t8.vertical, g2, m3)), O >= T2)
          break;
      } else
        m3.push(new f2(x2, _2, _2, g2, false)), y2 && b3 && m3.push(new f2(x2, _2 + t4, _2 + t4, g2, false));
      const u4 = t8.x + h5.left, C3 = t8.y - h3 - h5.top, S = u4 + h5.width, Y = C3 + h5.height;
      let q, U, D, J, K, Q, W, X;
      if (!k && B2)
        if (t8.vertical) {
          const t9 = (u4 + S) / 2 - h5.height / 2, i5 = (C3 + Y) / 2 + h5.width / 2;
          q = new h(-i5 - G + V, t9 - G + j), U = new h(q.x + l5.width, q.y + l5.height), D = new h(q.x, U.y), J = new h(U.x, q.y);
        } else
          q = new h(-C3 + G + V, u4 - G + j), U = new h(q.x - l5.height, q.y + l5.width), D = new h(U.x, q.y), J = new h(q.x, U.y);
      else
        q = new h(u4 - G + V, C3 - G + j), U = new h(q.x + l5.width, q.y + l5.height), D = new h(q.x, U.y), J = new h(U.x, q.y);
      for (const i5 of m3) {
        let n5, o7, a6, r8;
        if (i5.alternateVerticalGlyph) {
          if (!K) {
            const t9 = (C3 + Y) / 2 + j;
            K = new h((u4 + S) / 2 + V - h5.height / 2 - G, t9 + h5.width / 2 + G), Q = new h(K.x + l5.height, K.y - l5.width), W = new h(Q.x, K.y), X = new h(K.x, Q.y);
          }
          n5 = K, o7 = W, a6 = X, r8 = Q;
        } else
          n5 = q, o7 = D, a6 = J, r8 = U;
        const g3 = C3, m4 = Y, x3 = i5.glyphAngle + d2;
        if (0 !== x3) {
          const e5 = Math.cos(x3), t9 = Math.sin(x3);
          n5 = n5.clone(), o7 = o7 == null ? void 0 : o7.clone(), a6 = a6 == null ? void 0 : a6.clone(), r8 = r8 == null ? void 0 : r8.clone(), n5.rotate(e5, t9), r8 == null ? void 0 : r8.rotate(e5, t9), o7 == null ? void 0 : o7.rotate(e5, t9), a6 == null ? void 0 : a6.rotate(e5, t9);
        }
        let p3 = 0, w3 = 256;
        if (k && B2 ? t8.vertical ? i5.alternateVerticalGlyph ? (p3 = 32, w3 = 96) : (p3 = 224, w3 = 32) : (p3 = 224, w3 = 96) : (p3 = 192, w3 = 64), E2.push(new I2(n5, a6, o7, r8, l5, i5.labelAngle, p3, w3, i5.anchor, i5.minzoom, i5.maxzoom, i5.page)), M && (!v || this._legible(i5.labelAngle))) {
          if (N2)
            u4 < A2 && (A2 = u4), g3 < z && (z = g3), S > L2 && (L2 = S), m4 > F && (F = m4);
          else if (i5.minzoom < T2) {
            const e5 = { xTile: s5.x, yTile: s5.y, dxPixels: (u4 + V) * R - P, dyPixels: (g3 + V) * R - P, hard: !c5.optional, partIndex: 1, width: (S - u4) * R + 2 * P, height: (m4 - g3) * R + 2 * P, angle: x3, minLod: i5.minzoom, maxLod: i5.maxzoom };
            M.push(e5);
          }
        }
      }
    }
    if (O >= T2)
      return null;
    if (M && N2) {
      let e5, t8, i5, o6;
      B2 ? (e5 = -F + V, t8 = A2 + j, i5 = F - z, o6 = L2 - A2) : (e5 = A2 + V, t8 = z + j, i5 = L2 - A2, o6 = F - z);
      const a6 = { xTile: s5.x, yTile: s5.y, dxPixels: e5 * R - P, dyPixels: t8 * R - P, hard: !c5.optional, partIndex: 1, width: i5 * R + 2 * P, height: o6 * R + 2 * P, angle: d2, minLod: w, maxLod: n2 };
      M.push(a6);
    }
    const C2 = new u2(E2);
    return M && M.length > 0 && (C2.textColliders = M), C2;
  }
  _legible(e5) {
    const t8 = i2(e5);
    return t8 < 65 || t8 >= 193;
  }
  _placeGlyph(t8, s5, l5, h5, r8, c5, g2, m3, x2) {
    let d2 = c5;
    const p3 = d2 < 0 ? f(t8.angle + t4, r3) : t8.angle;
    let w3 = 0;
    l5 < 0 && (d2 *= -1, l5 *= -1, w3 = t4), d2 > 0 && ++r8;
    let T4 = new h(t8.x, t8.y), y2 = h5[r8], I4 = n2;
    if (h5.length <= r8)
      return I4;
    for (; ; ) {
      const e5 = y2.x - T4.x, t9 = y2.y - T4.y, i5 = Math.sqrt(e5 * e5 + t9 * t9), n5 = Math.max(l5 / i5, s5), c6 = e5 / i5, u4 = t9 / i5, b3 = f(Math.atan2(u4, c6) + w3, r3);
      if (x2.push(new f2(T4, p3, b3, m3, false, n5, I4)), g2 && x2.push(new f2(T4, p3, b3, m3, true, n5, I4)), n5 <= s5)
        return n5;
      T4 = y2.clone();
      do {
        if (r8 += d2, h5.length <= r8 || r8 < 0)
          return n5;
        y2 = h5[r8];
      } while (T4.isEqual(y2));
      let P = y2.x - T4.x, O = y2.y - T4.y;
      const _2 = Math.sqrt(P * P + O * O);
      P *= i5 / _2, O *= i5 / _2, T4.x -= P, T4.y -= O, I4 = n5;
    }
  }
};

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/Feature.js
var t6;
!function(e5) {
  e5[e5.moveTo = 1] = "moveTo", e5[e5.lineTo = 2] = "lineTo", e5[e5.close = 7] = "close";
}(t6 || (t6 = {}));
var s2 = class {
  constructor(e5, t8) {
    this.values = {}, this._geometry = void 0, this._pbfGeometry = null;
    const s5 = t8.keys, o5 = t8.values, r8 = e5.asUnsafe();
    for (; r8.next(); )
      switch (r8.tag()) {
        case 1:
          this.id = r8.getUInt64();
          break;
        case 2: {
          const e6 = r8.getMessage().asUnsafe(), t9 = this.values;
          for (; !e6.empty(); ) {
            const r9 = e6.getUInt32(), a5 = e6.getUInt32();
            t9[s5[r9]] = o5[a5];
          }
          e6.release();
          break;
        }
        case 3:
          this.type = r8.getUInt32();
          break;
        case 4:
          this._pbfGeometry = r8.getMessage();
          break;
        default:
          r8.skip();
      }
  }
  getGeometry(s5) {
    if (void 0 !== this._geometry)
      return this._geometry;
    if (!this._pbfGeometry)
      return null;
    const o5 = this._pbfGeometry.asUnsafe();
    let r8, a5;
    this._pbfGeometry = null, s5 ? s5.reset(this.type) : r8 = [];
    let n5, i5 = t6.moveTo, l5 = 0, c5 = 0, h5 = 0;
    for (; !o5.empty(); ) {
      if (0 === l5) {
        const e5 = o5.getUInt32();
        i5 = 7 & e5, l5 = e5 >> 3;
      }
      switch (l5--, i5) {
        case t6.moveTo:
          c5 += o5.getSInt32(), h5 += o5.getSInt32(), s5 ? s5.moveTo(c5, h5) : r8 && (a5 && r8.push(a5), a5 = [], a5.push(new h(c5, h5)));
          break;
        case t6.lineTo:
          c5 += o5.getSInt32(), h5 += o5.getSInt32(), s5 ? s5.lineTo(c5, h5) : a5 && a5.push(new h(c5, h5));
          break;
        case t6.close:
          s5 ? s5.close() : a5 && !a5[0].equals(c5, h5) && a5.push(a5[0].clone());
          break;
        default:
          throw o5.release(), new Error("Invalid path operation");
      }
    }
    return s5 ? n5 = s5.result() : r8 && (a5 && r8.push(a5), n5 = r8), o5.release(), this._geometry = n5, n5;
  }
};

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/IndexMemoryBuffer.js
var r4 = class extends t5 {
  constructor() {
    super(12);
  }
  add(s5, r8, t8) {
    const e5 = this.array;
    e5.push(s5), e5.push(r8), e5.push(t8);
  }
};

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/SourceLayerData.js
var e4 = class _e {
  constructor(t8) {
    this.extent = 4096, this.keys = [], this.values = [], this._pbfLayer = t8.clone();
    const s5 = t8.asUnsafe();
    for (; s5.next(); )
      switch (s5.tag()) {
        case 1:
          this.name = s5.getString();
          break;
        case 3:
          this.keys.push(s5.getString());
          break;
        case 4:
          this.values.push(s5.processMessage(_e._parseValue));
          break;
        case 5:
          this.extent = s5.getUInt32();
          break;
        default:
          s5.skip();
      }
  }
  getData() {
    return this._pbfLayer;
  }
  static _parseValue(e5) {
    for (; e5.next(); )
      switch (e5.tag()) {
        case 1:
          return e5.getString();
        case 2:
          return e5.getFloat();
        case 3:
          return e5.getDouble();
        case 4:
          return e5.getInt64();
        case 5:
          return e5.getUInt64();
        case 6:
          return e5.getSInt64();
        case 7:
          return e5.getBool();
        default:
          e5.skip();
      }
    return null;
  }
};

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/VertexMemoryBuffer.js
var o3 = class extends t5 {
  constructor(t8) {
    super(t8);
  }
  add(t8, o5, r8, u4, h5, a5, n5, d2, e5, p3, i5, c5) {
    const M = this.array;
    let l5 = t5.i1616to32(t8, o5);
    M.push(l5);
    const m3 = 31;
    l5 = t5.i8888to32(Math.round(m3 * r8), Math.round(m3 * u4), Math.round(m3 * h5), Math.round(m3 * a5)), M.push(l5), l5 = t5.i8888to32(Math.round(m3 * n5), Math.round(m3 * d2), Math.round(m3 * e5), Math.round(m3 * p3)), M.push(l5), l5 = t5.i1616to32(i5, 0), M.push(l5), c5 && M.push(...c5);
  }
};
var r5 = class extends t5 {
  constructor(t8) {
    super(t8);
  }
  add(t8, o5, r8) {
    const u4 = this.array;
    u4.push(t5.i1616to32(t8, o5)), r8 && u4.push(...r8);
  }
};
var u3 = class extends t5 {
  constructor(t8) {
    super(t8);
  }
  add(t8, o5, r8, u4, h5, a5, n5) {
    const d2 = this.array, e5 = this.index;
    let p3 = t5.i1616to32(t8, o5);
    d2.push(p3);
    const i5 = 15;
    return p3 = t5.i8888to32(Math.round(i5 * r8), Math.round(i5 * u4), h5, a5), d2.push(p3), n5 && d2.push(...n5), e5;
  }
};
var h4 = class extends t5 {
  constructor(t8) {
    super(t8);
  }
  add(o5, r8, u4, h5, a5, n5, d2, e5, p3, i5, c5, M) {
    const l5 = this.array;
    let m3 = t5.i1616to32(o5, r8);
    l5.push(m3), m3 = t5.i1616to32(Math.round(8 * u4), Math.round(8 * h5)), l5.push(m3), m3 = t5.i8888to32(a5 / 4, n5 / 4, e5, p3), l5.push(m3), m3 = t5.i8888to32(0, i2(d2), 10 * i5, Math.min(10 * c5, 255)), l5.push(m3), M && l5.push(...M);
  }
};
var a4 = class extends t5 {
  constructor(t8) {
    super(t8);
  }
  add(t8, o5, r8, u4, h5) {
    const a5 = this.array, n5 = t5.i1616to32(2 * t8 + r8, 2 * o5 + u4);
    a5.push(n5), h5 && a5.push(...h5);
  }
};

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/buckets/BaseBucket.js
var t7 = class {
  constructor(t8, e5, s5) {
    this.layerExtent = 4096, this._features = [], this.layer = t8, this.zoom = e5, this._spriteInfo = s5, this._filter = t8.getFeatureFilter();
  }
  pushFeature(t8) {
    this._filter && !this._filter.filter(t8, this.zoom) || this._features.push(t8);
  }
  hasFeatures() {
    return this._features.length > 0;
  }
  getResources(t8, e5, s5) {
  }
};

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/buckets/CircleBucket.js
var r6 = class extends t7 {
  constructor(t8, r8, i5, c5, s5) {
    super(t8, r8, i5), this.type = E.CIRCLE, this._circleVertexBuffer = c5, this._circleIndexBuffer = s5;
  }
  get circleIndexStart() {
    return this._circleIndexStart;
  }
  get circleIndexCount() {
    return this._circleIndexCount;
  }
  processFeatures(e5) {
    const t8 = this._circleVertexBuffer, r8 = this._circleIndexBuffer;
    this._circleIndexStart = 3 * r8.index, this._circleIndexCount = 0;
    const i5 = this.layer, c5 = this.zoom;
    e5 && e5.setExtent(this.layerExtent);
    for (const s5 of this._features) {
      const n5 = s5.getGeometry(e5);
      if (!n5)
        continue;
      const l5 = i5.circleMaterial.encodeAttributes(s5, c5, i5);
      for (const e6 of n5)
        if (e6)
          for (const i6 of e6) {
            const e7 = t8.index;
            t8.add(i6.x, i6.y, 0, 0, l5), t8.add(i6.x, i6.y, 0, 1, l5), t8.add(i6.x, i6.y, 1, 0, l5), t8.add(i6.x, i6.y, 1, 1, l5), r8.add(e7, e7 + 1, e7 + 2), r8.add(e7 + 1, e7 + 2, e7 + 3), this._circleIndexCount += 6;
          }
    }
  }
  serialize() {
    let e5 = 6;
    e5 += this.layerUIDs.length, e5 += this._circleVertexBuffer.array.length, e5 += this._circleIndexBuffer.array.length;
    const t8 = new Uint32Array(e5), r8 = new Int32Array(t8.buffer);
    let i5 = 0;
    t8[i5++] = this.type, t8[i5++] = this.layerUIDs.length;
    for (let c5 = 0; c5 < this.layerUIDs.length; c5++)
      t8[i5++] = this.layerUIDs[c5];
    t8[i5++] = this._circleIndexStart, t8[i5++] = this._circleIndexCount, t8[i5++] = this._circleVertexBuffer.array.length;
    for (let c5 = 0; c5 < this._circleVertexBuffer.array.length; c5++)
      r8[i5++] = this._circleVertexBuffer.array[c5];
    t8[i5++] = this._circleIndexBuffer.array.length;
    for (let c5 = 0; c5 < this._circleIndexBuffer.array.length; c5++)
      t8[i5++] = this._circleIndexBuffer.array[c5];
    return t8.buffer;
  }
};

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/buckets/FillBucket.js
var s3 = class _s extends t7 {
  constructor(t8, e5, i5, r8, n5, s5, o5) {
    super(t8, e5, i5), this.type = E.FILL, this._patternMap = /* @__PURE__ */ new Map(), this._fillVertexBuffer = r8, this._fillIndexBuffer = n5, this._outlineVertexBuffer = s5, this._outlineIndexBuffer = o5;
  }
  get fillIndexStart() {
    return this._fillIndexStart;
  }
  get fillIndexCount() {
    return this._fillIndexCount;
  }
  get outlineIndexStart() {
    return this._outlineIndexStart;
  }
  get outlineIndexCount() {
    return this._outlineIndexCount;
  }
  getResources(t8, e5, i5) {
    const r8 = this.layer, l5 = this.zoom, n5 = r8.getPaintProperty("fill-pattern");
    if (n5)
      if (n5.isDataDriven)
        for (const s5 of this._features)
          e5(n5.getValue(l5, s5), true);
      else
        e5(n5.getValue(l5), true);
  }
  processFeatures(t8) {
    this._fillIndexStart = 3 * this._fillIndexBuffer.index, this._fillIndexCount = 0, this._outlineIndexStart = 3 * this._outlineIndexBuffer.index, this._outlineIndexCount = 0;
    const e5 = this.layer, i5 = this.zoom, { fillMaterial: r8, outlineMaterial: l5, hasDataDrivenFill: n5, hasDataDrivenOutline: s5 } = e5;
    t8 && t8.setExtent(this.layerExtent);
    const o5 = e5.getPaintProperty("fill-pattern"), a5 = o5 == null ? void 0 : o5.isDataDriven;
    let f3 = !o5 && e5.getPaintValue("fill-antialias", i5);
    if (e5.outlineUsesFillColor) {
      if (f3 && !e5.hasDataDrivenOpacity) {
        const t9 = e5.getPaintValue("fill-opacity", i5), r9 = e5.getPaintValue("fill-opacity", i5 + 1);
        t9 < 1 && r9 < 1 && (f3 = false);
      }
      if (f3 && !e5.hasDataDrivenColor) {
        const t9 = e5.getPaintValue("fill-color", i5), r9 = e5.getPaintValue("fill-color", i5 + 1);
        t9[3] < 1 && r9[3] < 1 && (f3 = false);
      }
    }
    const u4 = this._features, d2 = t8 == null ? void 0 : t8.validateTessellation;
    if (a5) {
      const n6 = [];
      for (const a6 of u4) {
        const u5 = o5.getValue(i5, a6), h5 = this._spriteInfo[u5];
        if (!h5 || !h5.rect)
          continue;
        const x2 = r8.encodeAttributes(a6, i5, e5, h5), c5 = f3 && s5 ? l5.encodeAttributes(a6, i5, e5) : [], _2 = a6.getGeometry(t8);
        n6.push({ ddFillAttributes: x2, ddOutlineAttributes: c5, page: h5.page, geometry: _2 }), n6.sort((t9, e6) => t9.page - e6.page);
        for (const { ddFillAttributes: t9, ddOutlineAttributes: i6, page: r9, geometry: l6 } of n6)
          this._processFeature(l6, f3, e5.outlineUsesFillColor, t9, i6, d2, r9);
      }
    } else
      for (const h5 of u4) {
        const o6 = n5 ? r8.encodeAttributes(h5, i5, e5) : null, a6 = f3 && s5 ? l5.encodeAttributes(h5, i5, e5) : null, u5 = h5.getGeometry(t8);
        this._processFeature(u5, f3, e5.outlineUsesFillColor, o6, a6, d2);
      }
  }
  serialize() {
    let t8 = 10;
    t8 += this.layerUIDs.length, t8 += this._fillVertexBuffer.array.length, t8 += this._fillIndexBuffer.array.length, t8 += this._outlineVertexBuffer.array.length, t8 += this._outlineIndexBuffer.array.length, t8 += 3 * this._patternMap.size + 1;
    const e5 = new Uint32Array(t8), i5 = new Int32Array(e5.buffer);
    let r8 = 0;
    e5[r8++] = this.type, e5[r8++] = this.layerUIDs.length;
    for (let s5 = 0; s5 < this.layerUIDs.length; s5++)
      e5[r8++] = this.layerUIDs[s5];
    e5[r8++] = this._fillIndexStart, e5[r8++] = this._fillIndexCount, e5[r8++] = this._outlineIndexStart, e5[r8++] = this._outlineIndexCount;
    const l5 = this._patternMap, n5 = l5.size;
    if (e5[r8++] = n5, n5 > 0)
      for (const [s5, [o5, a5]] of l5)
        e5[r8++] = s5, e5[r8++] = o5, e5[r8++] = a5;
    e5[r8++] = this._fillVertexBuffer.array.length;
    for (let s5 = 0; s5 < this._fillVertexBuffer.array.length; s5++)
      i5[r8++] = this._fillVertexBuffer.array[s5];
    e5[r8++] = this._fillIndexBuffer.array.length;
    for (let s5 = 0; s5 < this._fillIndexBuffer.array.length; s5++)
      e5[r8++] = this._fillIndexBuffer.array[s5];
    e5[r8++] = this._outlineVertexBuffer.array.length;
    for (let s5 = 0; s5 < this._outlineVertexBuffer.array.length; s5++)
      i5[r8++] = this._outlineVertexBuffer.array[s5];
    e5[r8++] = this._outlineIndexBuffer.array.length;
    for (let s5 = 0; s5 < this._outlineIndexBuffer.array.length; s5++)
      e5[r8++] = this._outlineIndexBuffer.array[s5];
    return e5.buffer;
  }
  _processFeature(t8, e5, i5, r8, l5, n5, o5) {
    if (!t8)
      return;
    const a5 = t8.length, f3 = !l5 || 0 === l5.length;
    if (e5 && (!i5 || f3))
      for (let s5 = 0; s5 < a5; s5++)
        this._processOutline(t8[s5], l5);
    const u4 = 32;
    let d2;
    for (let h5 = 0; h5 < a5; h5++) {
      const e6 = _s._area(t8[h5]);
      e6 > u4 ? (void 0 !== d2 && this._processFill(t8, d2, r8, n5, o5), d2 = [h5]) : e6 < -u4 && void 0 !== d2 && d2.push(h5);
    }
    void 0 !== d2 && this._processFill(t8, d2, r8, n5, o5);
  }
  _processOutline(t8, e5) {
    const i5 = this._outlineVertexBuffer, l5 = this._outlineIndexBuffer, n5 = l5.index;
    let s5, o5, a5;
    const f3 = new h(0, 0), u4 = new h(0, 0), d2 = new h(0, 0);
    let h5 = -1, x2 = -1, c5 = -1, _2 = -1, y2 = -1, g2 = false;
    const p3 = 0;
    let I4 = t8.length;
    if (I4 < 2)
      return;
    const B2 = t8[p3];
    let m3 = t8[I4 - 1];
    for (; I4 && m3.isEqual(B2); )
      --I4, m3 = t8[I4 - 1];
    if (!(I4 - p3 < 2)) {
      for (let r8 = p3; r8 < I4; ++r8) {
        r8 === p3 ? (s5 = t8[I4 - 1], o5 = t8[p3], a5 = t8[p3 + 1], f3.assignSub(o5, s5), f3.normalize(), f3.rightPerpendicular()) : (s5 = o5, o5 = a5, a5 = r8 !== I4 - 1 ? t8[r8 + 1] : t8[p3], f3.assign(u4));
        const n6 = this._isClipEdge(s5, o5);
        -1 === _2 && (g2 = n6), u4.assignSub(a5, o5), u4.normalize(), u4.rightPerpendicular();
        const B3 = f3.x * u4.y - f3.y * u4.x;
        d2.assignAdd(f3, u4), d2.normalize();
        const m4 = -d2.x * -f3.x + -d2.y * -f3.y;
        let V = Math.abs(0 !== m4 ? 1 / m4 : 1);
        V > 8 && (V = 8), B3 >= 0 ? (c5 = i5.add(o5.x, o5.y, f3.x, f3.y, 0, 1, e5), -1 === _2 && (_2 = c5), h5 >= 0 && x2 >= 0 && c5 >= 0 && !n6 && l5.add(h5, x2, c5), x2 = i5.add(o5.x, o5.y, V * -d2.x, V * -d2.y, 0, -1, e5), -1 === y2 && (y2 = x2), h5 >= 0 && x2 >= 0 && c5 >= 0 && !n6 && l5.add(h5, x2, c5), h5 = x2, x2 = c5, c5 = i5.add(o5.x, o5.y, d2.x, d2.y, 0, 1, e5), h5 >= 0 && x2 >= 0 && c5 >= 0 && !n6 && l5.add(h5, x2, c5), x2 = i5.add(o5.x, o5.y, u4.x, u4.y, 0, 1, e5), h5 >= 0 && x2 >= 0 && c5 >= 0 && !n6 && l5.add(h5, x2, c5)) : (c5 = i5.add(o5.x, o5.y, V * d2.x, V * d2.y, 0, 1, e5), -1 === _2 && (_2 = c5), h5 >= 0 && x2 >= 0 && c5 >= 0 && !n6 && l5.add(h5, x2, c5), x2 = i5.add(o5.x, o5.y, -f3.x, -f3.y, 0, -1, e5), -1 === y2 && (y2 = x2), h5 >= 0 && x2 >= 0 && c5 >= 0 && !n6 && l5.add(h5, x2, c5), h5 = x2, x2 = c5, c5 = i5.add(o5.x, o5.y, -d2.x, -d2.y, 0, -1, e5), h5 >= 0 && x2 >= 0 && c5 >= 0 && !n6 && l5.add(h5, x2, c5), h5 = i5.add(o5.x, o5.y, -u4.x, -u4.y, 0, -1, e5), h5 >= 0 && x2 >= 0 && c5 >= 0 && !n6 && l5.add(h5, x2, c5));
      }
      h5 >= 0 && x2 >= 0 && _2 >= 0 && !g2 && l5.add(h5, x2, _2), h5 >= 0 && _2 >= 0 && y2 >= 0 && !g2 && l5.add(h5, y2, _2), this._outlineIndexCount += 3 * (l5.index - n5);
    }
  }
  _processFill(r8, l5, n5, s5, o5) {
    s5 = true;
    let a5;
    l5.length > 1 && (a5 = []);
    let f3 = 0;
    for (const t8 of l5)
      0 !== f3 && a5.push(f3), f3 += r8[t8].length;
    const u4 = 2 * f3, d2 = t.acquire();
    for (const t8 of l5) {
      const e5 = r8[t8], i5 = e5.length;
      for (let t9 = 0; t9 < i5; ++t9)
        d2.push(e5[t9].x, e5[t9].y);
    }
    const h5 = i3(d2, a5, 2);
    if (s5 && i3.deviation(d2, a5, 2, h5) > 0) {
      const t8 = l5.map((t9) => r8[t9].length), { buffer: e5, vertexCount: s6 } = r2(d2, t8);
      if (s6 > 0) {
        const t9 = this._fillVertexBuffer.index;
        for (let i5 = 0; i5 < s6; i5++)
          this._fillVertexBuffer.add(e5[2 * i5], e5[2 * i5 + 1], n5);
        for (let e6 = 0; e6 < s6; e6 += 3) {
          const i5 = t9 + e6;
          this._fillIndexBuffer.add(i5, i5 + 1, i5 + 2);
        }
        if (void 0 !== o5) {
          const t10 = this._patternMap, e6 = t10.get(o5);
          e6 ? e6[1] += s6 : t10.set(o5, [this._fillIndexStart + this._fillIndexCount, s6]);
        }
        this._fillIndexCount += s6;
      }
    } else {
      const t8 = h5.length;
      if (t8 > 0) {
        const e5 = this._fillVertexBuffer.index;
        let i5 = 0;
        for (; i5 < u4; )
          this._fillVertexBuffer.add(d2[i5++], d2[i5++], n5);
        let r9 = 0;
        for (; r9 < t8; )
          this._fillIndexBuffer.add(e5 + h5[r9++], e5 + h5[r9++], e5 + h5[r9++]);
        if (void 0 !== o5) {
          const e6 = this._patternMap, i6 = e6.get(o5);
          i6 ? i6[1] += t8 : e6.set(o5, [this._fillIndexStart + this._fillIndexCount, t8]);
        }
        this._fillIndexCount += t8;
      }
    }
    t.release(d2);
  }
  _isClipEdge(t8, e5) {
    return t8.x === e5.x ? t8.x <= -64 || t8.x >= 4160 : t8.y === e5.y && (t8.y <= -64 || t8.y >= 4160);
  }
  static _area(t8) {
    let e5 = 0;
    const i5 = t8.length - 1;
    for (let r8 = 0; r8 < i5; r8++)
      e5 += (t8[r8].x - t8[r8 + 1].x) * (t8[r8].y + t8[r8 + 1].y);
    return e5 += (t8[i5].x - t8[0].x) * (t8[i5].y + t8[0].y), 0.5 * e5;
  }
};

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/buckets/LineBucket.js
var s4 = 65535;
var n4 = class extends t7 {
  constructor(t8, s5, n5, a5, o5) {
    super(t8, s5, n5), this.type = E.LINE, this._tessellationOptions = { pixelCoordRatio: 8, halfWidth: 0, offset: 0 }, this._patternMap = /* @__PURE__ */ new Map(), this.tessellationProperties = { _lineVertexBuffer: null, _lineIndexBuffer: null, _ddValues: null }, this.tessellationProperties._lineVertexBuffer = a5, this.tessellationProperties._lineIndexBuffer = o5, this._lineTessellator = new c2(r7(this.tessellationProperties), l4(this.tessellationProperties), t8.canUseThinTessellation);
  }
  get lineIndexStart() {
    return this._lineIndexStart;
  }
  get lineIndexCount() {
    return this._lineIndexCount;
  }
  getResources(e5, t8, i5) {
    const s5 = this.layer, n5 = this.zoom, r8 = s5.getPaintProperty("line-pattern"), l5 = s5.getPaintProperty("line-dasharray"), a5 = s5.getLayoutProperty("line-cap");
    if (!r8 && !l5)
      return;
    const o5 = (a5 == null ? void 0 : a5.getValue(n5)) || 0, u4 = a5 == null ? void 0 : a5.isDataDriven, f3 = r8 == null ? void 0 : r8.isDataDriven, h5 = l5 == null ? void 0 : l5.isDataDriven;
    if (f3 || h5)
      for (const p3 of this._features)
        t8(f3 ? r8.getValue(n5, p3) : this._getDashArrayKey(p3, n5, s5, l5, u4, a5, o5));
    else if (r8)
      t8(r8.getValue(n5));
    else if (l5) {
      const e6 = l5.getValue(n5);
      t8(s5.getDashKey(e6, o5));
    }
  }
  processFeatures(e5) {
    this._lineIndexStart = 3 * this.tessellationProperties._lineIndexBuffer.index, this._lineIndexCount = 0;
    const t8 = this.layer, i5 = this.zoom, s5 = this._features, n5 = this._tessellationOptions, { hasDataDrivenLine: r8, lineMaterial: l5 } = t8;
    e5 && e5.setExtent(this.layerExtent);
    const a5 = t8.getPaintProperty("line-pattern"), o5 = t8.getPaintProperty("line-dasharray"), u4 = a5 == null ? void 0 : a5.isDataDriven, f3 = o5 == null ? void 0 : o5.isDataDriven;
    let h5;
    h5 = t8.getLayoutProperty("line-cap");
    const p3 = (h5 == null ? void 0 : h5.isDataDriven) ? h5 : null, g2 = p3 ? null : t8.getLayoutValue("line-cap", i5), y2 = g2 || 0, d2 = !!p3;
    h5 = t8.getLayoutProperty("line-join");
    const c5 = (h5 == null ? void 0 : h5.isDataDriven) ? h5 : null, _2 = c5 ? null : t8.getLayoutValue("line-join", i5);
    h5 = t8.getLayoutProperty("line-miter-limit");
    const x2 = (h5 == null ? void 0 : h5.isDataDriven) ? h5 : null, V = x2 ? null : t8.getLayoutValue("line-miter-limit", i5);
    h5 = t8.getLayoutProperty("line-round-limit");
    const m3 = (h5 == null ? void 0 : h5.isDataDriven) ? h5 : null, D = m3 ? null : t8.getLayoutValue("line-round-limit", i5);
    h5 = t8.getPaintProperty("line-width");
    const P = (h5 == null ? void 0 : h5.isDataDriven) ? h5 : null, I4 = P ? null : t8.getPaintValue("line-width", i5);
    h5 = t8.getPaintProperty("line-offset");
    const L2 = (h5 == null ? void 0 : h5.isDataDriven) ? h5 : null, B2 = L2 ? null : t8.getPaintValue("line-offset", i5);
    if (u4 || f3) {
      const r9 = [];
      for (const n6 of s5) {
        const s6 = u4 ? a5.getValue(i5, n6) : this._getDashArrayKey(n6, i5, t8, o5, d2, p3, y2), f4 = this._spriteInfo[s6];
        if (!f4 || !f4.rect)
          continue;
        const h6 = l5.encodeAttributes(n6, i5, t8, f4), v = n6.getGeometry(e5);
        r9.push({ ddAttributes: h6, page: f4.page, cap: p3 ? p3.getValue(i5, n6) : g2, join: c5 ? c5.getValue(i5, n6) : _2, miterLimit: x2 ? x2.getValue(i5, n6) : V, roundLimit: m3 ? m3.getValue(i5, n6) : D, halfWidth: 0.5 * (P ? P.getValue(i5, n6) : I4), offset: L2 ? L2.getValue(i5, n6) : B2, geometry: v });
      }
      r9.sort((e6, t9) => e6.page - t9.page), n5.textured = true;
      for (const { ddAttributes: e6, page: t9, cap: i6, join: s6, miterLimit: l6, roundLimit: a6, halfWidth: o6, offset: u5, geometry: f4 } of r9)
        n5.capType = i6, n5.joinType = s6, n5.miterLimit = l6, n5.roundLimit = a6, n5.halfWidth = o6, n5.offset = u5, this._processFeature(f4, e6, t9);
    } else {
      if (a5) {
        const e6 = a5.getValue(i5), t9 = this._spriteInfo[e6];
        if (!t9 || !t9.rect)
          return;
      }
      n5.textured = !(!a5 && !o5), n5.capType = g2, n5.joinType = _2, n5.miterLimit = V, n5.roundLimit = D, n5.halfWidth = 0.5 * I4, n5.offset = B2;
      for (const a6 of s5) {
        const s6 = r8 ? l5.encodeAttributes(a6, i5, t8) : null;
        p3 && (n5.capType = p3.getValue(i5, a6)), c5 && (n5.joinType = c5.getValue(i5, a6)), x2 && (n5.miterLimit = x2.getValue(i5, a6)), m3 && (n5.roundLimit = m3.getValue(i5, a6)), P && (n5.halfWidth = 0.5 * P.getValue(i5, a6)), L2 && (n5.offset = L2.getValue(i5, a6));
        const o6 = a6.getGeometry(e5);
        this._processFeature(o6, s6);
      }
    }
  }
  serialize() {
    let e5 = 6;
    e5 += this.layerUIDs.length, e5 += this.tessellationProperties._lineVertexBuffer.array.length, e5 += this.tessellationProperties._lineIndexBuffer.array.length, e5 += 3 * this._patternMap.size + 1;
    const t8 = new Uint32Array(e5), i5 = new Int32Array(t8.buffer);
    let s5 = 0;
    t8[s5++] = this.type, t8[s5++] = this.layerUIDs.length;
    for (let l5 = 0; l5 < this.layerUIDs.length; l5++)
      t8[s5++] = this.layerUIDs[l5];
    t8[s5++] = this._lineIndexStart, t8[s5++] = this._lineIndexCount;
    const n5 = this._patternMap, r8 = n5.size;
    if (t8[s5++] = r8, r8 > 0)
      for (const [l5, [a5, o5]] of n5)
        t8[s5++] = l5, t8[s5++] = a5, t8[s5++] = o5;
    t8[s5++] = this.tessellationProperties._lineVertexBuffer.array.length;
    for (let l5 = 0; l5 < this.tessellationProperties._lineVertexBuffer.array.length; l5++)
      i5[s5++] = this.tessellationProperties._lineVertexBuffer.array[l5];
    t8[s5++] = this.tessellationProperties._lineIndexBuffer.array.length;
    for (let l5 = 0; l5 < this.tessellationProperties._lineIndexBuffer.array.length; l5++)
      t8[s5++] = this.tessellationProperties._lineIndexBuffer.array[l5];
    return t8.buffer;
  }
  _processFeature(e5, t8, i5) {
    if (!e5)
      return;
    const s5 = e5.length;
    for (let n5 = 0; n5 < s5; n5++)
      this._processGeometry(e5[n5], t8, i5);
  }
  _processGeometry(e5, t8, i5) {
    if (e5.length < 2)
      return;
    const n5 = 1e-3;
    let r8, l5, a5 = e5[0], o5 = 1;
    for (; o5 < e5.length; )
      r8 = e5[o5].x - a5.x, l5 = e5[o5].y - a5.y, r8 * r8 + l5 * l5 < n5 * n5 ? e5.splice(o5, 1) : (a5 = e5[o5], ++o5);
    if (e5.length < 2)
      return;
    const u4 = this.tessellationProperties._lineIndexBuffer, f3 = 3 * u4.index;
    this._tessellationOptions.initialDistance = 0, this._tessellationOptions.wrapDistance = s4, this.tessellationProperties._ddValues = t8, this._lineTessellator.tessellate(e5, this._tessellationOptions);
    const h5 = 3 * u4.index - f3;
    if (void 0 !== i5) {
      const e6 = this._patternMap, t9 = e6.get(i5);
      t9 ? t9[1] += h5 : e6.set(i5, [f3 + this._lineIndexCount, h5]);
    }
    this._lineIndexCount += h5;
  }
  _getDashArrayKey(e5, t8, i5, s5, n5, r8, l5) {
    const a5 = n5 ? r8.getValue(t8, e5) : l5, o5 = s5.getValue(t8, e5);
    return i5.getDashKey(o5, a5);
  }
};
var r7 = (e5) => (t8, i5, s5, n5, r8, l5, a5, o5, u4, f3, h5) => (e5._lineVertexBuffer.add(t8, i5, a5, o5, s5, n5, r8, l5, u4, f3, h5, e5._ddValues), e5._lineVertexBuffer.index - 1);
var l4 = (e5) => (t8, i5, s5) => {
  e5._lineIndexBuffer.add(t8, i5, s5);
};

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/buckets/SymbolBucket.js
var b2 = 10;
function A(e5, t8) {
  return e5.iconMosaicItem && t8.iconMosaicItem ? e5.iconMosaicItem.page === t8.iconMosaicItem.page ? 0 : e5.iconMosaicItem.page - t8.iconMosaicItem.page : e5.iconMosaicItem && !t8.iconMosaicItem ? 1 : !e5.iconMosaicItem && t8.iconMosaicItem ? -1 : 0;
}
var L = class _L extends t7 {
  constructor(e5, t8, n5, i5, s5, a5, r8, l5) {
    super(e5, t8, l5.getSpriteItems()), this.type = E.SYMBOL, this._markerMap = /* @__PURE__ */ new Map(), this._glyphMap = /* @__PURE__ */ new Map(), this._glyphBufferDataStorage = /* @__PURE__ */ new Map(), this._isIconSDF = false, this._iconVertexBuffer = n5, this._iconIndexBuffer = i5, this._textVertexBuffer = s5, this._textIndexBuffer = a5, this._placementEngine = r8, this._workerTileHandler = l5;
  }
  get markerPageMap() {
    return this._markerMap;
  }
  get glyphsPageMap() {
    return this._glyphMap;
  }
  get symbolInstances() {
    return this._symbolInstances;
  }
  getResources(e5, t8, i5) {
    const s5 = this.layer, o5 = this.zoom;
    e5 && e5.setExtent(this.layerExtent);
    const a5 = s5.getLayoutProperty("icon-image"), r8 = s5.getLayoutProperty("text-field");
    let l5 = s5.getLayoutProperty("text-transform"), h5 = s5.getLayoutProperty("text-font");
    const x2 = [];
    let c5, d2, f3, g2;
    a5 && !a5.isDataDriven && (c5 = a5.getValue(o5)), r8 && !r8.isDataDriven && (d2 = r8.getValue(o5)), l5 && l5.isDataDriven || (f3 = s5.getLayoutValue("text-transform", o5), l5 = null), h5 && h5.isDataDriven || (g2 = s5.getLayoutValue("text-font", o5), h5 = null);
    for (const m3 of this._features) {
      const u4 = m3.getGeometry(e5);
      if (!u4 || 0 === u4.length)
        continue;
      let p3, _2;
      a5 && (p3 = a5.isDataDriven ? a5.getValue(o5, m3) : this._replaceKeys(c5, m3.values), p3 && t8(p3));
      let M = false;
      if (r8 && (_2 = r8.isDataDriven ? r8.getValue(o5, m3) : this._replaceKeys(d2, m3.values), _2)) {
        switch (_2 = _2.replaceAll("\\n", "\n"), l5 && (f3 = l5.getValue(o5, m3)), f3) {
          case o2.LOWERCASE:
            _2 = _2.toLowerCase();
            break;
          case o2.UPPERCASE:
            _2 = _2.toUpperCase();
        }
        if (_L._bidiEngine.hasBidiChar(_2)) {
          let e6;
          e6 = "rtl" === _L._bidiEngine.checkContextual(_2) ? "IDNNN" : "ICNNN", _2 = _L._bidiEngine.bidiTransform(_2, e6, "VLYSN"), M = true;
        }
        if (_2.length > 0) {
          h5 && (g2 = h5.getValue(o5, m3));
          for (const e6 of g2) {
            let t9 = i5[e6];
            t9 || (t9 = i5[e6] = /* @__PURE__ */ new Set());
            for (const e7 of _2) {
              const n5 = e7.codePointAt(0);
              null != n5 && t9.add(n5);
            }
          }
        }
      }
      if (!p3 && !_2)
        continue;
      const P = s5.getLayoutValue("symbol-sort-key", o5, m3), I4 = { feature: m3, sprite: p3, label: _2, rtl: M, geometry: u4, hash: (_2 ? c(_2) : 0) ^ (p3 ? c(p3) : 0), priority: P, textFont: g2 };
      x2.push(I4);
    }
    this._symbolFeatures = x2;
  }
  processFeatures(e5) {
    e5 && e5.setExtent(this.layerExtent);
    const n5 = this.layer, s5 = this.zoom, o5 = n5.getLayoutValue("symbol-placement", s5), r8 = o5 !== n3.POINT, l5 = n5.getLayoutValue("symbol-spacing", s5) * p2, g2 = n5.getLayoutProperty("icon-image"), y2 = n5.getLayoutProperty("text-field"), b3 = g2 ? new T(n5, s5, r8) : null, V = y2 ? new m2(n5, s5, r8) : null, T4 = this._workerTileHandler;
    let w3;
    g2 && (w3 = T4.getSpriteItems()), this._iconIndexStart = 3 * this._iconIndexBuffer.index, this._textIndexStart = 3 * this._textIndexBuffer.index, this._iconIndexCount = 0, this._textIndexCount = 0, this._markerMap.clear(), this._glyphMap.clear();
    const B2 = [];
    let C2 = 1;
    V && V.size && (C2 = V.size / c4);
    const R = V ? V.maxAngle * e2 : 0, D = V ? V.size * p2 : 0;
    for (const a5 of this._symbolFeatures) {
      let e6;
      b3 && w3 && a5.sprite && (e6 = w3[a5.sprite], e6 && e6.sdf && (this._isIconSDF = true));
      let n6;
      !!e6 && b3.update(s5, a5.feature);
      let g3 = 0;
      const y3 = a5.label;
      if (y3) {
        r(V), V.update(s5, a5.feature);
        const e7 = r8 && V.rotationAlignment === l.MAP ? V.keepUpright : V.writingMode && V.writingMode.includes(p.VERTICAL);
        let i5 = 0.5;
        switch (V.anchor) {
          case m.TOP_LEFT:
          case m.LEFT:
          case m.BOTTOM_LEFT:
            i5 = 0;
            break;
          case m.TOP_RIGHT:
          case m.RIGHT:
          case m.BOTTOM_RIGHT:
            i5 = 1;
        }
        let o6 = 0.5;
        switch (V.anchor) {
          case m.TOP_LEFT:
          case m.TOP:
          case m.TOP_RIGHT:
            o6 = 0;
            break;
          case m.BOTTOM_LEFT:
          case m.BOTTOM:
          case m.BOTTOM_RIGHT:
            o6 = 1;
        }
        let l6 = 0.5;
        switch (V.justify) {
          case u.AUTO:
            l6 = i5;
            break;
          case u.LEFT:
            l6 = 0;
            break;
          case u.RIGHT:
            l6 = 1;
        }
        const x2 = V.letterSpacing * c4, c5 = r8 ? 0 : V.maxWidth * c4, m3 = V.lineHeight * c4, P = a5.textFont.map((e8) => T4.getGlyphItems(e8));
        if (n6 = new l3(P, c5, m3, x2, i5, o6, l6).getShaping(y3, a5.rtl, e7), n6 && n6.length > 0) {
          let e8 = 1e30, t8 = -1e30;
          for (const i6 of n6)
            e8 = Math.min(e8, i6.x), t8 = Math.max(t8, i6.x);
          g3 = (t8 - e8 + 2 * c4) * C2 * p2;
        }
      }
      for (let t8 of a5.geometry) {
        const s6 = [];
        if (o5 === n3.LINE) {
          if ((n6 == null ? void 0 : n6.length) && (V == null ? void 0 : V.size)) {
            const e7 = V.size * p2 * (2 + Math.min(2, 4 * Math.abs(V.offset[1])));
            t8 = _L._smoothVertices(t8, e7);
          }
          _L._pushAnchors(s6, t8, l5, g3);
        } else
          o5 === n3.LINE_CENTER ? _L._pushCenterAnchor(s6, t8) : a5.feature.type === t2.Polygon ? _L._pushCentroid(s6, t8) : s6.push(new y(t8[0].x, t8[0].y));
        for (const i5 of s6) {
          if (i5.x < 0 || i5.x > x || i5.y < 0 || i5.y > x)
            continue;
          if (r8 && g3 > 0 && (V == null ? void 0 : V.rotationAlignment) === l.MAP && !_L._honorsTextMaxAngle(t8, i5, g3, R, D))
            continue;
          const s7 = { shaping: n6, line: t8, iconMosaicItem: e6, anchor: i5, symbolFeature: a5, textColliders: [], iconColliders: [], textVertexRanges: [], iconVertexRanges: [] };
          B2.push(s7), this._processFeature(s7, b3, V);
        }
      }
    }
    B2.sort(A), this._addPlacedGlyphs(), this._symbolInstances = B2;
  }
  serialize() {
    let e5 = 11;
    e5 += this.layerUIDs.length, e5 += 3 * this.markerPageMap.size, e5 += 3 * this.glyphsPageMap.size, e5 += _L._symbolsSerializationLength(this._symbolInstances), e5 += this._iconVertexBuffer.array.length, e5 += this._iconIndexBuffer.array.length, e5 += this._textVertexBuffer.array.length, e5 += this._textIndexBuffer.array.length;
    const t8 = new Uint32Array(e5), n5 = new Int32Array(t8.buffer), i5 = new Float32Array(t8.buffer);
    let s5 = 0;
    t8[s5++] = this.type, t8[s5++] = this.layerUIDs.length;
    for (let o5 = 0; o5 < this.layerUIDs.length; o5++)
      t8[s5++] = this.layerUIDs[o5];
    t8[s5++] = this._isIconSDF ? 1 : 0, t8[s5++] = this.markerPageMap.size;
    for (const [o5, [a5, r8]] of this.markerPageMap)
      t8[s5++] = o5, t8[s5++] = a5, t8[s5++] = r8;
    t8[s5++] = this.glyphsPageMap.size;
    for (const [o5, [a5, r8]] of this.glyphsPageMap)
      t8[s5++] = o5, t8[s5++] = a5, t8[s5++] = r8;
    t8[s5++] = this._iconVertexBuffer.index / 4, t8[s5++] = this._textVertexBuffer.index / 4, s5 = _L.serializeSymbols(t8, n5, i5, s5, this._symbolInstances), t8[s5++] = this._iconVertexBuffer.array.length;
    for (let o5 = 0; o5 < this._iconVertexBuffer.array.length; o5++)
      n5[s5++] = this._iconVertexBuffer.array[o5];
    t8[s5++] = this._iconIndexBuffer.array.length;
    for (let o5 = 0; o5 < this._iconIndexBuffer.array.length; o5++)
      t8[s5++] = this._iconIndexBuffer.array[o5];
    t8[s5++] = this._textVertexBuffer.array.length;
    for (let o5 = 0; o5 < this._textVertexBuffer.array.length; o5++)
      n5[s5++] = this._textVertexBuffer.array[o5];
    t8[s5++] = this._textIndexBuffer.array.length;
    for (let o5 = 0; o5 < this._textIndexBuffer.array.length; o5++)
      t8[s5++] = this._textIndexBuffer.array[o5];
    return t8.buffer;
  }
  static _symbolsSerializationLength(e5) {
    let t8 = 0;
    t8 += 1;
    for (const n5 of e5 || []) {
      t8 += 4, t8 += 1;
      for (const e6 of n5.textColliders)
        t8 += b2;
      for (const e6 of n5.iconColliders)
        t8 += b2;
      t8 += 1, t8 += 2 * n5.textVertexRanges.length, t8 += 1, t8 += 2 * n5.iconVertexRanges.length;
    }
    return t8;
  }
  static serializeSymbols(e5, t8, n5, i5, s5) {
    s5 = s5 || [], t8[i5++] = s5.length;
    for (const o5 of s5) {
      t8[i5++] = o5.anchor.x, t8[i5++] = o5.anchor.y, t8[i5++] = o5.symbolFeature.hash, t8[i5++] = o5.symbolFeature.priority, t8[i5++] = o5.textColliders.length + o5.iconColliders.length;
      for (const e6 of o5.textColliders)
        t8[i5++] = e6.xTile, t8[i5++] = e6.yTile, t8[i5++] = e6.dxPixels, t8[i5++] = e6.dyPixels, t8[i5++] = e6.hard ? 1 : 0, t8[i5++] = e6.partIndex, n5[i5++] = e6.minLod, n5[i5++] = e6.maxLod, t8[i5++] = e6.width, t8[i5++] = e6.height;
      for (const e6 of o5.iconColliders)
        t8[i5++] = e6.xTile, t8[i5++] = e6.yTile, t8[i5++] = e6.dxPixels, t8[i5++] = e6.dyPixels, t8[i5++] = e6.hard ? 1 : 0, t8[i5++] = e6.partIndex, n5[i5++] = e6.minLod, n5[i5++] = e6.maxLod, t8[i5++] = e6.width, t8[i5++] = e6.height;
      t8[i5++] = o5.textVertexRanges.length;
      for (const [e6, n6] of o5.textVertexRanges)
        t8[i5++] = e6, t8[i5++] = n6;
      t8[i5++] = o5.iconVertexRanges.length;
      for (const [e6, n6] of o5.iconVertexRanges)
        t8[i5++] = e6, t8[i5++] = n6;
    }
    return i5;
  }
  _replaceKeys(e5, t8) {
    return e5.replaceAll(/{([^{}]+)}/g, (e6, n5) => n5 in t8 ? t8[n5] : "");
  }
  _processFeature(e5, t8, n5) {
    const { line: i5, iconMosaicItem: s5, shaping: o5, anchor: a5 } = e5, l5 = this.zoom, h5 = this.layer, x2 = !!s5;
    let c5 = true;
    x2 && (c5 = (t8 == null ? void 0 : t8.optional) || !s5);
    const d2 = o5 && o5.length > 0, f3 = !d2 || (n5 == null ? void 0 : n5.optional);
    let g2, y2;
    if (x2 && (g2 = this._placementEngine.getIconPlacement(a5, s5, t8)), (g2 || c5) && (d2 && (y2 = this._placementEngine.getTextPlacement(a5, o5, i5, n5)), y2 || f3)) {
      if (g2 && y2 || (f3 || c5 ? f3 || y2 ? c5 || g2 || (y2 = null) : g2 = null : (g2 = null, y2 = null)), y2) {
        const t9 = h5.hasDataDrivenText ? h5.textMaterial.encodeAttributes(e5.symbolFeature.feature, l5, h5) : null;
        if (this._storePlacedGlyphs(e5, y2.shapes, l5, n5.rotationAlignment, t9), y2.textColliders) {
          e5.textColliders = y2.textColliders;
          for (const e6 of y2.textColliders) {
            e6.minLod = Math.max(l5 + N(e6.minLod), 0), e6.maxLod = Math.min(l5 + N(e6.maxLod), 25);
            const t10 = e6.angle;
            if (t10) {
              const n6 = Math.cos(t10), i6 = Math.sin(t10), s6 = e6.dxPixels * n6 - e6.dyPixels * i6, o6 = e6.dxPixels * i6 + e6.dyPixels * n6, a6 = (e6.dxPixels + e6.width) * n6 - e6.dyPixels * i6, r8 = (e6.dxPixels + e6.width) * i6 + e6.dyPixels * n6, l6 = e6.dxPixels * n6 - (e6.dyPixels + e6.height) * i6, h6 = e6.dxPixels * i6 + (e6.dyPixels + e6.height) * n6, x3 = (e6.dxPixels + e6.width) * n6 - (e6.dyPixels + e6.height) * i6, c6 = (e6.dxPixels + e6.width) * i6 + (e6.dyPixels + e6.height) * n6, d3 = Math.min(s6, a6, l6, x3), f4 = Math.max(s6, a6, l6, x3), g3 = Math.min(o6, r8, h6, c6), y3 = Math.max(o6, r8, h6, c6);
              e6.dxPixels = d3, e6.dyPixels = g3, e6.width = f4 - d3, e6.height = y3 - g3;
            }
          }
        }
      }
      if (g2) {
        const n6 = h5.hasDataDrivenIcon ? h5.iconMaterial.encodeAttributes(e5.symbolFeature.feature, l5, h5) : null;
        if (this._addPlacedIcons(e5, g2.shapes, l5, s5.page, t8.rotationAlignment === l.VIEWPORT, n6), g2.iconColliders) {
          e5.iconColliders = g2.iconColliders;
          for (const e6 of g2.iconColliders) {
            e6.minLod = Math.max(l5 + N(e6.minLod), 0), e6.maxLod = Math.min(l5 + N(e6.maxLod), 25);
            const t9 = e6.angle;
            if (t9) {
              const n7 = Math.cos(t9), i6 = Math.sin(t9), s6 = e6.dxPixels * n7 - e6.dyPixels * i6, o6 = e6.dxPixels * i6 + e6.dyPixels * n7, a6 = (e6.dxPixels + e6.width) * n7 - e6.dyPixels * i6, r8 = (e6.dxPixels + e6.width) * i6 + e6.dyPixels * n7, l6 = e6.dxPixels * n7 - (e6.dyPixels + e6.height) * i6, h6 = e6.dxPixels * i6 + (e6.dyPixels + e6.height) * n7, x3 = (e6.dxPixels + e6.width) * n7 - (e6.dyPixels + e6.height) * i6, c6 = (e6.dxPixels + e6.width) * i6 + (e6.dyPixels + e6.height) * n7, d3 = Math.min(s6, a6, l6, x3), f4 = Math.max(s6, a6, l6, x3), g3 = Math.min(o6, r8, h6, c6), y3 = Math.max(o6, r8, h6, c6);
              e6.dxPixels = d3, e6.dyPixels = g3, e6.width = f4 - d3, e6.height = y3 - g3;
            }
          }
        }
      }
    }
  }
  _addPlacedIcons(e5, t8, n5, i5, s5, o5) {
    const a5 = Math.max(n5 - 1, 0), l5 = this._iconVertexBuffer, h5 = this._iconIndexBuffer, x2 = this._markerMap;
    for (const c5 of t8) {
      const t9 = s5 ? 0 : Math.max(n5 + N(c5.minzoom), a5), d2 = s5 ? 25 : Math.min(n5 + N(c5.maxzoom), 25);
      if (d2 <= t9)
        continue;
      const f3 = c5.tl, g2 = c5.tr, y2 = c5.bl, m3 = c5.br, u4 = c5.mosaicRect, p3 = c5.labelAngle, _2 = c5.minAngle, M = c5.maxAngle, P = c5.anchor, I4 = l5.index, b3 = u4.x, A2 = u4.y, L2 = b3 + u4.width, V = A2 + u4.height, T4 = l5.index;
      l5.add(P.x, P.y, f3.x, f3.y, b3, A2, p3, _2, M, t9, d2, o5), l5.add(P.x, P.y, g2.x, g2.y, L2, A2, p3, _2, M, t9, d2, o5), l5.add(P.x, P.y, y2.x, y2.y, b3, V, p3, _2, M, t9, d2, o5), l5.add(P.x, P.y, m3.x, m3.y, L2, V, p3, _2, M, t9, d2, o5), e5.iconVertexRanges.length > 0 && e5.iconVertexRanges[0][0] + e5.iconVertexRanges[0][1] === T4 ? e5.iconVertexRanges[0][1] += 4 : e5.iconVertexRanges.push([T4, 4]), h5.add(I4, I4 + 1, I4 + 2), h5.add(I4 + 1, I4 + 2, I4 + 3), x2.has(i5) ? x2.get(i5)[1] += 6 : x2.set(i5, [this._iconIndexStart + this._iconIndexCount, 6]), this._iconIndexCount += 6;
    }
  }
  _addPlacedGlyphs() {
    const e5 = this._textVertexBuffer, t8 = this._textIndexBuffer, n5 = this._glyphMap;
    for (const [i5, s5] of this._glyphBufferDataStorage)
      for (const o5 of s5) {
        const s6 = e5.index, a5 = o5.symbolInstance, r8 = o5.ddAttributes, l5 = e5.index;
        e5.add(o5.glyphAnchor[0], o5.glyphAnchor[1], o5.tl[0], o5.tl[1], o5.xmin, o5.ymin, o5.labelAngle, o5.minAngle, o5.maxAngle, o5.minLod, o5.maxLod, r8), e5.add(o5.glyphAnchor[0], o5.glyphAnchor[1], o5.tr[0], o5.tr[1], o5.xmax, o5.ymin, o5.labelAngle, o5.minAngle, o5.maxAngle, o5.minLod, o5.maxLod, r8), e5.add(o5.glyphAnchor[0], o5.glyphAnchor[1], o5.bl[0], o5.bl[1], o5.xmin, o5.ymax, o5.labelAngle, o5.minAngle, o5.maxAngle, o5.minLod, o5.maxLod, r8), e5.add(o5.glyphAnchor[0], o5.glyphAnchor[1], o5.br[0], o5.br[1], o5.xmax, o5.ymax, o5.labelAngle, o5.minAngle, o5.maxAngle, o5.minLod, o5.maxLod, r8), a5.textVertexRanges.length > 0 && a5.textVertexRanges[0][0] + a5.textVertexRanges[0][1] === l5 ? a5.textVertexRanges[0][1] += 4 : a5.textVertexRanges.push([l5, 4]), t8.add(s6, s6 + 1, s6 + 2), t8.add(s6 + 1, s6 + 2, s6 + 3), n5.has(i5) ? n5.get(i5)[1] += 6 : n5.set(i5, [this._textIndexStart + this._textIndexCount, 6]), this._textIndexCount += 6;
      }
    this._glyphBufferDataStorage.clear();
  }
  _storePlacedGlyphs(e5, t8, n5, i5, s5) {
    const o5 = Math.max(n5 - 1, 0), a5 = i5 === l.VIEWPORT;
    let l5, h5, x2, c5, d2, f3, g2, y2, m3, p3, _2;
    for (const u4 of t8) {
      if (l5 = a5 ? 0 : Math.max(n5 + N(u4.minzoom), o5), h5 = a5 ? 25 : Math.min(n5 + N(u4.maxzoom), 25), h5 <= l5)
        continue;
      x2 = u4.tl, c5 = u4.tr, d2 = u4.bl, f3 = u4.br, g2 = u4.labelAngle, y2 = u4.minAngle, m3 = u4.maxAngle, p3 = u4.anchor, _2 = u4.mosaicRect, this._glyphBufferDataStorage.has(u4.page) || this._glyphBufferDataStorage.set(u4.page, []);
      this._glyphBufferDataStorage.get(u4.page).push({ glyphAnchor: [p3.x, p3.y], tl: [x2.x, x2.y], tr: [c5.x, c5.y], bl: [d2.x, d2.y], br: [f3.x, f3.y], xmin: _2.x, ymin: _2.y, xmax: _2.x + _2.width, ymax: _2.y + _2.height, labelAngle: g2, minAngle: y2, maxAngle: m3, minLod: l5, maxLod: h5, placementLod: o5, symbolInstance: e5, ddAttributes: s5 });
    }
  }
  static _pushAnchors(e5, t8, n5, i5) {
    n5 += i5;
    let o5 = 0;
    const a5 = t8.length - 1;
    for (let l5 = 0; l5 < a5; l5++)
      o5 += h.distance(t8[l5], t8[l5 + 1]);
    let r8 = i5 || n5;
    if (r8 *= 0.5, o5 <= r8)
      return;
    const h5 = r8 / o5;
    let c5 = 0, d2 = -(n5 = o5 / Math.max(Math.round(o5 / n5), 1)) / 2;
    const f3 = t8.length - 1;
    for (let s5 = 0; s5 < f3; s5++) {
      const i6 = t8[s5], o6 = t8[s5 + 1], a6 = o6.x - i6.x, r9 = o6.y - i6.y, f4 = Math.sqrt(a6 * a6 + r9 * r9);
      let g2;
      for (; d2 + n5 < c5 + f4; ) {
        d2 += n5;
        const t9 = (d2 - c5) / f4, y2 = h2(i6.x, o6.x, t9), m3 = h2(i6.y, o6.y, t9);
        void 0 === g2 && (g2 = Math.atan2(r9, a6)), e5.push(new y(y2, m3, g2, s5, h5));
      }
      c5 += f4;
    }
  }
  static _pushCenterAnchor(e5, t8) {
    let n5 = 0;
    const i5 = t8.length - 1;
    for (let l5 = 0; l5 < i5; l5++)
      n5 += h.distance(t8[l5], t8[l5 + 1]);
    const o5 = n5 / 2;
    let a5 = 0;
    const r8 = t8.length - 1;
    for (let s5 = 0; s5 < r8; s5++) {
      const n6 = t8[s5], i6 = t8[s5 + 1], r9 = i6.x - n6.x, h5 = i6.y - n6.y, c5 = Math.sqrt(r9 * r9 + h5 * h5);
      if (o5 < a5 + c5) {
        const t9 = (o5 - a5) / c5, d2 = h2(n6.x, i6.x, t9), f3 = h2(n6.y, i6.y, t9), g2 = Math.atan2(h5, r9);
        return void e5.push(new y(d2, f3, g2, s5, 0));
      }
      a5 += c5;
    }
  }
  static _deviation(e5, t8, n5) {
    const i5 = (t8.x - e5.x) * (n5.x - t8.x) + (t8.y - e5.y) * (n5.y - t8.y), s5 = (t8.x - e5.x) * (n5.y - t8.y) - (t8.y - e5.y) * (n5.x - t8.x);
    return Math.atan2(s5, i5);
  }
  static _honorsTextMaxAngle(e5, t8, n5, i5, o5) {
    let a5 = 0;
    const r8 = n5 / 2;
    let l5 = new h(t8.x, t8.y), h5 = t8.segment + 1;
    for (; a5 > -r8; ) {
      if (--h5, h5 < 0)
        return false;
      a5 -= h.distance(e5[h5], l5), l5 = e5[h5];
    }
    a5 += h.distance(e5[h5], e5[h5 + 1]);
    const x2 = [];
    let c5 = 0;
    const d2 = e5.length;
    for (; a5 < r8; ) {
      const t9 = e5[h5];
      let n6, r9 = h5;
      do {
        if (++r9, r9 === d2)
          return false;
        n6 = e5[r9];
      } while (n6.isEqual(t9));
      let l6, f3 = r9;
      do {
        if (++f3, f3 === d2)
          return false;
        l6 = e5[f3];
      } while (l6.isEqual(n6));
      const g2 = this._deviation(t9, n6, l6);
      for (x2.push({ deviation: g2, distToAnchor: a5 }), c5 += g2; a5 - x2[0].distToAnchor > o5; )
        c5 -= x2.shift().deviation;
      if (Math.abs(c5) > i5)
        return false;
      a5 += h.distance(n6, l6), h5 = r9;
    }
    return true;
  }
  static _smoothVertices(e5, t8) {
    if (t8 <= 0)
      return e5;
    let n5 = e5.length;
    if (n5 < 3)
      return e5;
    const i5 = [];
    let o5 = 0, a5 = 0;
    i5.push(0);
    for (let y2 = 1; y2 < n5; y2++) {
      const t9 = h.distance(e5[y2], e5[y2 - 1]);
      t9 > 0 && (o5 += t9, i5.push(o5), a5++, a5 !== y2 && (e5[a5] = e5[y2]));
    }
    if (n5 = a5 + 1, n5 < 3)
      return e5;
    t8 = Math.min(t8, 0.2 * o5);
    const r8 = e5[0].x, l5 = e5[0].y, h5 = e5[n5 - 1].x, x2 = e5[n5 - 1].y, c5 = h.sub(e5[0], e5[1]);
    c5.normalize(), e5[0].x += t8 * c5.x, e5[0].y += t8 * c5.y, c5.assignSub(e5[n5 - 1], e5[n5 - 2]), c5.normalize(), e5[n5 - 1].x += t8 * c5.x, e5[n5 - 1].y += t8 * c5.y, i5[0] -= t8, i5[n5 - 1] += t8;
    const d2 = [];
    d2.push(new h(r8, l5));
    const f3 = 1e-6, g2 = 0.5 * t8;
    for (let y2 = 1; y2 < n5 - 1; y2++) {
      let o6 = 0, a6 = 0, r9 = 0;
      for (let n6 = y2 - 1; n6 >= 0; n6--) {
        const s5 = g2 + i5[n6 + 1] - i5[y2];
        if (s5 < 0)
          break;
        const l6 = i5[n6 + 1] - i5[n6], h6 = i5[y2] - i5[n6] < g2 ? 1 : s5 / l6;
        if (h6 < f3)
          break;
        const x3 = h6 * h6, c6 = h6 * s5 - 0.5 * x3 * l6, d3 = h6 * l6 / t8, m3 = e5[n6 + 1], u4 = e5[n6].x - m3.x, p3 = e5[n6].y - m3.y;
        o6 += d3 / c6 * (m3.x * h6 * s5 + 0.5 * x3 * (s5 * u4 - l6 * m3.x) - x3 * h6 * l6 * u4 / 3), a6 += d3 / c6 * (m3.y * h6 * s5 + 0.5 * x3 * (s5 * p3 - l6 * m3.y) - x3 * h6 * l6 * p3 / 3), r9 += d3;
      }
      for (let s5 = y2 + 1; s5 < n5; s5++) {
        const n6 = g2 - i5[s5 - 1] + i5[y2];
        if (n6 < 0)
          break;
        const l6 = i5[s5] - i5[s5 - 1], h6 = i5[s5] - i5[y2] < g2 ? 1 : n6 / l6;
        if (h6 < f3)
          break;
        const x3 = h6 * h6, c6 = h6 * n6 - 0.5 * x3 * l6, d3 = h6 * l6 / t8, m3 = e5[s5 - 1], u4 = e5[s5].x - m3.x, p3 = e5[s5].y - m3.y;
        o6 += d3 / c6 * (m3.x * h6 * n6 + 0.5 * x3 * (n6 * u4 - l6 * m3.x) - x3 * h6 * l6 * u4 / 3), a6 += d3 / c6 * (m3.y * h6 * n6 + 0.5 * x3 * (n6 * p3 - l6 * m3.y) - x3 * h6 * l6 * p3 / 3), r9 += d3;
      }
      d2.push(new h(o6 / r9, a6 / r9));
    }
    return d2.push(new h(h5, x2)), e5[0].x = r8, e5[0].y = l5, e5[n5 - 1].x = h5, e5[n5 - 1].y = x2, d2;
  }
  static _pushCentroid(e5, t8) {
    const n5 = 0, i5 = 0, s5 = 4096, o5 = 4096, a5 = t8.length - 1;
    let r8 = 0, l5 = 0, h5 = 0, c5 = t8[0].x, d2 = t8[0].y;
    c5 > s5 && (c5 = s5), c5 < n5 && (c5 = n5), d2 > o5 && (d2 = o5), d2 < i5 && (d2 = i5);
    for (let x2 = 1; x2 < a5; x2++) {
      let e6 = t8[x2].x, a6 = t8[x2].y, f3 = t8[x2 + 1].x, g2 = t8[x2 + 1].y;
      e6 > s5 && (e6 = s5), e6 < n5 && (e6 = n5), a6 > o5 && (a6 = o5), a6 < i5 && (a6 = i5), f3 > s5 && (f3 = s5), f3 < n5 && (f3 = n5), g2 > o5 && (g2 = o5), g2 < i5 && (g2 = i5);
      const y2 = (e6 - c5) * (g2 - d2) - (f3 - c5) * (a6 - d2);
      r8 += y2 * (c5 + e6 + f3), l5 += y2 * (d2 + a6 + g2), h5 += y2;
    }
    r8 /= 3 * h5, l5 /= 3 * h5, isNaN(r8) || isNaN(l5) || e5.push(new y(r8, l5));
  }
};
L._bidiEngine = new C();

// node_modules/@arcgis/core/views/2d/tiling/enums.js
var I3;
!function(I4) {
  I4[I4.INITIALIZED = 0] = "INITIALIZED", I4[I4.NO_DATA = 1] = "NO_DATA", I4[I4.READY = 2] = "READY", I4[I4.MODIFIED = 3] = "MODIFIED", I4[I4.INVALID = 4] = "INVALID";
}(I3 || (I3 = {}));

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/TileParser.js
var T3 = 8;
var g = 14;
var w2 = 5;
var B = class {
  constructor(t8, r8, o5, n5, c5) {
    var _a;
    if (this._pbfTiles = {}, this._tileClippers = {}, this._client = o5, this._tile = r8, c5) {
      this._styleLayerUIDs = /* @__PURE__ */ new Set();
      for (const e5 of c5)
        this._styleLayerUIDs.add(e5);
    }
    this._styleRepository = n5, this._layers = ((_a = this._styleRepository) == null ? void 0 : _a.layers) ?? [];
    const [l5, a5, u4] = r8.tileKey.split("/").map(parseFloat);
    this._level = l5;
    const f3 = T3 + Math.max((this._level - g) * w2, 0);
    for (const p3 of Object.keys(t8)) {
      const r9 = t8[p3];
      this._pbfTiles[p3] = new n(new Uint8Array(r9.protobuff), new DataView(r9.protobuff));
      if (r9.refKey) {
        const [e5] = r9.refKey.split("/").map(parseFloat), t9 = l5 - e5;
        if (t9 > 0) {
          const e6 = (1 << t9) - 1, r10 = a5 & e6, i5 = u4 & e6;
          this._tileClippers[p3] = new e(t9, r10, i5, 8, f3);
        }
      }
      this._tileClippers[p3] || (this._tileClippers[p3] = new _());
    }
  }
  _canParseStyleLayer(e5) {
    return !this._styleLayerUIDs || this._styleLayerUIDs.has(e5);
  }
  async parse(e5) {
    const t8 = i(), s5 = this._initialize(e5), { returnedBuckets: i5 } = s5;
    this._processLayers(s5), this._linkReferences(s5), this._filterFeatures(s5);
    const o5 = [], n5 = /* @__PURE__ */ new Set(), c5 = (e6, t9) => {
      n5.has(e6) || (o5.push({ name: e6, repeat: t9 }), n5.add(e6));
    }, l5 = {};
    for (const r8 of i5)
      r8.getResources(r8.tileClipper, c5, l5);
    if (this._tile.status === I3.INVALID)
      return [];
    const a5 = this._fetchResources(o5, l5, e5);
    return Promise.all([...a5, t8]).then(() => this._processFeatures(s5.returnedBuckets));
  }
  _initialize(e5) {
    return { signal: e5 && e5.signal, sourceNameToTileData: this._parseTileData(this._pbfTiles), layers: this._layers, zoom: this._level, sourceNameToTileClipper: this._tileClippers, sourceNameToUniqueSourceLayerBuckets: {}, sourceNameToUniqueSourceLayers: {}, returnedBuckets: [], layerIdToBucket: {}, referencerUIDToReferencedId: /* @__PURE__ */ new Map() };
  }
  _processLayers(e5) {
    const { sourceNameToTileData: t8, layers: r8, zoom: s5, sourceNameToTileClipper: i5, sourceNameToUniqueSourceLayerBuckets: o5, sourceNameToUniqueSourceLayers: n5, returnedBuckets: c5, layerIdToBucket: l5, referencerUIDToReferencedId: a5 } = e5;
    for (let u4 = r8.length - 1; u4 >= 0; u4--) {
      const e6 = r8[u4];
      if (!this._canParseStyleLayer(e6.uid) || e6.minzoom && s5 < Math.floor(e6.minzoom) || e6.maxzoom && s5 >= e6.maxzoom || e6.type === a2.BACKGROUND)
        continue;
      if (!t8[e6.source] || !i5[e6.source])
        continue;
      const f3 = t8[e6.source], p3 = i5[e6.source], h5 = e6.sourceLayer, m3 = f3[h5];
      if (m3) {
        let t9 = n5[e6.source];
        if (t9 || (t9 = n5[e6.source] = /* @__PURE__ */ new Set()), t9.add(e6.sourceLayer), e6.refLayerId)
          a5.set(e6.uid, e6.refLayerId);
        else {
          const t10 = this._createBucket(e6);
          if (t10) {
            t10.layerUIDs = [e6.uid], t10.layerExtent = m3.extent, t10.tileClipper = p3;
            let r9 = o5[e6.source];
            r9 || (r9 = o5[e6.source] = {});
            let s6 = r9[h5];
            s6 || (s6 = r9[h5] = []), s6.push(t10), c5.push(t10), l5[e6.id] = t10;
          }
        }
      }
    }
  }
  _linkReferences(e5) {
    const { layerIdToBucket: t8, referencerUIDToReferencedId: r8 } = e5;
    r8.forEach((e6, r9) => {
      t8[e6] && t8[e6].layerUIDs.push(r9);
    });
  }
  _filterFeatures(e5) {
    const { signal: r8, sourceNameToTileData: s5, sourceNameToUniqueSourceLayerBuckets: i5, sourceNameToUniqueSourceLayers: n5 } = e5, c5 = 10 * this._level, l5 = 10 * (this._level + 1), a5 = [], u4 = [];
    for (const t8 of Object.keys(n5)) {
      n5[t8].forEach((e6) => {
        a5.push(e6), u4.push(t8);
      });
    }
    for (let f3 = 0; f3 < a5.length; f3++) {
      const e6 = u4[f3], n6 = a5[f3];
      if (!s5[e6] || !i5[e6])
        continue;
      const p3 = s5[e6][n6], h5 = i5[e6][n6];
      if (!h5 || 0 === h5.length)
        continue;
      if (a(r8))
        return;
      const m3 = p3.getData();
      for (; m3.nextTag(2); ) {
        const e7 = m3.getMessage(), t8 = new s2(e7, p3);
        e7.release();
        const r9 = t8.values;
        if (r9) {
          const e8 = r9._minzoom;
          if (e8 && e8 >= l5)
            continue;
          const t9 = r9._maxzoom;
          if (t9 && t9 <= c5)
            continue;
        }
        for (const s6 of h5)
          s6.pushFeature(t8);
      }
    }
  }
  _fetchResources(e5, t8, r8) {
    const s5 = [], i5 = this._tile.getWorkerTileHandler();
    let o5, n5;
    e5.length > 0 && (o5 = i5.fetchSprites(e5, this._client, r8), s5.push(o5));
    for (const c5 in t8) {
      const e6 = t8[c5];
      e6.size > 0 && (n5 = i5.fetchGlyphs(this._tile.tileKey, c5, e6, this._client, r8), s5.push(n5));
    }
    return s5;
  }
  _processFeatures(e5) {
    const t8 = e5.filter((e6) => e6.hasFeatures() || this._canParseStyleLayer(e6.layer.uid));
    for (const r8 of t8)
      r8.processFeatures(r8.tileClipper);
    return t8;
  }
  _parseTileData(e5) {
    const t8 = {};
    for (const r8 of Object.keys(e5)) {
      const s5 = e5[r8], i5 = {};
      for (; s5.next(); )
        switch (s5.tag()) {
          case 3: {
            const e6 = s5.getMessage(), t9 = new e4(e6);
            e6.release(), i5[t9.name] = t9;
            break;
          }
          default:
            s5.skip();
        }
      t8[r8] = i5;
    }
    return t8;
  }
  _createBucket(e5) {
    switch (e5.type) {
      case a2.BACKGROUND:
        return null;
      case a2.FILL:
        return this._createFillBucket(e5);
      case a2.LINE:
        return this._createLineBucket(e5);
      case a2.CIRCLE:
        return this._createCircleBucket(e5);
      case a2.SYMBOL:
        return this._createSymbolBucket(e5);
    }
  }
  _createFillBucket(e5) {
    return new s3(e5, this._level, this._tile.getWorkerTileHandler().getSpriteItems(), new r5(e5.fillMaterial.getStride()), new r4(), new u3(e5.outlineMaterial.getStride()), new r4());
  }
  _createLineBucket(e5) {
    return new n4(e5, this._level, this._tile.getWorkerTileHandler().getSpriteItems(), new o3(e5.lineMaterial.getStride()), new r4());
  }
  _createCircleBucket(e5) {
    return new r6(e5, this._level, this._tile.getWorkerTileHandler().getSpriteItems(), new a4(e5.circleMaterial.getStride()), new r4());
  }
  _createSymbolBucket(e5) {
    const t8 = this._tile;
    return new L(e5, this._level, new h4(e5.iconMaterial.getStride()), new r4(), new h4(e5.textMaterial.getStride()), new r4(), t8.placementEngine, t8.getWorkerTileHandler());
  }
};

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/WorkerTile.js
var i4 = class {
  constructor(t8, s5, i5, a5) {
    this.status = I3.INITIALIZED, this.placementEngine = new b(), this.tileKey = t8, this.refKeys = s5, this._workerTileHandler = i5, this._styleRepository = a5;
  }
  release() {
    this.tileKey = "", this.refKeys = null, this.status = I3.INITIALIZED, this._workerTileHandler = null;
  }
  async parse(e5, s5) {
    const i5 = s5 && s5.signal;
    if (null != i5) {
      const t8 = () => {
        i5.removeEventListener("abort", t8), this.status = I3.INVALID;
      };
      i5.addEventListener("abort", t8);
    }
    let a5;
    const n5 = { bucketsWithData: [], emptyBuckets: null };
    try {
      a5 = await this._parse(e5, s5);
    } catch (c5) {
      if (d(c5))
        throw c5;
      return { result: n5, transferList: [] };
    }
    this.status = I3.READY;
    const l5 = n5.bucketsWithData, o5 = [];
    for (const t8 of a5)
      if (t8.hasFeatures()) {
        const e6 = t8.serialize();
        l5.push(e6);
      } else
        o5.push(t8.layer.uid);
    const u4 = [...l5];
    let h5 = null;
    return o5.length > 0 && (h5 = Uint32Array.from(o5), u4.push(h5.buffer)), n5.emptyBuckets = h5, { result: n5, transferList: u4 };
  }
  setObsolete() {
    this.status = I3.INVALID;
  }
  getLayers() {
    return this._workerTileHandler.getLayers();
  }
  getWorkerTileHandler() {
    return this._workerTileHandler;
  }
  async _parse(t8, e5) {
    const i5 = t8.sourceName2DataAndRefKey;
    if (0 === Object.keys(i5).length)
      return [];
    this.status = I3.MODIFIED;
    return new B(i5, this, e5.client, this._styleRepository, t8.styleLayerUIDs).parse(e5);
  }
};

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/WorkerTileHandler.js
var o4 = class {
  constructor() {
    this._spriteInfo = {}, this._glyphInfo = {};
  }
  reset() {
    return this._spriteInfo = {}, this._glyphInfo = {}, Promise.resolve();
  }
  getLayers() {
    var _a;
    return ((_a = this._styleRepository) == null ? void 0 : _a.layers) ?? [];
  }
  async createTileAndParse(t8, r8) {
    const { key: o5 } = t8, i5 = {};
    for (const e5 of Object.keys(t8.sourceName2DataAndRefKey)) {
      const s5 = t8.sourceName2DataAndRefKey[e5];
      i5[e5] = s5.refKey;
    }
    const n5 = new i4(o5, i5, this, this._styleRepository);
    try {
      return await n5.parse(t8, r8);
    } catch (l5) {
      if (n5.setObsolete(), n5.release(), !d(l5))
        throw l5;
      return null;
    }
  }
  updateStyle(e5) {
    if (!e5 || 0 === e5.length || !this._styleRepository)
      return;
    const s5 = this._styleRepository;
    for (const r8 of e5) {
      const e6 = r8.type, o5 = r8.data;
      switch (e6) {
        case I.PAINTER_CHANGED:
          s5.setPaintProperties(o5.layer, o5.paint);
          break;
        case I.LAYOUT_CHANGED:
          s5.setLayoutProperties(o5.layer, o5.layout);
          break;
        case I.LAYER_REMOVED:
          s5.deleteStyleLayer(o5.layer);
          break;
        case I.LAYER_CHANGED:
          s5.setStyleLayer(o5.layer, o5.index);
          break;
        case I.SPRITES_CHANGED:
          this._spriteInfo = {};
      }
    }
  }
  setStyle(e5) {
    this._styleRepository = new l2(e5), this._spriteInfo = {}, this._glyphInfo = {};
  }
  fetchSprites(e5, t8, s5) {
    const r8 = [], o5 = this._spriteInfo;
    for (const i5 of e5) {
      void 0 === o5[i5.name] && r8.push(i5);
    }
    return 0 === r8.length ? Promise.resolve() : t8.invoke("getSprites", r8, { signal: s5 && s5.signal }).then((e6) => {
      for (const t9 in e6) {
        const s6 = e6[t9];
        o5[t9] = s6;
      }
    });
  }
  getSpriteItems() {
    return this._spriteInfo;
  }
  fetchGlyphs(e5, t8, s5, r8, o5) {
    const i5 = [];
    let n5 = this._glyphInfo[t8];
    return n5 ? s5.forEach((e6) => {
      n5[e6] || i5.push(e6);
    }) : (n5 = this._glyphInfo[t8] = [], s5.forEach((e6) => i5.push(e6))), 0 === i5.length ? Promise.resolve() : r8.invoke("getGlyphs", { tileID: e5, font: t8, codePoints: i5 }, o5).then((e6) => {
      for (let t9 = 0; t9 < e6.length; t9++)
        e6[t9] && (n5[t9] = e6[t9]);
    });
  }
  getGlyphItems(e5) {
    return this._glyphInfo[e5];
  }
};
export {
  o4 as default
};
//# sourceMappingURL=WorkerTileHandler-VAWJPYZU.js.map
