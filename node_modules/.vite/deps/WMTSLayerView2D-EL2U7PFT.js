import {
  n,
  t
} from "./chunk-BGJRQLAZ.js";
import "./chunk-UM5ZV5XB.js";
import {
  a as a2
} from "./chunk-W7FXZ6Y5.js";
import "./chunk-LT4GV2NG.js";
import "./chunk-Y2JGNMOW.js";
import "./chunk-7YWQQHOF.js";
import {
  d as d2,
  f
} from "./chunk-KPMUAI6T.js";
import "./chunk-TBMS67KR.js";
import "./chunk-FZIEP3HG.js";
import "./chunk-N5CR6S5Y.js";
import "./chunk-PEYWLFGJ.js";
import "./chunk-NE5U5H4D.js";
import "./chunk-AER5JAFS.js";
import "./chunk-7HZ72XIE.js";
import "./chunk-Y7HVH6RU.js";
import "./chunk-NVZXNBIH.js";
import "./chunk-3VTULECI.js";
import "./chunk-A4HFWKMU.js";
import "./chunk-TDXHXKUI.js";
import "./chunk-PR2OEILG.js";
import "./chunk-PJP6JTP7.js";
import "./chunk-IVABPLLZ.js";
import "./chunk-TBHRKIAA.js";
import "./chunk-JSMUQBPG.js";
import "./chunk-FF5LS3YE.js";
import "./chunk-BCDDCNQ2.js";
import "./chunk-KKGVORR5.js";
import "./chunk-WTKN55TU.js";
import "./chunk-TDPKDZC3.js";
import "./chunk-M5UHI5WR.js";
import "./chunk-SCOBW7KR.js";
import "./chunk-AHAGGZUI.js";
import "./chunk-RADYXGQH.js";
import "./chunk-D5NSNTGJ.js";
import "./chunk-OMDLZQUU.js";
import {
  r
} from "./chunk-4YNW7QZY.js";
import {
  y as y2
} from "./chunk-E2BBTG5C.js";
import "./chunk-5KLICR5E.js";
import "./chunk-PNA6D76Z.js";
import {
  h
} from "./chunk-NDQCNJMM.js";
import "./chunk-R2HXL6HT.js";
import {
  e as e2
} from "./chunk-2PAQQUAG.js";
import "./chunk-QXPTMFGZ.js";
import "./chunk-VZAEQ6CY.js";
import "./chunk-SS33L3LC.js";
import "./chunk-X4Y5OF5X.js";
import "./chunk-LNMNRMVX.js";
import "./chunk-ZBWBCN2I.js";
import "./chunk-KTSEQWMB.js";
import "./chunk-EIE3W25Z.js";
import "./chunk-OZXJDVTE.js";
import "./chunk-KIEN3CY2.js";
import "./chunk-FXDEKQIL.js";
import "./chunk-KKGH4SRQ.js";
import "./chunk-Y2CLYMXQ.js";
import "./chunk-4RFFPIT2.js";
import "./chunk-KSQTM6XI.js";
import "./chunk-BVNZ3ETW.js";
import "./chunk-FJQ7HIY7.js";
import "./chunk-T4XWQYGC.js";
import "./chunk-TCASQSKO.js";
import "./chunk-5HAVROZG.js";
import "./chunk-MOPR7RFH.js";
import "./chunk-KW3ZNPTA.js";
import "./chunk-TJB4CGOM.js";
import {
  l
} from "./chunk-XN5VV437.js";
import "./chunk-WBSPL6CJ.js";
import "./chunk-N5ULYWRU.js";
import "./chunk-3GSONYPC.js";
import {
  S2 as S
} from "./chunk-SFV6XLDZ.js";
import "./chunk-3PLRSFLA.js";
import "./chunk-VBD33VNW.js";
import "./chunk-7A5C2EQ3.js";
import {
  y3 as y
} from "./chunk-OYBXMT5R.js";
import {
  a2 as a
} from "./chunk-CIDWM2UN.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";
import "./chunk-SHJI4PR4.js";
import "./chunk-2YSHZRCT.js";
import {
  d
} from "./chunk-HNHXEGH2.js";
import "./chunk-DWOEYHKS.js";
import {
  s2 as s
} from "./chunk-W2N7YT6I.js";
import "./chunk-I5JT24BO.js";
import "./chunk-I4U7MQNO.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/views/2d/layers/WMTSLayerView2D.js
var d3 = [102113, 102100, 3857, 3785, 900913];
var _ = [0, 0];
var w = class extends a2(t(f(d2))) {
  constructor() {
    super(...arguments), this._tileStrategy = null, this._fetchQueue = null, this._tileRequests = /* @__PURE__ */ new Map(), this.layer = null;
  }
  get tileMatrixSet() {
    const e3 = this._getTileMatrixSetBySpatialReference(this.layer.activeLayer);
    return e3 ? (e3.id !== this.layer.activeLayer.tileMatrixSetId && (this.layer.activeLayer.tileMatrixSetId = e3.id), e3) : null;
  }
  update(e3) {
    this._fetchQueue.pause(), this._fetchQueue.state = e3.state, this._tileStrategy.update(e3), this._fetchQueue.resume();
  }
  attach() {
    var _a;
    const e3 = (_a = this.tileMatrixSet) == null ? void 0 : _a.tileInfo;
    e3 && (this._tileInfoView = new h(e3), this._fetchQueue = new y2({ tileInfoView: this._tileInfoView, concurrency: 16, process: (e4, t2) => this.fetchTile(e4, t2) }), this._tileStrategy = new r({ cachePolicy: "keep", resampling: true, acquireTile: (e4) => this.acquireTile(e4), releaseTile: (e4) => this.releaseTile(e4), tileInfoView: this._tileInfoView }), this.addAttachHandles(l(() => {
      var _a2, _b;
      return [(_b = (_a2 = this.layer) == null ? void 0 : _a2.activeLayer) == null ? void 0 : _b.styleId, this.tileMatrixSet];
    }, () => this._refresh())), super.attach());
  }
  detach() {
    var _a, _b;
    super.detach(), (_a = this._tileStrategy) == null ? void 0 : _a.destroy(), (_b = this._fetchQueue) == null ? void 0 : _b.destroy(), this._fetchQueue = this._tileStrategy = this._tileInfoView = null;
  }
  moveStart() {
    this.requestUpdate();
  }
  viewChange() {
    this.requestUpdate();
  }
  moveEnd() {
    this.requestUpdate();
  }
  releaseTile(e3) {
    this._fetchQueue.abort(e3.key.id), this._bitmapView.removeChild(e3), e3.once("detach", () => e3.destroy()), this.requestUpdate();
  }
  acquireTile(e3) {
    const t2 = this._bitmapView.createTile(e3), i = t2.bitmap;
    return [i.x, i.y] = this._tileInfoView.getTileCoords(_, t2.key), i.resolution = this._tileInfoView.getTileResolution(t2.key), [i.width, i.height] = this._tileInfoView.tileInfo.size, this._enqueueTileFetch(t2), this._bitmapView.addChild(t2), this.requestUpdate(), t2;
  }
  async doRefresh() {
    !this.attached || this.updateRequested || this.suspended || this._refresh();
  }
  isUpdating() {
    var _a;
    return ((_a = this._fetchQueue) == null ? void 0 : _a.updating) ?? false;
  }
  async fetchTile(e3, t2 = {}) {
    const s2 = "tilemapCache" in this.layer ? this.layer.tilemapCache : null, { signal: r2, resamplingLevel: a3 = 0 } = t2;
    if (!s2)
      return this._fetchImage(e3, r2);
    const l2 = new e2(0, 0, 0, 0);
    let o;
    try {
      await s2.fetchAvailabilityUpsample(e3.level, e3.row, e3.col, l2, { signal: r2 }), o = await this._fetchImage(l2, r2);
    } catch (h2) {
      if (d(h2))
        throw h2;
      if (a3 < 3) {
        const i = this._tileInfoView.getTileParentId(e3.id);
        if (i) {
          const s3 = new e2(i), r3 = await this.fetchTile(s3, { ...t2, resamplingLevel: a3 + 1 });
          return n(this._tileInfoView, r3, s3, e3);
        }
      }
      throw h2;
    }
    return n(this._tileInfoView, o, l2, e3);
  }
  canResume() {
    const e3 = super.canResume();
    return e3 ? null !== this.tileMatrixSet : e3;
  }
  supportsSpatialReference(e3) {
    var _a;
    return ((_a = this.layer.activeLayer.tileMatrixSets) == null ? void 0 : _a.some((t2) => {
      var _a2;
      return S((_a2 = t2.tileInfo) == null ? void 0 : _a2.spatialReference, e3);
    })) ?? false;
  }
  async _enqueueTileFetch(e3) {
    if (!this._fetchQueue.has(e3.key.id)) {
      try {
        const t2 = await this._fetchQueue.push(e3.key);
        e3.bitmap.source = t2, e3.bitmap.width = this._tileInfoView.tileInfo.size[0], e3.bitmap.height = this._tileInfoView.tileInfo.size[1], e3.once("attach", () => this.requestUpdate());
      } catch (s2) {
        d(s2) || s.getLogger(this).error(s2);
      }
      this.requestUpdate();
    }
  }
  async _fetchImage(e3, t2) {
    return this.layer.fetchImageBitmapTile(e3.level, e3.row, e3.col, { signal: t2 });
  }
  _refresh() {
    this._fetchQueue.reset(), this._tileStrategy.refresh((e3) => {
      if (!e3.bitmap.source)
        return;
      const t2 = { id: e3.key.id, fulfilled: false, promise: this._fetchQueue.push(e3.key).then((t3) => {
        e3.bitmap.source = t3;
      }).catch((t3) => {
        d(t3) || (e3.bitmap.source = null);
      }).finally(() => {
        e3.requestRender(), t2.fulfilled = true;
      }) };
      this._tileRequests.set(e3, t2);
    });
  }
  _getTileMatrixSetBySpatialReference(e3) {
    const t2 = this.view.spatialReference;
    if (!e3.tileMatrixSets)
      return null;
    let i = e3.tileMatrixSets.find((e4) => {
      var _a;
      return S((_a = e4.tileInfo) == null ? void 0 : _a.spatialReference, t2);
    });
    return !i && t2.isWebMercator && (i = e3.tileMatrixSets.find((e4) => {
      var _a;
      return d3.includes(((_a = e4.tileInfo) == null ? void 0 : _a.spatialReference.wkid) ?? -1);
    })), i;
  }
};
e([y()], w.prototype, "_fetchQueue", void 0), e([y({ readOnly: true })], w.prototype, "tileMatrixSet", null), w = e([a("esri.views.2d.layers.WMTSLayerView2D")], w);
var g = w;
export {
  g as default
};
//# sourceMappingURL=WMTSLayerView2D-EL2U7PFT.js.map
