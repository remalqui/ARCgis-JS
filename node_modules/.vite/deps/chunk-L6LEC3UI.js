import {
  i as i2
} from "./chunk-QXPTMFGZ.js";
import {
  r
} from "./chunk-BRDC7DKL.js";
import {
  m,
  t4 as t,
  x,
  y2 as y,
  y3 as y2
} from "./chunk-OYBXMT5R.js";
import {
  a2 as a
} from "./chunk-CIDWM2UN.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";
import {
  i
} from "./chunk-HNHXEGH2.js";
import {
  s2 as s
} from "./chunk-W2N7YT6I.js";
import {
  has
} from "./chunk-I4U7MQNO.js";

// node_modules/@arcgis/core/views/3d/support/PropertiesPool.js
var o = class {
  constructor(r2, o3) {
    this._owner = o3, this._properties = {}, this._afterDispatchHandle = null;
    for (const t3 in r2) {
      const o4 = r2[t3], s4 = new t(o4, void 0, void 0, 2, 2);
      this._properties[t3] = { pool: s4, acquired: [] };
    }
    this._afterDispatchHandle = y(() => this._release());
  }
  destroy() {
    this._afterDispatchHandle && (this._afterDispatchHandle.remove(), this._afterDispatchHandle = null);
    for (const e4 in this._properties) {
      const t3 = this._properties[e4];
      for (const e5 of t3.acquired)
        x(e5) || t3.pool.release(e5);
      t3.pool.destroy(), t3.pool = null, t3.acquired = null;
    }
    this._properties = null, this._owner = null;
  }
  get(e4) {
    const t3 = this._owner._get(e4), r2 = this._properties[e4];
    let o3 = r2.pool.acquire();
    for (r2.acquired.push(o3); o3 === t3; )
      r2.acquired.push(o3), o3 = r2.pool.acquire();
    return o3;
  }
  _release() {
    for (const e4 in this._properties) {
      const t3 = this._properties[e4];
      let o3 = 0;
      for (const e5 of t3.acquired)
        x(e5) ? t3.acquired[o3++] = e5 : t3.pool.release(e5);
      t3.acquired.length = o3;
    }
  }
};

// node_modules/@arcgis/core/views/input/keys.js
var e2 = has("mac") ? "Meta" : "Ctrl";
var t2 = { 8: "Backspace", 9: "Tab", 13: "Enter", 27: "Escape", 33: "PageUp", 34: "PageDown", 35: "End", 36: "Home", 37: "ArrowLeft", 38: "ArrowUp", 39: "ArrowRight", 40: "ArrowDown", 45: "Insert", 46: "Delete" };
for (let n2 = 48; n2 < 58; n2++)
  t2[n2] = String.fromCharCode(n2);
for (let n2 = 1; n2 < 25; n2++)
  t2[111 + n2] = `F${n2}`;
for (let n2 = 65; n2 < 91; n2++)
  t2[n2] = [String.fromCharCode(n2 + 32), String.fromCharCode(n2)];
function o2(e4) {
  if (void 0 !== e4.key)
    return i(e4);
  const o3 = t2[e4.keyCode];
  return Array.isArray(o3) ? e4.shiftKey ? o3[1] : o3[0] : o3;
}
function a2(r2) {
  switch (r2) {
    case "Ctrl":
    case "Alt":
    case "Shift":
    case "Meta":
    case "Primary":
      return true;
  }
  return false;
}

// node_modules/@arcgis/core/views/input/EventMatch.js
var e3 = class {
  constructor(e4, t3 = []) {
    this.eventType = e4, this.keyModifiers = t3;
  }
  matches(e4) {
    if (e4.type !== this.eventType)
      return false;
    if (0 === this.keyModifiers.length)
      return true;
    const t3 = e4.modifiers;
    for (const i5 of this.keyModifiers)
      if (!t3.has(i5))
        return false;
    return true;
  }
};

// node_modules/@arcgis/core/views/input/InputHandler.js
var n = s.getLogger("esri.views.input.InputHandler");
var i3 = class {
  constructor(e4) {
    this._manager = null, this._incoming = {}, this._outgoing = {}, this._incomingEventMatches = null, this._incomingEventTypes = null, this._outgoingEventTypes = null, this._hasSideEffects = e4;
  }
  get incomingEventMatches() {
    if (!this._incomingEventMatches) {
      this._incomingEventMatches = [];
      for (const e4 in this._incoming) {
        const t3 = this._incoming[e4];
        for (const e5 of t3)
          this._incomingEventMatches.push(e5.match);
      }
    }
    return this._incomingEventMatches;
  }
  get incomingEventTypes() {
    return this._incomingEventTypes || (this._incomingEventTypes = this.incomingEventMatches.map((e4) => e4.eventType)), this._incomingEventTypes;
  }
  get outgoingEventTypes() {
    return this._outgoingEventTypes || (this._outgoingEventTypes = Object.keys(this._outgoing)), this._outgoingEventTypes;
  }
  get hasSideEffects() {
    return this._hasSideEffects;
  }
  get hasPendingInputs() {
    return false;
  }
  onInstall(e4) {
    this._manager ? n.error("This InputHandler has already been registered with an InputManager") : (e4.setEventCallback((e5) => this._handleEvent(e5)), e4.setUninstallCallback(() => this._onUninstall()), this._manager = e4);
  }
  onUninstall() {
  }
  registerIncoming(e4, n2, i5) {
    let a4;
    "function" == typeof n2 ? (i5 = n2, a4 = []) : a4 = n2 || [];
    const o3 = "string" == typeof e4 ? new e3(e4, a4) : e4, h = () => {
      this._incomingEventTypes = null, this._incomingEventMatches = null;
    }, r2 = (e5) => {
      const t3 = this._incoming[e5.match.eventType];
      if (t3) {
        const n3 = t3.indexOf(e5);
        t3.splice(n3, 1), h(), this._manager && this._manager.updateDependencies();
      }
    }, g2 = new s2(o3, i5, { onPause: r2, onRemove: r2, onResume: (e5) => {
      const t3 = this._incoming[e5.match.eventType];
      t3 && !t3.includes(e5) && (t3.push(e5), h(), this._manager && this._manager.updateDependencies());
    } });
    let c2 = this._incoming[o3.eventType];
    return c2 || (c2 = [], this._incoming[o3.eventType] = c2), c2.push(g2), h(), this._manager && this._manager.updateDependencies(), g2;
  }
  registerOutgoing(e4) {
    if (this._outgoing[e4])
      throw new Error("There is already a callback registered for this outgoing InputEvent: " + e4);
    const t3 = new a3(e4, { onEmit: (e5, t4, n2, i5) => {
      var _a;
      (_a = this._manager) == null ? void 0 : _a.emit(e5.eventType, t4, n2, i5);
    }, onRemove: (e5) => {
      var _a;
      delete this._outgoing[e5.eventType], (_a = this._manager) == null ? void 0 : _a.updateDependencies();
    } });
    return this._outgoing[e4] = t3, this._outgoingEventTypes = null, this._manager && this._manager.updateDependencies(), t3;
  }
  startCapturingPointer(e4) {
    var _a;
    (_a = this._manager) == null ? void 0 : _a.setPointerCapture(e4, true);
  }
  stopCapturingPointer(e4) {
    var _a;
    (_a = this._manager) == null ? void 0 : _a.setPointerCapture(e4, false);
  }
  refreshHasPendingInputs() {
    var _a;
    (_a = this._manager) == null ? void 0 : _a.refreshHasPendingInputs();
  }
  _onUninstall() {
    this._manager ? (this.onUninstall(), this._manager = null) : n.error("This InputHandler is not registered with an InputManager");
  }
  _handleEvent(e4) {
    var _a;
    const t3 = this._incoming[e4.type];
    if (t3) {
      for (const n2 of t3)
        if (n2.match.matches(e4) && ((_a = n2.callback) == null ? void 0 : _a.call(n2, e4), e4.shouldStopPropagation()))
          break;
    }
  }
};
var s2 = class {
  constructor(e4, t3, n2) {
    this.match = e4, this._callback = t3, this._handler = n2;
  }
  pause() {
    this._handler.onPause(this);
  }
  resume() {
    this._handler.onResume(this);
  }
  remove() {
    this._handler.onRemove(this);
  }
  get callback() {
    return this._callback;
  }
};
var a3 = class {
  constructor(e4, t3) {
    this.eventType = e4, this._removed = false, this._handler = t3;
  }
  emit(e4, t3, n2) {
    this._removed || this._handler.onEmit(this, e4, t3, n2);
  }
  remove() {
    this._removed = true, this._handler.onRemove(this);
  }
};

// node_modules/@arcgis/core/views/input/handlers/LatestPointer.js
var s3 = class extends i3 {
  constructor(t3) {
    super(true), this._onChange = t3, this._value = "mouse", this._x = null, this._y = null, this.registerIncoming("pointer-move", (t4) => {
      this._update(t4.data);
    });
  }
  _update(t3) {
    const s4 = "touch" === t3.native.pointerType ? "touch" : "mouse", { x: e4, y: i5 } = t3;
    s4 === this._value && this._x === e4 && this._y === i5 || (this._value = s4, this._x = e4, this._y = i5, this._onChange(s4, e4, i5));
  }
};

// node_modules/@arcgis/core/views/input/handlers/MultiTouch.js
var i4 = class extends i3 {
  get multiTouchActive() {
    return this._multiTouchActive.value;
  }
  constructor() {
    super(true), this._activeTouchPointerIds = /* @__PURE__ */ new Set(), this._multiTouchActive = r(false), this._onPointerAdd = ({ data: t3 }) => {
      "touch" === t3.pointerType && (this._activeTouchPointerIds.add(t3.native.pointerId), this._update());
    }, this._onPointerRemove = ({ data: t3 }) => {
      "touch" === t3.pointerType && (this._activeTouchPointerIds.delete(t3.native.pointerId), this._update());
    }, this.registerIncoming("pointer-down", this._onPointerAdd), this.registerIncoming("pointer-up", this._onPointerRemove), this.registerIncoming("pointer-capture-lost", this._onPointerRemove), this.registerIncoming("pointer-cancel", this._onPointerRemove);
  }
  _update() {
    this._multiTouchActive.value = this._activeTouchPointerIds.size > 1;
  }
};

// node_modules/@arcgis/core/views/input/InputManager.js
var d = class extends m {
  constructor(e4) {
    super(e4), this._pointerCaptures = /* @__PURE__ */ new Map(), this._nameToGroup = {}, this._handlers = [], this._handlersPriority = [], this._currentPropagation = null, this._updateDependenciesAfterPropagation = false, this._sourceEvents = /* @__PURE__ */ new Set(), this._keyModifiers = /* @__PURE__ */ new Set(), this._activeKeyModifiers = /* @__PURE__ */ new Set(), this._stoppedPropagationEventIds = /* @__PURE__ */ new Set(), this.primaryKey = e2, this._latestPointerType = "mouse", this._propertiesPool = new o({ latestPointerLocation: P }, this), this.latestPointerLocation = null, this._paused = false, this.test = { timestamp: void 0, hasCurrentPropagation: () => !!this._currentPropagation };
  }
  initialize() {
    this.eventSource.onEventReceived = this._onEventReceived.bind(this), this._installRecognizers();
  }
  destroy() {
    const e4 = Object.keys(this._nameToGroup);
    for (const t3 of e4)
      this.uninstallHandlers(t3);
    this.eventSource.destroy(), this._currentPropagation = null, this._propertiesPool.destroy();
  }
  get hasPendingInputs() {
    return this._handlers.some((e4) => e4.handler.hasPendingInputs);
  }
  get latestPointerType() {
    return this._latestPointerType;
  }
  get multiTouchActive() {
    return this._multiTouchHandler.multiTouchActive;
  }
  get updating() {
    return this.hasPendingInputs || this._paused;
  }
  installHandlers(e4, t3, i5 = _.INTERNAL) {
    if (this._nameToGroup[e4])
      return void s.getLogger(this).error("There is already an InputHandler group registered under the name `" + e4 + "`");
    if (0 === t3.length)
      return void s.getLogger(this).error("Can't register a group of zero handlers");
    const n2 = { name: e4, handlers: t3.map((e5) => ({ handler: e5, active: true, removed: false, priorityIndex: 0, groupPriority: i5, eventCallback: null, uninstallCallback: null })) };
    this._nameToGroup[e4] = n2;
    for (let r2 = n2.handlers.length - 1; r2 >= 0; r2--) {
      const e5 = n2.handlers[r2];
      this._handlers.push(e5), e5.handler.onInstall({ updateDependencies: () => {
        this.updateDependencies();
      }, emit: (t4, r3, i6, n3, s4) => {
        this._emitInputEvent(e5.priorityIndex + 1, t4, r3, i6, s4, n3);
      }, setPointerCapture: (t4, r3) => {
        this._setPointerCapture(n2, e5, t4, r3);
      }, setEventCallback: (t4) => {
        e5.eventCallback = t4;
      }, setUninstallCallback: (t4) => {
        e5.uninstallCallback = t4;
      }, refreshHasPendingInputs: () => {
        this.notifyChange("hasPendingInputs");
      } });
    }
    this.updateDependencies();
  }
  uninstallHandlers(e4) {
    const t3 = this._nameToGroup[e4];
    t3 ? (t3.handlers.forEach((e5) => {
      var _a;
      e5.removed = true, (_a = e5.uninstallCallback) == null ? void 0 : _a.call(e5);
    }), delete this._nameToGroup[e4], this._currentPropagation ? this._currentPropagation.needsHandlerGarbageCollect = true : this._garbageCollectRemovedHandlers()) : s.getLogger(this).error("There is no InputHandler group registered under the name `" + e4 + "`");
  }
  hasHandlers(e4) {
    return void 0 !== this._nameToGroup[e4];
  }
  updateDependencies() {
    if (this._currentPropagation)
      return void (this._updateDependenciesAfterPropagation = true);
    this._updateDependenciesAfterPropagation = false;
    const e4 = /* @__PURE__ */ new Set(), t3 = /* @__PURE__ */ new Set();
    this._handlersPriority = [];
    for (let r2 = this._handlers.length - 1; r2 >= 0; r2--) {
      const e5 = this._handlers[r2];
      e5.priorityIndex = r2, this._handlersPriority.push(e5);
    }
    this._handlersPriority = this._sortHandlersPriority(this._handlersPriority);
    for (let r2 = this._handlersPriority.length - 1; r2 >= 0; r2--) {
      const i5 = this._handlersPriority[r2];
      i5.priorityIndex = r2;
      let n2 = i5.handler.hasSideEffects;
      if (!n2) {
        for (const t4 of i5.handler.outgoingEventTypes)
          if (e4.has(t4)) {
            n2 = true;
            break;
          }
      }
      if (n2)
        for (const r3 of i5.handler.incomingEventMatches) {
          e4.add(r3.eventType);
          for (const e5 of r3.keyModifiers)
            a2(e5) || t3.add(e5);
        }
      i5.active = n2;
    }
    this._sourceEvents = e4, this._keyModifiers = t3, this._pointerCaptures.size > 0 && this._sourceEvents.add("pointer-capture-lost"), this._keyModifiers.size > 0 && (this._sourceEvents.add("key-down"), this._sourceEvents.add("key-up")), this.eventSource && (this.eventSource.activeEvents = this._sourceEvents);
  }
  _setLatestPointer(e4, t3, r2) {
    this._latestPointerType = e4;
    const i5 = this._get("latestPointerLocation");
    if (null == i5 || i5.x !== t3 || i5.y !== r2) {
      const e5 = this._propertiesPool.get("latestPointerLocation");
      e5.x = t3, e5.y = r2, this._set("latestPointerLocation", e5);
    }
  }
  _onEventReceived(e4, t3) {
    if ("pointer-capture-lost" === e4) {
      const e5 = t3;
      this._pointerCaptures.delete(e5.native.pointerId);
    }
    this._updateKeyModifiers(e4, t3);
    const r2 = null != this.test.timestamp ? this.test.timestamp : t3.native ? t3.native.timestamp : void 0, i5 = t3.native ? t3.native.cancelable : void 0;
    this._emitInputEventFromSource(e4, t3, r2, i5);
  }
  _updateKeyModifiers(e4, t3) {
    if (!t3)
      return;
    let r2 = false;
    const i5 = () => {
      if (!r2) {
        const e5 = /* @__PURE__ */ new Set();
        this._activeKeyModifiers.forEach((t4) => {
          e5.add(t4);
        }), this._activeKeyModifiers = e5, r2 = true;
      }
    }, n2 = (e5, t4) => {
      t4 && !this._activeKeyModifiers.has(e5) ? (i5(), this._activeKeyModifiers.add(e5)) : !t4 && this._activeKeyModifiers.has(e5) && (i5(), this._activeKeyModifiers.delete(e5));
    };
    if ("key-down" === e4 || "key-up" === e4) {
      const r3 = t3.key;
      this._keyModifiers.has(r3) && n2(r3, "key-down" === e4);
    }
    const s4 = t3.native;
    n2("Alt", !(!s4 || !s4.altKey)), n2("Ctrl", !(!s4 || !s4.ctrlKey)), n2("Shift", !(!s4 || !s4.shiftKey)), n2("Meta", !(!s4 || !s4.metaKey)), n2("Primary", this._activeKeyModifiers.has(this.primaryKey));
  }
  _installRecognizers() {
    this._latestPointerHandler = new s3((e4, t3, r2) => this._setLatestPointer(e4, t3, r2)), this._multiTouchHandler = new i4(), this.installHandlers("input-manager-logic", [this._latestPointerHandler, this._multiTouchHandler], _.ALWAYS), this.recognizers.length > 0 && this.installHandlers("default", this.recognizers, _.INTERNAL);
  }
  _setPointerCapture(e4, t3, r2, i5) {
    const n2 = e4.name + "-" + t3.priorityIndex, s4 = this._pointerCaptures.get(r2.pointerId) || /* @__PURE__ */ new Set();
    this._pointerCaptures.set(r2.pointerId, s4), i5 ? (s4.add(n2), 1 === s4.size && this.eventSource && this.eventSource.setPointerCapture(r2, true)) : s4.has(n2) && (s4.delete(n2), 0 === s4.size && (this._pointerCaptures.delete(r2.pointerId), this.eventSource && this.eventSource.setPointerCapture(r2, false)));
  }
  _garbageCollectRemovedHandlers() {
    this._handlers = this._handlers.filter((e4) => !e4.removed), this.updateDependencies();
  }
  _emitInputEventFromSource(e4, t3, r2, i5) {
    this._emitInputEvent(0, e4, t3, r2, i5);
  }
  _emitInputEvent(e4, t3, r2, i5, n2, s4) {
    const o3 = void 0 !== i5 ? i5 : this._currentPropagation ? this._currentPropagation.timestamp : performance.now(), a4 = void 0 !== n2 && n2, p = { event: new u(t3, r2, o3, s4 || this._activeKeyModifiers, a4), priorityIndex: e4 };
    this._currentPropagation ? this._currentPropagation.events.push(p) : this._doNewPropagation(p);
  }
  _doNewPropagation(e4) {
    this._currentPropagation = { events: new i2(), currentHandler: null, needsHandlerGarbageCollect: false, timestamp: e4.event.timestamp }, this._currentPropagation.events.push(e4), this._continuePropagation();
  }
  _continuePropagation() {
    var _a, _b;
    this._paused = false;
    const e4 = this._currentPropagation;
    if (e4) {
      for (; e4.events.length > 0; ) {
        const { event: t3, priorityIndex: r2 } = e4.events.pop(), i5 = t3.data && t3.data.eventId;
        if (!(null != i5 && this._stoppedPropagationEventIds.has(i5)))
          for (e4.currentHandler = this._handlersPriority[r2]; e4.currentHandler; ) {
            if (e4.currentHandler.removed)
              e4.needsHandlerGarbageCollect = true;
            else {
              if (e4.currentHandler.active && !t3.shouldStopPropagation() && ((_b = (_a = e4.currentHandler).eventCallback) == null ? void 0 : _b.call(_a, t3)), t3.shouldStopPropagation()) {
                null != i5 && this._stoppedPropagationEventIds.add(i5);
                break;
              }
              if (t3.shouldPausePropagation(() => this._continuePropagation()))
                return void this._pausePropagation({ event: t3, priorityIndex: e4.currentHandler.priorityIndex + 1 });
            }
            e4.currentHandler = this._handlersPriority[e4.currentHandler.priorityIndex + 1];
          }
      }
      e4.needsHandlerGarbageCollect && this._garbageCollectRemovedHandlers(), this.hasPendingInputs || this._stoppedPropagationEventIds.clear(), this._currentPropagation = null, this._updateDependenciesAfterPropagation && this.updateDependencies();
    }
  }
  _pausePropagation(e4) {
    const t3 = new i2();
    t3.push(e4);
    const r2 = this._currentPropagation;
    if (r2) {
      for (; r2.events.length; )
        t3.push(r2.events.pop());
      r2.events = t3, r2.currentHandler = null, this._paused = true;
    }
  }
  _compareHandlerPriority(e4, t3) {
    if (e4.handler.hasSideEffects !== t3.handler.hasSideEffects)
      return e4.handler.hasSideEffects ? 1 : -1;
    if (e4.groupPriority !== t3.groupPriority)
      return e4.groupPriority > t3.groupPriority ? -1 : 1;
    for (const r2 of e4.handler.incomingEventMatches)
      for (const e5 of t3.handler.incomingEventMatches) {
        if (r2.eventType !== e5.eventType)
          continue;
        const t4 = r2.keyModifiers.filter((t5) => e5.keyModifiers.includes(t5));
        if (t4.length === r2.keyModifiers.length !== (t4.length === e5.keyModifiers.length))
          return r2.keyModifiers.length > e5.keyModifiers.length ? -1 : 1;
      }
    return e4.priorityIndex > t3.priorityIndex ? -1 : 1;
  }
  _sortHandlersPriority(e4) {
    const t3 = [];
    for (const r2 of e4) {
      let e5 = 0;
      for (; e5 < t3.length && this._compareHandlerPriority(r2, t3[e5]) >= 0; )
        e5++;
      t3.splice(e5, 0, r2);
    }
    return t3;
  }
  get debug() {
    const e4 = (e5) => {
      const t3 = this._setPointerCapture;
      this._setPointerCapture = () => {
      }, e5(), this._setPointerCapture = t3;
    };
    return { injectEvent: (t3, r2) => {
      e4(() => {
        this._onEventReceived(t3, r2);
      });
    }, disablePointerCapture: e4 };
  }
};
e([y2({ readOnly: true })], d.prototype, "hasPendingInputs", null), e([y2({ constructOnly: true })], d.prototype, "eventSource", void 0), e([y2({ constructOnly: true })], d.prototype, "recognizers", void 0), e([y2()], d.prototype, "_latestPointerType", void 0), e([y2()], d.prototype, "latestPointerType", null), e([y2()], d.prototype, "multiTouchActive", null), e([y2({ readOnly: true })], d.prototype, "latestPointerLocation", void 0), e([y2()], d.prototype, "_paused", void 0), e([y2({ readOnly: true })], d.prototype, "updating", null), d = e([a("esri.views.input.InputManager")], d);
var u = class {
  constructor(e4, t3, r2, i5, n2) {
    this.type = e4, this.data = t3, this.timestamp = r2, this.modifiers = i5, this.cancelable = n2, this._propagationState = c.NONE, this._resumeCallback = null;
  }
  stopPropagation() {
    this._propagationState |= c.STOPPED;
  }
  shouldStopPropagation() {
    return 0 != (this._propagationState & c.STOPPED);
  }
  async(e4) {
    this._propagationState |= c.PAUSED;
    const t3 = (e5, t4) => {
      this._propagationState &= ~c.PAUSED;
      const r2 = this._resumeCallback;
      if (this._resumeCallback = null, r2 && r2(), t4)
        throw e5;
      return e5;
    };
    return ("function" == typeof e4 ? e4() : e4).then((e5) => t3(e5, false), (e5) => t3(e5, true));
  }
  shouldPausePropagation(e4) {
    return !!(this._propagationState & c.PAUSED) && (this._resumeCallback = e4, true);
  }
  preventDefault() {
    this.data.native.preventDefault();
  }
};
var c;
!function(e4) {
  e4[e4.NONE = 0] = "NONE", e4[e4.STOPPED = 1] = "STOPPED", e4[e4.PAUSED = 2] = "PAUSED";
}(c || (c = {}));
var _ = { ALWAYS: 1, DEFAULT: 0, TOOL: -1, WIDGET: -2, INTERNAL: -3 };
var g = class {
};
var P = g;

export {
  o2 as o,
  i3 as i,
  d,
  _
};
//# sourceMappingURL=chunk-L6LEC3UI.js.map
