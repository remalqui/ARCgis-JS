import {
  o
} from "./chunk-V66LHQVK.js";
import {
  s as s3
} from "./chunk-VD2BLFWE.js";
import {
  O
} from "./chunk-BN6X2OXK.js";
import {
  s2 as s,
  s3 as s2
} from "./chunk-W2N7YT6I.js";

// node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderTechnique/BindType.js
var a;
!function(a5) {
  a5[a5.Pass = 0] = "Pass", a5[a5.Draw = 1] = "Draw";
}(a || (a = {}));

// node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderModules/Uniform.js
var i = class {
  constructor(i3, s6, t, r, a5 = null) {
    this.name = i3, this.type = s6, this.arraySize = a5, this.bind = { [a.Pass]: null, [a.Draw]: null }, null != t && null != r && (this.bind[t] = r);
  }
  equals(e2) {
    return this.type === e2.type && this.name === e2.name && this.arraySize === e2.arraySize;
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderModules/Texture2DPassUniform.js
var s4 = class extends i {
  constructor(r, s6) {
    super(r, "sampler2D", a.Pass, (e2, o5, t) => e2.bindTexture(r, s6(o5, t)));
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderModules/Float2PassUniform.js
var e = class extends i {
  constructor(r, e2) {
    super(r, "vec2", a.Pass, (s6, o5, t) => s6.setUniform2fv(r, e2(o5, t)));
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js
var o2 = class extends i {
  constructor(r, o5) {
    super(r, "float", a.Pass, (s6, e2, t) => s6.setUniform1f(r, o5(e2, t)));
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/ScreenSpacePass.glsl.js
function o3(o5, t = true) {
  o5.attributes.add(O.POSITION, "vec2"), t && o5.varyings.add("uv", "vec2"), o5.vertex.code.add(o`
    void main(void) {
      gl_Position = vec4(position, 0.0, 1.0);
      ${t ? o`uv = position * 0.5 + vec2(0.5);` : ""}
    }
  `);
}

// node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/util/RgbaFloatEncoding.glsl.js
function a2(a5) {
  a5.code.add(o`const float MAX_RGBA_FLOAT =
255.0 / 256.0 +
255.0 / 256.0 / 256.0 +
255.0 / 256.0 / 256.0 / 256.0 +
255.0 / 256.0 / 256.0 / 256.0 / 256.0;
const vec4 FIXED_POINT_FACTORS = vec4(1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0);
vec4 float2rgba(const float value) {
float valueInValidDomain = clamp(value, 0.0, MAX_RGBA_FLOAT);
vec4 fixedPointU8 = floor(fract(valueInValidDomain * FIXED_POINT_FACTORS) * 256.0);
const float toU8AsFloat = 1.0 / 255.0;
return fixedPointU8 * toU8AsFloat;
}
const vec4 RGBA_2_FLOAT_FACTORS = vec4(
255.0 / (256.0),
255.0 / (256.0 * 256.0),
255.0 / (256.0 * 256.0 * 256.0),
255.0 / (256.0 * 256.0 * 256.0 * 256.0)
);
float rgba2float(vec4 rgba) {
return dot(rgba, RGBA_2_FLOAT_FACTORS);
}`);
}

// node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/output/ReadLinearDepth.glsl.js
function a3(a5) {
  a5.include(a2), a5.code.add(o`float linearDepthFromFloat(float depth, vec2 nearFar) {
return -(depth * (nearFar[1] - nearFar[0]) + nearFar[0]);
}
float linearDepthFromTexture(sampler2D depthTex, vec2 uv, vec2 nearFar) {
return linearDepthFromFloat(rgba2float(texture(depthTex, uv)), nearFar);
}`);
}

// node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js
var n = s.getLogger("esri.views.3d.webgl-engine.core.shaderModules.shaderBuilder");
var s5 = class {
  constructor() {
    this._includedModules = /* @__PURE__ */ new Map();
  }
  include(e2, t) {
    if (this._includedModules.has(e2)) {
      const r = this._includedModules.get(e2);
      if (r !== t) {
        n.error("Trying to include shader module multiple times with different sets of options.");
        const t2 = /* @__PURE__ */ new Set();
        for (const n2 of Object.keys(r))
          r[n2] !== e2[n2] && t2.add(n2);
        for (const n2 of Object.keys(e2))
          r[n2] !== e2[n2] && t2.add(n2);
        t2.forEach((t3) => console.error(`  ${t3}: current ${r[t3]} new ${e2[t3]}`));
      }
    } else
      this._includedModules.set(e2, t), e2(this.builder, t);
  }
};
var i2 = class extends s5 {
  constructor() {
    super(...arguments), this.vertex = new c(), this.fragment = new c(), this.attributes = new u(), this.varyings = new l(), this.extensions = new m(), this.constants = new h();
  }
  get fragmentUniforms() {
    return this.fragment.uniforms.entries;
  }
  get builder() {
    return this;
  }
  generate(e2) {
    const t = this.extensions.generateSource(e2), r = this.attributes.generateSource(e2), n2 = this.varyings.generateSource(e2), s6 = "vertex" === e2 ? this.vertex : this.fragment, i3 = s6.uniforms.generateSource(), o5 = s6.code.generateSource(), a5 = "vertex" === e2 ? _ : d, c2 = this.constants.generateSource().concat(s6.constants.generateSource());
    return `#version 300 es
${t.join("\n")}

${a5}

${c2.join("\n")}

${i3.join("\n")}

${r.join("\n")}

${n2.join("\n")}

${o5.join("\n")}`;
  }
  generateBind(e2, t) {
    const r = /* @__PURE__ */ new Map();
    this.vertex.uniforms.entries.forEach((t2) => {
      const n3 = t2.bind[e2];
      null != n3 && r.set(t2.name, n3);
    }), this.fragment.uniforms.entries.forEach((t2) => {
      const n3 = t2.bind[e2];
      null != n3 && r.set(t2.name, n3);
    });
    const n2 = Array.from(r.values()), s6 = n2.length;
    return (e3, r2, i3) => {
      for (let o5 = 0; o5 < s6; ++o5)
        n2[o5](t, e3, r2, i3);
    };
  }
};
var o4 = class {
  constructor() {
    this._entries = /* @__PURE__ */ new Map();
  }
  add(...e2) {
    for (const t of e2)
      this._add(t);
  }
  get(e2) {
    return this._entries.get(e2);
  }
  _add(t) {
    if (null != t) {
      if (this._entries.has(t.name) && !this._entries.get(t.name).equals(t))
        throw new s2(`Duplicate uniform name ${t.name} for different uniform type`);
      this._entries.set(t.name, t);
    } else
      n.error(`Trying to add null Uniform from ${new Error().stack}.`);
  }
  generateSource() {
    return Array.from(this._entries.values()).map((e2) => null != e2.arraySize ? `uniform ${e2.type} ${e2.name}[${e2.arraySize}];` : `uniform ${e2.type} ${e2.name};`);
  }
  get entries() {
    return Array.from(this._entries.values());
  }
};
var a4 = class {
  constructor() {
    this._entries = new Array();
  }
  add(e2) {
    this._entries.push(e2);
  }
  generateSource() {
    return this._entries;
  }
};
var c = class extends s5 {
  constructor() {
    super(...arguments), this.uniforms = new o4(), this.code = new a4(), this.constants = new h();
  }
  get builder() {
    return this;
  }
};
var u = class {
  constructor() {
    this._entries = new Array();
  }
  add(e2, t) {
    this._entries.push([e2, t]);
  }
  generateSource(e2) {
    return "fragment" === e2 ? [] : this._entries.map((e3) => `in ${e3[1]} ${e3[0]};`);
  }
};
var l = class {
  constructor() {
    this._entries = /* @__PURE__ */ new Map();
  }
  add(e2, t) {
    this._entries.has(e2) && s3(this._entries.get(e2) === t), this._entries.set(e2, t);
  }
  generateSource(e2) {
    const t = new Array();
    return this._entries.forEach((r, n2) => t.push("vertex" === e2 ? `out ${r} ${n2};` : `in ${r} ${n2};`)), t;
  }
};
var m = class _m {
  constructor() {
    this._entries = /* @__PURE__ */ new Set();
  }
  add(e2) {
    this._entries.add(e2);
  }
  generateSource(e2) {
    const t = "vertex" === e2 ? _m.ALLOWLIST_VERTEX : _m.ALLOWLIST_FRAGMENT;
    return Array.from(this._entries).filter((e3) => t.includes(e3)).map((e3) => `#extension ${e3} : enable`);
  }
};
m.ALLOWLIST_FRAGMENT = ["GL_EXT_shader_texture_lod", "GL_OES_standard_derivatives"], m.ALLOWLIST_VERTEX = [];
var h = class _h {
  constructor() {
    this._entries = /* @__PURE__ */ new Set();
  }
  add(e2, t, r) {
    let n2 = "ERROR_CONSTRUCTOR_STRING";
    switch (t) {
      case "float":
        n2 = _h._numberToFloatStr(r);
        break;
      case "int":
        n2 = _h._numberToIntStr(r);
        break;
      case "bool":
        n2 = r.toString();
        break;
      case "vec2":
        n2 = `vec2(${_h._numberToFloatStr(r[0])},                            ${_h._numberToFloatStr(r[1])})`;
        break;
      case "vec3":
        n2 = `vec3(${_h._numberToFloatStr(r[0])},                            ${_h._numberToFloatStr(r[1])},                            ${_h._numberToFloatStr(r[2])})`;
        break;
      case "vec4":
        n2 = `vec4(${_h._numberToFloatStr(r[0])},                            ${_h._numberToFloatStr(r[1])},                            ${_h._numberToFloatStr(r[2])},                            ${_h._numberToFloatStr(r[3])})`;
        break;
      case "ivec2":
        n2 = `ivec2(${_h._numberToIntStr(r[0])},                             ${_h._numberToIntStr(r[1])})`;
        break;
      case "ivec3":
        n2 = `ivec3(${_h._numberToIntStr(r[0])},                             ${_h._numberToIntStr(r[1])},                             ${_h._numberToIntStr(r[2])})`;
        break;
      case "ivec4":
        n2 = `ivec4(${_h._numberToIntStr(r[0])},                             ${_h._numberToIntStr(r[1])},                             ${_h._numberToIntStr(r[2])},                             ${_h._numberToIntStr(r[3])})`;
        break;
      case "mat2":
      case "mat3":
      case "mat4":
        n2 = `${t}(${Array.prototype.map.call(r, (e3) => _h._numberToFloatStr(e3)).join(", ")})`;
    }
    return this._entries.add(`const ${t} ${e2} = ${n2};`), this;
  }
  static _numberToIntStr(e2) {
    return e2.toFixed(0);
  }
  static _numberToFloatStr(e2) {
    return Number.isInteger(e2) ? e2.toFixed(1) : e2.toString();
  }
  generateSource() {
    return Array.from(this._entries);
  }
};
var d = "#ifdef GL_FRAGMENT_PRECISION_HIGH\n  precision highp float;\n  precision highp sampler2D;\n#else\n  precision mediump float;\n  precision mediump sampler2D;\n#endif\n\nout vec4 fragColor;";
var _ = "precision highp float;\nprecision highp sampler2D;";

export {
  a,
  i,
  s4 as s,
  e,
  o2 as o,
  a2,
  o3 as o2,
  a3,
  i2
};
//# sourceMappingURL=chunk-Q6HUS3IU.js.map
