import {
  s
} from "./chunk-KSQTM6XI.js";
import {
  i3 as i
} from "./chunk-CIDWM2UN.js";
import {
  p
} from "./chunk-DWOEYHKS.js";

// node_modules/@arcgis/core/core/Queue.js
var i2 = class {
  constructor(t = (t2) => t2.values().next().value) {
    this._peeker = t, this._observable = new s(), this._items = /* @__PURE__ */ new Set();
  }
  get length() {
    return i(this._observable), this._items.size;
  }
  clear() {
    0 !== this.length && (this._items.clear(), this._observable.notify());
  }
  last() {
    if (0 === this.length)
      return;
    let t;
    for (t of this._items)
      ;
    return t;
  }
  peek() {
    if (0 !== this.length)
      return this._peeker(this._items);
  }
  push(t) {
    this.contains(t) || (this._items.add(t), this._observable.notify());
  }
  contains(t) {
    return i(this._observable), this._items.has(t);
  }
  pop() {
    if (0 === this.length)
      return;
    const e = this.peek();
    return this._items.delete(p(e)), this._observable.notify(), e;
  }
  popLast() {
    if (0 === this.length)
      return;
    const e = this.last();
    return this._items.delete(p(e)), this._observable.notify(), e;
  }
  remove(t) {
    this.contains(t) && (this._items.delete(t), this._observable.notify());
  }
  filter(t) {
    const e = this.length;
    return this._items.forEach((e2) => {
      t(e2) || this._items.delete(e2);
    }), e !== this._items.size && this._observable.notify(), this;
  }
  *[Symbol.iterator]() {
    i(this._observable), yield* this._items;
  }
};

export {
  i2 as i
};
//# sourceMappingURL=chunk-QXPTMFGZ.js.map
