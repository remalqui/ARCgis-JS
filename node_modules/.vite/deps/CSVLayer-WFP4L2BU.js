import {
  Be
} from "./chunk-3SADEOML.js";
import "./chunk-V3KDZQUR.js";
import "./chunk-XSL4XKVS.js";
import "./chunk-PLCQTNGD.js";
import "./chunk-UMKNA5PR.js";
import "./chunk-YM46NRFF.js";
import "./chunk-QRIMDBVP.js";
import "./chunk-DIRCMTXV.js";
import "./chunk-7XRP3RPT.js";
import "./chunk-2YTFL6AC.js";
import "./chunk-CGPOGDO6.js";
import "./chunk-ZCZT2HZV.js";
import "./chunk-62M25QKF.js";
import "./chunk-W52WZL2F.js";
import "./chunk-7MOGRCW6.js";
import "./chunk-3Y3ICAIL.js";
import "./chunk-TNXVIMSN.js";
import "./chunk-XFLBB3FK.js";
import "./chunk-77BBQQ7Y.js";
import "./chunk-FGWFWDIM.js";
import "./chunk-UCGDNB2P.js";
import "./chunk-E4GDJ764.js";
import "./chunk-Z2T56FN3.js";
import "./chunk-ZMKH5ZRU.js";
import "./chunk-P46VVEIN.js";
import "./chunk-X34I34RW.js";
import "./chunk-5NBE4HDI.js";
import "./chunk-4NLQ63FV.js";
import "./chunk-Y7HVH6RU.js";
import "./chunk-2HDAD5Q3.js";
import "./chunk-PPU6QR6F.js";
import "./chunk-PCVJI7J2.js";
import "./chunk-HZHMZHPT.js";
import "./chunk-NU5WEWCI.js";
import "./chunk-UIVGJZCT.js";
import "./chunk-MVR2W3C6.js";
import "./chunk-7MFOV26D.js";
import {
  d
} from "./chunk-RNXN3MSP.js";
import "./chunk-DIXAOEHS.js";
import "./chunk-4NWXO2LT.js";
import "./chunk-6ETVGJDF.js";
import "./chunk-34QQ6GDH.js";
import "./chunk-KTII3LWY.js";
import "./chunk-RL6GG46M.js";
import "./chunk-MLNTHYHD.js";
import "./chunk-I3XMP33U.js";
import "./chunk-JDYLSHC3.js";
import "./chunk-QAWS7Y22.js";
import "./chunk-UX5D32RO.js";
import {
  c
} from "./chunk-P34MS5MD.js";
import "./chunk-FHYNSVC4.js";
import "./chunk-NYLF7BL2.js";
import {
  b
} from "./chunk-YC4PIRSZ.js";
import "./chunk-MSLDEOHR.js";
import "./chunk-32JSK7KN.js";
import "./chunk-YIJWIXDP.js";
import "./chunk-LLQHB2ZB.js";
import "./chunk-EISDT6B4.js";
import "./chunk-LREUW66K.js";
import "./chunk-RR2V4HRU.js";
import "./chunk-WZAASLQW.js";
import "./chunk-SCOBW7KR.js";
import "./chunk-AHAGGZUI.js";
import "./chunk-5WXPQVZD.js";
import {
  f as f3
} from "./chunk-AF36K5Y6.js";
import "./chunk-5K6FTFN4.js";
import "./chunk-CNCZBOLJ.js";
import "./chunk-QXPTMFGZ.js";
import "./chunk-4SARN32Z.js";
import "./chunk-QA4FMJA6.js";
import "./chunk-VFQINJTY.js";
import "./chunk-4J6R7QH6.js";
import "./chunk-HB3KZNZ3.js";
import "./chunk-MUO4EIZP.js";
import "./chunk-42RWGG3D.js";
import "./chunk-G5WJIWPP.js";
import "./chunk-LNMNRMVX.js";
import {
  m,
  p
} from "./chunk-OO4A3EBQ.js";
import "./chunk-ZBWBCN2I.js";
import "./chunk-KTEJJM3A.js";
import "./chunk-SO6DBMQG.js";
import "./chunk-KTSEQWMB.js";
import "./chunk-QXGO5RRL.js";
import "./chunk-EIE3W25Z.js";
import "./chunk-7KM4XBUC.js";
import "./chunk-OZXJDVTE.js";
import "./chunk-CGK6BJQA.js";
import "./chunk-XU2Q4SCK.js";
import "./chunk-KIEN3CY2.js";
import "./chunk-4CZO65BK.js";
import "./chunk-7E3Q7HTF.js";
import "./chunk-FXDEKQIL.js";
import "./chunk-GJ5WE5D3.js";
import "./chunk-KKGH4SRQ.js";
import "./chunk-Y2CLYMXQ.js";
import "./chunk-4RFFPIT2.js";
import "./chunk-UKJF25H6.js";
import "./chunk-KSQTM6XI.js";
import "./chunk-D5MIJ6WT.js";
import "./chunk-7KX64CAH.js";
import {
  _
} from "./chunk-J4R3XNTP.js";
import "./chunk-Y6FRAP2R.js";
import "./chunk-BVNZ3ETW.js";
import "./chunk-FJQ7HIY7.js";
import "./chunk-T4XWQYGC.js";
import "./chunk-4H5JODOT.js";
import "./chunk-TCASQSKO.js";
import "./chunk-5HAVROZG.js";
import "./chunk-MOPR7RFH.js";
import "./chunk-KW3ZNPTA.js";
import "./chunk-TJB4CGOM.js";
import "./chunk-4NOOGA4U.js";
import "./chunk-CWQ6Q3PH.js";
import "./chunk-XN5VV437.js";
import "./chunk-ODFH3BSN.js";
import "./chunk-74O2T7JC.js";
import "./chunk-WBSPL6CJ.js";
import "./chunk-N5ULYWRU.js";
import "./chunk-LQVUN6IS.js";
import "./chunk-JZM5YUHA.js";
import "./chunk-MOIETNWJ.js";
import {
  M
} from "./chunk-3GSONYPC.js";
import {
  f as f2,
  o2 as o
} from "./chunk-SFV6XLDZ.js";
import "./chunk-3PLRSFLA.js";
import "./chunk-VBD33VNW.js";
import "./chunk-7A5C2EQ3.js";
import {
  y3 as y
} from "./chunk-OYBXMT5R.js";
import {
  a2 as a
} from "./chunk-CIDWM2UN.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";
import "./chunk-SHJI4PR4.js";
import "./chunk-2YSHZRCT.js";
import "./chunk-HKVL2MJK.js";
import "./chunk-MH2LNFJK.js";
import {
  L
} from "./chunk-O3CHVGVF.js";
import {
  f,
  k
} from "./chunk-HNHXEGH2.js";
import "./chunk-DWOEYHKS.js";
import {
  s3 as s
} from "./chunk-W2N7YT6I.js";
import "./chunk-I5JT24BO.js";
import {
  has
} from "./chunk-I4U7MQNO.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/layers/graphics/sources/CSVSource.js
var c2 = class extends _ {
  constructor(t) {
    super(t), this.type = "csv", this.refresh = k(async (t2) => {
      await this.load();
      const { extent: e2, timeExtent: o2 } = await this._connection.invoke("refresh", t2);
      return e2 && (this.sourceJSON.extent = e2), o2 && (this.sourceJSON.timeInfo.timeExtent = [o2.start, o2.end]), { dataChanged: true, updates: { extent: this.sourceJSON.extent, timeInfo: this.sourceJSON.timeInfo } };
    });
  }
  load(t) {
    const e2 = null != t ? t.signal : null;
    return this.addResolvingPromise(this._startWorker(e2)), Promise.resolve(this);
  }
  destroy() {
    var _a;
    (_a = this._connection) == null ? void 0 : _a.close(), this._connection = null;
  }
  async openPorts() {
    return await this.load(), this._connection.openPorts();
  }
  async queryFeatures(t, e2 = {}) {
    await this.load(e2);
    const o2 = await this._connection.invoke("queryFeatures", t ? t.toJSON() : null, e2);
    return d.fromJSON(o2);
  }
  async queryFeaturesJSON(t, e2 = {}) {
    return await this.load(e2), this._connection.invoke("queryFeatures", t ? t.toJSON() : null, e2);
  }
  async queryFeatureCount(t, e2 = {}) {
    return await this.load(e2), this._connection.invoke("queryFeatureCount", t ? t.toJSON() : null, e2);
  }
  async queryObjectIds(t, e2 = {}) {
    return await this.load(e2), this._connection.invoke("queryObjectIds", t ? t.toJSON() : null, e2);
  }
  async queryExtent(t, e2 = {}) {
    await this.load(e2);
    const o2 = await this._connection.invoke("queryExtent", t ? t.toJSON() : null, e2);
    return { count: o2.count, extent: M.fromJSON(o2.extent) };
  }
  async querySnapping(t, e2 = {}) {
    return await this.load(e2), this._connection.invoke("querySnapping", t, e2);
  }
  async _startWorker(t) {
    this._connection = await f3("CSVSourceWorker", { strategy: has("feature-layers-workers") ? "dedicated" : "local", signal: t });
    const { url: e2, delimiter: o2, fields: s2, latitudeField: i, longitudeField: n, spatialReference: a2, timeInfo: c3 } = this.loadOptions, u = await this._connection.invoke("load", { url: e2, customParameters: this.customParameters, parsingOptions: { delimiter: o2, fields: s2 == null ? void 0 : s2.map((t2) => t2.toJSON()), latitudeField: i, longitudeField: n, spatialReference: a2 == null ? void 0 : a2.toJSON(), timeInfo: c3 == null ? void 0 : c3.toJSON() } }, { signal: t });
    this.locationInfo = u.locationInfo, this.sourceJSON = u.layerDefinition, this.delimiter = u.delimiter;
  }
};
e([y()], c2.prototype, "type", void 0), e([y()], c2.prototype, "loadOptions", void 0), e([y()], c2.prototype, "customParameters", void 0), e([y()], c2.prototype, "locationInfo", void 0), e([y()], c2.prototype, "sourceJSON", void 0), e([y()], c2.prototype, "delimiter", void 0), c2 = e([a("esri.layers.graphics.sources.CSVSource")], c2);

// node_modules/@arcgis/core/layers/CSVLayer.js
function h(e2, r) {
  throw new s(r, `CSVLayer (title: ${e2.title}, id: ${e2.id}) cannot be saved to a portal item`);
}
var m2 = class extends Be {
  constructor(...e2) {
    super(...e2), this.geometryType = "point", this.capabilities = c(false, false), this.delimiter = null, this.editingEnabled = false, this.fields = null, this.latitudeField = null, this.locationType = "coordinates", this.longitudeField = null, this.operationalLayerType = "CSV", this.outFields = ["*"], this.path = null, this.spatialReference = f2.WGS84, this.source = null, this.type = "csv";
  }
  normalizeCtorArgs(e2, t) {
    return "string" == typeof e2 ? { url: e2, ...t } : e2;
  }
  load(e2) {
    const t = null != e2 ? e2.signal : null, i = this.loadFromPortal({ supportedTypes: ["CSV"], supportsData: false }, e2).catch(f).then(async () => this.initLayerProperties(await this.createGraphicsSource(t)));
    return this.addResolvingPromise(i), Promise.resolve(this);
  }
  get isTable() {
    return this.loaded && null == this.geometryType;
  }
  readWebMapLabelsVisible(e2, t) {
    return null != t.showLabels ? t.showLabels : !!(t.layerDefinition && t.layerDefinition.drawingInfo && t.layerDefinition.drawingInfo.labelingInfo);
  }
  set url(e2) {
    if (!e2)
      return void this._set("url", e2);
    const t = L(e2);
    this._set("url", t.path), t.query && (this.customParameters = { ...this.customParameters, ...t.query });
  }
  async createGraphicsSource(e2) {
    const t = new c2({ loadOptions: { delimiter: this.delimiter, fields: this.fields, latitudeField: this.latitudeField ?? void 0, longitudeField: this.longitudeField ?? void 0, spatialReference: this.spatialReference ?? void 0, timeInfo: this.timeInfo ?? void 0, url: this.url }, customParameters: this.customParameters ?? void 0 });
    return this._set("source", t), await t.load({ signal: e2 }), this.read({ locationInfo: t.locationInfo, columnDelimiter: t.delimiter }, { origin: "service", url: this.parsedUrl }), t;
  }
  queryFeatures(e2, t) {
    return this.load().then(() => this.source.queryFeatures(b.from(e2) || this.createQuery())).then((e3) => {
      if (e3 == null ? void 0 : e3.features)
        for (const t2 of e3.features)
          t2.layer = t2.sourceLayer = this;
      return e3;
    });
  }
  queryObjectIds(e2, t) {
    return this.load().then(() => this.source.queryObjectIds(b.from(e2) || this.createQuery()));
  }
  queryFeatureCount(e2, t) {
    return this.load().then(() => this.source.queryFeatureCount(b.from(e2) || this.createQuery()));
  }
  queryExtent(e2, t) {
    return this.load().then(() => this.source.queryExtent(b.from(e2) || this.createQuery()));
  }
  read(e2, t) {
    super.read(e2, t), t && "service" === t.origin && this.revert(["latitudeField", "longitudeField"], "service");
  }
  write(e2, t) {
    return super.write(e2, { ...t, writeLayerSchema: true });
  }
  clone() {
    throw new s("csv-layer:clone", `CSVLayer (title: ${this.title}, id: ${this.id}) cannot be cloned`);
  }
  async save(e2) {
    return h(this, "csv-layer:save");
  }
  async saveAs(e2, t) {
    return h(this, "csv-layer:save-as");
  }
  async hasDataChanged() {
    try {
      const { dataChanged: e2, updates: t } = await this.source.refresh(this.customParameters);
      return null != t && this.read(t, { origin: "service", url: this.parsedUrl, ignoreDefaults: true }), e2;
    } catch {
    }
    return false;
  }
  _verifyFields() {
  }
  _verifySource() {
  }
  _hasMemorySource() {
    return false;
  }
};
e([y({ readOnly: true, json: { read: false, write: false } })], m2.prototype, "capabilities", void 0), e([y({ type: [",", " ", ";", "|", "	"], json: { read: { source: "columnDelimiter" }, write: { target: "columnDelimiter", ignoreOrigin: true } } })], m2.prototype, "delimiter", void 0), e([y({ readOnly: true, type: Boolean, json: { origins: { "web-scene": { read: false, write: false } } } })], m2.prototype, "editingEnabled", void 0), e([y({ json: { read: { source: "layerDefinition.fields" }, write: { target: "layerDefinition.fields" } } })], m2.prototype, "fields", void 0), e([y({ type: Boolean, readOnly: true })], m2.prototype, "isTable", null), e([o("web-map", "labelsVisible", ["layerDefinition.drawingInfo.labelingInfo", "showLabels"])], m2.prototype, "readWebMapLabelsVisible", null), e([y({ type: String, json: { read: { source: "locationInfo.latitudeFieldName" }, write: { target: "locationInfo.latitudeFieldName", ignoreOrigin: true } } })], m2.prototype, "latitudeField", void 0), e([y({ type: ["show", "hide"] })], m2.prototype, "listMode", void 0), e([y({ type: ["coordinates"], json: { read: { source: "locationInfo.locationType" }, write: { target: "locationInfo.locationType", ignoreOrigin: true, isRequired: true } } })], m2.prototype, "locationType", void 0), e([y({ type: String, json: { read: { source: "locationInfo.longitudeFieldName" }, write: { target: "locationInfo.longitudeFieldName", ignoreOrigin: true } } })], m2.prototype, "longitudeField", void 0), e([y({ type: ["CSV"] })], m2.prototype, "operationalLayerType", void 0), e([y()], m2.prototype, "outFields", void 0), e([y({ type: String, json: { origins: { "web-scene": { read: false, write: false } }, read: false, write: false } })], m2.prototype, "path", void 0), e([y({ json: { read: false }, cast: null, type: c2, readOnly: true })], m2.prototype, "source", void 0), e([y({ json: { read: false }, value: "csv", readOnly: true })], m2.prototype, "type", void 0), e([y({ json: { read: m, write: { isRequired: true, ignoreOrigin: true, writer: p } } })], m2.prototype, "url", null), m2 = e([a("esri.layers.CSVLayer")], m2);
var f4 = m2;
export {
  f4 as default
};
//# sourceMappingURL=CSVLayer-WFP4L2BU.js.map
