import {
  a,
  c,
  n,
  t
} from "./chunk-I5JT24BO.js";

// node_modules/@arcgis/core/config.js
var _a;
var s = { analysisTheme: { accentColor: [255, 127, 0], textColor: "white" }, apiKey: void 0, applicationName: "", applicationUrl: (_a = globalThis.location) == null ? void 0 : _a.href, assetsPath: "", fontsUrl: "https://static.arcgis.com/fonts", geometryServiceUrl: "https://utility.arcgisonline.com/arcgis/rest/services/Geometry/GeometryServer", geoRSSServiceUrl: "https://utility.arcgis.com/sharing/rss", kmlServiceUrl: "https://utility.arcgis.com/sharing/kml", userPrivilegesApplied: false, portalUrl: "https://www.arcgis.com", routeServiceUrl: "https://route-api.arcgis.com/arcgis/rest/services/World/Route/NAServer/Route_World", workers: { loaderConfig: { has: {}, paths: {}, map: {}, packages: [] } }, request: { crossOriginNoCorsDomains: null, httpsDomains: ["arcgis.com", "arcgisonline.com", "esrikr.com", "premiumservices.blackbridge.com", "esripremium.accuweather.com", "gbm.digitalglobe.com", "firstlook.digitalglobe.com", "msi.digitalglobe.com"], interceptors: [], maxUrlLength: 2e3, priority: "high", proxyRules: [], proxyUrl: null, timeout: 6e4, trustedServers: [], useIdentity: true }, log: { interceptors: [], level: null } };
if (globalThis.esriConfig && (n(s, globalThis.esriConfig, true), delete s.has), !s.assetsPath) {
  {
    const e2 = "4.27";
    s.assetsPath = `https://js.arcgis.com/${e2}/@arcgis/core/assets`;
  }
  s.defaultAssetsPath = s.assetsPath;
}

// node_modules/@arcgis/core/core/Logger.js
var r = { info: 0, warn: 1, error: 2, none: 3 };
var s2 = class _s {
  constructor(e2) {
    this.level = null, this._module = "", this._parent = null, this.writer = null, this._loggedMessages = { error: /* @__PURE__ */ new Map(), warn: /* @__PURE__ */ new Map(), info: /* @__PURE__ */ new Map() }, null != e2.level && (this.level = e2.level), null != e2.writer && (this.writer = e2.writer), this._module = e2.module, _s._loggers.set(this.module, this);
    const t2 = this.module.lastIndexOf(".");
    -1 !== t2 && (this._parent = _s.getLogger(this.module.slice(0, t2)));
  }
  get module() {
    return this._module;
  }
  get parent() {
    return this._parent;
  }
  error(...e2) {
    this._log("error", "always", ...e2);
  }
  warn(...e2) {
    this._log("warn", "always", ...e2);
  }
  info(...e2) {
    this._log("info", "always", ...e2);
  }
  errorOnce(...e2) {
    this._log("error", "once", ...e2);
  }
  warnOnce(...e2) {
    this._log("warn", "once", ...e2);
  }
  infoOnce(...e2) {
    this._log("info", "once", ...e2);
  }
  errorOncePerTick(...e2) {
    this._log("error", "oncePerTick", ...e2);
  }
  warnOncePerTick(...e2) {
    this._log("warn", "oncePerTick", ...e2);
  }
  infoOncePerTick(...e2) {
    this._log("info", "oncePerTick", ...e2);
  }
  get test() {
    const e2 = this;
    return { loggedMessages: e2._loggedMessages, clearLoggedWarnings: () => e2._loggedMessages.warn.clear() };
  }
  static get test() {
    return { resetLoggers(e2 = /* @__PURE__ */ new Map()) {
      const t2 = _s._loggers;
      return _s._loggers = e2, t2;
    }, set throttlingDisabled(e2) {
      _s._throttlingDisabled = e2;
    } };
  }
  static getLogger(e2) {
    return e2 = "string" != typeof e2 ? e2.declaredClass : e2, _s._loggers.get(e2) || new _s({ module: e2 });
  }
  _log(t2, r2, ...n2) {
    if (!this._matchLevel(t2))
      return;
    if ("always" !== r2 && !_s._throttlingDisabled) {
      const e2 = this._argsToKey(n2), o = this._loggedMessages[t2].get(e2);
      if ("once" === r2 && null != o || "oncePerTick" === r2 && o && o >= _s._tickCounter)
        return;
      this._loggedMessages[t2].set(e2, _s._tickCounter), _s._scheduleTickCounterIncrement();
    }
    for (const s5 of s.log.interceptors)
      if (s5(t2, this.module, ...n2))
        return;
    this._inheritedWriter()(t2, this.module, ...n2);
  }
  _parentWithMember(e2, t2) {
    let r2 = this;
    for (; null != r2; ) {
      const t3 = r2[e2];
      if (null != t3)
        return t3;
      r2 = r2.parent;
    }
    return t2;
  }
  _inheritedWriter() {
    return this._parentWithMember("writer", this._consoleWriter);
  }
  _consoleWriter(e2, t2, ...r2) {
    console[e2](`[${t2}]`, ...r2);
  }
  _matchLevel(t2) {
    const s5 = s.log.level || "warn";
    return r[this._parentWithMember("level", s5)] <= r[t2];
  }
  _argsToKey(...e2) {
    const r2 = (e3, t2) => "object" != typeof t2 || Array.isArray(t2) ? t2 : "[Object]";
    return c(JSON.stringify(e2, r2));
  }
  static _scheduleTickCounterIncrement() {
    _s._tickCounterScheduled || (_s._tickCounterScheduled = true, Promise.resolve().then(() => {
      _s._tickCounter++, _s._tickCounterScheduled = false;
    }));
  }
};
s2._loggers = /* @__PURE__ */ new Map(), s2._tickCounter = 0, s2._tickCounterScheduled = false, s2._throttlingDisabled = false;

// node_modules/@arcgis/core/core/Message.js
function s3(s5, e2) {
  return s5.replaceAll(/\$\{([^\s\:\}]*)(?:\:([^\s\:\}]+))?\}/g, (s6, r2) => {
    if ("" === r2)
      return "$";
    const n2 = t(r2, e2);
    return (n2 ?? "").toString();
  });
}
var e = class {
  constructor(t2, e2, r2) {
    this.name = t2, this.details = r2, this.message = (e2 && s3(e2, r2)) ?? "";
  }
  toString() {
    return "[" + this.name + "]: " + this.message;
  }
};

// node_modules/@arcgis/core/core/Error.js
var s4 = class _s extends e {
  constructor(e2, t2, r2) {
    super(e2, t2, r2);
  }
  toJSON() {
    if (null != this.details)
      try {
        return { name: this.name, message: this.message, details: JSON.parse(JSON.stringify(this.details, (t2, r2) => {
          if (r2 && "object" == typeof r2 && "function" == typeof r2.toJSON)
            return r2;
          try {
            return a(r2);
          } catch (s5) {
            return "[object]";
          }
        })) };
      } catch (r2) {
        throw s2.getLogger("esri.core.Error").error(r2), r2;
      }
    return { name: this.name, message: this.message, details: this.details };
  }
  static fromJSON(e2) {
    return new _s(e2.name, e2.message, e2.details);
  }
};
s4.prototype.type = "error";

export {
  s,
  s2,
  e,
  s4 as s3
};
//# sourceMappingURL=chunk-W2N7YT6I.js.map
