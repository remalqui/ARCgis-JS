import {
  i as i2
} from "./chunk-Y2JGNMOW.js";
import {
  O
} from "./chunk-TOXOPWS2.js";
import {
  c,
  t2 as t
} from "./chunk-TBMS67KR.js";
import {
  $,
  z
} from "./chunk-3VTULECI.js";
import {
  m
} from "./chunk-32JSK7KN.js";
import {
  n
} from "./chunk-KKBQS7Z3.js";
import {
  i
} from "./chunk-QXPTMFGZ.js";
import {
  u
} from "./chunk-EIE3W25Z.js";
import {
  H
} from "./chunk-SFV6XLDZ.js";
import {
  C
} from "./chunk-HNHXEGH2.js";

// node_modules/@arcgis/core/views/2d/engine/webgl/WGLRendererInfo.js
function n2(e, t2) {
  const i3 = t2.length;
  if (e < t2[0].value || 1 === i3)
    return t2[0].size;
  for (let s = 1; s < i3; s++)
    if (e < t2[s].value) {
      const i4 = (e - t2[s - 1].value) / (t2[s].value - t2[s - 1].value);
      return t2[s - 1].size + i4 * (t2[s].size - t2[s - 1].size);
    }
  return t2[i3 - 1].size;
}
var v = class {
  constructor() {
    this.symbolLevels = [], this.vvColorValues = new Float32Array(8), this.vvColors = new Float32Array(32), this.vvOpacityValues = new Float32Array(8), this.vvOpacities = new Float32Array(8), this.vvSizeMinMaxValue = new Float32Array(4), this.outsideLabelsVisible = false, this._vvMaterialParameters = { vvSizeEnabled: false, vvColorEnabled: false, vvRotationEnabled: false, vvRotationType: "geographic", vvOpacityEnabled: false }, this._technique = t;
  }
  getSizeVVFieldStops(e) {
    const t2 = this._vvSizeFieldStops;
    if (t2)
      switch (t2.type) {
        case "static":
          return t2;
        case "level-dependent":
          return t2.levels[e] ?? (() => {
            let i3 = 1 / 0, s = 0;
            for (const o2 in t2.levels) {
              const t3 = parseFloat(o2), a2 = Math.abs(e - t3);
              a2 < i3 && (i3 = a2, s = t3);
            }
            if (i3 === 1 / 0)
              return { sizes: new Float32Array([0, 0, 0, 0, 0, 0]), values: new Float32Array([0, 0, 0, 0, 0, 0]) };
            const a = 2 ** ((e - s) / 2), l = t2.levels[s], r = new Float32Array(l.values);
            return r[2] *= a, r[3] *= a, { sizes: l.sizes, values: r };
          })();
        default:
          return;
      }
  }
  get vvMaterialParameters() {
    return this._vvMaterialParameters;
  }
  update(e) {
    null != this._vvInfo && this._updateVisualVariables(this._vvInfo.vvRanges, e);
  }
  setInfo(e, t2, i3) {
    this._updateEffects(i3), this._vvInfo = t2, this._technique = c(e), this.rendererSchema = this._technique.createOrUpdateRendererSchema(this.rendererSchema, e);
  }
  getVariation() {
    return { ...this._technique.getVariation(this.rendererSchema), outsideLabelsVisible: this.outsideLabelsVisible, supportsTextureFloat: n("2d").supportsTextureFloat };
  }
  getVariationHash() {
    return this._technique.getVariationHash(this.rendererSchema) << 1 | (this.outsideLabelsVisible ? 1 : 0);
  }
  _updateEffects(e) {
    this.outsideLabelsVisible = null != e && e.excludedLabelsVisible;
  }
  _updateVisualVariables(l, r) {
    const o2 = this._vvMaterialParameters;
    if (o2.vvOpacityEnabled = false, o2.vvSizeEnabled = false, o2.vvColorEnabled = false, o2.vvRotationEnabled = false, !l)
      return;
    const v2 = l.size;
    if (v2) {
      if (o2.vvSizeEnabled = true, v2.minMaxValue) {
        const t2 = v2.minMaxValue;
        let i3, l2;
        if (z(t2.minSize) && z(t2.maxSize))
          if ($(t2.minSize) && $(t2.maxSize))
            i3 = u(t2.minSize), l2 = u(t2.maxSize);
          else {
            const s = r.scale;
            i3 = u(n2(s, t2.minSize.stops)), l2 = u(n2(s, t2.maxSize.stops));
          }
        this.vvSizeMinMaxValue.set([t2.minDataValue, t2.maxDataValue, i3, l2]);
      }
      if (v2.scaleStops && (this.vvSizeScaleStopsValue = u(n2(r.scale, v2.scaleStops.stops))), v2.unitValue) {
        const e = H(r.spatialReference) / m[v2.unitValue.unit];
        this.vvSizeUnitValueToPixelsRatio = e / r.resolution;
      }
      v2.fieldStops && (this._vvSizeFieldStops = v2.fieldStops);
    }
    const u2 = l.color;
    u2 && (o2.vvColorEnabled = true, this.vvColorValues.set(u2.values), this.vvColors.set(u2.colors));
    const c2 = l.opacity;
    c2 && (o2.vvOpacityEnabled = true, this.vvOpacityValues.set(c2.values), this.vvOpacities.set(c2.opacities));
    const h = l.rotation;
    h && (o2.vvRotationEnabled = true, o2.vvRotationType = h.type);
  }
};

// node_modules/@arcgis/core/views/2d/engine/FeatureContainer.js
var o = class extends i2 {
  constructor(e) {
    super(e), this._rendererInfo = new v(), this._materialItemsRequestQueue = new i(), this.attributeView = new O(() => this.onAttributeStoreUpdate());
  }
  destroy() {
    this.children.forEach((e) => e.destroy()), this.removeAllChildren(), this.attributeView.destroy(), this._materialItemsRequestQueue.clear();
  }
  setRendererInfo(e, t2, r) {
    this._rendererInfo.setInfo(e, t2, r), this.requestRender();
  }
  async getMaterialItems(t2, r) {
    if (!t2 || 0 === t2.length)
      return [];
    const s = C();
    return this._materialItemsRequestQueue.push({ items: t2, abortOptions: r, resolver: s }), this.requestRender(), s.promise;
  }
  doRender(e) {
    if (e.context.capabilities.enable("textureFloat"), e.context.capabilities.enable("vao"), this._materialItemsRequestQueue.length > 0) {
      let t2 = this._materialItemsRequestQueue.pop();
      for (; t2; )
        this._processMaterialItemRequest(e, t2), t2 = this._materialItemsRequestQueue.pop();
    }
    super.doRender(e);
  }
  renderChildren(e) {
    for (const t2 of this.children)
      t2.commit(e);
    this._rendererInfo.update(e.state), super.renderChildren(e);
  }
  updateTransforms(e) {
    if (this.children.some((e2) => e2.hasData))
      for (const t2 of this.children)
        t2.setTransform(e);
  }
  createRenderParams(e) {
    const t2 = super.createRenderParams(e);
    return t2.rendererInfo = this._rendererInfo, t2.attributeView = this.attributeView, t2;
  }
  onAttributeStoreUpdate() {
  }
  _processMaterialItemRequest(e, { items: t2, abortOptions: r, resolver: s }) {
    const { painter: i3, pixelRatio: o2 } = e, a = t2.map((e2) => i3.textureManager.rasterizeItem(e2.symbol, o2, e2.glyphIds, r));
    Promise.all(a).then((e2) => {
      if (!this.stage)
        return void s.reject();
      const r2 = e2.map((e3, r3) => ({ id: t2[r3].id, mosaicItem: e3 }));
      s.resolve(r2);
    }, s.reject);
  }
};

export {
  o
};
//# sourceMappingURL=chunk-M7TZTH7O.js.map
