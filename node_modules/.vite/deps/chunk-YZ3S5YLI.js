import {
  M as M2,
  R2 as R,
  a as a3,
  a3 as a4,
  c as c2,
  c2 as c3,
  d as d2,
  h,
  m as m2,
  n3 as n2,
  p as p4,
  s as s5,
  u as u2,
  w as w2
} from "./chunk-QUF6BZJO.js";
import {
  c,
  f,
  g,
  i,
  l as l2,
  n,
  o as o3,
  p as p2,
  r as r2,
  s as s4,
  u2 as u,
  w,
  y as y2
} from "./chunk-F72FE4ZJ.js";
import {
  p as p3
} from "./chunk-2735WBYK.js";
import {
  m,
  p
} from "./chunk-MVR2W3C6.js";
import {
  o as o2
} from "./chunk-4H5JODOT.js";
import {
  d
} from "./chunk-MOPR7RFH.js";
import {
  M
} from "./chunk-3GSONYPC.js";
import {
  o2 as o,
  r,
  x2 as x
} from "./chunk-SFV6XLDZ.js";
import {
  s as s3
} from "./chunk-3PLRSFLA.js";
import {
  s as s2
} from "./chunk-VBD33VNW.js";
import {
  l
} from "./chunk-7A5C2EQ3.js";
import {
  y3 as y
} from "./chunk-OYBXMT5R.js";
import {
  a2
} from "./chunk-CIDWM2UN.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";
import {
  s3 as s
} from "./chunk-W2N7YT6I.js";
import {
  a
} from "./chunk-I5JT24BO.js";

// node_modules/@arcgis/core/layers/support/rasterFunctions/BaseFunctionArguments.js
var e2 = class extends l {
  constructor() {
    super(...arguments), this.raster = void 0;
  }
};
e([y({ json: { write: true } })], e2.prototype, "raster", void 0), e2 = e([a2("esri.layers.support.rasterFunctions.AspectFunctionArguments")], e2);
var p5 = e2;

// node_modules/@arcgis/core/layers/support/rasterFunctions/AspectFunctionArguments.js
var e3;
var t = e3 = class extends p5 {
  clone() {
    return new e3({ raster: this.raster });
  }
};
t = e3 = e([a2("esri.layers.support.rasterFunctions.AspectFunctionArguments")], t);
var c4 = t;

// node_modules/@arcgis/core/layers/support/rasterFunctions/BaseRasterFunction.js
var a5 = /* @__PURE__ */ new Set(["slope", "aspect", "curvature", "hillshade", "shadedrelief"]);
var u3 = class extends l {
  constructor() {
    super(...arguments), this.functionArguments = null, this.readingBufferSize = 0, this.id = -1, this.isNoopProcess = false, this.rawInputBandIds = [], this.isInputBandIdsSwizzled = false, this.swizzledBandSelection = [], this.isBranch = false, this._bindingResult = null;
  }
  get supportsGPU() {
    return this._bindingResult.supportsGPU;
  }
  get flatWebGLFunctionChain() {
    const t5 = this.getWebGLProcessorDefinition();
    if (!t5)
      return null;
    const s10 = [t5], { parameters: e9 } = t5;
    let r6 = e9.rasters || e9.raster && [e9.raster];
    for (; r6 == null ? void 0 : r6.length; ) {
      s10.unshift(...r6);
      const t6 = [];
      for (let s11 = 0; s11 < r6.length; s11++) {
        const { parameters: e10 } = r6[s11], n20 = e10.rasters || e10.raster && [e10.raster];
        (n20 == null ? void 0 : n20.length) && t6.push(...n20);
      }
      r6 = t6;
    }
    for (let o11 = s10.length - 1; o11 >= 0; o11--)
      s10[o11].isNoopProcess && s10.splice(o11, 1);
    let n19 = false;
    for (let o11 = 0; o11 < s10.length; o11++) {
      const t6 = s10[o11];
      t6.id = s10.length - o11 - 1;
      const { rasters: e10 } = t6.parameters;
      n19 = n19 || null != e10 && e10.length > 1;
    }
    const i19 = s10.some(({ name: t6 }) => a5.has(t6.toLowerCase()));
    return { functions: s10, hasBranches: n19, hasSurfaceFunction: i19 };
  }
  bind(t5, s10 = false, e9 = -1) {
    this.id = e9 + 1;
    const r6 = this._getRasterValues();
    let n19 = true;
    for (let i19 = 0; i19 < r6.length; i19++) {
      const e10 = r6[i19];
      if (null != e10 && this._isRasterFunctionValue(e10)) {
        const r7 = e10.bind(t5, s10, this.id + i19);
        if (!r7.success)
          return this._bindingResult = r7, r7;
        n19 = n19 && r7.supportsGPU;
      }
    }
    return !this.rasterInfo || s10 ? (this.sourceRasterInfos = this._getSourceRasterInfos(t5), this._bindingResult = this._bindSourceRasters(), this._bindingResult.success && this._patchRasterInfo(), this._bindingResult.supportsGPU = n19 && this._bindingResult.supportsGPU, this.processInputBandIds(), this._bindingResult) : (this._bindingResult = { success: true, supportsGPU: true }, this.processInputBandIds(), this._bindingResult);
  }
  process(t5) {
    const s10 = this._getRasterValues(), e9 = 0 === s10.length ? t5.pixelBlocks ?? t5.primaryPixelBlocks : s10.map((s11) => this._readRasterValue(s11, t5));
    return this._processPixels({ ...t5, pixelBlocks: e9 });
  }
  processInputBandIds() {
    const t5 = this._getRasterValues().filter(this._isRasterFunctionValue);
    let s10;
    if (t5.length > 1) {
      const s11 = t5.map((t6) => t6.processInputBandIds()[0]);
      this.rawInputBandIds = s11, this.isInputBandIdsSwizzled = this.rawInputBandIds.some((t6, s12) => t6 !== s12);
      const e10 = t5.filter((t6) => "ExtractBand" === t6.functionName);
      return e10.length && e10.forEach((t6, s12) => {
        t6.isInputBandIdsSwizzled = true, t6.swizzledBandSelection = [s12, s12, s12];
      }), this.rawInputBandIds;
    }
    const e9 = t5[0];
    if (e9) {
      if (s10 = e9.processInputBandIds(), e9.isInputBandIdsSwizzled)
        return this.rawInputBandIds = s10, s10;
    } else {
      s10 = [];
      const { bandCount: t6 } = this.sourceRasterInfos[0];
      for (let e10 = 0; e10 < t6; e10++)
        s10.push(e10);
    }
    const r6 = this._getInputBandIds(s10);
    return this.isInputBandIdsSwizzled = r6.some((t6, s11) => t6 !== s11), this.rawInputBandIds = r6, this.rawInputBandIds;
  }
  getPrimaryRasters() {
    const t5 = [], s10 = [];
    return this._getPrimaryRasters(this, t5, s10), { rasters: t5, rasterIds: s10 };
  }
  getWebGLProcessorDefinition() {
    const t5 = this._getWebGLParameters(), { raster: s10, rasters: e9 } = this.functionArguments;
    return e9 && Array.isArray(e9) && e9.length ? (t5.rasters = e9.map((t6) => this._isRasterFunctionValue(t6) ? t6.getWebGLProcessorDefinition() : "number" == typeof t6 ? { name: "Constant", parameters: { value: t6 }, pixelType: "f32", id: -1, isNoopProcess: false } : { name: "Identity", parameters: { value: t6 }, pixelType: "f32", id: -1, isNoopProcess: false }), t5.rasters.some((t6) => null != t6) || (t5.rasters = null)) : this._isRasterFunctionValue(s10) && (t5.raster = s10.getWebGLProcessorDefinition()), { name: this.functionName, parameters: t5, pixelType: this.outputPixelType, id: this.id, isNoopProcess: this.isNoopProcess };
  }
  _getOutputPixelType(t5) {
    return "unknown" === this.outputPixelType ? t5 : this.outputPixelType ?? t5;
  }
  _getWebGLParameters() {
    return {};
  }
  _getInputBandIds(t5) {
    return t5;
  }
  _isOutputRoundingNeeded() {
    const { outputPixelType: t5 } = this;
    return ((t5 == null ? void 0 : t5.startsWith("u")) || (t5 == null ? void 0 : t5.startsWith("s"))) ?? false;
  }
  _getRasterValues() {
    const { rasterArgumentNames: t5 } = this;
    return "rasters" === t5[0] ? this.functionArguments.rasters ?? [] : t5.map((t6) => this.functionArguments[t6]).flat();
  }
  _getSourceRasterInfos(t5) {
    const s10 = this._getRasterValues(), { rasterInfos: e9, rasterIds: r6 } = t5;
    if (0 === s10.length)
      return e9;
    const n19 = s10.map((t6) => t6 && "object" == typeof t6 && "bind" in t6 && t6.rasterInfo ? t6.rasterInfo : "string" == typeof t6 && r6.includes(t6) ? e9[r6.indexOf(t6)] : "number" != typeof t6 ? e9[0] : void 0), i19 = n19.find((t6) => t6) ?? e9[0];
    return n19.forEach((t6, s11) => {
      void 0 === t6 && (n19[s11] = i19);
    }), n19;
  }
  _getPrimaryRasterId(t5) {
    return t5 == null ? void 0 : t5.url;
  }
  _getPrimaryRasters(t5, s10 = [], e9 = []) {
    for (let r6 = 0; r6 < t5.sourceRasters.length; r6++) {
      const n19 = t5.sourceRasters[r6];
      if ("number" != typeof n19)
        if ("bind" in n19)
          this._getPrimaryRasters(n19, s10, e9);
        else {
          const t6 = n19, r7 = this._getPrimaryRasterId(t6);
          if (null == r7)
            continue;
          e9.includes(r7) || (this.mainPrimaryRasterId === r7 ? (s10.unshift(t6), e9.unshift(r7)) : (s10.push(t6), e9.push(r7)));
        }
    }
  }
  _isRasterFunctionValue(t5) {
    return null != t5 && "object" == typeof t5 && "getWebGLProcessorDefinition" in t5;
  }
  _readRasterValue(t5, s10) {
    const { primaryPixelBlocks: e9 } = s10;
    if (null == t5 || "$$" === t5) {
      const t6 = e9[0];
      return null == t6 ? null : t6.clone();
    }
    if ("string" == typeof t5) {
      const r6 = s10.primaryRasterIds.indexOf(t5);
      return -1 === r6 ? null : e9[r6];
    }
    if ("number" == typeof t5) {
      const s11 = e9[0];
      if (null == s11)
        return null;
      const { width: r6, height: n19, pixelType: o11, mask: a25 } = s11, u15 = a25 ? new Uint8Array(a25) : null, p21 = new Float32Array(r6 * n19);
      p21.fill(t5);
      const l13 = this.sourceRasterInfos[0].bandCount, c26 = new Array(l13).fill(p21);
      return new u({ width: r6, height: n19, pixelType: o11, pixels: c26, mask: u15 });
    }
    return t5.process(s10);
  }
  _patchRasterInfo() {
    const { rasterInfo: t5 } = this;
    if (!(t5 == null ? void 0 : t5.keyProperties))
      return;
    const { bandCount: s10, keyProperties: e9, statistics: r6, histograms: n19 } = t5, i19 = e9.BandProperties;
    i19 && i19.length !== s10 && (t5.keyProperties = { ...e9, BandProperties: void 0 }), r6 && r6.length !== s10 && (t5.statistics = r6.length > s10 ? r6.slice(0, s10) : null), n19 && n19.length !== s10 && (t5.histograms = n19.length > s10 ? n19.slice(0, s10) : null), e9.BAND_COUNT && Number(e9.BAND_COUNT) !== s10 && (t5.keyProperties = { ...e9, BAND_COUNT: "string" == typeof e9.BAND_COUNT ? String(s10) : s10 });
  }
};
e([y({ json: { write: true } })], u3.prototype, "functionName", void 0), e([y({ json: { write: true } })], u3.prototype, "functionArguments", void 0), e([y()], u3.prototype, "rasterArgumentNames", void 0), e([y({ json: { write: true } }), s3((t5) => t5 == null ? void 0 : t5.toLowerCase())], u3.prototype, "outputPixelType", void 0), e([y({ json: { write: true } })], u3.prototype, "mainPrimaryRasterId", void 0), e([y()], u3.prototype, "sourceRasters", void 0), e([y({ type: [m2], json: { write: true } })], u3.prototype, "sourceRasterInfos", void 0), e([y({ json: { write: true } })], u3.prototype, "rasterInfo", void 0), e([y({ json: { write: true } })], u3.prototype, "readingBufferSize", void 0), e([y({ json: { write: true } })], u3.prototype, "id", void 0), e([y()], u3.prototype, "isNoopProcess", void 0), e([y()], u3.prototype, "supportsGPU", null), e([y()], u3.prototype, "rawInputBandIds", void 0), e([y()], u3.prototype, "isInputBandIdsSwizzled", void 0), e([y()], u3.prototype, "swizzledBandSelection", void 0), e([y()], u3.prototype, "isBranch", void 0), e([y()], u3.prototype, "flatWebGLFunctionChain", null), e([y()], u3.prototype, "_bindingResult", void 0), u3 = e([a2("esri.layers.support.rasterFunctions.BaseRasterFunction")], u3);
var p6 = u3;

// node_modules/@arcgis/core/layers/support/rasterFunctions/AspectFunction.js
var n3 = class extends p6 {
  constructor() {
    super(...arguments), this.functionName = "Aspect", this.functionArguments = null, this.rasterArgumentNames = ["raster"], this.isGCS = false;
  }
  _bindSourceRasters() {
    var _a;
    const t5 = this.sourceRasterInfos[0];
    this.isGCS = ((_a = t5.spatialReference) == null ? void 0 : _a.isGeographic) ?? false, this.outputPixelType = this._getOutputPixelType("f32");
    const s10 = t5.clone();
    return s10.pixelType = this.outputPixelType, s10.statistics = [{ min: -1, max: 360, avg: 180, stddev: 30 }], s10.histograms = null, s10.colormap = null, s10.attributeTable = null, s10.bandCount = 1, this.rasterInfo = s10, { success: true, supportsGPU: true };
  }
  _processPixels(t5) {
    var _a;
    const s10 = (_a = t5.pixelBlocks) == null ? void 0 : _a[0];
    if (null == s10)
      return null;
    const { extent: e9, primaryPixelSizes: r6 } = t5, o11 = r6 == null ? void 0 : r6[0], n19 = o11 ?? (e9 ? { x: e9.width / s10.width, y: e9.height / s10.height } : { x: 1, y: 1 });
    return h(s10, { resolution: n19 });
  }
};
e([y({ json: { write: true, name: "rasterFunction" } })], n3.prototype, "functionName", void 0), e([y({ type: c4, json: { write: true, name: "rasterFunctionArguments" } })], n3.prototype, "functionArguments", void 0), e([y()], n3.prototype, "rasterArgumentNames", void 0), e([y({ json: { write: true } })], n3.prototype, "isGCS", void 0), n3 = e([a2("esri.layers.support.rasterFunctions.AspectFunction")], n3);
var p7 = n3;

// node_modules/@arcgis/core/layers/support/rasterFunctions/customBandIndexUtils.js
var e4 = /* @__PURE__ */ new Set(["+", "-", "*", "/", "(", ")"]);
function t2(t5, n19) {
  (t5 = t5.replaceAll(" ", "")).startsWith("-") && (t5 = "0" + t5), t5.startsWith("+") && (t5 = t5.slice(1, t5.length));
  const r6 = t5.split(""), l13 = [], o11 = [];
  let s10 = "";
  for (let a25 = 0; a25 < r6.length; a25++) {
    const t6 = r6[a25];
    if (e4.has(t6))
      "" !== s10 && o11.push(parseFloat(s10)), l13.push(t6), s10 = "";
    else {
      if ("b" === t6.toLowerCase()) {
        a25++, s10 = t6.concat(r6[a25]), o11.push(n19[parseInt(s10[1], 10) - 1]), s10 = "";
        continue;
      }
      s10 = s10.concat(t6), a25 === r6.length - 1 && o11.push(parseFloat(s10));
    }
  }
  return { ops: l13, nums: o11 };
}
function n4(e9, t5, n19, r6) {
  if ("number" == typeof n19 && "number" == typeof r6)
    return n19 + r6;
  let l13, o11, s10;
  "number" == typeof n19 ? (s10 = r6, l13 = s10.length, o11 = new Float32Array(l13), o11.fill(n19)) : (l13 = n19.length, o11 = n19, r6.constructor === Number ? (s10 = new Float32Array(l13), s10.fill(r6)) : s10 = r6);
  const a25 = new Float32Array(l13);
  switch (t5) {
    case "+":
      for (let t6 = 0; t6 < l13; t6++)
        (null == e9 || e9[t6]) && (a25[t6] = o11[t6] + s10[t6]);
      break;
    case "-":
      for (let t6 = 0; t6 < l13; t6++)
        (null == e9 || e9[t6]) && (a25[t6] = o11[t6] - s10[t6]);
      break;
    case "*":
      for (let t6 = 0; t6 < l13; t6++)
        (null == e9 || e9[t6]) && (a25[t6] = o11[t6] * s10[t6]);
      break;
    case "/":
      for (let t6 = 0; t6 < l13; t6++)
        (null == e9 || e9[t6]) && s10[t6] && (a25[t6] = o11[t6] / s10[t6]);
      break;
    case "(":
    case ")":
      throw new Error("encountered error with custom band index equation");
  }
  return a25;
}
function r3(e9, t5) {
  e9.splice(t5, 1);
  let n19 = 0, r6 = 0;
  do {
    n19 = 0, r6 = 0;
    for (let t6 = 0; t6 < e9.length; t6++)
      if ("(" === e9[t6])
        n19 = t6;
      else if (")" === e9[t6]) {
        r6 = t6;
        break;
      }
    r6 === n19 + 1 && e9.splice(n19, 2);
  } while (r6 === n19 + 1);
  return e9;
}
function l3(e9) {
  if (1 === e9.length)
    return { opIndex: 0, numIndex: 0 };
  let t5 = 0, n19 = 0;
  for (let s10 = 0; s10 < e9.length; s10++)
    if ("(" === e9[s10])
      t5 = s10;
    else if (")" === e9[s10]) {
      n19 = s10;
      break;
    }
  const r6 = 0 === n19 ? e9 : e9.slice(t5 + 1, n19);
  let l13 = -1;
  for (let s10 = 0; s10 < r6.length; s10++)
    if ("*" === r6[s10] || "/" === r6[s10]) {
      l13 = s10;
      break;
    }
  if (l13 > -1)
    n19 > 0 && (l13 += t5 + 1);
  else {
    for (let e10 = 0; e10 < r6.length; e10++)
      if ("+" === r6[e10] || "-" === r6[e10]) {
        l13 = e10;
        break;
      }
    n19 > 0 && (l13 += t5 + 1);
  }
  let o11 = 0;
  for (let s10 = 0; s10 < l13; s10++)
    "(" === e9[s10] && o11++;
  return { opIndex: l13, numIndex: l13 - o11 };
}
function o4(e9, o11, s10) {
  let a25, { ops: f5, nums: i19 } = t2(s10, o11);
  if (0 === f5.length) {
    const e10 = 1 === i19.length ? i19[0] : o11[0];
    if (e10 instanceof Float32Array)
      return [e10];
    const t5 = new Float32Array(o11[0].length);
    return "number" == typeof e10 ? t5.fill(e10) : t5.set(e10), [t5];
  }
  for (; f5.length > 0; ) {
    const { numIndex: t5, opIndex: o12 } = l3(f5);
    if (a25 = n4(e9, f5[o12], i19[t5], i19[t5 + 1]), 1 === f5.length)
      break;
    f5 = r3(f5, o12), i19.splice(t5, 2, a25);
  }
  return [a25];
}

// node_modules/@arcgis/core/layers/support/rasterFunctions/bandIndexUtils.js
var a6 = new s2({ 0: "custom", 1: "ndvi", 2: "savi", 3: "tsavi", 4: "msavi", 5: "gemi", 6: "pvi", 7: "gvitm", 8: "sultan", 9: "vari", 10: "gndvi", 11: "sr", 12: "ndvi-re", 13: "sr-re", 14: "mtvi2", 15: "rtvi-core", 16: "ci-re", 17: "ci-g", 18: "ndwi", 19: "evi", 20: "iron-oxide", 21: "ferrous-minerals", 22: "clay-minerals", 23: "wndwi", 24: "bai", 25: "nbr", 26: "ndbi", 27: "ndmi", 28: "ndsi", 29: "mndwi" }, { useNumericKeys: true });
function o5(n19, a25) {
  if (!o3(n19))
    return n19;
  const { equation: o11, method: s10 } = a25, i19 = a25.bandIndexes.map((n20) => n20 - 1), { pixels: x4, mask: j2 } = n19;
  let q2;
  switch (s10) {
    case "gndvi":
    case "nbr":
    case "ndbi":
    case "ndvi":
    case "ndvi-re":
    case "ndsi":
    case "ndmi":
    case "mndwi":
      q2 = l4(j2, x4[i19[0]], x4[i19[1]]);
      break;
    case "ndwi":
      q2 = l4(j2, x4[i19[1]], x4[i19[0]]);
      break;
    case "sr":
    case "sr-re":
    case "iron-oxide":
    case "ferrous-minerals":
    case "clay-minerals":
      q2 = c5(j2, x4[i19[0]], x4[i19[1]]);
      break;
    case "ci-g":
    case "ci-re":
      q2 = u4(j2, x4[i19[0]], x4[i19[1]]);
      break;
    case "savi":
      q2 = f2(j2, x4[i19[0]], x4[i19[1]], i19[2] + 1);
      break;
    case "tsavi":
      q2 = w3(j2, x4[i19[0]], x4[i19[1]], i19[2] + 1, i19[3] + 1, i19[4] + 1);
      break;
    case "msavi":
      q2 = h2(j2, x4[i19[0]], x4[i19[1]]);
      break;
    case "gemi":
      q2 = m3(j2, x4[i19[0]], x4[i19[1]]);
      break;
    case "pvi":
      q2 = d3(j2, x4[i19[0]], x4[i19[1]], i19[2] + 1, i19[3] + 1);
      break;
    case "gvitm":
      q2 = g2(j2, [x4[i19[0]], x4[i19[1]], x4[i19[2]], x4[i19[3]], x4[i19[4]], x4[i19[5]]]);
      break;
    case "sultan":
      q2 = y3(j2, [x4[i19[0]], x4[i19[1]], x4[i19[2]], x4[i19[3]], x4[i19[4]], x4[i19[5]]]);
      break;
    case "vari":
      q2 = b(j2, [x4[i19[0]], x4[i19[1]], x4[i19[2]]]);
      break;
    case "mtvi2":
      q2 = v(j2, [x4[i19[0]], x4[i19[1]], x4[i19[2]]]);
      break;
    case "rtvi-core":
      q2 = k(j2, [x4[i19[0]], x4[i19[1]], x4[i19[2]]]);
      break;
    case "evi":
      q2 = A(j2, [x4[i19[0]], x4[i19[1]], x4[i19[2]]]);
      break;
    case "wndwi":
      q2 = p8(j2, [x4[i19[0]], x4[i19[1]], x4[i19[2]]], i19[3] ? i19[3] + 1 : 0.5);
      break;
    case "bai":
      q2 = F(j2, x4[i19[0]], x4[i19[1]]);
      break;
    case "custom":
      q2 = o4(j2, x4, o11);
      break;
    default:
      return n19;
  }
  const M5 = null != j2 ? new Uint8Array(j2.length) : null;
  null != j2 && null != M5 && M5.set(j2);
  const U2 = new u({ width: n19.width, height: n19.height, pixelType: "f32", pixels: q2, mask: M5 });
  return U2.updateStatistics(), U2;
}
function s6(n19, e9, r6, a25) {
  const { mask: o11, pixels: s10, width: i19, height: l13 } = n19, c26 = s10[r6], u15 = s10[e9], f5 = u15.length, w6 = a25 ? new Uint8Array(f5) : new Float32Array(f5), h6 = a25 ? 100 : 1, m8 = a25 ? 100.5 : 0;
  for (let t5 = 0; t5 < f5; t5++)
    if (null == o11 || o11[t5]) {
      const n20 = c26[t5], e10 = u15[t5], r7 = n20 + e10;
      r7 && (w6[t5] = (n20 - e10) / r7 * h6 + m8);
    }
  const d7 = new u({ width: i19, height: l13, mask: o11, pixelType: a25 ? "u8" : "f32", pixels: [w6] });
  return d7.updateStatistics(), d7;
}
function i2(n19) {
  const t5 = new Float32Array(9);
  return t5[3 * n19[0]] = 1, t5[3 * n19[1] + 1] = 1, t5[3 * n19[2] + 2] = 1, t5;
}
function l4(n19, t5, e9) {
  const r6 = e9.length, a25 = new Float32Array(r6);
  for (let o11 = 0; o11 < r6; o11++)
    if (null == n19 || n19[o11]) {
      const n20 = t5[o11], r7 = e9[o11], s10 = n20 + r7;
      s10 && (a25[o11] = (n20 - r7) / s10);
    }
  return [a25];
}
function c5(n19, t5, e9) {
  const r6 = e9.length, a25 = new Float32Array(r6);
  for (let o11 = 0; o11 < r6; o11++)
    if (null == n19 || n19[o11]) {
      const n20 = t5[o11], r7 = e9[o11];
      r7 && (a25[o11] = n20 / r7);
    }
  return [a25];
}
function u4(n19, t5, e9) {
  const r6 = t5.length, a25 = new Float32Array(r6);
  for (let o11 = 0; o11 < r6; o11++)
    if (null == n19 || n19[o11]) {
      const n20 = t5[o11], r7 = e9[o11];
      r7 && (a25[o11] = n20 / r7 - 1);
    }
  return [a25];
}
function f2(n19, t5, e9, r6) {
  const a25 = e9.length, o11 = new Float32Array(a25);
  for (let s10 = 0; s10 < a25; s10++)
    if (null == n19 || n19[s10]) {
      const n20 = e9[s10], a26 = t5[s10], i19 = a26 + n20 + r6;
      i19 && (o11[s10] = (a26 - n20) / i19 * (1 + r6));
    }
  return [o11];
}
function w3(n19, t5, e9, r6, a25, o11) {
  const s10 = e9.length, i19 = new Float32Array(s10), l13 = -a25 * r6 + o11 * (1 + r6 * r6);
  for (let c26 = 0; c26 < s10; c26++)
    if (null == n19 || n19[c26]) {
      const n20 = e9[c26], o12 = t5[c26], s11 = a25 * o12 + n20 + l13;
      s11 && (i19[c26] = r6 * (o12 - r6 * n20 - a25) / s11);
    }
  return [i19];
}
function h2(n19, t5, e9) {
  const r6 = e9.length, a25 = new Float32Array(r6);
  for (let o11 = 0; o11 < r6; o11++)
    if (null == n19 || n19[o11]) {
      const n20 = e9[o11], r7 = t5[o11];
      a25[o11] = 0.5 * (2 * (r7 + 1) - Math.sqrt((2 * r7 + 1) ** 2 - 8 * (r7 - n20)));
    }
  return [a25];
}
function m3(n19, t5, e9) {
  const r6 = e9.length, a25 = new Float32Array(r6);
  for (let o11 = 0; o11 < r6; o11++)
    if (null == n19 || n19[o11]) {
      const n20 = e9[o11], r7 = t5[o11];
      if (1 !== n20) {
        const t6 = (2 * (r7 * r7 - n20 * n20) + 1.5 * r7 + 0.5 * n20) / (r7 + n20 + 0.5);
        a25[o11] = t6 * (1 - 0.25 * t6) - (n20 - 0.125) / (1 - n20);
      }
    }
  return [a25];
}
function d3(n19, t5, e9, r6, a25) {
  const o11 = e9.length, s10 = new Float32Array(o11), i19 = Math.sqrt(1 + r6 * r6);
  for (let l13 = 0; l13 < o11; l13++)
    if (null == n19 || n19[l13]) {
      const n20 = e9[l13], o12 = t5[l13];
      s10[l13] = (o12 - r6 * n20 - a25) / i19;
    }
  return [s10];
}
function g2(n19, t5) {
  const [e9, r6, a25, o11, s10, i19] = t5, l13 = e9.length, c26 = new Float32Array(l13);
  for (let u15 = 0; u15 < l13; u15++)
    (null == n19 || n19[u15]) && (c26[u15] = -0.2848 * e9[u15] - 0.2435 * r6[u15] - 0.5436 * a25[u15] + 0.7243 * o11[u15] + 0.084 * s10[u15] - 1.18 * i19[u15]);
  return [c26];
}
function y3(n19, t5) {
  const [e9, , r6, a25, o11, s10] = t5, i19 = e9.length, l13 = new Float32Array(i19), c26 = new Float32Array(i19), u15 = new Float32Array(i19);
  for (let f5 = 0; f5 < i19; f5++)
    (null == n19 || n19[f5]) && (l13[f5] = s10[f5] ? o11[f5] / s10[f5] * 100 : 0, c26[f5] = e9[f5] ? o11[f5] / e9[f5] * 100 : 0, u15[f5] = a25[f5] ? r6[f5] / a25[f5] * (o11[f5] / a25[f5]) * 100 : 0);
  return [l13, c26, u15];
}
function b(n19, t5) {
  const [e9, r6, a25] = t5, o11 = e9.length, s10 = new Float32Array(o11);
  for (let i19 = 0; i19 < o11; i19++)
    if (null == n19 || n19[i19])
      for (i19 = 0; i19 < o11; i19++) {
        const n20 = e9[i19], t6 = r6[i19], o12 = t6 + n20 - a25[i19];
        o12 && (s10[i19] = (t6 - n20) / o12);
      }
  return [s10];
}
function v(n19, t5) {
  const [e9, r6, a25] = t5, o11 = e9.length, s10 = new Float32Array(o11);
  for (let i19 = 0; i19 < o11; i19++)
    if (null == n19 || n19[i19])
      for (i19 = 0; i19 < o11; i19++) {
        const n20 = e9[i19], t6 = r6[i19], o12 = a25[i19], l13 = Math.sqrt((2 * n20 + 1) ** 2 - 6 * n20 - 5 * Math.sqrt(t6) - 0.5);
        s10[i19] = 1.5 * (1.2 * (n20 - o12) - 2.5 * (t6 - o12)) * l13;
      }
  return [s10];
}
function k(n19, t5) {
  const [e9, r6, a25] = t5, o11 = e9.length, s10 = new Float32Array(o11);
  for (let i19 = 0; i19 < o11; i19++)
    if (null == n19 || n19[i19])
      for (i19 = 0; i19 < o11; i19++) {
        const n20 = e9[i19], t6 = r6[i19], o12 = a25[i19];
        s10[i19] = 100 * (n20 - t6) - 10 * (n20 - o12);
      }
  return [s10];
}
function A(n19, t5) {
  const [e9, r6, a25] = t5, o11 = e9.length, s10 = new Float32Array(o11);
  for (let i19 = 0; i19 < o11; i19++)
    if (null == n19 || n19[i19])
      for (i19 = 0; i19 < o11; i19++) {
        const n20 = e9[i19], t6 = r6[i19], o12 = n20 + 6 * t6 - 7.5 * a25[i19] + 1;
        o12 && (s10[i19] = 2.5 * (n20 - t6) / o12);
      }
  return [s10];
}
function p8(n19, t5, e9 = 0.5) {
  const [r6, a25, o11] = t5, s10 = a25.length, i19 = new Float32Array(s10);
  for (let l13 = 0; l13 < s10; l13++)
    if (null == n19 || n19[l13])
      for (l13 = 0; l13 < s10; l13++) {
        const n20 = r6[l13], t6 = a25[l13], s11 = o11[l13], c26 = n20 + e9 * t6 + (1 - e9) * s11;
        c26 && (i19[l13] = (n20 - e9 * t6 - (1 - e9) * s11) / c26);
      }
  return [i19];
}
function F(n19, t5, e9) {
  const r6 = e9.length, a25 = new Float32Array(r6);
  for (let o11 = 0; o11 < r6; o11++)
    if (null == n19 || n19[o11])
      for (o11 = 0; o11 < r6; o11++) {
        const n20 = (0.1 - t5[o11]) ** 2 + (0.06 - e9[o11]) ** 2;
        n20 && (a25[o11] = 1 / n20);
      }
  return [a25];
}

// node_modules/@arcgis/core/layers/support/rasterFunctions/BandArithmeticFunctionArguments.js
var p9;
var a7 = p9 = class extends p5 {
  constructor() {
    super(...arguments), this.method = "custom";
  }
  clone() {
    return new p9({ method: this.method, bandIndexes: this.bandIndexes, raster: a(this.raster) });
  }
};
e([y({ json: { type: String, write: true } })], a7.prototype, "bandIndexes", void 0), e([o2(a6)], a7.prototype, "method", void 0), a7 = p9 = e([a2("esri.layers.support.rasterFunctions.BandArithmeticFunctionArguments")], a7);
var i3 = a7;

// node_modules/@arcgis/core/layers/support/rasterFunctions/BandArithmeticFunction.js
var o6 = /* @__PURE__ */ new Set(["vari", "mtvi2", "rtvi-core", "evi"]);
var c6 = class extends p6 {
  constructor() {
    super(...arguments), this.functionName = "BandArithmetic", this.functionArguments = null, this.rasterArgumentNames = ["raster"];
  }
  _bindSourceRasters() {
    this.outputPixelType = this._getOutputPixelType("f32");
    const e9 = this.sourceRasterInfos[0];
    if (e9.bandCount < 2)
      return { success: false, supportsGPU: false, error: "band-arithmetic-function: source raster has insufficient amount of raster bands" };
    const s10 = e9.clone();
    s10.pixelType = this.outputPixelType, s10.statistics = null, s10.histograms = null, s10.bandCount = "sultan" === this.functionArguments.method ? 3 : 1, s10.keyProperties = { ...s10.keyProperties, BandProperties: void 0 }, this.rasterInfo = s10;
    return { success: true, supportsGPU: !["custom", "gvitm", "sultan"].includes(this.functionArguments.method) };
  }
  _processPixels(e9) {
    var _a;
    const s10 = (_a = e9.pixelBlocks) == null ? void 0 : _a[0];
    if (null == s10)
      return s10;
    const { method: t5, bandIndexes: r6 } = this.functionArguments, i19 = r6.split(" ").map((e10) => parseFloat(e10));
    return o5(s10, { method: t5, bandIndexes: i19, equation: r6 });
  }
  _getWebGLParameters() {
    const e9 = this.functionArguments.bandIndexes.split(" ").map((e10) => parseFloat(e10) - 1);
    2 === e9.length && e9.push(0);
    const s10 = this.isInputBandIdsSwizzled ? [0, 1, 2] : e9;
    let t5, r6;
    const n19 = new Float32Array(3), { method: a25 } = this.functionArguments;
    switch (a25) {
      case "gndvi":
      case "nbr":
      case "ndbi":
      case "ndvi":
      case "ndvi-re":
      case "ndsi":
      case "ndmi":
      case "mndwi":
        t5 = i2([s10[0], s10[1], 0]), r6 = "ndxi";
        break;
      case "ndwi":
        t5 = i2([s10[1], s10[0], 0]), r6 = "ndxi";
        break;
      case "sr":
      case "sr-re":
      case "iron-oxide":
      case "ferrous-minerals":
      case "clay-minerals":
        t5 = i2([s10[0], s10[1], 0]), r6 = "sr";
        break;
      case "ci-g":
      case "ci-re":
        t5 = i2([s10[0], s10[1], 0]), r6 = "ci";
        break;
      case "savi":
        t5 = i2([s10[0], s10[1], 0]), r6 = "savi", n19[0] = e9[2] + 1;
        break;
      case "tsavi":
        t5 = i2([s10[0], s10[1], 0]), r6 = "tsavi", n19[0] = e9[2] + 1, n19[1] = e9[3] + 1, n19[2] = e9[4] + 1;
        break;
      case "msavi":
        t5 = i2([s10[0], s10[1], 0]), r6 = "msavi";
        break;
      case "gemi":
        t5 = i2([s10[0], s10[1], 0]), r6 = "gemi";
        break;
      case "pvi":
        t5 = i2([s10[0], s10[1], 0]), r6 = "tsavi", n19[0] = e9[2] + 1, n19[1] = e9[3] + 1;
        break;
      case "vari":
        t5 = i2([s10[0], s10[1], s10[2]]), r6 = "vari";
        break;
      case "mtvi2":
        t5 = i2([s10[0], s10[1], s10[2]]), r6 = "mtvi2";
        break;
      case "rtvi-core":
        t5 = i2([s10[0], s10[1], s10[2]]), r6 = "rtvicore";
        break;
      case "evi":
        t5 = i2([s10[0], s10[1], s10[2]]), r6 = "evi";
        break;
      case "wndwi":
        t5 = i2([s10[0], s10[1], 0]), r6 = "wndwi", n19[0] = e9[3] ? e9[3] + 1 : 0.5;
        break;
      case "bai":
        t5 = i2([s10[1], s10[0], 0]), r6 = "bai";
        break;
      default:
        t5 = i2([0, 1, 2]), r6 = "custom";
    }
    return { bandIndexMat3: t5, indexType: r6, adjustments: n19 };
  }
  _getInputBandIds(e9) {
    if ("custom" === this.functionArguments.method)
      return e9;
    const s10 = this.functionArguments.bandIndexes.split(" ").map((e10) => parseFloat(e10) - 1), t5 = e9.length, r6 = s10.map((e10) => e10 >= t5 ? t5 - 1 : e10), n19 = o6.has(this.functionArguments.method) ? 3 : 2, i19 = r6.slice(0, n19).map((s11) => e9[s11]);
    return 2 === i19.length && i19.push(0), i19;
  }
};
e([y({ json: { write: true, name: "rasterFunction" } })], c6.prototype, "functionName", void 0), e([y({ type: i3, json: { write: true, name: "rasterFunctionArguments" } })], c6.prototype, "functionArguments", void 0), e([y()], c6.prototype, "rasterArgumentNames", void 0), c6 = e([a2("esri.layers.support.rasterFunctions.BandArithmeticFunction")], c6);
var u5 = c6;

// node_modules/@arcgis/core/layers/support/rasterFunctions/ColormapFunctionArguments.js
var i4;
var u6 = i4 = class extends p5 {
  castColormapName(o11) {
    if (!o11)
      return null;
    const r6 = o11.toLowerCase();
    return n2.includes(r6) ? r6 : null;
  }
  readColorRamp(o11) {
    return p(o11);
  }
  readColorRampName(o11, r6) {
    if (!o11)
      return null;
    const e9 = a3.jsonValues.find((r7) => r7.toLowerCase() === o11.toLowerCase());
    return e9 ? a3.fromJSON(e9) : null;
  }
  clone() {
    var _a;
    return new i4({ colormap: a(this.colormap), colormapName: this.colormapName, colorRamp: (_a = this.colorRamp) == null ? void 0 : _a.clone(), colorRampName: this.colorRampName });
  }
};
e([y({ type: [[Number]], json: { write: true } })], u6.prototype, "colormap", void 0), e([y({ type: String, json: { write: true } })], u6.prototype, "colormapName", void 0), e([s3("colormapName")], u6.prototype, "castColormapName", null), e([y({ types: m, json: { write: true } })], u6.prototype, "colorRamp", void 0), e([o("colorRamp")], u6.prototype, "readColorRamp", null), e([y({ type: a3.apiValues, json: { type: a3.jsonValues, write: a3.write } })], u6.prototype, "colorRampName", void 0), e([o("colorRampName")], u6.prototype, "readColorRampName", null), u6 = i4 = e([a2("esri.layers.support.rasterFunctions.ColormapFunctionArguments")], u6);
var d4 = u6;

// node_modules/@arcgis/core/layers/support/rasterFunctions/colormaps.js
var t3 = [[36, 0, 255], [36, 0, 255], [36, 0, 255], [36, 0, 255], [112, 75, 3], [113, 76, 3], [114, 77, 3], [115, 77, 3], [116, 78, 3], [117, 79, 3], [118, 79, 3], [119, 80, 3], [121, 81, 4], [122, 82, 4], [123, 82, 4], [124, 83, 4], [125, 84, 4], [126, 84, 4], [127, 85, 4], [128, 86, 4], [129, 86, 4], [130, 87, 4], [131, 88, 4], [132, 89, 4], [133, 89, 4], [134, 90, 4], [135, 91, 4], [136, 91, 4], [137, 92, 4], [138, 93, 4], [139, 94, 4], [140, 94, 4], [142, 95, 5], [143, 96, 5], [144, 96, 5], [145, 97, 5], [146, 98, 5], [147, 99, 5], [148, 99, 5], [149, 100, 5], [150, 101, 5], [151, 101, 5], [152, 102, 5], [153, 103, 5], [154, 104, 5], [155, 104, 5], [156, 105, 5], [157, 106, 5], [158, 106, 5], [159, 107, 5], [160, 108, 5], [161, 108, 5], [162, 109, 5], [164, 110, 6], [165, 111, 6], [166, 111, 6], [167, 112, 6], [168, 113, 6], [169, 113, 6], [170, 114, 6], [171, 115, 6], [172, 116, 6], [173, 116, 6], [174, 117, 6], [245, 0, 0], [245, 5, 0], [245, 10, 0], [246, 15, 0], [246, 20, 0], [246, 25, 0], [246, 30, 0], [247, 35, 0], [247, 40, 0], [247, 45, 0], [247, 50, 0], [247, 55, 0], [248, 60, 0], [248, 65, 0], [248, 70, 0], [248, 75, 0], [249, 81, 0], [249, 86, 0], [249, 91, 0], [249, 96, 0], [250, 101, 0], [250, 106, 0], [250, 111, 0], [250, 116, 0], [250, 121, 0], [251, 126, 0], [251, 131, 0], [251, 136, 0], [251, 141, 0], [252, 146, 0], [252, 151, 0], [252, 156, 0], [252, 156, 0], [251, 159, 0], [250, 162, 0], [249, 165, 0], [248, 168, 0], [247, 171, 0], [246, 174, 0], [245, 177, 0], [245, 179, 0], [244, 182, 0], [243, 185, 0], [242, 188, 0], [241, 191, 0], [240, 194, 0], [239, 197, 0], [238, 200, 0], [237, 203, 0], [236, 206, 0], [235, 209, 0], [234, 212, 0], [233, 215, 0], [232, 218, 0], [231, 221, 0], [230, 224, 0], [230, 226, 0], [229, 229, 0], [228, 232, 0], [227, 235, 0], [226, 238, 0], [225, 241, 0], [224, 244, 0], [223, 247, 0], [165, 247, 0], [163, 244, 0], [161, 240, 0], [158, 237, 0], [156, 233, 1], [154, 230, 1], [152, 227, 1], [149, 223, 1], [147, 220, 1], [145, 216, 1], [143, 213, 1], [140, 210, 2], [138, 206, 2], [136, 203, 2], [134, 200, 2], [132, 196, 2], [129, 193, 2], [127, 189, 2], [125, 186, 3], [123, 183, 3], [120, 179, 3], [118, 176, 3], [116, 172, 3], [114, 169, 3], [111, 166, 3], [109, 162, 4], [107, 159, 4], [105, 155, 4], [103, 152, 4], [100, 149, 4], [98, 145, 4], [96, 142, 4], [94, 138, 5], [91, 135, 5], [89, 132, 5], [87, 128, 5], [85, 125, 5], [82, 121, 5], [80, 118, 5], [78, 115, 6], [76, 111, 6], [73, 108, 6], [71, 105, 6], [69, 101, 6], [67, 98, 6], [65, 94, 6], [62, 91, 7], [60, 88, 7], [58, 84, 7], [56, 81, 7], [53, 77, 7], [51, 74, 7], [49, 71, 7], [47, 67, 8], [44, 64, 8], [42, 60, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8]];
var o7 = [[36, 0, 255], [36, 0, 255], [36, 0, 255], [36, 0, 255], [245, 20, 0], [245, 24, 0], [245, 29, 0], [245, 31, 0], [247, 33, 0], [247, 33, 0], [247, 37, 0], [247, 41, 0], [247, 41, 0], [247, 41, 0], [247, 45, 0], [247, 45, 0], [247, 47, 0], [247, 49, 0], [247, 49, 0], [247, 54, 0], [247, 54, 0], [247, 56, 0], [247, 58, 0], [247, 58, 0], [250, 62, 0], [250, 62, 0], [250, 62, 0], [250, 67, 0], [250, 67, 0], [250, 67, 0], [250, 69, 0], [250, 71, 0], [250, 71, 0], [250, 75, 0], [250, 75, 0], [250, 78, 0], [250, 79, 0], [250, 79, 0], [250, 79, 0], [250, 81, 0], [250, 83, 0], [250, 83, 0], [250, 87, 0], [250, 87, 0], [250, 90, 0], [250, 92, 0], [252, 93, 0], [252, 93, 0], [252, 97, 0], [252, 97, 0], [252, 97, 0], [252, 97, 0], [252, 101, 0], [252, 101, 0], [252, 101, 0], [252, 101, 0], [252, 105, 0], [252, 105, 0], [252, 107, 0], [252, 109, 0], [252, 109, 0], [252, 113, 13], [255, 118, 20], [255, 119, 23], [255, 121, 25], [255, 126, 33], [255, 132, 38], [255, 133, 40], [255, 135, 43], [255, 141, 48], [255, 144, 54], [255, 150, 59], [255, 152, 61], [255, 153, 64], [255, 159, 69], [255, 163, 77], [255, 165, 79], [255, 168, 82], [255, 174, 87], [255, 176, 92], [255, 181, 97], [255, 183, 99], [255, 186, 102], [255, 191, 107], [255, 197, 115], [255, 201, 120], [255, 203, 123], [255, 205, 125], [255, 209, 130], [255, 214, 138], [255, 216, 141], [255, 218, 143], [255, 224, 150], [255, 228, 156], [255, 234, 163], [255, 236, 165], [255, 238, 168], [255, 243, 173], [255, 248, 181], [255, 252, 186], [253, 252, 186], [250, 252, 187], [244, 250, 180], [238, 247, 176], [234, 246, 173], [231, 245, 169], [223, 240, 163], [217, 237, 157], [211, 235, 150], [205, 233, 146], [200, 230, 142], [195, 227, 136], [189, 224, 132], [184, 222, 126], [180, 220, 123], [174, 217, 119], [169, 214, 114], [163, 212, 108], [160, 210, 105], [154, 207, 101], [148, 204, 96], [143, 201, 93], [138, 199, 88], [134, 197, 84], [130, 194, 81], [126, 191, 77], [117, 189, 70], [115, 186, 68], [112, 184, 64], [106, 181, 60], [100, 179, 55], [94, 176, 49], [92, 174, 47], [90, 173, 45], [81, 168, 37], [75, 166, 33], [71, 163, 28], [66, 160, 24], [62, 158, 21], [56, 156, 14], [51, 153, 0], [51, 153, 0], [51, 153, 0], [50, 150, 0], [50, 150, 0], [50, 150, 0], [50, 150, 0], [49, 148, 0], [49, 148, 0], [49, 148, 0], [48, 145, 0], [48, 145, 0], [48, 145, 0], [48, 145, 0], [48, 143, 0], [48, 143, 0], [48, 143, 0], [48, 143, 0], [47, 140, 0], [47, 140, 0], [47, 140, 0], [47, 140, 0], [46, 138, 0], [46, 138, 0], [46, 138, 0], [46, 138, 0], [45, 135, 0], [45, 135, 0], [45, 135, 0], [45, 135, 0], [44, 133, 0], [44, 133, 0], [44, 133, 0], [43, 130, 0], [43, 130, 0], [43, 130, 0], [43, 130, 0], [43, 130, 0], [43, 130, 0], [42, 128, 0], [42, 128, 0], [42, 128, 0], [42, 125, 0], [42, 125, 0], [42, 125, 0], [42, 125, 0], [41, 122, 0], [41, 122, 0], [41, 122, 0], [41, 122, 0], [40, 120, 0], [40, 120, 0], [40, 120, 0], [40, 120, 0], [40, 120, 0], [39, 117, 0], [39, 117, 0], [39, 117, 0], [39, 117, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0]];
function e5(t5, o11) {
  const e9 = [], n19 = [];
  for (let r6 = 0; r6 < t5.length - 1; r6++)
    e9.push({ type: "algorithmic", algorithm: "esriHSVAlgorithm", fromColor: t5[r6].slice(1), toColor: t5[r6 + 1].slice(1) }), n19.push(t5[r6 + 1][0] - t5[r6][0]);
  const s10 = t5[t5.length - 1][0];
  return R({ type: "multipart", colorRamps: e9 }, { numColors: s10, weights: o11 = o11 ?? n19 });
}
function n5() {
  return e5([[0, 0, 191, 191], [51, 0, 0, 255], [102, 255, 0, 255], [153, 255, 0, 127], [204, 191, 63, 127], [256, 20, 20, 20]]);
}
function s7() {
  const r6 = e5([[0, 255, 255, 255], [70, 0, 255, 0], [80, 205, 173, 193], [100, 150, 150, 150], [110, 120, 51, 100], [130, 120, 100, 200], [140, 28, 3, 144], [160, 6, 0, 55], [180, 10, 25, 30], [201, 6, 7, 27]]);
  for (let t5 = r6.length; t5 < 256; t5++)
    r6.push([6, 27, 7]);
  return r6;
}
function l5() {
  return R({ type: "algorithmic", algorithm: "esriHSVAlgorithm", fromColor: [0, 0, 0], toColor: [255, 255, 255] });
}
function i5() {
  const r6 = [];
  for (let t5 = 0; t5 < 256; t5++) {
    const t6 = [];
    for (let r7 = 0; r7 < 3; r7++)
      t6.push(Math.round(255 * Math.random()));
    r6.push(t6);
  }
  return r6;
}
function a8() {
  return e5([[0, 38, 41, 54], [69, 79, 82, 90], [131, 156, 156, 156], [256, 253, 253, 241]], [0.268, 0.238, 0.495]);
}
function c7(r6) {
  let e9;
  switch (r6) {
    case "elevation":
      e9 = n5();
      break;
    case "gray":
      e9 = l5();
      break;
    case "hillshade":
      e9 = a8();
      break;
    case "ndvi":
      e9 = t3;
      break;
    case "ndvi2":
      e9 = s7();
      break;
    case "ndvi3":
      e9 = o7;
      break;
    case "random":
      e9 = i5();
  }
  return e9 ? (e9 = e9.map((r7, t5) => [t5, ...r7]), e9) : null;
}

// node_modules/@arcgis/core/layers/support/rasterFunctions/ColormapFunction.js
var c8 = class extends p6 {
  constructor() {
    super(...arguments), this.functionName = "Colormap", this.functionArguments = null, this.rasterArgumentNames = ["raster"], this.isNoopProcess = true;
  }
  _bindSourceRasters() {
    const o11 = this.sourceRasterInfos[0];
    if (o11.bandCount > 1)
      return { success: false, supportsGPU: false, error: "colormap-function: source data must be single band" };
    let { colormap: r6, colormapName: s10, colorRamp: t5, colorRampName: e9 } = this.functionArguments;
    if (!(r6 == null ? void 0 : r6.length))
      if (t5)
        r6 = w2(t5, { interpolateAlpha: true });
      else if (e9) {
        const o12 = c3(e9);
        o12 && (r6 = w2(o12));
      } else
        s10 && (r6 = c7(s10));
    if (!(r6 == null ? void 0 : r6.length))
      return { success: false, supportsGPU: false, error: "colormap-function: missing colormap argument" };
    this.outputPixelType = this._getOutputPixelType("u8");
    const c26 = o11.clone();
    return c26.pixelType = this.outputPixelType, c26.colormap = r6, c26.bandCount = 1, this.rasterInfo = c26, { success: true, supportsGPU: true };
  }
  _processPixels(o11) {
    var _a;
    return (_a = o11.pixelBlocks) == null ? void 0 : _a[0];
  }
};
e([y({ json: { write: true, name: "rasterFunction" } })], c8.prototype, "functionName", void 0), e([y({ type: d4, json: { write: true, name: "rasterFunctionArguments" } })], c8.prototype, "functionArguments", void 0), e([y()], c8.prototype, "rasterArgumentNames", void 0), e([y()], c8.prototype, "isNoopProcess", void 0), e([y({ json: { write: true } })], c8.prototype, "indexedColormap", void 0), c8 = e([a2("esri.layers.support.rasterFunctions.ColormapFunction")], c8);
var u7 = c8;

// node_modules/@arcgis/core/layers/support/rasterFunctions/CompositeBandFunctionArguments.js
var a9;
var c9 = a9 = class extends p5 {
  constructor() {
    super(...arguments), this.rasters = [];
  }
  writeRasters(r6, s10) {
    s10.rasters = r6.map((r7) => "number" == typeof r7 || "string" == typeof r7 ? r7 : r7.toJSON());
  }
  clone() {
    return new a9({ rasters: a(this.rasters) });
  }
};
e([y({ json: { write: true } })], c9.prototype, "rasters", void 0), e([r("rasters")], c9.prototype, "writeRasters", null), c9 = a9 = e([a2("esri.layers.support.rasterFunctions.CompositeBandFunctionArguments")], c9);
var n6 = c9;

// node_modules/@arcgis/core/layers/support/rasterFunctions/CompositeBandFunction.js
var i6 = class extends p6 {
  constructor() {
    super(...arguments), this.functionName = "CompositeBand", this.functionArguments = null, this.rasterArgumentNames = ["rasters"];
  }
  _bindSourceRasters() {
    const { sourceRasterInfos: t5 } = this, e9 = t5[0];
    this.outputPixelType = this._getOutputPixelType(e9.pixelType);
    const s10 = e9.clone();
    if (s10.attributeTable = null, s10.colormap = null, s10.pixelType = this.outputPixelType, s10.bandCount = t5.map(({ bandCount: t6 }) => t6).reduce((t6, e10) => t6 + e10), t5.every(({ statistics: t6 }) => null != t6 && t6.length)) {
      const e10 = [];
      t5.forEach(({ statistics: t6 }) => null != t6 && e10.push(...t6)), s10.statistics = e10;
    }
    if (t5.every(({ histograms: t6 }) => null != t6 && t6.length)) {
      const e10 = [];
      t5.forEach(({ histograms: t6 }) => null != t6 && e10.push(...t6)), s10.histograms = e10;
    }
    s10.bandCount > 1 && (s10.colormap = null, s10.attributeTable = null);
    const r6 = t5.every((t6) => {
      var _a;
      return (_a = t6.keyProperties.BandProperties) == null ? void 0 : _a.length;
    }) ? t5.flatMap((t6) => t6.keyProperties.BandProperties) : void 0;
    s10.keyProperties = { ...s10.keyProperties, BandProperties: r6 }, this.rasterInfo = s10;
    return { success: true, supportsGPU: s10.bandCount <= 3 };
  }
  _processPixels(t5) {
    const { pixelBlocks: e9 } = t5;
    if (!e9)
      return null;
    const s10 = e9 == null ? void 0 : e9[0];
    return null == s10 ? null : r2(e9);
  }
  _getWebGLParameters() {
    return { bandCount: this.rasterInfo.bandCount };
  }
};
e([y({ json: { write: true, name: "rasterFunction" } })], i6.prototype, "functionName", void 0), e([y({ type: n6, json: { write: true, name: "rasterFunctionArguments" } })], i6.prototype, "functionArguments", void 0), e([y()], i6.prototype, "rasterArgumentNames", void 0), i6 = e([a2("esri.layers.support.rasterFunctions.CompositeBandFunction")], i6);
var a10 = i6;

// node_modules/@arcgis/core/layers/support/rasterFunctionConstants.js
var l6 = { userDefined: -1, lineDetectionHorizontal: 0, lineDetectionVertical: 1, lineDetectionLeftDiagonal: 2, lineDetectionRightDiagonal: 3, gradientNorth: 4, gradientWest: 5, gradientEast: 6, gradientSouth: 7, gradientNorthEast: 8, gradientNorthWest: 9, smoothArithmeticMean: 10, smoothing3x3: 11, smoothing5x5: 12, sharpening3x3: 13, sharpening5x5: 14, laplacian3x3: 15, laplacian5x5: 16, sobelHorizontal: 17, sobelVertical: 18, sharpen: 19, sharpen2: 20, pointSpread: 21, none: 255 };
var D = { plus: 1, minus: 2, times: 3, sqrt: 4, power: 5, abs: 10, divide: 23, exp: 25, exp10: 26, exp2: 27, int: 30, float: 32, ln: 35, log10: 36, log2: 37, mod: 44, negate: 45, roundDown: 48, roundUp: 49, square: 53, floatDivide: 64, floorDivide: 65 };
var h3 = { bitwiseAnd: 11, bitwiseLeftShift: 12, bitwiseNot: 13, bitwiseOr: 14, bitwiseRightShift: 15, bitwiseXOr: 16, booleanAnd: 17, booleanNot: 18, booleanOr: 19, booleanXOr: 20, equalTo: 24, greaterThan: 28, greaterThanEqual: 29, lessThan: 33, lessThanEqual: 34, isNull: 31, notEqual: 46 };
var u8 = { acos: 6, asin: 7, atan: 8, atanh: 9, cos: 21, cosh: 22, sin: 51, sinh: 52, tan: 56, tanh: 57, acosh: 59, asinh: 60, atan2: 61 };
var s8 = { majority: 38, max: 39, mean: 40, med: 41, min: 42, minority: 43, range: 47, stddev: 54, sum: 55, variety: 58, majorityIgnoreNoData: 66, maxIgnoreNoData: 67, meanIgnoreNoData: 68, medIgnoreNoData: 69, minIgnoreNoData: 70, minorityIgnoreNoData: 71, rangeIgnoreNoData: 72, stddevIgnoreNoData: 73, sumIgnoreNoData: 74, varietyIgnoreNoData: 75 };
var p10 = { setNull: 50, conditional: 78 };
var d5 = { ...D, ...h3, ...u8, ...s8, ...p10 };

// node_modules/@arcgis/core/layers/support/rasterFunctions/convolutionUtils.js
var n7 = /* @__PURE__ */ new Map();
function o8(t5) {
  const e9 = Math.sqrt(t5.length), n19 = t5.slice(0, e9), o11 = [1];
  for (let l13 = 1; l13 < e9; l13++) {
    let n20 = null;
    for (let o12 = 0; o12 < e9; o12++) {
      const r6 = t5[o12 + l13 * e9], s10 = t5[o12];
      if (null == n20)
        if (0 === s10) {
          if (r6)
            return { separable: false, row: null, col: null };
        } else
          n20 = r6 / s10;
      else if (r6 / s10 !== n20)
        return { separable: false, row: null, col: null };
    }
    if (null == n20)
      return { separable: false, row: null, col: null };
    o11.push(n20);
  }
  return { separable: true, row: n19, col: o11 };
}
function l7(t5, e9, n19, o11, l13, r6, s10) {
  const i19 = new Float32Array(e9 * n19), a25 = r6.length, c26 = s10 ? 0 : o11, h6 = s10 ? o11 : 0, f5 = s10 ? 1 : e9;
  for (let p21 = c26; p21 < n19 - c26; p21++) {
    const n20 = p21 * e9;
    for (let s11 = h6; s11 < e9 - h6; s11++) {
      if (l13 && !l13[n20 + s11])
        continue;
      let e10 = 0;
      for (let l14 = 0; l14 < a25; l14++)
        e10 += t5[n20 + s11 + (l14 - o11) * f5] * r6[l14];
      i19[n20 + s11] = e10;
    }
  }
  return i19;
}
function r4(t5, e9, n19, o11, l13, r6, s10) {
  const i19 = new Float32Array(e9 * n19), a25 = Math.floor(o11 / 2), c26 = Math.floor(l13 / 2);
  for (let h6 = a25; h6 < n19 - a25; h6++) {
    const n20 = h6 * e9;
    for (let h7 = c26; h7 < e9 - c26; h7++) {
      if (r6 && !r6[n20 + h7])
        continue;
      let f5 = 0;
      for (let r7 = 0; r7 < o11; r7++)
        for (let o12 = 0; o12 < l13; o12++)
          f5 += t5[n20 + h7 + (r7 - a25) * e9 + o12 - c26] * s10[r7 * l13 + o12];
      i19[n20 + h7] = f5;
    }
  }
  return i19;
}
function s9(e9, n19, o11 = true) {
  const { pixels: l13, width: s10, height: a25, pixelType: c26, mask: h6 } = e9, f5 = l13.length, p21 = [], { kernel: u15, rows: g5, cols: x4 } = n19;
  for (let t5 = 0; t5 < f5; t5++) {
    const e10 = r4(l13[t5], s10, a25, g5, x4, h6, u15);
    o11 && i7(e10, s10, a25, g5, x4), p21.push(e10);
  }
  return new u({ width: s10, height: a25, pixelType: c26, pixels: p21, mask: h6 });
}
function i7(t5, e9, n19, o11, l13) {
  const r6 = Math.floor(o11 / 2);
  for (let i19 = 0; i19 < r6; i19++)
    for (let o12 = 0; o12 < e9; o12++)
      t5[i19 * e9 + o12] = t5[(l13 - 1 - i19) * e9 + o12], t5[(n19 - 1 - i19) * e9 + o12] = t5[(n19 - l13 + i19) * e9 + o12];
  const s10 = Math.floor(l13 / 2);
  for (let i19 = 0; i19 < n19; i19++) {
    const n20 = i19 * e9;
    for (let o12 = 0; o12 < s10; o12++)
      t5[n20 + o12] = t5[n20 + l13 - 1 - o12], t5[n20 + e9 - o12 - 1] = t5[n20 + e9 + o12 - l13];
  }
}
function a11(e9, n19, o11, r6 = true) {
  const { pixels: s10, width: a25, height: c26, pixelType: h6, mask: f5 } = e9, p21 = s10.length, u15 = [], g5 = n19.length, x4 = o11.length, w6 = Math.floor(g5 / 2), m8 = Math.floor(x4 / 2);
  for (let t5 = 0; t5 < p21; t5++) {
    let e10 = l7(s10[t5], a25, c26, w6, f5, n19, true);
    e10 = l7(e10, a25, c26, m8, f5, o11, false), r6 && i7(e10, a25, c26, g5, x4), u15.push(e10);
  }
  return new u({ width: a25, height: c26, pixelType: h6, pixels: u15, mask: f5 });
}
function c10(t5, e9) {
  const n19 = o8(e9.kernel), l13 = false !== e9.mirrorEdges, r6 = n19.separable ? a11(t5, n19.row, n19.col, l13) : s9(t5, e9, l13), { outputPixelType: i19 } = e9;
  return i19 && r6.clamp(i19), r6;
}
n7.set(l6.none, [0, 0, 0, 0, 1, 0, 0, 0, 0]), n7.set(l6.lineDetectionHorizontal, [-1, -1, -1, 2, 2, 2, -1, -1, -1]), n7.set(l6.lineDetectionVertical, [-1, 2, -1, -1, 2, -1, -1, 2, -1]), n7.set(l6.lineDetectionLeftDiagonal, [2, -1, -1, -1, 2, -1, -1, -1, 2]), n7.set(l6.lineDetectionRightDiagonal, [-1, -1, 2, -1, 2, -1, 2, -1, -1]), n7.set(l6.gradientNorth, [-1, -2, -1, 0, 0, 0, 1, 2, 1]), n7.set(l6.gradientWest, [-1, 0, 1, -2, 0, 2, -1, 0, 1]), n7.set(l6.gradientEast, [1, 0, -1, 2, 0, -2, 1, 0, -1]), n7.set(l6.gradientSouth, [1, 2, 1, 0, 0, 0, -1, -2, -1]), n7.set(l6.gradientNorthEast, [0, -1, -2, 1, 0, -1, 2, 1, 0]), n7.set(l6.gradientNorthWest, [-2, -1, 0, -1, 0, 1, 0, 1, 2]), n7.set(l6.smoothArithmeticMean, [0.111111111111, 0.111111111111, 0.111111111111, 0.111111111111, 0.111111111111, 0.111111111111, 0.111111111111, 0.111111111111, 0.111111111111]), n7.set(l6.smoothing3x3, [0.0625, 0.125, 0.0625, 0.125, 0.25, 0.125, 0.0625, 0.125, 0.0625]), n7.set(l6.smoothing5x5, [1, 1, 1, 1, 1, 1, 4, 4, 4, 1, 1, 4, 12, 4, 1, 1, 4, 4, 4, 1, 1, 1, 1, 1, 1]), n7.set(l6.sharpening3x3, [-1, -1, -1, -1, 9, -1, -1, -1, -1]), n7.set(l6.sharpening5x5, [-1, -3, -4, -3, -1, -3, 0, 6, 0, -3, -4, 6, 21, 6, -4, -3, 0, 6, 0, -3, -1, -3, -4, -3, -1]), n7.set(l6.laplacian3x3, [0, -1, 0, -1, 4, -1, 0, -1, 0]), n7.set(l6.laplacian5x5, [0, 0, -1, 0, 0, 0, -1, -2, -1, 0, -1, -2, 17, -2, -1, 0, -1, -2, -1, 0, 0, 0, -1, 0, 0]), n7.set(l6.sobelHorizontal, [-1, -2, -1, 0, 0, 0, 1, 2, 1]), n7.set(l6.sobelVertical, [-1, 0, 1, -2, 0, 2, -1, 0, 1]), n7.set(l6.sharpen, [0, -0.25, 0, -0.25, 2, -0.25, 0, -0.25, 0]), n7.set(l6.sharpen2, [-0.25, -0.25, -0.25, -0.25, 3, -0.25, -0.25, -0.25, -0.25]), n7.set(l6.pointSpread, [-0.627, 0.352, -0.627, 0.352, 2.923, 0.352, -0.627, 0.352, -0.627]);

// node_modules/@arcgis/core/layers/support/rasterFunctions/ConvolutionFunctionArguments.js
var p11;
var c11 = p11 = class extends p5 {
  constructor() {
    super(...arguments), this.rows = 3, this.cols = 3, this.kernel = [0, 0, 0, 0, 1, 0, 0, 0, 0];
  }
  set convolutionType(o11) {
    this._set("convolutionType", o11);
    const t5 = n7.get(o11);
    if (!t5 || o11 === l6.userDefined || o11 === l6.none)
      return;
    const s10 = Math.sqrt(t5.length);
    this._set("kernel", t5), this._set("cols", s10), this._set("rows", s10);
  }
  clone() {
    return new p11({ cols: this.cols, rows: this.rows, kernel: [...this.kernel], convolutionType: this.convolutionType, raster: a(this.raster) });
  }
};
e([y({ json: { type: Number, write: true } })], c11.prototype, "rows", void 0), e([y({ json: { type: Number, write: true } })], c11.prototype, "cols", void 0), e([y({ json: { name: "type", type: Number, write: true } })], c11.prototype, "convolutionType", null), e([y({ json: { type: [Number], write: true } })], c11.prototype, "kernel", void 0), c11 = p11 = e([a2("esri.layers.support.rasterFunctions.ConvolutionFunctionArguments")], c11);
var u9 = c11;

// node_modules/@arcgis/core/layers/support/rasterFunctions/ConvolutionFunction.js
var c12 = 25;
var p12 = class extends p6 {
  constructor() {
    super(...arguments), this.functionName = "Convolution", this.rasterArgumentNames = ["raster"];
  }
  _bindSourceRasters() {
    const { convolutionType: t5, rows: e9, cols: s10, kernel: r6 } = this.functionArguments;
    if (!Object.values(l6).includes(t5))
      return { success: false, supportsGPU: false, error: `convolution-function: the specified kernel type is not supported ${t5}` };
    if (t5 !== l6.none && e9 * s10 !== r6.length)
      return { success: false, supportsGPU: false, error: "convolution-function: the specified rows and cols do not match the length of the kernel" };
    const n19 = this.sourceRasterInfos[0];
    this.outputPixelType = this._getOutputPixelType(n19.pixelType);
    const i19 = n19.clone();
    i19.pixelType = this.outputPixelType;
    const u15 = [l6.none, l6.sharpen, l6.sharpen2, l6.sharpening3x3, l6.sharpening5x5];
    "u8" === this.outputPixelType || u15.includes(t5) || (i19.statistics = null, i19.histograms = null), i19.colormap = null, i19.attributeTable = null, this.rasterInfo = i19;
    return { success: true, supportsGPU: r6.length <= c12 };
  }
  _processPixels(t5) {
    var _a;
    const e9 = (_a = t5.pixelBlocks) == null ? void 0 : _a[0];
    if (null == e9 || this.functionArguments.convolutionType === l6.none)
      return e9;
    let { kernel: s10, rows: r6, cols: n19 } = this.functionArguments;
    const i19 = s10.reduce((t6, e10) => t6 + e10);
    return 0 !== i19 && 1 !== i19 && (s10 = s10.map((t6) => t6 / i19)), c10(e9, { kernel: s10, rows: r6, cols: n19, outputPixelType: this.outputPixelType });
  }
  _getWebGLParameters() {
    let { kernel: t5 } = this.functionArguments;
    const e9 = t5.reduce((t6, e10) => t6 + e10);
    0 !== e9 && 1 !== e9 && (t5 = t5.map((t6) => t6 / e9));
    const s10 = new Float32Array(c12);
    return s10.set(t5), { kernelRows: this.functionArguments.rows, kernelCols: this.functionArguments.cols, kernel: s10, clampRange: s4(this.outputPixelType) };
  }
};
e([y({ json: { write: true, name: "rasterFunction" } })], p12.prototype, "functionName", void 0), e([y({ type: u9, json: { write: true, name: "rasterFunctionArguments" } })], p12.prototype, "functionArguments", void 0), e([y()], p12.prototype, "rasterArgumentNames", void 0), p12 = e([a2("esri.layers.support.rasterFunctions.ConvolutionFunction")], p12);
var l8 = p12;

// node_modules/@arcgis/core/layers/support/rasterFunctions/CurvatureFunctionArguments.js
var c13;
var u10 = new s2({ 0: "standard", 1: "platform", 2: "profile" }, { useNumericKeys: true });
var i8 = c13 = class extends p5 {
  constructor() {
    super(...arguments), this.curvatureType = "standard", this.zFactor = 1;
  }
  readCurvatureType(r6, e9) {
    return u10.fromJSON(e9.type ?? e9.curvatureType ?? 0);
  }
  clone() {
    return new c13({ curvatureType: this.curvatureType, zFactor: this.zFactor, raster: this.raster });
  }
};
e([y({ json: { write: { target: "type" } } }), o2(u10)], i8.prototype, "curvatureType", void 0), e([o("curvatureType", ["type", "curvatureType"])], i8.prototype, "readCurvatureType", null), e([y({ type: Number, json: { write: true } })], i8.prototype, "zFactor", void 0), i8 = c13 = e([a2("esri.layers.support.rasterFunctions.CurvatureFunctionArguments")], i8);
var n8 = i8;

// node_modules/@arcgis/core/layers/support/rasterFunctions/CurvatureFunction.js
var n9 = class extends p6 {
  constructor() {
    super(...arguments), this.functionName = "Curvature", this.functionArguments = null, this.rasterArgumentNames = ["raster"], this.isGCS = false;
  }
  _bindSourceRasters() {
    var _a;
    this.outputPixelType = this._getOutputPixelType("f32");
    const t5 = this.sourceRasterInfos[0].clone();
    return t5.pixelType = this.outputPixelType, t5.statistics = null, t5.histograms = null, t5.colormap = null, t5.attributeTable = null, t5.bandCount = 1, this.rasterInfo = t5, this.isGCS = ((_a = t5.spatialReference) == null ? void 0 : _a.isGeographic) ?? false, { success: true, supportsGPU: true };
  }
  _processPixels(t5) {
    var _a;
    const r6 = (_a = t5.pixelBlocks) == null ? void 0 : _a[0];
    if (null == r6)
      return null;
    const { zFactor: s10, curvatureType: e9 } = this.functionArguments, { extent: o11, primaryPixelSizes: n19 } = t5, a25 = n19 == null ? void 0 : n19[0], c26 = a25 ?? (o11 ? { x: o11.width / r6.width, y: o11.height / r6.height } : { x: 1, y: 1 }), p21 = this.isGCS && s10 >= 1 ? s10 * s5 : s10;
    return u2(r6, { zFactor: p21, curvatureType: e9, resolution: c26 });
  }
  _getWebGLParameters() {
    const { zFactor: t5, curvatureType: r6 } = this.functionArguments;
    return { curvatureType: r6, zFactor: this.isGCS && t5 >= 1 ? t5 * s5 : t5 };
  }
};
e([y({ json: { write: true, name: "rasterFunction" } })], n9.prototype, "functionName", void 0), e([y({ type: n8, json: { write: true, name: "rasterFunctionArguments" } })], n9.prototype, "functionArguments", void 0), e([y()], n9.prototype, "rasterArgumentNames", void 0), e([y({ json: { write: true } })], n9.prototype, "isGCS", void 0), n9 = e([a2("esri.layers.support.rasterFunctions.CurvatureFunction")], n9);
var a12 = n9;

// node_modules/@arcgis/core/layers/support/rasterFunctions/ExtractBandFunctionArguments.js
var a13;
var i9 = a13 = class extends p5 {
  constructor() {
    super(...arguments), this.bandIds = [], this.bandNames = [], this.bandWavelengths = [], this.missingBandAction = l2.bestMatch;
  }
  clone() {
    return new a13({ bandIds: [...this.bandIds], bandNames: [...this.bandNames], missingBandAction: this.missingBandAction, method: this.method, wavelengthMatchTolerance: this.wavelengthMatchTolerance });
  }
};
e([y({ json: { write: true } })], i9.prototype, "bandIds", void 0), e([y({ json: { write: true } })], i9.prototype, "bandNames", void 0), e([y({ json: { write: true } })], i9.prototype, "bandWavelengths", void 0), e([o2({ 0: "name", 1: "wavelength", 2: "id" })], i9.prototype, "method", void 0), e([y({ json: { write: true } })], i9.prototype, "missingBandAction", void 0), e([y({ json: { write: true } })], i9.prototype, "wavelengthMatchTolerance", void 0), i9 = a13 = e([a2("esri.layers.support.rasterFunctions.ExtractBandFunctionArguments")], i9);
var c14 = i9;

// node_modules/@arcgis/core/layers/support/rasterFunctions/ExtractBandFunction.js
var i10 = class extends p6 {
  constructor() {
    super(...arguments), this.functionName = "ExtractBand", this.functionArguments = null, this.rasterArgumentNames = ["raster"];
  }
  _bindSourceRasters() {
    var _a;
    const { functionArguments: t5, sourceRasterInfos: e9 } = this, n19 = e9[0], { method: s10, bandNames: r6, bandWavelengths: a25, bandIds: i19, missingBandAction: l13 } = t5, u15 = (r6 == null ? void 0 : r6.length) && ("name" === s10 || "id" !== s10 && !(i19 == null ? void 0 : i19.length)), c26 = (a25 == null ? void 0 : a25.length) && ("wavelength" === s10 || "id" !== s10 && !(i19 == null ? void 0 : i19.length)), h6 = l13 === l2.fail, d7 = u15 ? this._matchBandNames(n19, r6) : c26 ? this._matchBandWavelengths(n19, a25, h6) : this._matchBandIds(n19, i19, h6);
    if (null == d7) {
      return { success: false, supportsGPU: false, error: `extract-band-function: Invalid ${u15 ? "band names" : c26 ? "band wavelengths" : "band ids"} for the imagery data source` };
    }
    this.functionArguments.bandIds = d7, this.functionArguments.method = "id", this.outputPixelType = this._getOutputPixelType("f32");
    const m8 = n19.clone();
    m8.pixelType = this.outputPixelType, m8.bandCount = d7.length;
    const { statistics: p21, histograms: g5 } = m8;
    null != p21 && p21.length && (m8.statistics = d7.map((t6) => p21[t6] || p21[p21.length - 1])), null != g5 && g5.length && (m8.histograms = d7.map((t6) => g5[t6] || g5[g5.length - 1]));
    let f5 = (_a = m8.keyProperties) == null ? void 0 : _a.BandProperties;
    (f5 == null ? void 0 : f5.length) && (f5 = d7.map((t6) => t6 >= f5.length ? f5[f5.length - 1] : f5[t6]), m8.keyProperties = { ...m8.keyProperties, BandProperties: f5 }), this.rasterInfo = m8;
    return { success: true, supportsGPU: m8.bandCount <= 3 };
  }
  _processPixels(t5) {
    var _a;
    const e9 = (_a = t5.pixelBlocks) == null ? void 0 : _a[0];
    if (null == e9)
      return null;
    const n19 = e9.pixels.length, s10 = this.functionArguments.bandIds.map((t6) => t6 >= n19 ? n19 - 1 : t6);
    return e9.extractBands(s10);
  }
  _getWebGLParameters() {
    let t5;
    if (this.isInputBandIdsSwizzled)
      t5 = this.swizzledBandSelection.length ? this.swizzledBandSelection : [0, 1, 2];
    else {
      t5 = [...this.functionArguments.bandIds], 0 === t5.length ? t5 = [0, 1, 2] : t5.length < 3 && (t5[1] = t5[1] ?? t5[0], t5[2] = t5[2] ?? t5[1]);
      for (let e9 = 0; e9 < 3; e9++)
        t5[e9] = Math.min(t5[e9], 2);
    }
    return { bandIndexMat3: i2(t5) };
  }
  _getInputBandIds(t5) {
    const e9 = t5.length;
    return this.functionArguments.bandIds.map((t6) => t6 >= e9 ? e9 - 1 : t6).map((e10) => t5[e10]);
  }
  _matchBandNames(t5, e9) {
    const n19 = t5.bandInfos.map(({ name: t6 }) => t6.toLowerCase()), s10 = [];
    for (let r6 = 0; r6 < e9.length; r6++) {
      const t6 = e9[r6].toLowerCase();
      let a25 = n19.indexOf(t6);
      if (-1 === a25 && "nearinfrared" === t6 && (a25 = n19.findIndex((t7) => t7.startsWith("nearinfrared_1")), -1 === a25 && (a25 = n19.findIndex((t7) => t7.startsWith("nearinfrared")))), -1 === a25)
        return null;
      s10.push(a25);
    }
    return s10;
  }
  _matchBandIds(t5, e9, n19) {
    const { bandCount: s10 } = t5;
    return !(e9 == null ? void 0 : e9.length) || n19 && e9.some((t6) => t6 < 0 || t6 >= s10) ? null : e9;
  }
  _matchBandWavelengths(t5, e9, n19) {
    const { bandInfos: s10 } = t5, r6 = [];
    for (let i19 = 0; i19 < s10.length; i19++) {
      const { minWavelength: t6, maxWavelength: e10 } = s10[i19];
      if (!t6 || !e10)
        return null;
      r6.push({ minWavelength: t6, maxWavelength: e10 });
    }
    const { wavelengthMatchTolerance: a25 } = this.functionArguments, o11 = [];
    for (let i19 = 0; i19 < e9.length; i19++) {
      const t6 = e9[i19];
      let s11 = false, l13 = -1, u15 = Number.MAX_VALUE;
      for (let e10 = 0; e10 < r6.length; e10++) {
        const n20 = r6[e10], a26 = t6 >= n20.minWavelength && t6 <= n20.maxWavelength, o12 = Math.abs(t6 - (n20.minWavelength + n20.maxWavelength) / 2);
        a26 ? o12 < u15 && (s11 = true, l13 = e10, u15 = o12) : !s11 && o12 < u15 && (l13 = e10, u15 = o12);
      }
      if (!s11 && a25 && u15 < a25 && (s11 = true), !s11 && n19)
        return null;
      o11.push(l13);
    }
    return o11;
  }
};
e([y({ json: { write: true, name: "rasterFunction" } })], i10.prototype, "functionName", void 0), e([y({ type: c14, json: { write: true, name: "rasterFunctionArguments" } })], i10.prototype, "functionArguments", void 0), e([y()], i10.prototype, "rasterArgumentNames", void 0), i10 = e([a2("esri.layers.support.rasterFunctions.ExtractBandFunction")], i10);
var l9 = i10;

// node_modules/@arcgis/core/layers/support/rasterFunctions/LocalFunctionArguments.js
var a14;
var i11 = a14 = class extends p5 {
  constructor() {
    super(...arguments), this.rasters = [], this.processAsMultiband = true;
  }
  writeRasters(r6, s10) {
    s10.rasters = r6.map((r7) => "number" == typeof r7 || "string" == typeof r7 ? r7 : r7.toJSON());
  }
  clone() {
    return new a14({ operation: this.operation, processAsMultiband: this.processAsMultiband, rasters: a(this.rasters) });
  }
};
e([y({ json: { write: true } })], i11.prototype, "operation", void 0), e([y({ json: { write: true } })], i11.prototype, "rasters", void 0), e([r("rasters")], i11.prototype, "writeRasters", null), e([y({ json: { write: true } })], i11.prototype, "processAsMultiband", void 0), i11 = a14 = e([a2("esri.layers.support.rasterFunctions.LocalFunctionArguments")], i11);
var c15 = i11;

// node_modules/@arcgis/core/layers/support/rasterFunctions/localUtils.js
var o9 = /* @__PURE__ */ new Map();
function a15(t5) {
  return o9.get(t5);
}
o9.set(u8.acos, [0, Math.PI]), o9.set(u8.asin, [-Math.PI / 2, Math.PI / 2]), o9.set(u8.atan, [-Math.PI / 2, Math.PI / 2]), o9.set(u8.cos, [-1, 1]), o9.set(u8.sin, [-1, 1]), o9.set(h3.booleanAnd, [0, 1]), o9.set(h3.booleanNot, [0, 1]), o9.set(h3.booleanOr, [0, 1]), o9.set(h3.booleanXOr, [0, 1]), o9.set(h3.equalTo, [0, 1]), o9.set(h3.notEqual, [0, 1]), o9.set(h3.greaterThan, [0, 1]), o9.set(h3.greaterThanEqual, [0, 1]), o9.set(h3.lessThan, [0, 1]), o9.set(h3.lessThanEqual, [0, 1]), o9.set(h3.isNull, [0, 1]);
var l10 = [0, 2, 2, 2, 1, 2, 1, 1, 1, 1, 1, 2, 2, 1, 2, 2, 2, 2, 1, 2, 2, 1, 1, 2, 2, 1, 1, 1, 2, 2, 1, 1, 1, 2, 2, 1, 1, 1, 999, 999, 999, 999, 999, 999, 2, 1, 2, 999, 1, 1, 2, 1, 1, 1, 999, 999, 1, 1, 999, 1, 1, 2, 999, 999, 2, 2, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 3, 999, 3];
function c16(t5, e9 = false) {
  const n19 = t5.map((t6) => t6.mask), r6 = n19.filter((t6) => null != t6), s10 = t5[0].pixels[0].length;
  if (0 === r6.length)
    return new Uint8Array(s10).fill(255);
  const o11 = r6[0], a25 = new Uint8Array(o11);
  if (1 === r6.length)
    return a25;
  if (!e9) {
    for (let t6 = 1; t6 < r6.length; t6++) {
      const e10 = r6[t6];
      for (let t7 = 0; t7 < a25.length; t7++)
        a25[t7] && (a25[t7] = e10[t7] ? 255 : 0);
    }
    return a25;
  }
  if (r6.length !== n19.length)
    return new Uint8Array(s10).fill(255);
  for (let l13 = 1; l13 < r6.length; l13++) {
    const t6 = r6[l13];
    for (let e10 = 0; e10 < a25.length; e10++)
      0 === a25[e10] && (a25[e10] = t6[e10] ? 255 : 0);
  }
  return a25;
}
function f3(e9, n19, r6) {
  const [s10, o11] = e9, a25 = s10.length, l13 = u.createEmptyBand(r6, a25);
  for (let t5 = 0; t5 < a25; t5++)
    n19 && !n19[t5] || (l13[t5] = s10[t5] + o11[t5]);
  return l13;
}
function u11(e9, n19, r6) {
  const [s10] = e9, o11 = s10.length, a25 = u.createEmptyBand("f32", o11);
  return a25.set(s10), a25;
}
function h4(e9, n19, r6) {
  const [s10, o11] = e9, a25 = s10.length, l13 = u.createEmptyBand(r6, a25);
  for (let t5 = 0; t5 < a25; t5++)
    n19 && !n19[t5] || (l13[t5] = s10[t5] - o11[t5]);
  return l13;
}
function i12(e9, n19, r6) {
  const [s10, o11] = e9, a25 = s10.length, l13 = u.createEmptyBand(r6, a25);
  for (let t5 = 0; t5 < a25; t5++)
    n19 && !n19[t5] || (l13[t5] = s10[t5] * o11[t5]);
  return l13;
}
function g3(e9, n19, r6) {
  const [s10] = e9, o11 = s10.length, a25 = u.createEmptyBand(r6, o11);
  for (let t5 = 0; t5 < o11; t5++)
    n19 && !n19[t5] || (a25[t5] = Math.sign(s10[t5]) * Math.floor(Math.abs(s10[t5])));
  return a25;
}
function p13(e9, n19, r6) {
  const [s10, o11] = e9, a25 = s10.length, l13 = u.createEmptyBand(r6, a25);
  for (let t5 = 0; t5 < a25; t5++)
    n19 && !n19[t5] || (l13[t5] = s10[t5] / o11[t5]);
  return l13;
}
function m4(t5, e9, n19) {
  return p13(t5, e9, "f32");
}
function y4(e9, n19, r6) {
  const [s10, o11] = e9, a25 = s10.length, l13 = u.createEmptyBand(r6, a25);
  for (let t5 = 0; t5 < a25; t5++)
    n19 && !n19[t5] || (l13[t5] = Math.floor(s10[t5] / o11[t5]));
  return l13;
}
function d6(n19, r6, s10, o11) {
  const a25 = n19[0], l13 = a25.length, c26 = u.createEmptyBand(s10, l13);
  if (o11 === u8.atanh) {
    for (let t5 = 0; t5 < l13; t5++)
      if (r6[t5]) {
        const e9 = a25[t5];
        Math.abs(e9) >= 1 ? r6[t5] = 0 : c26[t5] = Math.atanh(e9);
      }
    return c26;
  }
  const f5 = o11 === u8.asin ? Math.asin : Math.acos;
  for (let t5 = 0; t5 < l13; t5++)
    if (r6[t5]) {
      const e9 = a25[t5];
      Math.abs(e9) > 1 ? r6[t5] = 0 : c26[t5] = f5(e9);
    }
  return c26;
}
function M3(e9, n19, r6, s10) {
  const [o11] = e9, a25 = o11.length, l13 = u.createEmptyBand(r6, a25);
  for (let t5 = 0; t5 < a25; t5++)
    n19 && !n19[t5] || (l13[t5] = s10(o11[t5]));
  return l13;
}
function E(e9, n19, r6, s10) {
  const [o11, a25] = e9, l13 = o11.length, c26 = u.createEmptyBand(r6, l13);
  for (let t5 = 0; t5 < l13; t5++)
    n19 && !n19[t5] || (c26[t5] = s10(o11[t5], a25[t5]));
  return c26;
}
function B(e9, n19, r6) {
  const [s10, o11] = e9, a25 = s10.length, l13 = u.createEmptyBand(r6, a25);
  for (let t5 = 0; t5 < a25; t5++)
    n19 && !n19[t5] || (l13[t5] = s10[t5] & o11[t5]);
  return l13;
}
function w4(e9, n19, r6) {
  const [s10, o11] = e9, a25 = s10.length, l13 = u.createEmptyBand(r6, a25);
  for (let t5 = 0; t5 < a25; t5++)
    n19 && !n19[t5] || (l13[t5] = s10[t5] << o11[t5]);
  return l13;
}
function b2(e9, n19, r6) {
  const [s10] = e9, o11 = s10.length, a25 = u.createEmptyBand(r6, o11);
  for (let t5 = 0; t5 < o11; t5++)
    n19 && !n19[t5] || (a25[t5] = ~s10[t5]);
  return a25;
}
function x2(e9, n19, r6) {
  const [s10, o11] = e9, a25 = s10.length, l13 = u.createEmptyBand(r6, a25);
  for (let t5 = 0; t5 < a25; t5++)
    n19 && !n19[t5] || (l13[t5] = s10[t5] | o11[t5]);
  return l13;
}
function A2(e9, n19, r6) {
  const [s10, o11] = e9, a25 = s10.length, l13 = u.createEmptyBand(r6, a25);
  for (let t5 = 0; t5 < a25; t5++)
    n19 && !n19[t5] || (l13[t5] = s10[t5] >> o11[t5]);
  return l13;
}
function k2(e9, n19, r6) {
  const [s10, o11] = e9, a25 = s10.length, l13 = u.createEmptyBand(r6, a25);
  for (let t5 = 0; t5 < a25; t5++)
    n19 && !n19[t5] || (l13[t5] = s10[t5] ^ o11[t5]);
  return l13;
}
function N(e9, n19, r6) {
  const [s10, o11] = e9, a25 = s10.length, l13 = u.createEmptyBand(r6, a25);
  for (let t5 = 0; t5 < a25; t5++)
    n19 && !n19[t5] || (l13[t5] = s10[t5] && o11[t5] ? 1 : 0);
  return l13;
}
function P(e9, n19, r6) {
  const [s10] = e9, o11 = s10.length, a25 = u.createEmptyBand(r6, o11);
  for (let t5 = 0; t5 < o11; t5++)
    n19 && !n19[t5] || (a25[t5] = s10[t5] ? 0 : 1);
  return a25;
}
function T(e9, n19, r6) {
  const [s10, o11] = e9, a25 = s10.length, l13 = u.createEmptyBand(r6, a25);
  for (let t5 = 0; t5 < a25; t5++)
    n19 && !n19[t5] || (l13[t5] = s10[t5] || o11[t5] ? 1 : 0);
  return l13;
}
function q(e9, n19, r6) {
  const [s10, o11] = e9, a25 = s10.length, l13 = u.createEmptyBand(r6, a25);
  for (let t5 = 0; t5 < a25; t5++)
    n19 && !n19[t5] || (l13[t5] = (s10[t5] ? 1 : 0) ^ (o11[t5] ? 1 : 0));
  return l13;
}
function U(e9, n19, r6) {
  const [s10, o11] = e9, a25 = s10.length, l13 = u.createEmptyBand(r6, a25);
  for (let t5 = 0; t5 < a25; t5++)
    n19 && !n19[t5] || (l13[t5] = s10[t5] === o11[t5] ? 1 : 0);
  return l13;
}
function I(e9, n19, r6, s10) {
  const [o11] = e9, a25 = o11.length, l13 = u.createEmptyBand(r6, a25), c26 = s10 === Math.E;
  for (let t5 = 0; t5 < a25; t5++)
    n19 && !n19[t5] || (l13[t5] = c26 ? Math.exp(o11[t5]) : s10 ** o11[t5]);
  return l13;
}
function F2(t5, e9, n19) {
  return I(t5, e9, n19, 10);
}
function j(t5, e9, n19) {
  return I(t5, e9, n19, 2);
}
function z(t5, e9, n19) {
  return I(t5, e9, n19, Math.E);
}
function O(e9, n19, r6, s10) {
  const [o11] = e9, a25 = o11.length, l13 = u.createEmptyBand(r6, a25);
  for (let t5 = 0; t5 < a25; t5++)
    n19 && !n19[t5] || (o11[t5] <= 0 ? n19[t5] = 0 : l13[t5] = s10(o11[t5]));
  return l13;
}
function W(t5, e9, n19) {
  return O(t5, e9, n19, Math.log10);
}
function C(t5, e9, n19) {
  return O(t5, e9, n19, Math.log2);
}
function R2(t5, e9, n19) {
  return O(t5, e9, n19, Math.log);
}
function S(e9, n19, r6) {
  const [s10, o11] = e9, a25 = s10.length, l13 = u.createEmptyBand(r6, a25);
  for (let t5 = 0; t5 < a25; t5++)
    n19 && !n19[t5] || (l13[t5] = s10[t5] > o11[t5] ? 1 : 0);
  return l13;
}
function X(e9, n19, r6) {
  const [s10, o11] = e9, a25 = s10.length, l13 = u.createEmptyBand(r6, a25);
  for (let t5 = 0; t5 < a25; t5++)
    n19 && !n19[t5] || (l13[t5] = s10[t5] >= o11[t5] ? 1 : 0);
  return l13;
}
function v2(e9, n19, r6) {
  const [s10, o11] = e9, a25 = s10.length, l13 = u.createEmptyBand(r6, a25);
  for (let t5 = 0; t5 < a25; t5++)
    n19 && !n19[t5] || (l13[t5] = s10[t5] < o11[t5] ? 1 : 0);
  return l13;
}
function D2(e9, n19, r6) {
  const [s10, o11] = e9, a25 = s10.length, l13 = u.createEmptyBand(r6, a25);
  for (let t5 = 0; t5 < a25; t5++)
    n19 && !n19[t5] || (l13[t5] = s10[t5] <= o11[t5] ? 1 : 0);
  return l13;
}
function G(e9, n19, r6) {
  const [s10] = e9, o11 = s10.length, a25 = u.createEmptyBand(r6, o11);
  if (!n19)
    return a25;
  for (let t5 = 0; t5 < o11; t5++)
    a25[t5] = n19[t5] ? 0 : 1;
  return a25;
}
function H(e9, n19, r6) {
  const [s10, o11] = e9, a25 = s10.length, l13 = u.createEmptyBand(r6, a25);
  for (let t5 = 0; t5 < a25; t5++)
    n19 && !n19[t5] || (l13[t5] = s10[t5] % o11[t5]);
  return l13;
}
function J(e9, n19, r6) {
  const [s10] = e9, o11 = s10.length, a25 = u.createEmptyBand(r6, o11);
  for (let t5 = 0; t5 < o11; t5++)
    n19 && !n19[t5] || (a25[t5] = -s10[t5]);
  return a25;
}
function K(e9, n19, r6) {
  const [s10, o11] = e9, a25 = s10.length, l13 = u.createEmptyBand(r6, a25);
  for (let t5 = 0; t5 < a25; t5++)
    n19 && !n19[t5] || (l13[t5] = s10[t5] === o11[t5] ? 0 : 1);
  return l13;
}
function L(e9, n19, r6) {
  const [s10, o11] = e9, a25 = s10.length, l13 = u.createEmptyBand(r6, a25), c26 = new Uint8Array(a25);
  for (let t5 = 0; t5 < a25; t5++)
    null != n19 && !n19[t5] || 0 !== s10[t5] || (l13[t5] = o11[t5], c26[t5] = 255);
  return { band: l13, mask: c26 };
}
function Q(e9, n19, r6) {
  const [s10, o11, a25] = e9, l13 = s10.length, c26 = u.createEmptyBand(r6, l13);
  for (let t5 = 0; t5 < l13; t5++)
    n19 && !n19[t5] || (c26[t5] = s10[t5] ? o11[t5] : a25[t5]);
  return c26;
}
function V(e9, n19, r6) {
  const s10 = e9.length;
  if (s10 < 2)
    return e9[0];
  const [o11] = e9, a25 = o11.length, l13 = u.createEmptyBand(r6, a25);
  for (let t5 = 0; t5 < a25; t5++)
    if (!n19 || n19[t5]) {
      let n20 = o11[t5];
      for (let r7 = 1; r7 < s10; r7++) {
        const s11 = e9[r7][t5];
        n20 < s11 && (n20 = s11);
      }
      l13[t5] = n20;
    }
  return l13;
}
function Y(e9, n19, r6) {
  const s10 = e9.length;
  if (s10 < 2)
    return e9[0];
  const [o11] = e9, a25 = o11.length, l13 = u.createEmptyBand(r6, a25);
  for (let t5 = 0; t5 < a25; t5++)
    if (!n19 || n19[t5]) {
      let n20 = o11[t5];
      for (let r7 = 1; r7 < s10; r7++) {
        const s11 = e9[r7][t5];
        n20 > s11 && (n20 = s11);
      }
      l13[t5] = n20;
    }
  return l13;
}
function Z(e9, n19, r6) {
  const s10 = e9.length;
  if (s10 < 2)
    return e9[0];
  const [o11] = e9, a25 = o11.length, l13 = u.createEmptyBand(r6, a25);
  for (let t5 = 0; t5 < a25; t5++)
    if (!n19 || n19[t5]) {
      let n20 = o11[t5], r7 = n20;
      for (let o12 = 1; o12 < s10; o12++) {
        const s11 = e9[o12][t5];
        r7 < s11 ? r7 = s11 : n20 > s11 && (n20 = s11);
      }
      l13[t5] = r7 - n20;
    }
  return l13;
}
function $(e9, n19, r6) {
  const s10 = e9.length;
  if (s10 < 2)
    return e9[0];
  const [o11] = e9, a25 = o11.length, l13 = u.createEmptyBand(r6, a25);
  for (let t5 = 0; t5 < a25; t5++)
    if (!n19 || n19[t5]) {
      let n20 = 0;
      for (let r7 = 0; r7 < s10; r7++)
        n20 += e9[r7][t5];
      l13[t5] = n20 / s10;
    }
  return l13;
}
function _(e9, n19, r6) {
  const s10 = e9.length;
  if (s10 < 2)
    return e9[0];
  const [o11] = e9, a25 = o11.length, l13 = u.createEmptyBand(r6, a25);
  for (let t5 = 0; t5 < a25; t5++)
    if (!n19 || n19[t5])
      for (let n20 = 0; n20 < s10; n20++) {
        const r7 = e9[n20];
        l13[t5] += r7[t5];
      }
  return l13;
}
function tt(e9, n19, r6) {
  const s10 = e9.length;
  if (s10 < 2)
    return e9[0];
  const [o11] = e9, a25 = o11.length, l13 = u.createEmptyBand(r6, a25);
  for (let t5 = 0; t5 < a25; t5++)
    if (!n19 || n19[t5]) {
      const n20 = new Float32Array(s10);
      let r7 = 0;
      for (let a26 = 0; a26 < s10; a26++) {
        const s11 = e9[a26];
        r7 += s11[t5], n20[a26] = s11[t5];
      }
      r7 /= s10;
      let o12 = 0;
      for (let t6 = 0; t6 < s10; t6++)
        o12 += (n20[t6] - r7) ** 2;
      l13[t5] = Math.sqrt(o12 / s10);
    }
  return l13;
}
function et(e9, n19, r6) {
  const s10 = e9.length;
  if (s10 < 2)
    return e9[0];
  const o11 = Math.floor(s10 / 2), [a25] = e9, l13 = a25.length, c26 = u.createEmptyBand(r6, l13), f5 = new Float32Array(s10), u15 = s10 % 2 == 1;
  for (let t5 = 0; t5 < l13; t5++)
    if (!n19 || n19[t5]) {
      for (let n20 = 0; n20 < s10; n20++)
        f5[n20] = e9[n20][t5];
      f5.sort(), c26[t5] = u15 ? f5[o11] : (f5[o11] + f5[o11 - 1]) / 2;
    }
  return c26;
}
function nt(e9, n19, r6) {
  const [s10, o11] = e9;
  if (null == o11)
    return s10;
  const a25 = s10.length, l13 = u.createEmptyBand(r6, a25);
  for (let t5 = 0; t5 < a25; t5++)
    n19[t5] && (s10[t5] === o11[t5] ? l13[t5] = s10[t5] : n19[t5] = 0);
  return l13;
}
function rt(e9, n19, r6) {
  const s10 = e9.length;
  if (s10 <= 2)
    return nt(e9, n19, r6);
  const o11 = e9[0].length, a25 = u.createEmptyBand(r6, o11), l13 = /* @__PURE__ */ new Map();
  for (let t5 = 0; t5 < o11; t5++)
    if (!n19 || n19[t5]) {
      let n20;
      l13.clear();
      for (let a26 = 0; a26 < s10; a26++)
        n20 = e9[a26][t5], l13.set(n20, l13.has(n20) ? l13.get(n20) + 1 : 1);
      let r7 = 0, o12 = 0;
      for (const t6 of l13.keys())
        r7 = l13.get(t6), r7 > o12 && (o12 = r7, n20 = t6);
      a25[t5] = n20;
    }
  return a25;
}
function st(e9, n19, r6) {
  const s10 = e9.length;
  if (s10 <= 2)
    return nt(e9, n19, r6);
  const o11 = e9[0].length, a25 = u.createEmptyBand(r6, o11), l13 = /* @__PURE__ */ new Map();
  for (let t5 = 0; t5 < o11; t5++)
    if (!n19 || n19[t5]) {
      let n20;
      l13.clear();
      for (let a26 = 0; a26 < s10; a26++)
        n20 = e9[a26][t5], l13.set(n20, l13.has(n20) ? l13.get(n20) + 1 : 1);
      let r7 = 0, o12 = e9.length;
      for (const t6 of l13.keys())
        r7 = l13.get(t6), r7 < o12 && (o12 = r7, n20 = t6);
      a25[t5] = n20;
    }
  return a25;
}
function ot(e9, n19, r6) {
  const s10 = e9.length;
  if (s10 < 2)
    return e9[0];
  const [o11] = e9, a25 = o11.length, l13 = u.createEmptyBand(r6, a25), c26 = /* @__PURE__ */ new Set();
  for (let t5 = 0; t5 < a25; t5++)
    if (!n19 || n19[t5]) {
      let n20;
      c26.clear();
      for (let r7 = 0; r7 < s10; r7++)
        n20 = e9[r7][t5], c26.add(n20);
      l13[t5] = c26.size;
    }
  return l13;
}
var at = /* @__PURE__ */ new Map();
var lt = /* @__PURE__ */ new Map();
var ct = /* @__PURE__ */ new Map();
var ft = /* @__PURE__ */ new Map();
function ut() {
  at.size || (at.set(4, Math.sqrt), at.set(6, Math.acos), at.set(7, Math.asin), at.set(8, Math.atan), at.set(9, Math.atanh), at.set(10, Math.abs), at.set(21, Math.cos), at.set(22, Math.cosh), at.set(48, Math.floor), at.set(49, Math.ceil), at.set(51, Math.sin), at.set(52, Math.sinh), at.set(56, Math.tan), at.set(57, Math.tanh), at.set(59, Math.acosh), at.set(60, Math.asinh), at.set(65, Math.floor), lt.set(5, Math.pow), lt.set(61, Math.atan2), ct.set(1, f3), ct.set(2, h4), ct.set(3, i12), ct.set(11, B), ct.set(12, w4), ct.set(12, w4), ct.set(13, b2), ct.set(14, x2), ct.set(15, A2), ct.set(16, k2), ct.set(17, N), ct.set(18, P), ct.set(19, T), ct.set(20, q), ct.set(23, p13), ct.set(24, U), ct.set(25, z), ct.set(26, F2), ct.set(27, j), ct.set(28, S), ct.set(29, X), ct.set(30, g3), ct.set(31, G), ct.set(32, u11), ct.set(33, v2), ct.set(34, D2), ct.set(35, R2), ct.set(36, W), ct.set(37, C), ct.set(44, H), ct.set(45, J), ct.set(46, K), ct.set(64, m4), ct.set(65, y4), ct.set(76, Q), ct.set(78, Q), ft.set(38, rt), ft.set(39, V), ft.set(40, $), ft.set(41, et), ft.set(42, Y), ft.set(43, st), ft.set(47, Z), ft.set(54, tt), ft.set(55, _), ft.set(58, ot), ft.set(66, rt), ft.set(67, V), ft.set(68, $), ft.set(69, et), ft.set(70, Y), ft.set(71, st), ft.set(72, Z), ft.set(73, tt), ft.set(74, _), ft.set(75, ot));
}
function ht(t5, e9, n19, r6) {
  let [o11, a25] = s4(n19);
  const l13 = n19.startsWith("u") || n19.startsWith("s");
  l13 && (o11 -= 1e-5, a25 += 1e-5);
  for (let s10 = 0; s10 < e9.length; s10++)
    if (e9[s10]) {
      const n20 = t5[s10];
      isNaN(n20) || n20 < o11 || n20 > a25 ? e9[s10] = 0 : r6[s10] = l13 ? Math.round(n20) : n20;
    }
}
function it(s10, a25, l13 = {}) {
  ut();
  let f5 = c16(s10, a25 >= 66 && a25 <= 75);
  const { outputPixelType: u15 = "f32" } = l13, h6 = !ft.has(a25) || l13.processAsMultiband, i19 = h6 ? s10[0].pixels.length : 1, g5 = [];
  for (let c26 = 0; c26 < i19; c26++) {
    const l14 = ft.has(a25) && !h6 ? s10.flatMap((t5) => t5.pixels) : s10.map((t5) => t5.pixels[c26]);
    let i20, p22 = true;
    if (a25 === p10.setNull) {
      const t5 = L(l14, f5, u15);
      i20 = t5.band, f5 = t5.mask, p22 = false;
    } else if (ct.has(a25)) {
      i20 = ct.get(a25)(l14, f5, "f64");
    } else if (at.has(a25))
      i20 = a25 === u8.asin || a25 === u8.acos || a25 === u8.atanh ? d6(l14, f5, "f64", a25) : M3(l14, f5, "f64", at.get(a25));
    else if (lt.has(a25))
      i20 = E(l14, f5, "f64", lt.get(a25));
    else if (ft.has(a25)) {
      i20 = ft.get(a25)(l14, f5, "f64");
    } else
      i20 = l14[0], p22 = false;
    if (p22 && a25 !== h3.isNull && !o9.has(a25)) {
      const e9 = u.createEmptyBand(u15, i20.length);
      f5 || (f5 = new Uint8Array(i20.length).fill(255)), ht(i20, f5, u15, e9), i20 = e9;
    }
    g5.push(i20);
  }
  const p21 = s10[0];
  return new u({ width: p21.width, height: p21.height, pixelType: u15, mask: a25 === h3.isNull ? null : f5, pixels: g5 });
}

// node_modules/@arcgis/core/layers/support/rasterFunctions/LocalFunction.js
var p14 = class extends p6 {
  constructor() {
    super(...arguments), this.functionName = "Local", this.functionArguments = null, this.rasterArgumentNames = ["rasters"];
  }
  _bindSourceRasters() {
    const { sourceRasterInfos: t5 } = this, s10 = t5[0], { bandCount: o11 } = s10, { processAsMultiband: e9 } = this.functionArguments;
    if (t5.some((t6) => t6.bandCount !== o11))
      return { success: false, supportsGPU: false, error: "local-function: input rasters do not have same band count" };
    const { operation: r6, rasters: n19 } = this.functionArguments, i19 = l10[r6];
    if (!(999 === i19 || n19.length === i19 || n19.length <= 1 && 1 === i19))
      return { success: false, supportsGPU: false, error: `local-function: the length of functionArguments.rasters does not match operation's requirement: ${i19}` };
    this.outputPixelType = this._getOutputPixelType("f32");
    const c26 = s10.clone();
    c26.pixelType = this.outputPixelType, c26.statistics = null, c26.histograms = null, c26.colormap = null, c26.attributeTable = null, c26.bandCount = 999 !== i19 || e9 ? o11 : 1;
    const p21 = a15(r6);
    if (p21) {
      c26.statistics = [];
      for (let t6 = 0; t6 < c26.bandCount; t6++)
        c26.statistics[t6] = { min: p21[0], max: p21[1], avg: (p21[0] + p21[1]) / 2, stddev: (p21[0] + p21[1]) / 10 };
    }
    this.rasterInfo = c26;
    return { success: true, supportsGPU: 1 === c26.bandCount && i19 <= 3 && (r6 < 11 || r6 > 16) };
  }
  _processPixels(t5) {
    const { pixelBlocks: s10 } = t5;
    return null == s10 || s10.some((t6) => null == t6) ? null : it(s10, this.functionArguments.operation, { processAsMultiband: this.functionArguments.processAsMultiband, outputPixelType: this.outputPixelType ?? void 0 });
  }
  _getWebGLParameters() {
    var _a;
    const { operation: t5 } = this.functionArguments, s10 = l10[t5], o11 = ((_a = Object.keys(d5).find((s11) => d5[s11] === t5)) == null ? void 0 : _a.toLowerCase()) ?? "undefined", n19 = this.outputPixelType ?? "f32";
    let [i19, a25] = s4(n19);
    const c26 = n19.startsWith("u") || n19.startsWith("s");
    return c26 && (i19 -= 1e-4, a25 += 1e-4), { imageCount: s10, operationName: o11, domainRange: [i19, a25], isOutputRounded: c26 };
  }
};
e([y({ json: { write: true, name: "rasterFunction" } })], p14.prototype, "functionName", void 0), e([y({ type: c15, json: { write: true, name: "rasterFunctionArguments" } })], p14.prototype, "functionArguments", void 0), e([y()], p14.prototype, "rasterArgumentNames", void 0), p14 = e([a2("esri.layers.support.rasterFunctions.LocalFunction")], p14);
var l11 = p14;

// node_modules/@arcgis/core/layers/support/rasterFunctions/MaskFunctionArguments.js
var n10;
var a16 = n10 = class extends p5 {
  constructor() {
    super(...arguments), this.includedRanges = null, this.noDataValues = null, this.noDataInterpretation = n.matchAny;
  }
  get normalizedNoDataValues() {
    const { noDataValues: t5 } = this;
    if (!(t5 == null ? void 0 : t5.length))
      return null;
    let e9 = false;
    const r6 = t5.map((t6) => {
      if ("number" == typeof t6)
        return e9 = true, [t6];
      if ("string" == typeof t6) {
        const r7 = t6.trim().split(" ").filter((t7) => "" !== t7.trim()).map((t7) => Number(t7));
        return e9 = e9 || r7.length > 0, 0 === r7.length ? null : r7;
      }
      return null;
    });
    return e9 ? r6 : null;
  }
  clone() {
    var _a, _b;
    return new n10({ includedRanges: ((_a = this.includedRanges) == null ? void 0 : _a.slice()) ?? [], noDataValues: ((_b = this.noDataValues) == null ? void 0 : _b.slice()) ?? [], noDataInterpretation: this.noDataInterpretation });
  }
};
e([y({ json: { write: true } })], a16.prototype, "includedRanges", void 0), e([y({ json: { write: true } })], a16.prototype, "noDataValues", void 0), e([y()], a16.prototype, "normalizedNoDataValues", null), e([y({ json: { write: true } })], a16.prototype, "noDataInterpretation", void 0), a16 = n10 = e([a2("esri.layers.support.rasterFunctions.MaskFunctionArguments")], a16);
var i13 = a16;

// node_modules/@arcgis/core/layers/support/rasterFunctions/MaskFunction.js
var c17 = class extends p6 {
  constructor() {
    super(...arguments), this.functionName = "Mask", this.functionArguments = null, this.rasterArgumentNames = ["raster"];
  }
  _bindSourceRasters() {
    const t5 = this.sourceRasterInfos[0].clone(), { pixelType: e9 } = t5;
    this.outputPixelType = this._getOutputPixelType(e9), t5.pixelType = this.outputPixelType, this.rasterInfo = t5;
    const { includedRanges: s10, normalizedNoDataValues: o11 } = this.functionArguments;
    if (!(s10 == null ? void 0 : s10.length) && !(o11 == null ? void 0 : o11.length))
      return { success: false, supportsGPU: false, error: "missing includedRanges or noDataValues argument" };
    let r6 = [];
    for (let a25 = 0; a25 < t5.bandCount; a25++) {
      const t6 = w(e9, s10 == null ? void 0 : s10.slice(2 * a25, 2 * a25 + 2), o11 == null ? void 0 : o11[a25]);
      if (null == t6) {
        r6 = null;
        break;
      }
      r6.push(t6);
    }
    this.lookups = r6;
    const n19 = null != o11 && o11.every((t6) => {
      var _a;
      return (t6 == null ? void 0 : t6.length) === ((_a = o11[0]) == null ? void 0 : _a.length);
    });
    return { success: true, supportsGPU: (!s10 || s10.length <= 2 * i) && (!o11 || n19 && o11[0].length <= i) };
  }
  _processPixels(t5) {
    var _a;
    const e9 = (_a = t5.pixelBlocks) == null ? void 0 : _a[0];
    if (null == e9)
      return null;
    const { outputPixelType: s10, lookups: o11 } = this, { includedRanges: r6, noDataInterpretation: n19, normalizedNoDataValues: u15 } = this.functionArguments, a25 = n19 === n.matchAll;
    return g(e9, { includedRanges: r6, noDataValues: u15, outputPixelType: s10, matchAll: a25, lookups: o11 });
  }
  _getWebGLParameters() {
    var _a;
    const { includedRanges: t5, normalizedNoDataValues: s10 } = this.functionArguments, o11 = new Float32Array(i);
    o11.fill(d), ((_a = s10 == null ? void 0 : s10[0]) == null ? void 0 : _a.length) && o11.set(s10[0]);
    const r6 = new Float32Array(i);
    for (let n19 = 0; n19 < r6.length; n19 += 2)
      r6[n19] = (t5 == null ? void 0 : t5[n19]) ?? -d, r6[n19 + 1] = (t5 == null ? void 0 : t5[n19 + 1]) ?? d;
    return t5 && t5.length && r6.set(t5), { bandCount: this.sourceRasterInfos[0].bandCount, noDataValues: o11, includedRanges: r6 };
  }
};
e([y({ json: { write: true, name: "rasterFunction" } })], c17.prototype, "functionName", void 0), e([y({ type: i13, json: { write: true, name: "rasterFunctionArguments" } })], c17.prototype, "functionArguments", void 0), e([y()], c17.prototype, "rasterArgumentNames", void 0), e([y({ json: { write: true } })], c17.prototype, "lookups", void 0), c17 = e([a2("esri.layers.support.rasterFunctions.MaskFunction")], c17);
var p15 = c17;

// node_modules/@arcgis/core/layers/support/rasterFunctions/NDVIFunctionArguments.js
var e6;
var i14 = e6 = class extends p5 {
  constructor() {
    super(...arguments), this.visibleBandID = 0, this.infraredBandID = 1, this.scientificOutput = false;
  }
  clone() {
    const { visibleBandID: r6, infraredBandID: s10, scientificOutput: t5 } = this;
    return new e6({ visibleBandID: r6, infraredBandID: s10, scientificOutput: t5 });
  }
};
e([y({ json: { write: true } })], i14.prototype, "visibleBandID", void 0), e([y({ json: { write: true } })], i14.prototype, "infraredBandID", void 0), e([y({ json: { write: true } })], i14.prototype, "scientificOutput", void 0), i14 = e6 = e([a2("esri.layers.support.rasterFunctions.NDVIFunctionArguments")], i14);
var n11 = i14;

// node_modules/@arcgis/core/layers/support/rasterFunctions/NDVIFunction.js
var u12 = class extends p6 {
  constructor() {
    super(...arguments), this.functionName = "NDVI", this.functionArguments = null, this.rasterArgumentNames = ["raster"];
  }
  _bindSourceRasters() {
    const { scientificOutput: t5, visibleBandID: s10, infraredBandID: r6 } = this.functionArguments;
    this.outputPixelType = this._getOutputPixelType(t5 ? "f32" : "u8");
    const e9 = this.sourceRasterInfos[0], n19 = Math.max(s10, r6);
    if (e9.bandCount < 2 || n19 >= e9.bandCount)
      return { success: false, supportsGPU: false, error: "ndvi-function: source raster has insufficient amount of raster bands" };
    const o11 = e9.clone();
    o11.pixelType = this.outputPixelType, o11.colormap = null, o11.histograms = null, o11.bandCount = 1, o11.keyProperties = { ...o11.keyProperties, BandProperties: void 0 };
    const [i19, u15, a25, c26] = t5 ? [-1, 1, 0, 0.1] : [0, 200, 100, 10];
    return o11.statistics = [{ min: i19, max: u15, avg: a25, stddev: c26 }], this.rasterInfo = o11, { success: true, supportsGPU: true };
  }
  _processPixels(t5) {
    var _a;
    const s10 = (_a = t5.pixelBlocks) == null ? void 0 : _a[0];
    if (null == s10)
      return null;
    const { visibleBandID: r6, infraredBandID: n19, scientificOutput: o11 } = this.functionArguments;
    return s6(s10, r6, n19, !o11);
  }
  _getWebGLParameters() {
    const { visibleBandID: t5, infraredBandID: s10, scientificOutput: r6 } = this.functionArguments, e9 = this.isInputBandIdsSwizzled ? [0, 1, 2] : [s10, t5, 0];
    return { bandIndexMat3: i2(e9), scaled: !r6 };
  }
  _getInputBandIds(t5) {
    const { visibleBandID: s10, infraredBandID: r6 } = this.functionArguments;
    return [r6, s10, 0].map((s11) => t5[s11]);
  }
};
e([y({ json: { write: true, name: "rasterFunction" } })], u12.prototype, "functionName", void 0), e([y({ type: n11, json: { write: true, name: "rasterFunctionArguments" } })], u12.prototype, "functionArguments", void 0), e([y()], u12.prototype, "rasterArgumentNames", void 0), u12 = e([a2("esri.layers.support.rasterFunctions.NDVIFunction")], u12);
var a17 = u12;

// node_modules/@arcgis/core/layers/support/rasterFunctions/RemapFunctionArguments.js
var n12;
var r5 = n12 = class extends p5 {
  constructor() {
    super(...arguments), this.inputRanges = null, this.outputValues = null, this.noDataRanges = null, this.allowUnmatched = false, this.isLastInputRangeInclusive = false;
  }
  clone() {
    return new n12({ inputRanges: [...this.inputRanges], outputValues: [...this.outputValues], noDataRanges: [...this.noDataRanges], allowUnmatched: this.allowUnmatched, isLastInputRangeInclusive: this.isLastInputRangeInclusive });
  }
};
e([y({ json: { write: true } })], r5.prototype, "inputRanges", void 0), e([y({ json: { write: true } })], r5.prototype, "outputValues", void 0), e([y({ json: { write: true } })], r5.prototype, "noDataRanges", void 0), e([y({ json: { write: true } })], r5.prototype, "allowUnmatched", void 0), e([y({ json: { write: true } })], r5.prototype, "isLastInputRangeInclusive", void 0), r5 = n12 = e([a2("esri.layers.support.rasterFunctions.RemapFunctionArguments")], r5);
var a18 = r5;

// node_modules/@arcgis/core/layers/support/rasterFunctions/RemapFunction.js
var m5 = class extends p6 {
  constructor() {
    super(...arguments), this.functionName = "Remap", this.functionArguments = null, this.rasterArgumentNames = ["raster"], this.lookup = null;
  }
  _bindSourceRasters() {
    const t5 = this.sourceRasterInfos[0].clone(), { pixelType: e9 } = t5;
    this.outputPixelType = this._getOutputPixelType(e9), t5.pixelType = this.outputPixelType, t5.colormap = null, t5.histograms = null, t5.bandCount = 1, t5.attributeTable = null;
    const { statistics: s10 } = t5, { allowUnmatched: n19, outputValues: o11, inputRanges: a25, noDataRanges: i19, isLastInputRangeInclusive: l13 } = this.functionArguments;
    if (null != s10 && s10.length && (o11 == null ? void 0 : o11.length))
      if (n19) {
        const e10 = Math.min.apply(null, [...o11, s10[0].min]), n20 = Math.max.apply(null, [...o11, s10[0].max]);
        t5.statistics = [{ ...s10[0], min: e10, max: n20 }];
      } else {
        let e10 = o11[0], n20 = e10;
        for (let t6 = 0; t6 < o11.length; t6++)
          e10 = e10 > o11[t6] ? o11[t6] : e10, n20 = n20 > o11[t6] ? n20 : o11[t6];
        t5.statistics = [{ ...s10[0], min: e10, max: n20 }];
      }
    this.rasterInfo = t5, this.lookup = n19 ? null : y2({ srcPixelType: e9, inputRanges: a25, outputValues: o11, noDataRanges: i19, allowUnmatched: n19, isLastInputRangeInclusive: l13, outputPixelType: this.outputPixelType });
    return { success: true, supportsGPU: (!o11 || o11.length <= i) && (!i19 || i19.length <= i) };
  }
  _processPixels(t5) {
    var _a;
    const e9 = (_a = t5.pixelBlocks) == null ? void 0 : _a[0];
    if (null == e9)
      return null;
    const { lookup: s10, outputPixelType: n19 } = this;
    if (s10) {
      const t6 = f(e9, { lut: [s10.lut], offset: s10.offset, outputPixelType: n19 });
      return null != t6 && s10.mask && (t6.mask = c(e9.pixels[0], e9.mask, s10.mask, s10.offset, "u8")), t6;
    }
    const { inputRanges: o11, outputValues: a25, noDataRanges: u15, allowUnmatched: r6, isLastInputRangeInclusive: c26 } = this.functionArguments;
    return p2(e9, { inputRanges: o11, outputValues: a25, noDataRanges: u15, outputPixelType: n19, allowUnmatched: r6, isLastInputRangeInclusive: c26 });
  }
  _getWebGLParameters() {
    const { allowUnmatched: t5, noDataRanges: s10, isLastInputRangeInclusive: n19 } = this.functionArguments, a25 = new Float32Array(3 * i), u15 = 1e-5, i19 = this.functionArguments.inputRanges ?? [], l13 = this.functionArguments.outputValues ?? [], p21 = l13.length;
    for (let o11 = 0; o11 < i; o11++)
      a25[3 * o11] = i19[2 * o11] ?? d - 1, a25[3 * o11 + 1] = i19[2 * o11 + 1] ?? d, a25[3 * o11 + 2] = l13[o11] ?? 0, o11 < p21 && (o11 > 0 && (a25[3 * o11] -= u15), (o11 < p21 - 1 || !n19) && (a25[3 * o11 + 1] -= u15));
    const c26 = new Float32Array(2 * i);
    c26.fill(d), (s10 == null ? void 0 : s10.length) && c26.set(s10);
    return { allowUnmatched: t5, rangeMaps: a25, noDataRanges: c26, clampRange: s4(this.outputPixelType) };
  }
};
e([y({ json: { write: true, name: "rasterFunction" } })], m5.prototype, "functionName", void 0), e([y({ type: a18, json: { write: true, name: "rasterFunctionArguments" } })], m5.prototype, "functionArguments", void 0), e([y()], m5.prototype, "rasterArgumentNames", void 0), e([y({ json: { write: true } })], m5.prototype, "lookup", void 0), m5 = e([a2("esri.layers.support.rasterFunctions.RemapFunction")], m5);
var g4 = m5;

// node_modules/@arcgis/core/layers/support/rasterFunctions/SlopeFunctionArguments.js
var i15;
var c18 = new s2({ 1: "degree", 2: "percent-rise", 3: "adjusted" }, { useNumericKeys: true });
var a19 = i15 = class extends p5 {
  constructor() {
    super(...arguments), this.slopeType = "degree", this.zFactor = 1, this.pixelSizePower = 0.664, this.pixelSizeFactor = 0.024, this.removeEdgeEffect = false;
  }
  clone() {
    return new i15({ slopeType: this.slopeType, zFactor: this.zFactor, pixelSizePower: this.pixelSizePower, pixelSizeFactor: this.pixelSizeFactor, removeEdgeEffect: this.removeEdgeEffect, raster: this.raster });
  }
};
e([o2(c18)], a19.prototype, "slopeType", void 0), e([y({ type: Number, json: { write: true } })], a19.prototype, "zFactor", void 0), e([y({ type: Number, json: { name: "psPower", write: true } })], a19.prototype, "pixelSizePower", void 0), e([y({ type: Number, json: { name: "psZFactor", write: true } })], a19.prototype, "pixelSizeFactor", void 0), e([y({ type: Boolean, json: { write: true } })], a19.prototype, "removeEdgeEffect", void 0), a19 = i15 = e([a2("esri.layers.support.rasterFunctions.SlopeFunctionArguments")], a19);
var n13 = a19;

// node_modules/@arcgis/core/layers/support/rasterFunctions/SlopeFunction.js
var p16 = class extends p6 {
  constructor() {
    super(...arguments), this.functionName = "Slope", this.functionArguments = null, this.rasterArgumentNames = ["raster"], this.isGCS = false;
  }
  _bindSourceRasters() {
    var _a;
    this.outputPixelType = this._getOutputPixelType("f32");
    const e9 = this.sourceRasterInfos[0].clone();
    return e9.pixelType = this.outputPixelType, e9.statistics = "percent-rise" !== this.functionArguments.slopeType ? [{ min: 0, max: 90, avg: 1, stddev: 1 }] : null, e9.histograms = null, e9.colormap = null, e9.attributeTable = null, e9.bandCount = 1, this.rasterInfo = e9, this.isGCS = ((_a = e9.spatialReference) == null ? void 0 : _a.isGeographic) ?? false, { success: true, supportsGPU: true };
  }
  _processPixels(e9) {
    var _a;
    const t5 = (_a = e9.pixelBlocks) == null ? void 0 : _a[0];
    if (null == t5)
      return null;
    const { zFactor: s10, slopeType: r6, pixelSizePower: o11, pixelSizeFactor: n19 } = this.functionArguments, { isGCS: p21 } = this, { extent: c26, primaryPixelSizes: u15 } = e9, a25 = u15 == null ? void 0 : u15[0], l13 = a25 ?? (c26 ? { x: c26.width / t5.width, y: c26.height / t5.height } : { x: 1, y: 1 });
    return c2(t5, { zFactor: s10, slopeType: r6, pixelSizePower: o11, pixelSizeFactor: n19, isGCS: p21, resolution: l13 });
  }
  _getWebGLParameters() {
    const { zFactor: e9, slopeType: t5, pixelSizeFactor: s10, pixelSizePower: r6 } = this.functionArguments;
    return { zFactor: this.isGCS && e9 >= 1 ? e9 * s5 : e9, slopeType: t5, pixelSizeFactor: s10 ?? 0, pixelSizePower: r6 ?? 0 };
  }
};
e([y({ json: { write: true, name: "rasterFunction" } })], p16.prototype, "functionName", void 0), e([y({ type: n13, json: { write: true, name: "rasterFunctionArguments" } })], p16.prototype, "functionArguments", void 0), e([y()], p16.prototype, "rasterArgumentNames", void 0), e([y({ json: { write: true } })], p16.prototype, "isGCS", void 0), p16 = e([a2("esri.layers.support.rasterFunctions.SlopeFunction")], p16);
var c19 = p16;

// node_modules/@arcgis/core/layers/support/rasterFunctions/StatisticsHistogramFunctionArguments.js
var c20;
var n14 = c20 = class extends p5 {
  constructor() {
    super(...arguments), this.statistics = null, this.histograms = null;
  }
  readStatistics(t5, s10) {
    if (!(t5 == null ? void 0 : t5.length))
      return null;
    const r6 = [];
    return t5.forEach((t6) => {
      const s11 = { min: t6.min, max: t6.max, avg: t6.avg ?? t6.mean, stddev: t6.stddev ?? t6.standardDeviation };
      r6.push(s11);
    }), r6;
  }
  writeStatistics(t5, s10, r6) {
    if (!(t5 == null ? void 0 : t5.length))
      return;
    const o11 = [];
    t5.forEach((t6) => {
      const s11 = { ...t6, mean: t6.avg, standardDeviation: t6.stddev };
      delete s11.avg, delete s11.stddev, o11.push(s11);
    }), s10[r6] = o11;
  }
  clone() {
    return new c20({ statistics: a(this.statistics), histograms: a(this.histograms) });
  }
};
e([y({ json: { write: true } })], n14.prototype, "statistics", void 0), e([o("statistics")], n14.prototype, "readStatistics", null), e([r("statistics")], n14.prototype, "writeStatistics", null), e([y({ json: { write: true } })], n14.prototype, "histograms", void 0), n14 = c20 = e([a2("esri.layers.support.rasterFunctions.StatisticsHistogramFunctionArguments")], n14);
var p17 = n14;

// node_modules/@arcgis/core/layers/support/rasterFunctions/StatisticsHistogramFunction.js
var i16 = class extends p6 {
  constructor() {
    super(...arguments), this.functionName = "StatisticsHistogram", this.functionArguments = null, this.rasterArgumentNames = ["raster"], this.isNoopProcess = true;
  }
  _bindSourceRasters() {
    const s10 = this.sourceRasterInfos[0];
    this.outputPixelType = this._getOutputPixelType("u8");
    const t5 = s10.clone(), { statistics: r6, histograms: o11 } = this.functionArguments;
    return o11 && (t5.histograms = o11), r6 && (t5.statistics = r6), this.rasterInfo = t5, { success: true, supportsGPU: true };
  }
  _processPixels(s10) {
    var _a;
    return (_a = s10.pixelBlocks) == null ? void 0 : _a[0];
  }
};
e([y({ json: { write: true, name: "rasterFunction" } })], i16.prototype, "functionName", void 0), e([y({ type: p17, json: { write: true, name: "rasterFunctionArguments" } })], i16.prototype, "functionArguments", void 0), e([y()], i16.prototype, "rasterArgumentNames", void 0), e([y({ json: { write: true } })], i16.prototype, "indexedColormap", void 0), e([y()], i16.prototype, "isNoopProcess", void 0), i16 = e([a2("esri.layers.support.rasterFunctions.StatisticsHistogramFunction")], i16);
var n15 = i16;

// node_modules/@arcgis/core/layers/support/rasterFunctions/StretchFunctionArguments.js
var n16;
var p18 = new s2({ 0: "none", 3: "standard-deviation", 4: "histogram-equalization", 5: "min-max", 6: "percent-clip", 9: "sigmoid" }, { useNumericKeys: true });
var c21 = n16 = class extends p5 {
  constructor() {
    super(...arguments), this.computeGamma = false, this.dynamicRangeAdjustment = false, this.gamma = [], this.histograms = null, this.statistics = null, this.stretchType = "none", this.useGamma = false;
  }
  writeStatistics(t5, e9, o11) {
    (t5 == null ? void 0 : t5.length) && (Array.isArray(t5[0]) || (t5 = t5.map((t6) => [t6.min, t6.max, t6.avg, t6.stddev])), e9[o11] = t5);
  }
  clone() {
    return new n16({ stretchType: this.stretchType, outputMin: this.outputMin, outputMax: this.outputMax, useGamma: this.useGamma, computeGamma: this.computeGamma, statistics: a(this.statistics), gamma: a(this.gamma), sigmoidStrengthLevel: this.sigmoidStrengthLevel, numberOfStandardDeviations: this.numberOfStandardDeviations, minPercent: this.minPercent, maxPercent: this.maxPercent, histograms: a(this.histograms), dynamicRangeAdjustment: this.dynamicRangeAdjustment, raster: this.raster });
  }
};
e([y({ type: Boolean, json: { write: true } })], c21.prototype, "computeGamma", void 0), e([y({ type: Boolean, json: { name: "dra", write: true } })], c21.prototype, "dynamicRangeAdjustment", void 0), e([y({ type: [Number], json: { write: true } })], c21.prototype, "gamma", void 0), e([y()], c21.prototype, "histograms", void 0), e([y({ type: Number, json: { write: true } })], c21.prototype, "maxPercent", void 0), e([y({ type: Number, json: { write: true } })], c21.prototype, "minPercent", void 0), e([y({ type: Number, json: { write: true } })], c21.prototype, "numberOfStandardDeviations", void 0), e([y({ type: Number, json: { name: "max", write: true } })], c21.prototype, "outputMax", void 0), e([y({ type: Number, json: { name: "min", write: true } })], c21.prototype, "outputMin", void 0), e([y({ type: Number, json: { write: true } })], c21.prototype, "sigmoidStrengthLevel", void 0), e([y({ json: { type: [[Number]], write: true } })], c21.prototype, "statistics", void 0), e([r("statistics")], c21.prototype, "writeStatistics", null), e([o2(p18)], c21.prototype, "stretchType", void 0), e([y({ type: Boolean, json: { write: true } })], c21.prototype, "useGamma", void 0), c21 = n16 = e([a2("esri.layers.support.rasterFunctions.StretchFunctionArguments")], c21);
var u13 = c21;

// node_modules/@arcgis/core/layers/support/rasterFunctions/StretchFunction.js
var c22 = class extends p6 {
  constructor() {
    super(...arguments), this.functionName = "Stretch", this.functionArguments = null, this.rasterArgumentNames = ["raster"], this.lookup = null, this.cutOffs = null;
  }
  _bindSourceRasters() {
    this.lookup = null, this.cutOffs = null;
    const t5 = this.sourceRasterInfos[0], { pixelType: s10 } = t5, { functionArguments: e9 } = this, { dynamicRangeAdjustment: o11, gamma: r6, useGamma: u15 } = e9;
    if (!o11 && ["u8", "u16", "s8", "s16"].includes(s10)) {
      const o12 = p4(e9.toJSON(), { rasterInfo: t5 }), a26 = this._isOutputRoundingNeeded() ? "round" : "float";
      this.lookup = a4({ pixelType: s10, ...o12, gamma: u15 ? r6 : null, rounding: a26 }), this.cutOffs = o12;
    } else
      o11 || (this.cutOffs = p4(e9.toJSON(), { rasterInfo: t5 }));
    this.outputPixelType = this._getOutputPixelType(s10);
    const a25 = t5.clone();
    a25.pixelType = this.outputPixelType, a25.statistics = null, a25.histograms = null, a25.colormap = null, a25.attributeTable = null, "u8" === this.outputPixelType && (a25.keyProperties.DataType = "processed"), this.rasterInfo = a25;
    return { success: true, supportsGPU: !o11 };
  }
  _processPixels(t5) {
    var _a;
    const s10 = (_a = t5.pixelBlocks) == null ? void 0 : _a[0];
    if (null == s10)
      return s10;
    const { lookup: e9 } = this;
    if (e9)
      return f(s10, { ...e9, outputPixelType: this.rasterInfo.pixelType });
    const { functionArguments: o11 } = this, u15 = this.cutOffs || p4(o11.toJSON(), { rasterInfo: this.sourceRasterInfos[0], pixelBlock: s10 }), i19 = o11.useGamma ? o11.gamma : null;
    return M2(s10, { ...u15, gamma: i19, outputPixelType: this.outputPixelType });
  }
  _getWebGLParameters() {
    const { outputMin: t5 = 0, outputMax: s10 = 255, gamma: e9, useGamma: o11 } = this.functionArguments, r6 = this.rasterInfo.bandCount >= 2 ? 3 : 1, u15 = o11 && e9 && e9.length ? d2(r6, e9) : [1, 1, 1], { minCutOff: n19, maxCutOff: i19 } = this.cutOffs ?? { minCutOff: [0, 0, 0], maxCutOff: [255, 255, 255] };
    1 === n19.length && (n19[1] = n19[2] = n19[0], i19[1] = i19[2] = i19[0]);
    const a25 = new Float32Array(r6);
    let c26;
    for (c26 = 0; c26 < r6; c26++)
      a25[c26] = (s10 - t5) / (i19[c26] - n19[c26]);
    const m8 = this._isOutputRoundingNeeded();
    return { bandCount: r6, outMin: t5, outMax: s10, minCutOff: n19, maxCutOff: i19, factor: a25, useGamma: o11, gamma: o11 && e9 ? e9 : [1, 1, 1], gammaCorrection: o11 && u15 ? u15 : [1, 1, 1], stretchType: this.functionArguments.stretchType, isOutputRounded: m8, type: "stretch" };
  }
};
e([y({ json: { write: true, name: "rasterFunction" } })], c22.prototype, "functionName", void 0), e([y({ type: u13, json: { write: true, name: "rasterFunctionArguments" } })], c22.prototype, "functionArguments", void 0), e([y()], c22.prototype, "rasterArgumentNames", void 0), e([y({ json: { write: true } })], c22.prototype, "lookup", void 0), e([y({ json: { write: true } })], c22.prototype, "cutOffs", void 0), c22 = e([a2("esri.layers.support.rasterFunctions.StretchFunction")], c22);
var m6 = c22;

// node_modules/@arcgis/core/layers/support/rasterFunctions/TableFunctionArguments.js
var c23;
var a20 = c23 = class extends p5 {
  constructor() {
    super(...arguments), this.attributeTableAsRecordSet = null;
  }
  clone() {
    return new c23({ attributeTableAsRecordSet: a(this.attributeTableAsRecordSet) });
  }
};
e([y({ json: { write: true } })], a20.prototype, "attributeTableAsRecordSet", void 0), a20 = c23 = e([a2("esri.layers.support.rasterFunctions.TableFunctionArguments")], a20);
var p19 = a20;

// node_modules/@arcgis/core/layers/support/rasterFunctions/TableFunction.js
var i17 = class extends p6 {
  constructor() {
    super(...arguments), this.functionName = "Table", this.functionArguments = null, this.rasterArgumentNames = ["raster"], this.isNoopProcess = true;
  }
  _bindSourceRasters() {
    const t5 = this.sourceRasterInfos[0];
    if (t5.bandCount > 1 || t5.pixelType.startsWith("f"))
      return { success: false, supportsGPU: false, error: "table-function: Source data must be single band and integer pixel type." };
    const { attributeTableAsRecordSet: e9 } = this.functionArguments;
    if (!e9)
      return { success: false, supportsGPU: false, error: "table-function: Missing attributeTableAsRecordSet argument." };
    this.outputPixelType = this._getOutputPixelType(t5.pixelType);
    const s10 = t5.clone();
    return s10.pixelType = this.outputPixelType, s10.bandCount = 1, "thematic" !== s10.dataType && (s10.keyProperties = s10.keyProperties ? { ...s10.keyProperties, DataType: "thematic" } : { DataType: "thematic" }), this.rasterInfo = s10, { success: true, supportsGPU: true };
  }
  _processPixels(t5) {
    var _a;
    return (_a = t5.pixelBlocks) == null ? void 0 : _a[0];
  }
};
e([y({ json: { write: true, name: "rasterFunction" } })], i17.prototype, "functionName", void 0), e([y({ type: p19, json: { write: true, name: "rasterFunctionArguments" } })], i17.prototype, "functionArguments", void 0), e([y()], i17.prototype, "rasterArgumentNames", void 0), e([y()], i17.prototype, "isNoopProcess", void 0), i17 = e([a2("esri.layers.support.rasterFunctions.TableFunction")], i17);
var n17 = i17;

// node_modules/@arcgis/core/layers/support/rasterFunctions/rasterFunctionHelper.js
var F3 = /* @__PURE__ */ new Map();
function h5(t5, e9) {
  const { rasterFunctionArguments: r6 } = t5;
  if (!r6)
    return;
  (r6.rasters || [r6.raster]).forEach((t6) => {
    t6 && "number" != typeof t6 && ("string" == typeof t6 ? t6.startsWith("http") && (e9.includes(t6) || e9.push(t6)) : "rasterFunctionArguments" in t6 && h5(t6, e9));
  });
}
function _2(t5, n19) {
  if (n19 = n19 ?? {}, "function" in (t5 = a(t5)) && "arguments" in t5 && t5.arguments) {
    const r6 = V2(t5, /* @__PURE__ */ new Map(), n19);
    if (k3(r6), !r6.renderingRule)
      throw new s("raster-function-helper", "Unsupported raster function json.");
    t5 = r6.renderingRule;
  }
  if ("rasterFunction" in t5)
    return S2(t5 = N2(t5), n19);
  throw new s("raster-function-helper", "unsupported raster function json.");
}
function R3(t5, e9) {
  return "rasters" === e9[0] && Array.isArray(t5.rasters) ? t5.rasters : e9.map((e10) => t5[e10]);
}
function C2(t5) {
  return !!(t5 && "object" == typeof t5 && t5.rasterFunction && t5.rasterFunctionArguments);
}
function N2(t5) {
  var _a;
  const { rasterFunction: e9, rasterFunctionArguments: r6 } = t5, n19 = {};
  for (const o11 in r6) {
    let t6 = r6[o11];
    const e10 = o11.toLowerCase();
    if ("rasters" === e10 && Array.isArray(t6))
      n19.rasters = t6.map((t7) => C2(t7) ? N2(t7) : t7);
    else
      switch (C2(t6) && (t6 = N2(t6)), e10) {
        case "dra":
          n19.dra = t6;
          break;
        case "pspower":
          n19.psPower = t6;
          break;
        case "pszfactor":
          n19.psZFactor = t6;
          break;
        case "bandids":
          n19.bandIds = t6;
          break;
        default:
          n19[o11[0].toLowerCase() + o11.slice(1)] = t6;
      }
  }
  return "Local" !== e9 || ((_a = n19.rasters) == null ? void 0 : _a.length) || (n19.rasters = ["$$"]), { ...t5, rasterFunctionArguments: n19 };
}
function S2(t5, r6) {
  var _a, _b;
  const { rasterFunction: n19, rasterFunctionArguments: o11 } = t5, s10 = (_a = t5.outputPixelType) == null ? void 0 : _a.toLowerCase();
  if (null == n19 || !F3.has(n19))
    throw new s("raster-function-helper", `unsupported raster function: ${n19}`);
  const a25 = F3.get(n19), i19 = ("function" == typeof a25.ctor ? a25.ctor : a25.ctor.default).fromJSON({ ...t5, outputPixelType: s10 }), { rasterArgumentNames: c26 } = i19, u15 = [], m8 = R3(o11, c26), l13 = "rasters" === c26[0], p21 = [];
  for (let e9 = 0; e9 < m8.length; e9++) {
    const t6 = m8[e9];
    let n20;
    null == t6 || "string" == typeof t6 && t6.startsWith("$") ? u15.push(r6 == null ? void 0 : r6.raster) : "string" == typeof t6 ? r6[t6] && u15.push(r6[t6]) : "number" != typeof t6 && "rasterFunction" in t6 && (n20 = S2(t6, r6), l13 || (i19.functionArguments[c26[e9]] = n20), u15.push(n20)), l13 && p21.push(n20 ?? t6);
  }
  if (l13 && (i19.functionArguments.rasters = p21), r6) {
    i19.sourceRasters = u15;
    const t6 = (_b = r6.raster) == null ? void 0 : _b.url;
    t6 && (i19.mainPrimaryRasterId = t6);
  }
  return i19;
}
function w5(t5, e9) {
  if (t5 && e9)
    for (const r6 in t5) {
      const n19 = t5[r6];
      n19 && "object" == typeof n19 && "type" in n19 && ("RasterFunctionTemplate" === n19.type ? w5(n19.arguments, e9) : "RasterFunctionVariable" === n19.type && null != e9[n19.name] && (n19.value = e9[n19.name]));
    }
}
function v3(t5, r6) {
  var _a;
  if (!t5 || "object" != typeof t5)
    return t5;
  const { value: n19 } = t5;
  if (!n19 || "object" != typeof n19)
    return t5.isDataset ? "$$" : n19;
  if (Array.isArray(n19))
    return 0 === n19.length ? [] : n19.map((t6) => "object" == typeof t6 && "RasterFunctionVariable" === t6.type ? v3(t6, r6) : t6);
  if ("value" in n19 && ["number", "string", "boolean"].includes(typeof n19.value))
    return n19.value;
  if (t5.isDataset && "Scalar" !== n19.type)
    return "$$";
  if (!("type" in n19))
    return n19;
  let o11 = n19;
  switch (n19.type) {
    case "Scalar":
      o11 = n19.value;
      break;
    case "AlgorithmicColorRamp":
      o11 = D3(n19);
      break;
    case "MultiPartColorRamp":
      o11 = { type: "multipart", colorRamps: n19.ArrayOfColorRamp.map(D3) };
      break;
    case "ArgumentArray":
      if (((_a = n19.elements) == null ? void 0 : _a.length) && "RasterStatistics" !== n19.elements[0].type) {
        const t6 = [];
        for (let o12 = 0; o12 < n19.elements.length; o12++) {
          const s10 = n19.elements[o12], { type: a25 } = s10;
          if (a25)
            if ("RasterFunctionTemplate" === a25) {
              const { renderingRule: e9 } = V2(s10, r6);
              t6.push(e9), null != s10._object_id && r6.set(s10._object_id, e9);
            } else {
              if ("RasterFunctionVariable" !== a25)
                throw new s("raster-function-helper", "unsupported raster function json.");
              {
                const e9 = v3(s10, r6);
                t6.push(e9), null != s10._object_id && r6.set(s10._object_id, e9);
              }
            }
          else
            t6.push(s10);
        }
        o11 = t6;
      } else
        o11 = n19.elements;
  }
  return null != n19._object_id && r6.set(n19._object_id, o11), o11;
}
function D3(e9) {
  const r6 = e9.algorithm ?? "esriHSVAlgorithm";
  let { FromColor: n19, ToColor: o11 } = e9;
  if (!Array.isArray(n19)) {
    const { r: e10, g: r7, b: o12 } = p3({ h: n19.Hue, s: n19.Saturation, v: n19.Value });
    n19 = [e10, r7, o12, n19.AlphaValue];
  }
  if (!Array.isArray(o11)) {
    const { r: e10, g: r7, b: n20 } = p3({ h: o11.Hue, s: o11.Saturation, v: o11.Value });
    o11 = [e10, r7, n20, o11.AlphaValue];
  }
  return { type: "algorithmic", algorithm: r6, fromColor: n19, toColor: o11 };
}
function V2(t5, e9, r6) {
  r6 && w5(t5, r6);
  const n19 = { renderingRule: {}, templates: e9 };
  return T2(t5, n19), n19;
}
function T2(t5, e9) {
  if (!t5 || !e9.renderingRule)
    return;
  const { renderingRule: r6, templates: n19 } = e9, { function: o11, arguments: s10, _object_id: a25 } = t5;
  if (!o11 || !s10)
    return;
  null != a25 && n19.set(a25, r6), r6.rasterFunction = o11.type.replace("Function", ""), r6.outputPixelType = o11.pixelType;
  const i19 = {};
  r6.rasterFunctionArguments = i19;
  for (const c26 in s10) {
    if ("type" === c26 || "object_id" === c26 || "_object_ref_id" === c26)
      continue;
    const t6 = s10[c26];
    t6 && "object" == typeof t6 && "type" in t6 && ("RasterFunctionTemplate" === t6.type || "RasterFunctionVariable" === t6.type) ? ("RasterFunctionVariable" === t6.type ? i19[c26] = v3(t6, n19) : (r6.rasterFunctionArguments[c26] = {}, T2(t6, { renderingRule: r6.rasterFunctionArguments[c26], templates: n19 })), null != t6._object_id && n19.set(t6._object_id, i19[c26])) : i19[c26] = t6;
  }
  switch (i19.DEM && !i19.Raster && (i19.Raster = i19.DEM, delete i19.DEM), r6.rasterFunction) {
    case "Stretch":
      x3(i19);
      break;
    case "Colormap":
      E2(i19);
      break;
    case "Convolution":
      M4(i19);
      break;
    case "Mask":
      $2(i19);
  }
}
function k3(t5) {
  const { renderingRule: r6, templates: n19 } = t5;
  if ("object" != typeof r6 || !(r6 == null ? void 0 : r6.rasterFunctionArguments) || !n19.size)
    return;
  const { rasterFunctionArguments: o11 } = r6;
  for (const s10 in o11) {
    const t6 = o11[s10], r7 = "_object_ref_id" === s10 ? t6 : t6 && "object" == typeof t6 && "_object_ref_id" in t6 ? t6._object_ref_id : null;
    if (null == r7)
      t6 && "object" == typeof t6 && (t6.rasterFunctionArguments && k3({ renderingRule: t6, templates: n19 }), Array.isArray(t6) && t6.forEach((o12, s11) => {
        if ("object" == typeof o12)
          if (null != o12._object_ref_id) {
            if (!n19.has(o12._object_ref_id))
              throw new s("raster-function-helper", `unsupported raster function json. _object_ref_id: ${t6} does not exist`);
            const a25 = n19.get(r7);
            a25 && "object" == typeof a25 ? Object.assign(o12, a25) : t6[s11] = a25;
          } else
            k3({ renderingRule: o12, templates: n19 });
      }));
    else {
      if (!n19.has(r7))
        throw new s("raster-function-helper", `unsupported raster function json. _object_ref_id: ${r7} does not exist`);
      const t7 = n19.get(r7);
      "_object_ref_id" !== s10 ? o11[s10] = t7 : t7 && "object" == typeof t7 && Object.assign(o11, t7);
    }
  }
}
function x3(t5) {
  var _a;
  ((_a = t5.Statistics) == null ? void 0 : _a.length) && "object" == typeof t5.Statistics && (t5.Statistics = t5.Statistics.map((t6) => [t6.min, t6.max, t6.mean, t6.standardDeviation])), null != t5.NumberOfStandardDeviation && (t5.NumberOfStandardDeviations = t5.NumberOfStandardDeviation, delete t5.NumberOfStandardDeviation);
}
function E2(t5) {
  var _a, _b;
  "randomcolorramp" === ((_b = (_a = t5.ColorRamp) == null ? void 0 : _a.type) == null ? void 0 : _b.toLowerCase()) && (delete t5.ColorRamp, t5.ColormapName = "Random"), 0 === t5.ColorSchemeType && delete t5.ColorRamp;
}
function M4(t5) {
  null != t5.ConvolutionType && (t5.Type = t5.ConvolutionType, delete t5.ConvolutionType);
}
function $2(t5) {
  var _a;
  ((_a = t5.NoDataValues) == null ? void 0 : _a.length) && "string" == typeof t5.NoDataValues[0] && (t5.NoDataValues = t5.NoDataValues.filter((t6) => "" !== t6).map((t6) => Number(t6)));
}
F3.set("Aspect", { desc: "Aspect Function", ctor: p7, rasterArgumentNames: ["raster"] }), F3.set("BandArithmetic", { desc: "Band Arithmetic Function", ctor: u5, rasterArgumentNames: ["raster"] }), F3.set("Colormap", { desc: "Colormap Function", ctor: u7, rasterArgumentNames: ["raster"] }), F3.set("CompositeBand", { desc: "CompositeBand Function", ctor: a10, rasterArgumentNames: ["rasters"] }), F3.set("Convolution", { desc: "Convolution Function", ctor: l8, rasterArgumentNames: ["raster"] }), F3.set("ExtractBand", { desc: "ExtractBand Function", ctor: l9, rasterArgumentNames: ["raster"] }), F3.set("Curvature", { desc: "Curvature Function", ctor: a12, rasterArgumentNames: ["raster"] }), F3.set("Local", { desc: "Local Function", ctor: l11, rasterArgumentNames: ["rasters"] }), F3.set("Mask", { desc: "Mask Function", ctor: p15, rasterArgumentNames: ["raster"] }), F3.set("NDVI", { desc: "NDVI Function", ctor: a17, rasterArgumentNames: ["raster"] }), F3.set("Remap", { desc: "Remap Function", ctor: g4, rasterArgumentNames: ["raster"] }), F3.set("Slope", { desc: "Slope Function", ctor: c19, rasterArgumentNames: ["raster"] }), F3.set("StatisticsHistogram", { desc: "Statistics Histogram Function", ctor: n15, rasterArgumentNames: ["raster"] }), F3.set("Stretch", { desc: "Stretch Function", ctor: m6, rasterArgumentNames: ["raster"] }), F3.set("Table", { desc: "Attribute Table Function", ctor: n17, rasterArgumentNames: ["raster"] });

// node_modules/@arcgis/core/layers/support/rasterTransforms/BaseRasterTransform.js
var t4 = class extends l {
  get affectsPixelSize() {
    return false;
  }
  forwardTransform(r6) {
    return r6;
  }
  inverseTransform(r6) {
    return r6;
  }
};
e([y()], t4.prototype, "affectsPixelSize", null), e([y({ json: { write: true } })], t4.prototype, "spatialReference", void 0), t4 = e([a2("esri.layers.support.rasterTransforms.BaseRasterTransform")], t4);
var a21 = t4;

// node_modules/@arcgis/core/layers/support/rasterTransforms/GCSShiftTransform.js
var a22;
var c24 = a22 = class extends a21 {
  constructor() {
    super(...arguments), this.type = "gcs-shift", this.tolerance = 1e-8;
  }
  forwardTransform(r6) {
    return "point" === (r6 = r6.clone()).type ? (r6.x > 180 + this.tolerance && (r6.x -= 360), r6) : (r6.xmin >= 180 - this.tolerance ? (r6.xmax -= 360, r6.xmin -= 360) : r6.xmax > 180 + this.tolerance && (r6.xmin = -180, r6.xmax = 180), r6);
  }
  inverseTransform(r6) {
    return "point" === (r6 = r6.clone()).type ? (r6.x < -this.tolerance && (r6.x += 360), r6) : (r6.xmin < -this.tolerance && (r6.xmin += 360, r6.xmax += 360), r6);
  }
  clone() {
    return new a22({ tolerance: this.tolerance });
  }
};
e([o2({ GCSShiftXform: "gcs-shift" })], c24.prototype, "type", void 0), e([y()], c24.prototype, "tolerance", void 0), c24 = a22 = e([a2("esri.layers.support.rasterTransforms.GCSShiftTransform")], c24);
var n18 = c24;

// node_modules/@arcgis/core/layers/support/rasterTransforms/IdentityTransform.js
var e7;
var p20 = e7 = class extends a21 {
  constructor() {
    super(...arguments), this.type = "identity";
  }
  clone() {
    return new e7();
  }
};
e([o2({ IdentityXform: "identity" })], p20.prototype, "type", void 0), p20 = e7 = e([a2("esri.layers.support.rasterTransforms.IdentityTransform")], p20);
var a23 = p20;

// node_modules/@arcgis/core/layers/support/rasterTransforms/PolynomialTransform.js
var l12;
function a24(e9, r6, o11) {
  const { x: t5, y: s10 } = r6;
  if (o11 < 2) {
    return { x: e9[0] + t5 * e9[2] + s10 * e9[4], y: e9[1] + t5 * e9[3] + s10 * e9[5] };
  }
  if (2 === o11) {
    const r7 = t5 * t5, o12 = s10 * s10, i20 = t5 * s10;
    return { x: e9[0] + t5 * e9[2] + s10 * e9[4] + r7 * e9[6] + i20 * e9[8] + o12 * e9[10], y: e9[1] + t5 * e9[3] + s10 * e9[5] + r7 * e9[7] + i20 * e9[9] + o12 * e9[11] };
  }
  const i19 = t5 * t5, n19 = s10 * s10, f5 = t5 * s10, p21 = i19 * t5, l13 = i19 * s10, a25 = t5 * n19, c26 = s10 * n19;
  return { x: e9[0] + t5 * e9[2] + s10 * e9[4] + i19 * e9[6] + f5 * e9[8] + n19 * e9[10] + p21 * e9[12] + l13 * e9[14] + a25 * e9[16] + c26 * e9[18], y: e9[1] + t5 * e9[3] + s10 * e9[5] + i19 * e9[7] + f5 * e9[9] + n19 * e9[11] + p21 * e9[13] + l13 * e9[15] + a25 * e9[17] + c26 * e9[19] };
}
function c25(e9, r6, o11) {
  const { xmin: t5, ymin: s10, xmax: i19, ymax: n19, spatialReference: f5 } = r6;
  let l13 = [];
  if (o11 < 2)
    l13.push({ x: t5, y: n19 }), l13.push({ x: i19, y: n19 }), l13.push({ x: t5, y: s10 }), l13.push({ x: i19, y: s10 });
  else {
    let e10 = 10;
    for (let r7 = 0; r7 < e10; r7++)
      l13.push({ x: t5, y: s10 + (n19 - s10) * r7 / (e10 - 1) }), l13.push({ x: i19, y: s10 + (n19 - s10) * r7 / (e10 - 1) });
    e10 = 8;
    for (let r7 = 1; r7 <= e10; r7++)
      l13.push({ x: t5 + (i19 - t5) * r7 / e10, y: s10 }), l13.push({ x: t5 + (i19 - t5) * r7 / e10, y: n19 });
  }
  l13 = l13.map((r7) => a24(e9, r7, o11));
  const c26 = l13.map((e10) => e10.x), u15 = l13.map((e10) => e10.y);
  return new M({ xmin: Math.min.apply(null, c26), xmax: Math.max.apply(null, c26), ymin: Math.min.apply(null, u15), ymax: Math.max.apply(null, u15), spatialReference: f5 });
}
function u14(e9) {
  const [r6, o11, t5, s10, i19, n19] = e9, f5 = t5 * n19 - i19 * s10, p21 = i19 * s10 - t5 * n19;
  return [(i19 * o11 - r6 * n19) / f5, (t5 * o11 - r6 * s10) / p21, n19 / f5, s10 / p21, -i19 / f5, -t5 / p21];
}
var m7 = l12 = class extends a21 {
  constructor() {
    super(...arguments), this.polynomialOrder = 1, this.type = "polynomial";
  }
  readForwardCoefficients(e9, r6) {
    const { coeffX: o11, coeffY: t5 } = r6;
    if (!(o11 == null ? void 0 : o11.length) || !(t5 == null ? void 0 : t5.length) || o11.length !== t5.length)
      return null;
    const s10 = [];
    for (let i19 = 0; i19 < o11.length; i19++)
      s10.push(o11[i19]), s10.push(t5[i19]);
    return s10;
  }
  writeForwardCoefficients(e9, r6, o11) {
    const t5 = [], s10 = [];
    for (let i19 = 0; i19 < (e9 == null ? void 0 : e9.length); i19++)
      i19 % 2 == 0 ? t5.push(e9[i19]) : s10.push(e9[i19]);
    r6.coeffX = t5, r6.coeffY = s10;
  }
  get inverseCoefficients() {
    let e9 = this._get("inverseCoefficients");
    const r6 = this._get("forwardCoefficients");
    return !e9 && r6 && this.polynomialOrder < 2 && (e9 = u14(r6)), e9;
  }
  set inverseCoefficients(e9) {
    this._set("inverseCoefficients", e9);
  }
  readInverseCoefficients(e9, r6) {
    const { inverseCoeffX: o11, inverseCoeffY: t5 } = r6;
    if (!(o11 == null ? void 0 : o11.length) || !(t5 == null ? void 0 : t5.length) || o11.length !== t5.length)
      return null;
    const s10 = [];
    for (let i19 = 0; i19 < o11.length; i19++)
      s10.push(o11[i19]), s10.push(t5[i19]);
    return s10;
  }
  writeInverseCoefficients(e9, r6, o11) {
    const t5 = [], s10 = [];
    for (let i19 = 0; i19 < (e9 == null ? void 0 : e9.length); i19++)
      i19 % 2 == 0 ? t5.push(e9[i19]) : s10.push(e9[i19]);
    r6.inverseCoeffX = t5, r6.inverseCoeffY = s10;
  }
  get affectsPixelSize() {
    return this.polynomialOrder > 0;
  }
  forwardTransform(e9) {
    if ("point" === e9.type) {
      const r6 = a24(this.forwardCoefficients, e9, this.polynomialOrder);
      return new x({ x: r6.x, y: r6.y, spatialReference: e9.spatialReference });
    }
    return c25(this.forwardCoefficients, e9, this.polynomialOrder);
  }
  inverseTransform(e9) {
    if ("point" === e9.type) {
      const r6 = a24(this.inverseCoefficients, e9, this.polynomialOrder);
      return new x({ x: r6.x, y: r6.y, spatialReference: e9.spatialReference });
    }
    return c25(this.inverseCoefficients, e9, this.polynomialOrder);
  }
  clone() {
    return new l12({ polynomialOrder: this.polynomialOrder, forwardCoefficients: this.forwardCoefficients ? [...this.forwardCoefficients] : null, inverseCoefficients: this.inverseCoefficients ? [...this.inverseCoefficients] : null });
  }
};
e([y({ json: { write: true } })], m7.prototype, "polynomialOrder", void 0), e([y()], m7.prototype, "forwardCoefficients", void 0), e([o("forwardCoefficients", ["coeffX", "coeffY"])], m7.prototype, "readForwardCoefficients", null), e([r("forwardCoefficients")], m7.prototype, "writeForwardCoefficients", null), e([y({ json: { write: true } })], m7.prototype, "inverseCoefficients", null), e([o("inverseCoefficients", ["inverseCoeffX", "inverseCoeffY"])], m7.prototype, "readInverseCoefficients", null), e([r("inverseCoefficients")], m7.prototype, "writeInverseCoefficients", null), e([y()], m7.prototype, "affectsPixelSize", null), e([o2({ PolynomialXform: "polynomial" })], m7.prototype, "type", void 0), m7 = l12 = e([a2("esri.layers.support.rasterTransforms.PolynomialTransform")], m7);
var y5 = m7;

// node_modules/@arcgis/core/layers/support/rasterTransforms/utils.js
var o10 = { GCSShiftXform: n18, IdentityXform: a23, PolynomialXform: y5 };
var e8 = Object.keys(o10);
function f4(r6) {
  const t5 = r6 == null ? void 0 : r6.type;
  return !r6 || e8.includes(t5);
}
function i18(r6) {
  const t5 = r6 == null ? void 0 : r6.type;
  if (!t5)
    return null;
  const n19 = o10[r6 == null ? void 0 : r6.type];
  if (n19) {
    const t6 = new n19();
    return t6.read(r6), t6;
  }
  return null;
}

export {
  h5 as h,
  _2 as _,
  n18 as n,
  y5 as y,
  f4 as f,
  i18 as i
};
//# sourceMappingURL=chunk-YZ3S5YLI.js.map
