import {
  t
} from "./chunk-Y2ZDD3I4.js";
import {
  i
} from "./chunk-5HAVROZG.js";
import {
  E,
  H,
  S2 as S,
  d,
  f,
  g,
  o2 as o,
  r,
  s2,
  x2 as x
} from "./chunk-SFV6XLDZ.js";
import {
  s
} from "./chunk-VBD33VNW.js";
import {
  l
} from "./chunk-7A5C2EQ3.js";
import {
  y3 as y
} from "./chunk-OYBXMT5R.js";
import {
  a2 as a
} from "./chunk-CIDWM2UN.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";
import {
  T
} from "./chunk-2YSHZRCT.js";

// node_modules/@arcgis/core/layers/support/LOD.js
var i2;
var l2 = i2 = class extends l {
  constructor(e2) {
    super(e2), this.cols = null, this.level = 0, this.levelValue = null, this.origin = null, this.resolution = 0, this.rows = null, this.scale = 0;
  }
  clone() {
    return new i2({ cols: this.cols, level: this.level, levelValue: this.levelValue, resolution: this.resolution, rows: this.rows, scale: this.scale });
  }
};
e([y({ json: { write: true, origins: { "web-document": { read: false, write: false }, "portal-item": { read: false, write: false } } } })], l2.prototype, "cols", void 0), e([y({ type: T, json: { write: true } })], l2.prototype, "level", void 0), e([y({ type: String, json: { write: true } })], l2.prototype, "levelValue", void 0), e([y({ json: { write: true, origins: { "web-document": { read: false, write: false }, "portal-item": { read: false, write: false } } } })], l2.prototype, "origin", void 0), e([y({ type: Number, json: { write: true } })], l2.prototype, "resolution", void 0), e([y({ json: { write: true, origins: { "web-document": { read: false, write: false }, "portal-item": { read: false, write: false } } } })], l2.prototype, "rows", void 0), e([y({ type: Number, json: { write: true } })], l2.prototype, "scale", void 0), l2 = i2 = e([a("esri.layers.support.LOD")], l2);
var p = l2;

// node_modules/@arcgis/core/layers/support/TileInfo.js
var w;
var x2 = new s({ PNG: "png", PNG8: "png8", PNG24: "png24", PNG32: "png32", JPEG: "jpg", JPG: "jpg", DIB: "dib", TIFF: "tiff", EMF: "emf", PS: "ps", PDF: "pdf", GIF: "gif", SVG: "svg", SVGZ: "svgz", Mixed: "mixed", MIXED: "mixed", LERC: "lerc", LERC2D: "lerc2d", RAW: "raw", pbf: "pbf" });
var O = w = class extends l {
  static create(e2 = {}) {
    const { resolutionFactor: t2 = 1, scales: o2, size: s3 = 256, spatialReference: i3 = f.WebMercator, numLODs: l3 = 24 } = e2;
    if (!s2(i3)) {
      const e3 = [];
      if (o2)
        for (let t3 = 0; t3 < o2.length; t3++) {
          const r2 = o2[t3];
          e3.push(new p({ level: t3, scale: r2, resolution: r2 }));
        }
      else {
        let t3 = 5e-4;
        for (let o3 = l3 - 1; o3 >= 0; o3--)
          e3.unshift(new p({ level: o3, scale: t3, resolution: t3 })), t3 *= 2;
      }
      return new w({ dpi: 96, lods: e3, origin: new x(0, 0, i3), size: [s3, s3], spatialReference: i3 });
    }
    const n = d(i3), a2 = e2.origin ? new x({ x: e2.origin.x, y: e2.origin.y, spatialReference: i3 }) : new x(n ? { x: n.origin[0], y: n.origin[1], spatialReference: i3 } : { x: 0, y: 0, spatialReference: i3 }), u = 96, d2 = 1 / (H(i3) * 39.37 * u), g2 = [];
    if (o2)
      for (let r2 = 0; r2 < o2.length; r2++) {
        const e3 = o2[r2], t3 = e3 * d2;
        g2.push(new p({ level: r2, scale: e3, resolution: t3 }));
      }
    else {
      let e3 = E(i3) ? 512 / s3 * 5916575275917094e-7 : 256 / s3 * 591657527591555e-6;
      const o3 = Math.ceil(l3 / t2);
      g2.push(new p({ level: 0, scale: e3, resolution: e3 * d2 }));
      for (let r2 = 1; r2 < o3; r2++) {
        const o4 = e3 / 2 ** t2, s4 = o4 * d2;
        g2.push(new p({ level: r2, scale: o4, resolution: s4 })), e3 = o4;
      }
    }
    return new w({ dpi: u, lods: g2, origin: a2, size: [s3, s3], spatialReference: i3 });
  }
  constructor(e2) {
    super(e2), this.dpi = 96, this.format = null, this.origin = null, this.size = null, this.spatialReference = null;
  }
  get isWrappable() {
    const { spatialReference: e2, origin: t2 } = this;
    if (e2 && t2) {
      const o2 = d(e2);
      return e2.isWrappable && !!o2 && Math.abs(o2.origin[0] - t2.x) <= o2.dx;
    }
    return false;
  }
  readOrigin(e2, t2) {
    return x.fromJSON({ spatialReference: t2.spatialReference, ...e2 });
  }
  set lods(e2) {
    let t2 = 0, o2 = 0;
    const r2 = [], s3 = this._levelToLOD = {};
    e2 && (t2 = -1 / 0, o2 = 1 / 0, e2.forEach((e3) => {
      r2.push(e3.scale), t2 = e3.scale > t2 ? e3.scale : t2, o2 = e3.scale < o2 ? e3.scale : o2, s3[e3.level] = e3;
    })), this._set("scales", r2), this._set("lods", e2), this._initializeUpsampleLevels();
  }
  readSize(e2, t2) {
    return [t2.cols, t2.rows];
  }
  writeSize(e2, t2) {
    t2.cols = e2[0], t2.rows = e2[1];
  }
  zoomToScale(e2) {
    const t2 = this.scales;
    if (e2 <= 0)
      return t2[0];
    if (e2 >= t2.length - 1)
      return t2[t2.length - 1];
    const o2 = Math.floor(e2), r2 = o2 + 1;
    return t2[o2] / (t2[o2] / t2[r2]) ** (e2 - o2);
  }
  scaleToZoom(e2) {
    const t2 = this.scales, o2 = t2.length - 1;
    let r2 = 0;
    for (; r2 < o2; r2++) {
      const o3 = t2[r2], s3 = t2[r2 + 1];
      if (o3 <= e2)
        return r2;
      if (s3 === e2)
        return r2 + 1;
      if (o3 > e2 && s3 < e2)
        return r2 + Math.log(o3 / e2) / Math.log(o3 / s3);
    }
    return r2;
  }
  snapScale(e2, t2 = 0.95) {
    const o2 = this.scaleToZoom(e2);
    return o2 % Math.floor(o2) >= t2 ? this.zoomToScale(Math.ceil(o2)) : this.zoomToScale(Math.floor(o2));
  }
  tileAt(e2, t2, o2, r2) {
    const s3 = this.lodAt(e2);
    if (!s3)
      return null;
    let i3, l3;
    if ("number" == typeof t2)
      i3 = t2, l3 = o2;
    else if (S(t2.spatialReference, this.spatialReference))
      i3 = t2.x, l3 = t2.y, r2 = o2;
    else {
      const e3 = g(t2, this.spatialReference);
      if (null == e3)
        return null;
      i3 = e3.x, l3 = e3.y, r2 = o2;
    }
    const n = s3.resolution * this.size[0], a2 = s3.resolution * this.size[1];
    return r2 || (r2 = new t(null, 0, 0, 0, i())), r2.level = e2, r2.row = Math.floor((this.origin.y - l3) / a2 + 1e-3), r2.col = Math.floor((i3 - this.origin.x) / n + 1e-3), this.updateTileInfo(r2), r2;
  }
  updateTileInfo(e2, t2 = w.ExtrapolateOptions.NONE) {
    let o2 = this.lodAt(e2.level);
    if (!o2 && t2 === w.ExtrapolateOptions.POWER_OF_TWO) {
      const t3 = this.lods[this.lods.length - 1];
      t3.level < e2.level && (o2 = t3);
    }
    if (!o2)
      return;
    const r2 = e2.level - o2.level, s3 = o2.resolution * this.size[0] / 2 ** r2, i3 = o2.resolution * this.size[1] / 2 ** r2;
    e2.id = `${e2.level}/${e2.row}/${e2.col}`, e2.extent || (e2.extent = i()), e2.extent[0] = this.origin.x + e2.col * s3, e2.extent[1] = this.origin.y - (e2.row + 1) * i3, e2.extent[2] = e2.extent[0] + s3, e2.extent[3] = e2.extent[1] + i3;
  }
  upsampleTile(e2) {
    const t2 = this._upsampleLevels[e2.level];
    return !(!t2 || -1 === t2.parentLevel) && (e2.level = t2.parentLevel, e2.row = Math.floor(e2.row / t2.factor + 1e-3), e2.col = Math.floor(e2.col / t2.factor + 1e-3), this.updateTileInfo(e2), true);
  }
  getTileBounds(e2, t2) {
    const o2 = this.lodAt(t2.level);
    if (null == o2)
      return null;
    const { resolution: r2 } = o2, s3 = r2 * this.size[0], i3 = r2 * this.size[1];
    return e2[0] = this.origin.x + t2.col * s3, e2[1] = this.origin.y - (t2.row + 1) * i3, e2[2] = e2[0] + s3, e2[3] = e2[1] + i3, e2;
  }
  lodAt(e2) {
    var _a;
    return ((_a = this._levelToLOD) == null ? void 0 : _a[e2]) ?? null;
  }
  clone() {
    return w.fromJSON(this.write({}));
  }
  getOrCreateCompatible(e2, t2) {
    if (256 === this.size[0] && 256 === this.size[1])
      return 256 === e2 ? this : null;
    const o2 = [], r2 = this.lods.length;
    for (let s3 = 0; s3 < r2; s3++) {
      const e3 = this.lods[s3], r3 = e3.resolution * t2;
      o2.push(new p({ level: e3.level, scale: e3.scale, resolution: r3 }));
    }
    return new w({ size: [e2, e2], dpi: this.dpi, format: this.format, compressionQuality: this.compressionQuality, origin: this.origin, spatialReference: this.spatialReference, lods: o2 });
  }
  _initializeUpsampleLevels() {
    const e2 = this.lods;
    this._upsampleLevels = [];
    let t2 = null;
    for (let o2 = 0; o2 < e2.length; o2++) {
      const r2 = e2[o2];
      this._upsampleLevels[r2.level] = { parentLevel: t2 ? t2.level : -1, factor: t2 ? t2.resolution / r2.resolution : 0 }, t2 = r2;
    }
  }
};
e([y({ type: Number, json: { write: true } })], O.prototype, "compressionQuality", void 0), e([y({ type: Number, json: { write: true } })], O.prototype, "dpi", void 0), e([y({ type: String, json: { read: x2.read, write: x2.write, origins: { "web-scene": { read: false, write: false } } } })], O.prototype, "format", void 0), e([y({ readOnly: true })], O.prototype, "isWrappable", null), e([y({ type: x, json: { write: true } })], O.prototype, "origin", void 0), e([o("origin")], O.prototype, "readOrigin", null), e([y({ type: [p], value: null, json: { write: true } })], O.prototype, "lods", null), e([y({ readOnly: true })], O.prototype, "scales", void 0), e([y({ cast: (e2) => Array.isArray(e2) ? e2 : "number" == typeof e2 ? [e2, e2] : [256, 256] })], O.prototype, "size", void 0), e([o("size", ["rows", "cols"])], O.prototype, "readSize", null), e([r("size", { cols: { type: T }, rows: { type: T } })], O.prototype, "writeSize", null), e([y({ type: f, json: { write: true } })], O.prototype, "spatialReference", void 0), O = w = e([a("esri.layers.support.TileInfo")], O), function(e2) {
  var t2;
  (t2 = e2.ExtrapolateOptions || (e2.ExtrapolateOptions = {}))[t2.NONE = 0] = "NONE", t2[t2.POWER_OF_TWO = 1] = "POWER_OF_TWO";
}(O || (O = {}));
var j = O;

export {
  p,
  j
};
//# sourceMappingURL=chunk-PX3FFFQ5.js.map
