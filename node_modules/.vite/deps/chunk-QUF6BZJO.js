import {
  e as e2,
  t as t2,
  u as u4
} from "./chunk-6KMYS2SL.js";
import {
  a as a5,
  f as f2,
  h as h2,
  o as o2,
  s as s4,
  u,
  u2,
  u3
} from "./chunk-F72FE4ZJ.js";
import {
  p,
  v,
  y as y2,
  z
} from "./chunk-2735WBYK.js";
import {
  t
} from "./chunk-OZXJDVTE.js";
import {
  h
} from "./chunk-KKGH4SRQ.js";
import {
  a as a4
} from "./chunk-LQVUN6IS.js";
import {
  M
} from "./chunk-3GSONYPC.js";
import {
  f,
  o2 as o,
  r as r2,
  x2 as x
} from "./chunk-SFV6XLDZ.js";
import {
  s as s3
} from "./chunk-VBD33VNW.js";
import {
  l
} from "./chunk-7A5C2EQ3.js";
import {
  y3 as y
} from "./chunk-OYBXMT5R.js";
import {
  a2 as a3
} from "./chunk-CIDWM2UN.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";
import {
  a as a2,
  c
} from "./chunk-HNHXEGH2.js";
import {
  r
} from "./chunk-DWOEYHKS.js";
import {
  s2 as s,
  s3 as s2
} from "./chunk-W2N7YT6I.js";
import {
  a
} from "./chunk-I5JT24BO.js";

// node_modules/@arcgis/core/chunks/Zlib.js
var e3;
var r3;
var i;
var s5 = { exports: {} };
s5.exports, r3 = s5, void 0 !== (e3 = function() {
  function t9() {
    this.pos = 0, this.bufferLength = 0, this.eof = false, this.buffer = null;
  }
  return t9.prototype = { ensureBuffer: function(t10) {
    var e7 = this.buffer, r13 = e7 ? e7.byteLength : 0;
    if (t10 < r13)
      return e7;
    for (var i8 = 512; i8 < t10; )
      i8 <<= 1;
    for (var s10 = new Uint8Array(i8), f9 = 0; f9 < r13; ++f9)
      s10[f9] = e7[f9];
    return this.buffer = s10;
  }, getByte: function() {
    for (var t10 = this.pos; this.bufferLength <= t10; ) {
      if (this.eof)
        return null;
      this.readBlock();
    }
    return this.buffer[this.pos++];
  }, getBytes: function(t10) {
    var e7 = this.pos;
    if (t10) {
      this.ensureBuffer(e7 + t10);
      for (var r13 = e7 + t10; !this.eof && this.bufferLength < r13; )
        this.readBlock();
      var i8 = this.bufferLength;
      r13 > i8 && (r13 = i8);
    } else {
      for (; !this.eof; )
        this.readBlock();
      r13 = this.bufferLength;
    }
    return this.pos = r13, this.buffer.subarray(e7, r13);
  }, lookChar: function() {
    for (var t10 = this.pos; this.bufferLength <= t10; ) {
      if (this.eof)
        return null;
      this.readBlock();
    }
    return String.fromCharCode(this.buffer[this.pos]);
  }, getChar: function() {
    for (var t10 = this.pos; this.bufferLength <= t10; ) {
      if (this.eof)
        return null;
      this.readBlock();
    }
    return String.fromCharCode(this.buffer[this.pos++]);
  }, makeSubStream: function(t10, e7, r13) {
    for (var i8 = t10 + e7; this.bufferLength <= i8 && !this.eof; )
      this.readBlock();
    return new Stream(this.buffer, t10, e7, r13);
  }, skip: function(t10) {
    t10 || (t10 = 1), this.pos += t10;
  }, reset: function() {
    this.pos = 0;
  } }, t9;
}(), i = function() {
  if (!self || !self.Uint32Array)
    return null;
  var t9 = new Uint32Array([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]), r13 = new Uint32Array([3, 4, 5, 6, 7, 8, 9, 10, 65547, 65549, 65551, 65553, 131091, 131095, 131099, 131103, 196643, 196651, 196659, 196667, 262211, 262227, 262243, 262259, 327811, 327843, 327875, 327907, 258, 258, 258]), i8 = new Uint32Array([1, 2, 3, 4, 65541, 65543, 131081, 131085, 196625, 196633, 262177, 262193, 327745, 327777, 393345, 393409, 459009, 459137, 524801, 525057, 590849, 591361, 657409, 658433, 724993, 727041, 794625, 798721, 868353, 876545]), s10 = [new Uint32Array([459008, 524368, 524304, 524568, 459024, 524400, 524336, 590016, 459016, 524384, 524320, 589984, 524288, 524416, 524352, 590048, 459012, 524376, 524312, 589968, 459028, 524408, 524344, 590032, 459020, 524392, 524328, 59e4, 524296, 524424, 524360, 590064, 459010, 524372, 524308, 524572, 459026, 524404, 524340, 590024, 459018, 524388, 524324, 589992, 524292, 524420, 524356, 590056, 459014, 524380, 524316, 589976, 459030, 524412, 524348, 590040, 459022, 524396, 524332, 590008, 524300, 524428, 524364, 590072, 459009, 524370, 524306, 524570, 459025, 524402, 524338, 590020, 459017, 524386, 524322, 589988, 524290, 524418, 524354, 590052, 459013, 524378, 524314, 589972, 459029, 524410, 524346, 590036, 459021, 524394, 524330, 590004, 524298, 524426, 524362, 590068, 459011, 524374, 524310, 524574, 459027, 524406, 524342, 590028, 459019, 524390, 524326, 589996, 524294, 524422, 524358, 590060, 459015, 524382, 524318, 589980, 459031, 524414, 524350, 590044, 459023, 524398, 524334, 590012, 524302, 524430, 524366, 590076, 459008, 524369, 524305, 524569, 459024, 524401, 524337, 590018, 459016, 524385, 524321, 589986, 524289, 524417, 524353, 590050, 459012, 524377, 524313, 589970, 459028, 524409, 524345, 590034, 459020, 524393, 524329, 590002, 524297, 524425, 524361, 590066, 459010, 524373, 524309, 524573, 459026, 524405, 524341, 590026, 459018, 524389, 524325, 589994, 524293, 524421, 524357, 590058, 459014, 524381, 524317, 589978, 459030, 524413, 524349, 590042, 459022, 524397, 524333, 590010, 524301, 524429, 524365, 590074, 459009, 524371, 524307, 524571, 459025, 524403, 524339, 590022, 459017, 524387, 524323, 589990, 524291, 524419, 524355, 590054, 459013, 524379, 524315, 589974, 459029, 524411, 524347, 590038, 459021, 524395, 524331, 590006, 524299, 524427, 524363, 590070, 459011, 524375, 524311, 524575, 459027, 524407, 524343, 590030, 459019, 524391, 524327, 589998, 524295, 524423, 524359, 590062, 459015, 524383, 524319, 589982, 459031, 524415, 524351, 590046, 459023, 524399, 524335, 590014, 524303, 524431, 524367, 590078, 459008, 524368, 524304, 524568, 459024, 524400, 524336, 590017, 459016, 524384, 524320, 589985, 524288, 524416, 524352, 590049, 459012, 524376, 524312, 589969, 459028, 524408, 524344, 590033, 459020, 524392, 524328, 590001, 524296, 524424, 524360, 590065, 459010, 524372, 524308, 524572, 459026, 524404, 524340, 590025, 459018, 524388, 524324, 589993, 524292, 524420, 524356, 590057, 459014, 524380, 524316, 589977, 459030, 524412, 524348, 590041, 459022, 524396, 524332, 590009, 524300, 524428, 524364, 590073, 459009, 524370, 524306, 524570, 459025, 524402, 524338, 590021, 459017, 524386, 524322, 589989, 524290, 524418, 524354, 590053, 459013, 524378, 524314, 589973, 459029, 524410, 524346, 590037, 459021, 524394, 524330, 590005, 524298, 524426, 524362, 590069, 459011, 524374, 524310, 524574, 459027, 524406, 524342, 590029, 459019, 524390, 524326, 589997, 524294, 524422, 524358, 590061, 459015, 524382, 524318, 589981, 459031, 524414, 524350, 590045, 459023, 524398, 524334, 590013, 524302, 524430, 524366, 590077, 459008, 524369, 524305, 524569, 459024, 524401, 524337, 590019, 459016, 524385, 524321, 589987, 524289, 524417, 524353, 590051, 459012, 524377, 524313, 589971, 459028, 524409, 524345, 590035, 459020, 524393, 524329, 590003, 524297, 524425, 524361, 590067, 459010, 524373, 524309, 524573, 459026, 524405, 524341, 590027, 459018, 524389, 524325, 589995, 524293, 524421, 524357, 590059, 459014, 524381, 524317, 589979, 459030, 524413, 524349, 590043, 459022, 524397, 524333, 590011, 524301, 524429, 524365, 590075, 459009, 524371, 524307, 524571, 459025, 524403, 524339, 590023, 459017, 524387, 524323, 589991, 524291, 524419, 524355, 590055, 459013, 524379, 524315, 589975, 459029, 524411, 524347, 590039, 459021, 524395, 524331, 590007, 524299, 524427, 524363, 590071, 459011, 524375, 524311, 524575, 459027, 524407, 524343, 590031, 459019, 524391, 524327, 589999, 524295, 524423, 524359, 590063, 459015, 524383, 524319, 589983, 459031, 524415, 524351, 590047, 459023, 524399, 524335, 590015, 524303, 524431, 524367, 590079]), 9], f9 = [new Uint32Array([327680, 327696, 327688, 327704, 327684, 327700, 327692, 327708, 327682, 327698, 327690, 327706, 327686, 327702, 327694, 0, 327681, 327697, 327689, 327705, 327685, 327701, 327693, 327709, 327683, 327699, 327691, 327707, 327687, 327703, 327695, 0]), 5];
  function o8(t10) {
    throw new Error(t10);
  }
  function n11(t10) {
    var r14 = 0, i9 = t10[r14++], s11 = t10[r14++];
    -1 != i9 && -1 != s11 || o8("Invalid header in flate stream"), 8 != (15 & i9) && o8("Unknown compression method in flate stream"), ((i9 << 8) + s11) % 31 != 0 && o8("Bad FCHECK in flate stream"), 32 & s11 && o8("FDICT bit set in flate stream"), this.bytes = t10, this.bytesPos = r14, this.codeSize = 0, this.codeBuf = 0, e3.call(this);
  }
  return n11.prototype = Object.create(e3.prototype), n11.prototype.getBits = function(t10) {
    for (var e7, r14 = this.codeSize, i9 = this.codeBuf, s11 = this.bytes, f10 = this.bytesPos; r14 < t10; )
      void 0 === (e7 = s11[f10++]) && o8("Bad encoding in flate stream"), i9 |= e7 << r14, r14 += 8;
    return e7 = i9 & (1 << t10) - 1, this.codeBuf = i9 >> t10, this.codeSize = r14 -= t10, this.bytesPos = f10, e7;
  }, n11.prototype.getCode = function(t10) {
    for (var e7 = t10[0], r14 = t10[1], i9 = this.codeSize, s11 = this.codeBuf, f10 = this.bytes, n12 = this.bytesPos; i9 < r14; ) {
      var a14;
      void 0 === (a14 = f10[n12++]) && o8("Bad encoding in flate stream"), s11 |= a14 << i9, i9 += 8;
    }
    var h8 = e7[s11 & (1 << r14) - 1], u12 = h8 >> 16, l6 = 65535 & h8;
    return (0 == i9 || i9 < u12 || 0 == u12) && o8("Bad encoding in flate stream"), this.codeBuf = s11 >> u12, this.codeSize = i9 - u12, this.bytesPos = n12, l6;
  }, n11.prototype.generateHuffmanTable = function(t10) {
    for (var e7 = t10.length, r14 = 0, i9 = 0; i9 < e7; ++i9)
      t10[i9] > r14 && (r14 = t10[i9]);
    for (var s11 = 1 << r14, f10 = new Uint32Array(s11), o9 = 1, n12 = 0, a14 = 2; o9 <= r14; ++o9, n12 <<= 1, a14 <<= 1)
      for (var h8 = 0; h8 < e7; ++h8)
        if (t10[h8] == o9) {
          var u12 = 0, l6 = n12;
          for (i9 = 0; i9 < o9; ++i9)
            u12 = u12 << 1 | 1 & l6, l6 >>= 1;
          for (i9 = u12; i9 < s11; i9 += a14)
            f10[i9] = o9 << 16 | h8;
          ++n12;
        }
    return [f10, r14];
  }, n11.prototype.readBlock = function() {
    function e7(t10, e8, r14, i9, s11) {
      for (var f10 = t10.getBits(r14) + i9; f10-- > 0; )
        e8[b4++] = s11;
    }
    var n12 = this.getBits(3);
    if (1 & n12 && (this.eof = true), 0 != (n12 >>= 1)) {
      var a14, h8;
      if (1 == n12)
        a14 = s10, h8 = f9;
      else if (2 == n12) {
        for (var u12 = this.getBits(5) + 257, l6 = this.getBits(5) + 1, c7 = this.getBits(4) + 4, d4 = Array(t9.length), b4 = 0; b4 < c7; )
          d4[t9[b4++]] = this.getBits(3);
        for (var v5 = this.generateHuffmanTable(d4), g5 = 0, B3 = (b4 = 0, u12 + l6), p7 = new Array(B3); b4 < B3; ) {
          var y6 = this.getCode(v5);
          16 == y6 ? e7(this, p7, 2, 3, g5) : 17 == y6 ? e7(this, p7, 3, 3, g5 = 0) : 18 == y6 ? e7(this, p7, 7, 11, g5 = 0) : p7[b4++] = g5 = y6;
        }
        a14 = this.generateHuffmanTable(p7.slice(0, u12)), h8 = this.generateHuffmanTable(p7.slice(u12, B3));
      } else
        o8("Unknown block type in flate stream");
      for (var m6 = (T3 = this.buffer) ? T3.length : 0, k4 = this.bufferLength; ; ) {
        var w4 = this.getCode(a14);
        if (w4 < 256)
          k4 + 1 >= m6 && (m6 = (T3 = this.ensureBuffer(k4 + 1)).length), T3[k4++] = w4;
        else {
          if (256 == w4)
            return void (this.bufferLength = k4);
          var C5 = (w4 = r13[w4 -= 257]) >> 16;
          C5 > 0 && (C5 = this.getBits(C5)), g5 = (65535 & w4) + C5, w4 = this.getCode(h8), (C5 = (w4 = i8[w4]) >> 16) > 0 && (C5 = this.getBits(C5));
          var L3 = (65535 & w4) + C5;
          k4 + g5 >= m6 && (m6 = (T3 = this.ensureBuffer(k4 + g5)).length);
          for (var S3 = 0; S3 < g5; ++S3, ++k4)
            T3[k4] = T3[k4 - L3];
        }
      }
    } else {
      var A3, U3 = this.bytes, P3 = this.bytesPos;
      void 0 === (A3 = U3[P3++]) && o8("Bad block header in flate stream");
      var z2 = A3;
      void 0 === (A3 = U3[P3++]) && o8("Bad block header in flate stream"), z2 |= A3 << 8, void 0 === (A3 = U3[P3++]) && o8("Bad block header in flate stream");
      var H2 = A3;
      void 0 === (A3 = U3[P3++]) && o8("Bad block header in flate stream"), (H2 |= A3 << 8) != (65535 & ~z2) && o8("Bad uncompressed block length in flate stream"), this.codeBuf = 0, this.codeSize = 0;
      var x5 = this.bufferLength, T3 = this.ensureBuffer(x5 + z2), j2 = x5 + z2;
      this.bufferLength = j2;
      for (var E3 = x5; E3 < j2; ++E3) {
        if (void 0 === (A3 = U3[P3++])) {
          this.eof = true;
          break;
        }
        T3[E3] = A3;
      }
      this.bytesPos = P3;
    }
  }, n11;
}()) && (r3.exports = i);
var f3 = t(s5.exports);

// node_modules/@arcgis/core/layers/support/rasterFormats/ImageCanvasDecoder.js
var i2 = class _i {
  constructor(t9) {
    this._canvas = null, this._ctx = null, t9 && (this._canvas = t9.canvas, this._ctx = t9.ctx || t9.canvas && t9.canvas.getContext("2d"));
  }
  decode(n11, s10, r13) {
    if (!n11 || n11.byteLength < 10)
      throw new s2("imagecanvasdecoder: decode", "required a valid encoded data as input.");
    let { width: c7 = 0, height: h8 = 0, format: o8 } = s10;
    const { applyJpegMask: l6 } = s10;
    if (l6 && (!c7 || !h8))
      throw new s2("imagecanvasdecoder: decode", "image width and height are needed to apply jpeg mask directly to canvas");
    return new Promise((t9, d4) => {
      let g5 = null;
      "jpg" === o8 && l6 && (g5 = _i._getMask(n11, { width: c7, height: h8 }));
      const w4 = new Blob([new Uint8Array(n11)], { type: "image/" + o8 == "jpg" ? "jpeg" : o8 }), v5 = URL.createObjectURL(w4), m6 = new Image();
      let _2;
      m6.src = v5, m6.onload = () => {
        if (URL.revokeObjectURL(v5), a2(r13))
          return void d4(c());
        c7 = m6.width, h8 = m6.height, this._canvas && this._ctx ? (this._canvas.width === c7 && this._canvas.height === h8 || (this._canvas.width = c7, this._canvas.height = h8), this._ctx.clearRect(0, 0, c7, h8)) : (this._canvas = document.createElement("canvas"), this._canvas.width = c7, this._canvas.height = h8, this._ctx = this._canvas.getContext("2d")), this._ctx.drawImage(m6, 0, 0);
        const n12 = this._ctx.getImageData(0, 0, c7, h8);
        let i8;
        if (_2 = n12.data, s10.renderOnCanvas) {
          if (g5)
            for (i8 = 0; i8 < g5.length; i8++)
              g5[i8] ? _2[4 * i8 + 3] = 255 : _2[4 * i8 + 3] = 0;
          return this._ctx.putImageData(n12, 0, 0), void t9(null);
        }
        const o9 = c7 * h8, l7 = new Uint8Array(o9), w5 = new Uint8Array(o9), p7 = new Uint8Array(o9);
        if (g5)
          for (i8 = 0; i8 < o9; i8++)
            l7[i8] = _2[4 * i8], w5[i8] = _2[4 * i8 + 1], p7[i8] = _2[4 * i8 + 2];
        else
          for (g5 = new Uint8Array(o9), i8 = 0; i8 < o9; i8++)
            l7[i8] = _2[4 * i8], w5[i8] = _2[4 * i8 + 1], p7[i8] = _2[4 * i8 + 2], g5[i8] = _2[4 * i8 + 3];
        t9({ width: c7, height: h8, pixels: [l7, w5, p7], mask: g5, pixelType: "u8" });
      }, m6.onerror = () => {
        URL.revokeObjectURL(v5), d4("cannot load image");
      };
    });
  }
  static _getMask(t9, e7) {
    let a14 = null;
    try {
      const i8 = new Uint8Array(t9), s10 = Math.ceil(i8.length / 2);
      let r13 = 0;
      const c7 = i8.length - 2;
      for (r13 = s10; r13 < c7 && (255 !== i8[r13] || 217 !== i8[r13 + 1]); r13++)
        ;
      if (r13 += 2, r13 < i8.length - 1) {
        const t10 = new f3(i8.subarray(r13)).getBytes();
        a14 = new Uint8Array(e7.width * e7.height);
        let s11 = 0;
        for (let e8 = 0; e8 < t10.length; e8++)
          for (let n11 = 7; n11 >= 0; n11--)
            a14[s11++] = t10[e8] >> n11 & 1;
      }
    } catch (i8) {
    }
    return a14;
  }
};

// node_modules/@arcgis/core/chunks/Jpg.js
var r4;
var n;
var o3;
var a6 = { exports: {} };
a6.exports, r4 = a6, n = function() {
  var e7 = function() {
    function e8(e9) {
      this.message = "JPEG error: " + e9;
    }
    return e8.prototype = new Error(), e8.prototype.name = "JpegError", e8.constructor = e8, e8;
  }();
  return function() {
    if (!self || !self.Uint8ClampedArray)
      return null;
    var r13 = new Uint8Array([0, 1, 8, 16, 9, 2, 3, 10, 17, 24, 32, 25, 18, 11, 4, 5, 12, 19, 26, 33, 40, 48, 41, 34, 27, 20, 13, 6, 7, 14, 21, 28, 35, 42, 49, 56, 57, 50, 43, 36, 29, 22, 15, 23, 30, 37, 44, 51, 58, 59, 52, 45, 38, 31, 39, 46, 53, 60, 61, 54, 47, 55, 62, 63]), n11 = 4017, o8 = 799, a14 = 3406, t9 = 2276, i8 = 1567, s10 = 3784, c7 = 5793, f9 = 2896;
    function l6() {
      this.decodeTransform = null, this.colorTransform = -1;
    }
    function u12(e8, r14) {
      for (var n12, o9, a15 = 0, t10 = [], i9 = 16; i9 > 0 && !e8[i9 - 1]; )
        i9--;
      t10.push({ children: [], index: 0 });
      var s11, c8 = t10[0];
      for (n12 = 0; n12 < i9; n12++) {
        for (o9 = 0; o9 < e8[n12]; o9++) {
          for ((c8 = t10.pop()).children[c8.index] = r14[a15]; c8.index > 0; )
            c8 = t10.pop();
          for (c8.index++, t10.push(c8); t10.length <= n12; )
            t10.push(s11 = { children: [], index: 0 }), c8.children[c8.index] = s11.children, c8 = s11;
          a15++;
        }
        n12 + 1 < i9 && (t10.push(s11 = { children: [], index: 0 }), c8.children[c8.index] = s11.children, c8 = s11);
      }
      return t10[0].children;
    }
    function h8(e8, r14, n12) {
      return 64 * ((e8.blocksPerLine + 1) * r14 + n12);
    }
    function v5(n12, o9, a15, t10, i9, s11, c8, f10, l7) {
      var u13 = a15.mcusPerLine, v6 = a15.progressive, m7 = o9, d5 = 0, b4 = 0;
      function k4() {
        if (b4 > 0)
          return b4--, d5 >> b4 & 1;
        if (255 === (d5 = n12[o9++])) {
          var r14 = n12[o9++];
          if (r14)
            throw new e7("unexpected marker " + (d5 << 8 | r14).toString(16));
        }
        return b4 = 7, d5 >>> 7;
      }
      function g5(r14) {
        for (var n13 = r14; ; ) {
          if ("number" == typeof (n13 = n13[k4()]))
            return n13;
          if ("object" != typeof n13)
            throw new e7("invalid huffman sequence");
        }
      }
      function C5(e8) {
        for (var r14 = 0; e8 > 0; )
          r14 = r14 << 1 | k4(), e8--;
        return r14;
      }
      function w4(e8) {
        if (1 === e8)
          return 1 === k4() ? 1 : -1;
        var r14 = C5(e8);
        return r14 >= 1 << e8 - 1 ? r14 : r14 + (-1 << e8) + 1;
      }
      function x5(e8, n13) {
        var o10 = g5(e8.huffmanTableDC), a16 = 0 === o10 ? 0 : w4(o10);
        e8.blockData[n13] = e8.pred += a16;
        for (var t11 = 1; t11 < 64; ) {
          var i10 = g5(e8.huffmanTableAC), s12 = 15 & i10, c9 = i10 >> 4;
          if (0 !== s12) {
            var f11 = r13[t11 += c9];
            e8.blockData[n13 + f11] = w4(s12), t11++;
          } else {
            if (c9 < 15)
              break;
            t11 += 16;
          }
        }
      }
      function y6(e8, r14) {
        var n13 = g5(e8.huffmanTableDC), o10 = 0 === n13 ? 0 : w4(n13) << l7;
        e8.blockData[r14] = e8.pred += o10;
      }
      function D4(e8, r14) {
        e8.blockData[r14] |= k4() << l7;
      }
      var T3 = 0;
      function P3(e8, n13) {
        if (T3 > 0)
          T3--;
        else
          for (var o10 = s11, a16 = c8; o10 <= a16; ) {
            var t11 = g5(e8.huffmanTableAC), i10 = 15 & t11, f11 = t11 >> 4;
            if (0 !== i10) {
              var u14 = r13[o10 += f11];
              e8.blockData[n13 + u14] = w4(i10) * (1 << l7), o10++;
            } else {
              if (f11 < 15) {
                T3 = C5(f11) + (1 << f11) - 1;
                break;
              }
              o10 += 16;
            }
          }
      }
      var L3, A3 = 0;
      function _2(n13, o10) {
        for (var a16, t11, i10 = s11, f11 = c8, u14 = 0; i10 <= f11; ) {
          var h9 = r13[i10];
          switch (A3) {
            case 0:
              if (u14 = (t11 = g5(n13.huffmanTableAC)) >> 4, 0 == (a16 = 15 & t11))
                u14 < 15 ? (T3 = C5(u14) + (1 << u14), A3 = 4) : (u14 = 16, A3 = 1);
              else {
                if (1 !== a16)
                  throw new e7("invalid ACn encoding");
                L3 = w4(a16), A3 = u14 ? 2 : 3;
              }
              continue;
            case 1:
            case 2:
              n13.blockData[o10 + h9] ? n13.blockData[o10 + h9] += k4() << l7 : 0 == --u14 && (A3 = 2 === A3 ? 3 : 0);
              break;
            case 3:
              n13.blockData[o10 + h9] ? n13.blockData[o10 + h9] += k4() << l7 : (n13.blockData[o10 + h9] = L3 << l7, A3 = 0);
              break;
            case 4:
              n13.blockData[o10 + h9] && (n13.blockData[o10 + h9] += k4() << l7);
          }
          i10++;
        }
        4 === A3 && 0 == --T3 && (A3 = 0);
      }
      function U3(e8, r14, n13, o10, a16) {
        var t11 = n13 % u13;
        r14(e8, h8(e8, (n13 / u13 | 0) * e8.v + o10, t11 * e8.h + a16));
      }
      function z2(e8, r14, n13) {
        r14(e8, h8(e8, n13 / e8.blocksPerLine | 0, n13 % e8.blocksPerLine));
      }
      var I4, M4, Y2, q, S3, H2, R3 = t10.length;
      H2 = v6 ? 0 === s11 ? 0 === f10 ? y6 : D4 : 0 === f10 ? P3 : _2 : x5;
      var j2, E3, J, V2, B3 = 0;
      for (E3 = 1 === R3 ? t10[0].blocksPerLine * t10[0].blocksPerColumn : u13 * a15.mcusPerColumn; B3 < E3; ) {
        var N2 = i9 ? Math.min(E3 - B3, i9) : E3;
        for (M4 = 0; M4 < R3; M4++)
          t10[M4].pred = 0;
        if (T3 = 0, 1 === R3)
          for (I4 = t10[0], S3 = 0; S3 < N2; S3++)
            z2(I4, H2, B3), B3++;
        else
          for (S3 = 0; S3 < N2; S3++) {
            for (M4 = 0; M4 < R3; M4++)
              for (J = (I4 = t10[M4]).h, V2 = I4.v, Y2 = 0; Y2 < V2; Y2++)
                for (q = 0; q < J; q++)
                  U3(I4, H2, B3, Y2, q);
            B3++;
          }
        b4 = 0, (j2 = p7(n12, o9)) && j2.invalid && (console.log("decodeScan - unexpected MCU data, next marker is: " + j2.invalid), o9 = j2.offset);
        var G3 = j2 && j2.marker;
        if (!G3 || G3 <= 65280)
          throw new e7("marker was not found");
        if (!(G3 >= 65488 && G3 <= 65495))
          break;
        o9 += 2;
      }
      return (j2 = p7(n12, o9)) && j2.invalid && (console.log("decodeScan - unexpected Scan data, next marker is: " + j2.invalid), o9 = j2.offset), o9 - m7;
    }
    function m6(r14, l7, u13) {
      var h9, v6, m7, d5, p8, b4, k4, g5, C5, w4, x5, y6, D4, T3, P3, L3, A3, _2 = r14.quantizationTable, U3 = r14.blockData;
      if (!_2)
        throw new e7("missing required Quantization Table.");
      for (var z2 = 0; z2 < 64; z2 += 8)
        C5 = U3[l7 + z2], w4 = U3[l7 + z2 + 1], x5 = U3[l7 + z2 + 2], y6 = U3[l7 + z2 + 3], D4 = U3[l7 + z2 + 4], T3 = U3[l7 + z2 + 5], P3 = U3[l7 + z2 + 6], L3 = U3[l7 + z2 + 7], C5 *= _2[z2], 0 != (w4 | x5 | y6 | D4 | T3 | P3 | L3) ? (w4 *= _2[z2 + 1], x5 *= _2[z2 + 2], y6 *= _2[z2 + 3], D4 *= _2[z2 + 4], T3 *= _2[z2 + 5], P3 *= _2[z2 + 6], L3 *= _2[z2 + 7], v6 = (h9 = (h9 = c7 * C5 + 128 >> 8) + (v6 = c7 * D4 + 128 >> 8) + 1 >> 1) - v6, A3 = (m7 = x5) * s10 + (d5 = P3) * i8 + 128 >> 8, m7 = m7 * i8 - d5 * s10 + 128 >> 8, k4 = (p8 = (p8 = f9 * (w4 - L3) + 128 >> 8) + (k4 = T3 << 4) + 1 >> 1) - k4, b4 = (g5 = (g5 = f9 * (w4 + L3) + 128 >> 8) + (b4 = y6 << 4) + 1 >> 1) - b4, d5 = (h9 = h9 + (d5 = A3) + 1 >> 1) - d5, m7 = (v6 = v6 + m7 + 1 >> 1) - m7, A3 = p8 * t9 + g5 * a14 + 2048 >> 12, p8 = p8 * a14 - g5 * t9 + 2048 >> 12, g5 = A3, A3 = b4 * o8 + k4 * n11 + 2048 >> 12, b4 = b4 * n11 - k4 * o8 + 2048 >> 12, k4 = A3, u13[z2] = h9 + g5, u13[z2 + 7] = h9 - g5, u13[z2 + 1] = v6 + k4, u13[z2 + 6] = v6 - k4, u13[z2 + 2] = m7 + b4, u13[z2 + 5] = m7 - b4, u13[z2 + 3] = d5 + p8, u13[z2 + 4] = d5 - p8) : (A3 = c7 * C5 + 512 >> 10, u13[z2] = A3, u13[z2 + 1] = A3, u13[z2 + 2] = A3, u13[z2 + 3] = A3, u13[z2 + 4] = A3, u13[z2 + 5] = A3, u13[z2 + 6] = A3, u13[z2 + 7] = A3);
      for (var I4 = 0; I4 < 8; ++I4)
        C5 = u13[I4], 0 != ((w4 = u13[I4 + 8]) | (x5 = u13[I4 + 16]) | (y6 = u13[I4 + 24]) | (D4 = u13[I4 + 32]) | (T3 = u13[I4 + 40]) | (P3 = u13[I4 + 48]) | (L3 = u13[I4 + 56])) ? (v6 = (h9 = 4112 + ((h9 = c7 * C5 + 2048 >> 12) + (v6 = c7 * D4 + 2048 >> 12) + 1 >> 1)) - v6, A3 = (m7 = x5) * s10 + (d5 = P3) * i8 + 2048 >> 12, m7 = m7 * i8 - d5 * s10 + 2048 >> 12, d5 = A3, k4 = (p8 = (p8 = f9 * (w4 - L3) + 2048 >> 12) + (k4 = T3) + 1 >> 1) - k4, b4 = (g5 = (g5 = f9 * (w4 + L3) + 2048 >> 12) + (b4 = y6) + 1 >> 1) - b4, A3 = p8 * t9 + g5 * a14 + 2048 >> 12, p8 = p8 * a14 - g5 * t9 + 2048 >> 12, g5 = A3, A3 = b4 * o8 + k4 * n11 + 2048 >> 12, b4 = b4 * n11 - k4 * o8 + 2048 >> 12, C5 = (C5 = (h9 = h9 + d5 + 1 >> 1) + g5) < 16 ? 0 : C5 >= 4080 ? 255 : C5 >> 4, w4 = (w4 = (v6 = v6 + m7 + 1 >> 1) + (k4 = A3)) < 16 ? 0 : w4 >= 4080 ? 255 : w4 >> 4, x5 = (x5 = (m7 = v6 - m7) + b4) < 16 ? 0 : x5 >= 4080 ? 255 : x5 >> 4, y6 = (y6 = (d5 = h9 - d5) + p8) < 16 ? 0 : y6 >= 4080 ? 255 : y6 >> 4, D4 = (D4 = d5 - p8) < 16 ? 0 : D4 >= 4080 ? 255 : D4 >> 4, T3 = (T3 = m7 - b4) < 16 ? 0 : T3 >= 4080 ? 255 : T3 >> 4, P3 = (P3 = v6 - k4) < 16 ? 0 : P3 >= 4080 ? 255 : P3 >> 4, L3 = (L3 = h9 - g5) < 16 ? 0 : L3 >= 4080 ? 255 : L3 >> 4, U3[l7 + I4] = C5, U3[l7 + I4 + 8] = w4, U3[l7 + I4 + 16] = x5, U3[l7 + I4 + 24] = y6, U3[l7 + I4 + 32] = D4, U3[l7 + I4 + 40] = T3, U3[l7 + I4 + 48] = P3, U3[l7 + I4 + 56] = L3) : (A3 = (A3 = c7 * C5 + 8192 >> 14) < -2040 ? 0 : A3 >= 2024 ? 255 : A3 + 2056 >> 4, U3[l7 + I4] = A3, U3[l7 + I4 + 8] = A3, U3[l7 + I4 + 16] = A3, U3[l7 + I4 + 24] = A3, U3[l7 + I4 + 32] = A3, U3[l7 + I4 + 40] = A3, U3[l7 + I4 + 48] = A3, U3[l7 + I4 + 56] = A3);
    }
    function d4(e8, r14) {
      for (var n12 = r14.blocksPerLine, o9 = r14.blocksPerColumn, a15 = new Int16Array(64), t10 = 0; t10 < o9; t10++)
        for (var i9 = 0; i9 < n12; i9++)
          m6(r14, h8(r14, t10, i9), a15);
      return r14.blockData;
    }
    function p7(e8, r14, n12) {
      function o9(r15) {
        return e8[r15] << 8 | e8[r15 + 1];
      }
      var a15 = e8.length - 1, t10 = n12 < r14 ? n12 : r14;
      if (r14 >= a15)
        return null;
      var i9 = o9(r14);
      if (i9 >= 65472 && i9 <= 65534)
        return { invalid: null, marker: i9, offset: r14 };
      for (var s11 = o9(t10); !(s11 >= 65472 && s11 <= 65534); ) {
        if (++t10 >= a15)
          return null;
        s11 = o9(t10);
      }
      return { invalid: i9.toString(16), marker: s11, offset: t10 };
    }
    return l6.prototype = { parse: function(n12) {
      function o9() {
        var e8 = n12[c8] << 8 | n12[c8 + 1];
        return c8 += 2, e8;
      }
      function a15() {
        var e8 = o9(), r14 = c8 + e8 - 2, a16 = p7(n12, r14, c8);
        a16 && a16.invalid && (console.log("readDataBlock - incorrect length, next marker is: " + a16.invalid), r14 = a16.offset);
        var t11 = n12.subarray(c8, r14);
        return c8 += t11.length, t11;
      }
      function t10(e8) {
        for (var r14 = Math.ceil(e8.samplesPerLine / 8 / e8.maxH), n13 = Math.ceil(e8.scanLines / 8 / e8.maxV), o10 = 0; o10 < e8.components.length; o10++) {
          R3 = e8.components[o10];
          var a16 = Math.ceil(Math.ceil(e8.samplesPerLine / 8) * R3.h / e8.maxH), t11 = Math.ceil(Math.ceil(e8.scanLines / 8) * R3.v / e8.maxV), i10 = r14 * R3.h, s12 = n13 * R3.v * 64 * (i10 + 1);
          R3.blockData = new Int16Array(s12), R3.blocksPerLine = a16, R3.blocksPerColumn = t11;
        }
        e8.mcusPerLine = r14, e8.mcusPerColumn = n13;
      }
      var i9, s11, c8 = 0, f10 = null, l7 = null, h9 = [], m7 = [], b4 = [], k4 = o9();
      if (65496 !== k4)
        throw new e7("SOI not found");
      for (k4 = o9(); 65497 !== k4; ) {
        var g5, C5, w4;
        switch (k4) {
          case 65504:
          case 65505:
          case 65506:
          case 65507:
          case 65508:
          case 65509:
          case 65510:
          case 65511:
          case 65512:
          case 65513:
          case 65514:
          case 65515:
          case 65516:
          case 65517:
          case 65518:
          case 65519:
          case 65534:
            var x5 = a15();
            65504 === k4 && 74 === x5[0] && 70 === x5[1] && 73 === x5[2] && 70 === x5[3] && 0 === x5[4] && (f10 = { version: { major: x5[5], minor: x5[6] }, densityUnits: x5[7], xDensity: x5[8] << 8 | x5[9], yDensity: x5[10] << 8 | x5[11], thumbWidth: x5[12], thumbHeight: x5[13], thumbData: x5.subarray(14, 14 + 3 * x5[12] * x5[13]) }), 65518 === k4 && 65 === x5[0] && 100 === x5[1] && 111 === x5[2] && 98 === x5[3] && 101 === x5[4] && (l7 = { version: x5[5] << 8 | x5[6], flags0: x5[7] << 8 | x5[8], flags1: x5[9] << 8 | x5[10], transformCode: x5[11] });
            break;
          case 65499:
            for (var y6 = o9() + c8 - 2; c8 < y6; ) {
              var D4 = n12[c8++], T3 = new Uint16Array(64);
              if (D4 >> 4 == 0)
                for (C5 = 0; C5 < 64; C5++)
                  T3[r13[C5]] = n12[c8++];
              else {
                if (D4 >> 4 != 1)
                  throw new e7("DQT - invalid table spec");
                for (C5 = 0; C5 < 64; C5++)
                  T3[r13[C5]] = o9();
              }
              h9[15 & D4] = T3;
            }
            break;
          case 65472:
          case 65473:
          case 65474:
            if (i9)
              throw new e7("Only single frame JPEGs supported");
            o9(), (i9 = {}).extended = 65473 === k4, i9.progressive = 65474 === k4, i9.precision = n12[c8++], i9.scanLines = o9(), i9.samplesPerLine = o9(), i9.components = [], i9.componentIds = {};
            var P3, L3 = n12[c8++], A3 = 0, _2 = 0;
            for (g5 = 0; g5 < L3; g5++) {
              P3 = n12[c8];
              var U3 = n12[c8 + 1] >> 4, z2 = 15 & n12[c8 + 1];
              A3 < U3 && (A3 = U3), _2 < z2 && (_2 = z2);
              var I4 = n12[c8 + 2];
              w4 = i9.components.push({ h: U3, v: z2, quantizationId: I4, quantizationTable: null }), i9.componentIds[P3] = w4 - 1, c8 += 3;
            }
            i9.maxH = A3, i9.maxV = _2, t10(i9);
            break;
          case 65476:
            var M4 = o9();
            for (g5 = 2; g5 < M4; ) {
              var Y2 = n12[c8++], q = new Uint8Array(16), S3 = 0;
              for (C5 = 0; C5 < 16; C5++, c8++)
                S3 += q[C5] = n12[c8];
              var H2 = new Uint8Array(S3);
              for (C5 = 0; C5 < S3; C5++, c8++)
                H2[C5] = n12[c8];
              g5 += 17 + S3, (Y2 >> 4 == 0 ? b4 : m7)[15 & Y2] = u12(q, H2);
            }
            break;
          case 65501:
            o9(), s11 = o9();
            break;
          case 65498:
            o9();
            var R3, j2 = n12[c8++], E3 = [];
            for (g5 = 0; g5 < j2; g5++) {
              var J = i9.componentIds[n12[c8++]];
              R3 = i9.components[J];
              var V2 = n12[c8++];
              R3.huffmanTableDC = b4[V2 >> 4], R3.huffmanTableAC = m7[15 & V2], E3.push(R3);
            }
            var B3 = n12[c8++], N2 = n12[c8++], G3 = n12[c8++], O3 = v5(n12, c8, i9, E3, s11, B3, N2, G3 >> 4, 15 & G3);
            c8 += O3;
            break;
          case 65535:
            255 !== n12[c8] && c8--;
            break;
          default:
            if (255 === n12[c8 - 3] && n12[c8 - 2] >= 192 && n12[c8 - 2] <= 254) {
              c8 -= 3;
              break;
            }
            throw new e7("unknown marker " + k4.toString(16));
        }
        k4 = o9();
      }
      for (this.width = i9.samplesPerLine, this.height = i9.scanLines, this.jfif = f10, this.eof = c8, this.adobe = l7, this.components = [], g5 = 0; g5 < i9.components.length; g5++) {
        var Q = h9[(R3 = i9.components[g5]).quantizationId];
        Q && (R3.quantizationTable = Q), this.components.push({ output: d4(i9, R3), scaleX: R3.h / i9.maxH, scaleY: R3.v / i9.maxV, blocksPerLine: R3.blocksPerLine, blocksPerColumn: R3.blocksPerColumn });
      }
      this.numComponents = this.components.length;
    }, _getLinearizedBlockData: function(e8, r14) {
      var n12, o9, a15, t10, i9, s11, c8, f10, l7, u13, h9, v6 = this.width / e8, m7 = this.height / r14, d5 = 0, p8 = this.components.length, b4 = e8 * r14 * p8, k4 = new Uint8ClampedArray(b4), g5 = new Uint32Array(e8), C5 = 4294967288;
      for (c8 = 0; c8 < p8; c8++) {
        for (o9 = (n12 = this.components[c8]).scaleX * v6, a15 = n12.scaleY * m7, d5 = c8, h9 = n12.output, t10 = n12.blocksPerLine + 1 << 3, i9 = 0; i9 < e8; i9++)
          f10 = 0 | i9 * o9, g5[i9] = (f10 & C5) << 3 | 7 & f10;
        for (s11 = 0; s11 < r14; s11++)
          for (u13 = t10 * ((f10 = 0 | s11 * a15) & C5) | (7 & f10) << 3, i9 = 0; i9 < e8; i9++)
            k4[d5] = h9[u13 + g5[i9]], d5 += p8;
      }
      var w4 = this.decodeTransform;
      if (w4)
        for (c8 = 0; c8 < b4; )
          for (f10 = 0, l7 = 0; f10 < p8; f10++, c8++, l7 += 2)
            k4[c8] = (k4[c8] * w4[l7] >> 8) + w4[l7 + 1];
      return k4;
    }, _isColorConversionNeeded: function() {
      return this.adobe ? !!this.adobe.transformCode : 3 === this.numComponents ? 0 !== this.colorTransform : 1 === this.colorTransform;
    }, _convertYccToRgb: function(e8) {
      for (var r14, n12, o9, a15 = 0, t10 = e8.length; a15 < t10; a15 += 3)
        r14 = e8[a15], n12 = e8[a15 + 1], o9 = e8[a15 + 2], e8[a15] = r14 - 179.456 + 1.402 * o9, e8[a15 + 1] = r14 + 135.459 - 0.344 * n12 - 0.714 * o9, e8[a15 + 2] = r14 - 226.816 + 1.772 * n12;
      return e8;
    }, _convertYcckToRgb: function(e8) {
      for (var r14, n12, o9, a15, t10 = 0, i9 = 0, s11 = e8.length; i9 < s11; i9 += 4)
        r14 = e8[i9], n12 = e8[i9 + 1], o9 = e8[i9 + 2], a15 = e8[i9 + 3], e8[t10++] = n12 * (-660635669420364e-19 * n12 + 437130475926232e-18 * o9 - 54080610064599e-18 * r14 + 48449797120281e-17 * a15 - 0.154362151871126) - 122.67195406894 + o9 * (-957964378445773e-18 * o9 + 817076911346625e-18 * r14 - 0.00477271405408747 * a15 + 1.53380253221734) + r14 * (961250184130688e-18 * r14 - 0.00266257332283933 * a15 + 0.48357088451265) + a15 * (-336197177618394e-18 * a15 + 0.484791561490776), e8[t10++] = 107.268039397724 + n12 * (219927104525741e-19 * n12 - 640992018297945e-18 * o9 + 659397001245577e-18 * r14 + 426105652938837e-18 * a15 - 0.176491792462875) + o9 * (-778269941513683e-18 * o9 + 0.00130872261408275 * r14 + 770482631801132e-18 * a15 - 0.151051492775562) + r14 * (0.00126935368114843 * r14 - 0.00265090189010898 * a15 + 0.25802910206845) + a15 * (-318913117588328e-18 * a15 - 0.213742400323665), e8[t10++] = n12 * (-570115196973677e-18 * n12 - 263409051004589e-19 * o9 + 0.0020741088115012 * r14 - 0.00288260236853442 * a15 + 0.814272968359295) - 20.810012546947 + o9 * (-153496057440975e-19 * o9 - 132689043961446e-18 * r14 + 560833691242812e-18 * a15 - 0.195152027534049) + r14 * (0.00174418132927582 * r14 - 0.00255243321439347 * a15 + 0.116935020465145) + a15 * (-343531996510555e-18 * a15 + 0.24165260232407);
      return e8;
    }, _convertYcckToCmyk: function(e8) {
      for (var r14, n12, o9, a15 = 0, t10 = e8.length; a15 < t10; a15 += 4)
        r14 = e8[a15], n12 = e8[a15 + 1], o9 = e8[a15 + 2], e8[a15] = 434.456 - r14 - 1.402 * o9, e8[a15 + 1] = 119.541 - r14 + 0.344 * n12 + 0.714 * o9, e8[a15 + 2] = 481.816 - r14 - 1.772 * n12;
      return e8;
    }, _convertCmykToRgb: function(e8) {
      for (var r14, n12, o9, a15, t10 = 0, i9 = 1 / 255, s11 = 0, c8 = e8.length; s11 < c8; s11 += 4)
        r14 = e8[s11] * i9, n12 = e8[s11 + 1] * i9, o9 = e8[s11 + 2] * i9, a15 = e8[s11 + 3] * i9, e8[t10++] = 255 + r14 * (-4.387332384609988 * r14 + 54.48615194189176 * n12 + 18.82290502165302 * o9 + 212.25662451639585 * a15 - 285.2331026137004) + n12 * (1.7149763477362134 * n12 - 5.6096736904047315 * o9 - 17.873870861415444 * a15 - 5.497006427196366) + o9 * (-2.5217340131683033 * o9 - 21.248923337353073 * a15 + 17.5119270841813) - a15 * (21.86122147463605 * a15 + 189.48180835922747), e8[t10++] = 255 + r14 * (8.841041422036149 * r14 + 60.118027045597366 * n12 + 6.871425592049007 * o9 + 31.159100130055922 * a15 - 79.2970844816548) + n12 * (-15.310361306967817 * n12 + 17.575251261109482 * o9 + 131.35250912493976 * a15 - 190.9453302588951) + o9 * (4.444339102852739 * o9 + 9.8632861493405 * a15 - 24.86741582555878) - a15 * (20.737325471181034 * a15 + 187.80453709719578), e8[t10++] = 255 + r14 * (0.8842522430003296 * r14 + 8.078677503112928 * n12 + 30.89978309703729 * o9 - 0.23883238689178934 * a15 - 14.183576799673286) + n12 * (10.49593273432072 * n12 + 63.02378494754052 * o9 + 50.606957656360734 * a15 - 112.23884253719248) + o9 * (0.03296041114873217 * o9 + 115.60384449646641 * a15 - 193.58209356861505) - a15 * (22.33816807309886 * a15 + 180.12613974708367);
      return e8;
    }, getData: function(r14, n12, o9) {
      if (this.numComponents > 4)
        throw new e7("Unsupported color mode");
      var a15 = this._getLinearizedBlockData(r14, n12);
      if (1 === this.numComponents && o9) {
        for (var t10 = a15.length, i9 = new Uint8ClampedArray(3 * t10), s11 = 0, c8 = 0; c8 < t10; c8++) {
          var f10 = a15[c8];
          i9[s11++] = f10, i9[s11++] = f10, i9[s11++] = f10;
        }
        return i9;
      }
      if (3 === this.numComponents && this._isColorConversionNeeded())
        return this._convertYccToRgb(a15);
      if (4 === this.numComponents) {
        if (this._isColorConversionNeeded())
          return o9 ? this._convertYcckToRgb(a15) : this._convertYcckToCmyk(a15);
        if (o9)
          return this._convertCmykToRgb(a15);
      }
      return a15;
    } }, l6;
  }();
}, void 0 !== (o3 = n()) && (r4.exports = o3);
var t3 = t(a6.exports);

// node_modules/@arcgis/core/layers/support/rasterFormats/JpgPlus.js
var r5 = class {
  static decode(r13, n11 = false) {
    const s10 = new Uint8Array(r13), o8 = new t3();
    o8.parse(s10);
    const { width: a14, height: i8, numComponents: f9, eof: h8 } = o8, l6 = o8.getData(a14, i8, true), c7 = a14 * i8;
    let u12, g5 = null, p7 = 0, w4 = 0, m6 = 0;
    if (!n11 && h8 < s10.length - 1)
      try {
        const t9 = new f3(s10.subarray(h8)).getBytes();
        g5 = new Uint8Array(c7);
        let r14 = 0;
        for (p7 = 0; p7 < t9.length; p7++)
          for (m6 = 7; m6 >= 0; m6--)
            g5[r14++] = t9[p7] >> m6 & 1;
      } catch {
      }
    if (1 === f9 && l6.length === a14 * i8) {
      const t9 = new Uint8Array(l6.buffer);
      u12 = [t9, t9, t9];
    } else {
      for (u12 = [], p7 = 0; p7 < 3; p7++)
        u12.push(new Uint8Array(c7));
      for (m6 = 0, w4 = 0; w4 < c7; w4++)
        for (p7 = 0; p7 < 3; p7++)
          u12[p7][w4] = l6[m6++];
    }
    return { width: a14, height: i8, pixels: u12, mask: g5 };
  }
};

// node_modules/@arcgis/core/layers/support/rasterFormats/Lerc.js
var t4 = [{ pixelType: "S8", size: 1, ctor: Int8Array, range: [-128, 127] }, { pixelType: "U8", size: 1, ctor: Uint8Array, range: [0, 255] }, { pixelType: "S16", size: 2, ctor: Int16Array, range: [-32768, 32767] }, { pixelType: "U16", size: 2, ctor: Uint16Array, range: [0, 65536] }, { pixelType: "S32", size: 4, ctor: Int32Array, range: [-2147483648, 2147483647] }, { pixelType: "U32", size: 4, ctor: Uint32Array, range: [0, 4294967296] }, { pixelType: "F32", size: 4, ctor: Float32Array, range: [-34027999387901484e22, 34027999387901484e22] }, { pixelType: "F64", size: 8, ctor: Float64Array, range: [-17976931348623157e292, 17976931348623157e292] }];
var n2 = null;
var r6 = false;
function a7() {
  return n2 || (n2 = import("./lerc-wasm-SCSLSGHA.js").then((e7) => e7.l).then(({ default: t9 }) => t9({ locateFile: (t10) => a4(`esri/layers/support/rasterFormats/${t10}`) })).then((e7) => {
    u5(e7), r6 = true;
  }), n2);
}
var l2 = { getBlobInfo: null, decode: null };
function s6(e7) {
  return 16 + (e7 >> 3 << 3);
}
function i3(e7, t9, n11) {
  n11.set(e7.slice(t9, t9 + n11.length));
}
function u5(e7) {
  const { _malloc: n11, _free: r13, _lerc_getBlobInfo: a14, _lerc_getDataRanges: o8, _lerc_decode_4D: u12, asm: f9 } = e7;
  let c7;
  const h8 = Object.values(f9).find((t9) => t9 && "buffer" in t9 && t9.buffer === e7.HEAPU8.buffer), y6 = (e8) => {
    const t9 = e8.map((e9) => s6(e9)), r14 = t9.reduce((e9, t10) => e9 + t10), a15 = n11(r14);
    c7 = new Uint8Array(h8.buffer);
    let o9 = t9[0];
    t9[0] = a15;
    for (let n12 = 1; n12 < t9.length; n12++) {
      const e9 = t9[n12];
      t9[n12] = t9[n12 - 1] + o9, o9 = e9;
    }
    return t9;
  };
  l2.getBlobInfo = (e8) => {
    const t9 = 12, n12 = 3, l6 = new Uint8Array(4 * t9), s10 = new Uint8Array(8 * n12), [u13, f10, p7] = y6([e8.length, l6.length, s10.length]);
    c7.set(e8, u13), c7.set(l6, f10), c7.set(s10, p7);
    let g5 = a14(u13, e8.length, f10, p7, t9, n12);
    if (g5)
      throw r13(u13), new Error(`lerc-getBlobInfo: error code is ${g5}`);
    c7 = new Uint8Array(h8.buffer), i3(c7, f10, l6), i3(c7, p7, s10);
    const d4 = new Uint32Array(l6.buffer), b4 = new Float64Array(s10.buffer), [w4, A3, , m6, U3, x5, C5, V2, T3, D4, z2] = d4, F2 = { version: w4, depthCount: D4, width: m6, height: U3, validPixelCount: C5, bandCount: x5, blobSize: V2, maskCount: T3, dataType: A3, minValue: b4[0], maxValue: b4[1], maxZerror: b4[2], statistics: [], bandCountWithNoData: z2 };
    if (z2)
      return F2;
    if (1 === D4 && 1 === x5)
      return r13(u13), F2.statistics.push({ minValue: b4[0], maxValue: b4[1] }), F2;
    const I4 = D4 * x5 * 8, _2 = new Uint8Array(I4), k4 = new Uint8Array(I4);
    let B3 = u13, S3 = 0, v5 = 0, E3 = false;
    if (c7.byteLength < u13 + 2 * I4 ? (r13(u13), E3 = true, [B3, S3, v5] = y6([e8.length, I4, I4]), c7.set(e8, B3)) : [S3, v5] = y6([I4, I4]), c7.set(_2, S3), c7.set(k4, v5), g5 = o8(B3, e8.length, D4, x5, S3, v5), g5)
      throw r13(B3), E3 || r13(S3), new Error(`lerc-getDataRanges: error code is ${g5}`);
    c7 = new Uint8Array(h8.buffer), i3(c7, S3, _2), i3(c7, v5, k4);
    const O3 = new Float64Array(_2.buffer), $ = new Float64Array(k4.buffer), j2 = F2.statistics;
    for (let r14 = 0; r14 < x5; r14++)
      if (D4 > 1) {
        const e9 = O3.slice(r14 * D4, (r14 + 1) * D4), t10 = $.slice(r14 * D4, (r14 + 1) * D4), n13 = Math.min.apply(null, e9), a15 = Math.max.apply(null, t10);
        j2.push({ minValue: n13, maxValue: a15, depthStats: { minValues: e9, maxValues: t10 } });
      } else
        j2.push({ minValue: O3[r14], maxValue: $[r14] });
    return r13(B3), E3 || r13(S3), F2;
  }, l2.decode = (e8, n12) => {
    const { maskCount: a15, depthCount: o9, bandCount: l6, width: s10, height: f10, dataType: p7, bandCountWithNoData: g5 } = n12, d4 = t4[p7], b4 = s10 * f10, w4 = new Uint8Array(b4 * l6), A3 = b4 * o9 * l6 * d4.size, m6 = new Uint8Array(A3), U3 = new Uint8Array(l6), x5 = new Uint8Array(8 * l6), [C5, V2, T3, D4, z2] = y6([e8.length, w4.length, m6.length, U3.length, x5.length]);
    c7.set(e8, C5), c7.set(w4, V2), c7.set(m6, T3), c7.set(U3, D4), c7.set(x5, z2);
    const F2 = u12(C5, e8.length, a15, V2, o9, s10, f10, l6, p7, T3, D4, z2);
    if (F2)
      throw r13(C5), new Error(`lerc-decode: error code is ${F2}`);
    c7 = new Uint8Array(h8.buffer), i3(c7, T3, m6), i3(c7, V2, w4);
    let I4 = null;
    if (g5) {
      i3(c7, D4, U3), i3(c7, z2, x5), I4 = [];
      const e9 = new Float64Array(x5.buffer);
      for (let t9 = 0; t9 < U3.length; t9++)
        I4.push(U3[t9] ? e9[t9] : null);
    }
    return r13(C5), { data: m6, maskData: w4, noDataValues: I4 };
  };
}
function f4(e7, t9, n11, r13, a14) {
  if (n11 < 2)
    return e7;
  const o8 = new r13(t9 * n11);
  if (a14)
    for (let l6 = 0, s10 = 0; l6 < t9; l6++)
      for (let r14 = 0, a15 = l6; r14 < n11; r14++, a15 += t9)
        o8[a15] = e7[s10++];
  else
    for (let l6 = 0, s10 = 0; l6 < t9; l6++)
      for (let r14 = 0, a15 = l6; r14 < n11; r14++, a15 += t9)
        o8[s10++] = e7[a15];
  return o8;
}
function c2(e7, n11 = {}) {
  const r13 = n11.inputOffset ?? 0, a14 = e7 instanceof Uint8Array ? e7.subarray(r13) : new Uint8Array(e7, r13), o8 = l2.getBlobInfo(a14), { data: s10, maskData: i8, noDataValues: u12 } = l2.decode(a14, o8), { width: c7, height: h8, bandCount: y6, depthCount: p7, dataType: g5, maskCount: d4, statistics: b4 } = o8, w4 = t4[g5], A3 = new w4.ctor(s10.buffer), m6 = [], U3 = [], x5 = c7 * h8, C5 = x5 * p7;
  for (let t9 = 0; t9 < y6; t9++) {
    const e8 = A3.subarray(t9 * C5, (t9 + 1) * C5);
    if (n11.returnInterleaved)
      m6.push(e8);
    else {
      const t10 = f4(e8, x5, p7, w4.ctor, true);
      m6.push(t10);
    }
    U3.push(i8.subarray(t9 * C5, (t9 + 1) * C5));
  }
  const V2 = 0 === d4 ? null : 1 === d4 ? U3[0] : new Uint8Array(x5);
  if (d4 > 1) {
    V2.set(U3[0]);
    for (let e8 = 1; e8 < U3.length; e8++) {
      const t9 = U3[e8];
      for (let e9 = 0; e9 < x5; e9++)
        V2[e9] = V2[e9] & t9[e9];
    }
  }
  const { noDataValue: T3 } = n11, D4 = null != T3 && w4.range[0] <= T3 && w4.range[1] >= T3;
  if (d4 > 0 && D4)
    for (let t9 = 0; t9 < y6; t9++) {
      const e8 = m6[t9], n12 = U3[t9] || V2;
      for (let t10 = 0; t10 < x5; t10++)
        0 === n12[t10] && (e8[t10] = T3);
    }
  const z2 = d4 === y6 && y6 > 1 ? U3 : null, { pixelType: F2 } = w4;
  return { width: c7, height: h8, bandCount: y6, pixelType: F2, depthCount: p7, statistics: b4, pixels: m6, mask: V2, bandMasks: z2, noDataValues: u12 };
}

// node_modules/@arcgis/core/layers/support/rasterFormats/Lzw.js
function e4(e7, n11, t9, r13 = true) {
  if (n11 % 4 != 0 || t9 % 4 != 0) {
    const i8 = new ArrayBuffer(4 * Math.ceil(t9 / 4)), o8 = new Uint8Array(i8), l6 = new Uint8Array(e7, n11, t9);
    if (r13)
      for (let e8 = 0; e8 < o8.length; e8 += 4)
        o8[e8] = l6[e8 + 3], o8[e8 + 1] = l6[e8 + 2], o8[e8 + 2] = l6[e8 + 1], o8[e8 + 3] = l6[e8];
    else
      o8.set(l6);
    return new Uint32Array(o8.buffer);
  }
  if (r13) {
    const r14 = new Uint8Array(e7, n11, t9), i8 = new Uint8Array(r14.length);
    for (let e8 = 0; e8 < i8.length; e8 += 4)
      i8[e8] = r14[e8 + 3], i8[e8 + 1] = r14[e8 + 2], i8[e8 + 2] = r14[e8 + 1], i8[e8 + 3] = r14[e8];
    return new Uint32Array(i8.buffer);
  }
  return new Uint32Array(e7, n11, t9 / 4);
}
function n3() {
  const e7 = [];
  for (let n11 = 0; n11 <= 257; n11++)
    e7[n11] = [n11];
  return e7;
}
function t5(e7, n11) {
  for (let t9 = 0; t9 < n11.length; t9++)
    e7.push(n11[t9]);
}
var r7 = /* @__PURE__ */ new Set();
function i4(i8, o8, l6, f9 = true) {
  const s10 = e4(i8, o8, l6, f9);
  let a14 = 9, c7 = n3(), u12 = 32, h8 = c7.length, d4 = [], w4 = 1, g5 = s10[0], y6 = 0;
  const A3 = s10.length, U3 = 8 * (4 * A3 - l6), p7 = [];
  for (; null != g5; ) {
    if (u12 >= a14)
      u12 -= a14, y6 = g5 >>> 32 - a14, g5 <<= a14;
    else {
      y6 = g5 >>> 32 - u12, g5 = s10[w4++];
      const e8 = a14 - u12;
      u12 = 32 - e8, y6 = (y6 << e8) + (g5 >>> u12), g5 <<= e8;
    }
    if (257 === y6)
      break;
    if (256 === y6) {
      a14 = 9, c7 = n3(), h8 = c7.length, d4 = [];
      continue;
    }
    const e7 = c7[y6];
    if (null == e7) {
      if (y6 > c7.length)
        throw new Error("data integrity issue: code does not exist on code page");
      d4.push(d4[0]), c7[h8++] = d4.slice(), t5(p7, d4);
    } else
      t5(p7, e7), d4.push(e7[0]), d4.length > 1 && (c7[h8++] = d4.slice()), d4 = e7.slice();
    if (r7.has(h8) && a14++, 0 === u12 && (g5 = s10[w4++], u12 = 32), w4 > A3 || w4 === A3 && u12 <= U3)
      break;
  }
  return new Uint8Array(p7);
}
r7.add(511), r7.add(1023), r7.add(2047), r7.add(4095), r7.add(8191);

// node_modules/@arcgis/core/layers/support/rasterFormats/Raw.js
var e5 = (e7, r13) => {
  const a14 = r13.width * r13.height, n11 = r13.pixelType;
  return Math.floor(e7.byteLength / (a14 * t6(n11)));
};
var t6 = (e7) => {
  let t9 = 1;
  switch (e7) {
    case Uint8Array:
    case Int8Array:
      t9 = 1;
      break;
    case Uint16Array:
    case Int16Array:
      t9 = 2;
      break;
    case Uint32Array:
    case Int32Array:
    case Float32Array:
      t9 = 4;
      break;
    case Float64Array:
      t9 = 8;
  }
  return t9;
};
var r8 = (e7, t9) => {
  if (8 * e7.byteLength < t9)
    return null;
  const r13 = new Uint8Array(e7, 0, Math.ceil(t9 / 8)), a14 = new Uint8Array(t9);
  let n11 = 0, s10 = 0, l6 = 0, i8 = 0;
  for (l6 = 0; l6 < r13.length - 1; l6++)
    for (s10 = r13[l6], i8 = 7; i8 >= 0; i8--)
      a14[n11++] = s10 >> i8 & 1;
  for (i8 = 7; n11 < t9 - 1; )
    s10 = r13[r13.length - 1], a14[n11++] = s10 >> i8 & 1, i8--;
  return a14;
};
var a8 = class {
  static decode(a14, n11) {
    const s10 = n11.pixelType, l6 = [], i8 = n11.width * n11.height, h8 = e5(a14, n11), { bandIds: c7, format: y6 } = n11, o8 = c7 && c7.length || e5(a14, n11), b4 = a14.byteLength - a14.byteLength % (i8 * t6(s10)), f9 = new s10(a14, 0, i8 * h8);
    let u12, g5, A3, p7, d4 = null;
    if ("bip" === y6)
      for (u12 = 0; u12 < o8; u12++) {
        for (A3 = new s10(i8), p7 = c7 ? c7[u12] : u12, g5 = 0; g5 < i8; g5++)
          A3[g5] = f9[g5 * h8 + p7];
        l6.push(A3);
      }
    else if ("bsq" === y6)
      for (u12 = 0; u12 < o8; u12++)
        p7 = c7 ? c7[u12] : u12, l6.push(f9.subarray(p7 * i8, (p7 + 1) * i8));
    return b4 < a14.byteLength - 1 && (d4 = r8(a14.slice(b4), i8)), { pixels: l6, mask: d4 };
  }
};

// node_modules/@arcgis/core/layers/support/rasterDatasets/byteStreamUtils.js
function r9(r13, t9) {
  let n11 = 0, o8 = "", e7 = 0, f9 = 0;
  const c7 = r13.length;
  for (; n11 < c7; )
    f9 = r13[n11++], e7 = f9 >> 4, e7 < 8 ? e7 = 1 : 15 === e7 ? (e7 = 4, f9 = (7 & f9) << 18 | (63 & r13[n11++]) << 12 | (63 & r13[n11++]) << 6 | 63 & r13[n11++]) : 14 === e7 ? (e7 = 3, f9 = (15 & f9) << 12 | (63 & r13[n11++]) << 6 | 63 & r13[n11++]) : (e7 = 2, f9 = (31 & f9) << 6 | 63 & r13[n11++]), (0 !== f9 || t9) && (o8 += String.fromCharCode(f9));
  return o8;
}

// node_modules/@arcgis/core/layers/support/rasterFormats/TiffTags.js
var e6 = (() => {
  const e7 = [];
  return e7[254] = "NEWSUBFILETYPE", e7[255] = "SUBFILETYPE", e7[256] = "IMAGEWIDTH", e7[257] = "IMAGELENGTH", e7[258] = "BITSPERSAMPLE", e7[259] = "COMPRESSION", e7[262] = "PHOTOMETRICINTERPRETATION", e7[263] = "THRESHHOLDING", e7[264] = "CELLWIDTH", e7[265] = "CELLLENGTH", e7[266] = "FILLORDER", e7[269] = "DOCUMENTNAME", e7[270] = "IMAGEDESCRIPTION", e7[271] = "MAKE", e7[272] = "MODEL", e7[273] = "STRIPOFFSETS", e7[274] = "ORIENTATION", e7[277] = "SAMPLESPERPIXEL", e7[278] = "ROWSPERSTRIP", e7[279] = "STRIPBYTECOUNTS", e7[280] = "MINSAMPLEVALUE", e7[281] = "MAXSAMPLEVALUE", e7[282] = "XRESOLUTION", e7[283] = "YRESOLUTION", e7[284] = "PLANARCONFIGURATION", e7[285] = "PAGENAME", e7[286] = "XPOSITION", e7[287] = "YPOSITION", e7[288] = "FREEOFFSETS", e7[289] = "FREEBYTECOUNTS", e7[290] = "GRAYRESPONSEUNIT", e7[291] = "GRAYRESPONSECURVE", e7[292] = "T4OPTIONS", e7[293] = "T6OPTIONS", e7[296] = "RESOLUTIONUNIT", e7[297] = "PAGENUMBER", e7[300] = "COLORRESPONSEUNIT", e7[301] = "TRANSFERFUNCTION", e7[305] = "SOFTWARE", e7[306] = "DATETIME", e7[315] = "ARTIST", e7[316] = "HOSTCOMPUTER", e7[317] = "PREDICTOR", e7[318] = "WHITEPOINT", e7[319] = "PRIMARYCHROMATICITIES", e7[320] = "COLORMAP", e7[321] = "HALFTONEHINTS", e7[322] = "TILEWIDTH", e7[323] = "TILELENGTH", e7[324] = "TILEOFFSETS", e7[325] = "TILEBYTECOUNTS", e7[326] = "BADFAXLINES", e7[327] = "CLEANFAXDATA", e7[328] = "CONSECUTIVEBADFAXLINES", e7[330] = "SUBIFD", e7[332] = "INKSET", e7[333] = "INKNAMES", e7[334] = "NUMBEROFINKS", e7[336] = "DOTRANGE", e7[337] = "TARGETPRINTER", e7[338] = "EXTRASAMPLES", e7[339] = "SAMPLEFORMAT", e7[340] = "SMINSAMPLEVALUE", e7[341] = "SMAXSAMPLEVALUE", e7[342] = "TRANSFERRANGE", e7[347] = "JPEGTABLES", e7[512] = "JPEGPROC", e7[513] = "JPEGIFOFFSET", e7[514] = "JPEGIFBYTECOUNT", e7[515] = "JPEGRESTARTINTERVAL", e7[517] = "JPEGLOSSLESSPREDICTORS", e7[518] = "JPEGPOINTTRANSFORM", e7[519] = "JPEGQTABLES", e7[520] = "JPEGDCTABLES", e7[521] = "JPEGACTABLES", e7[529] = "YCBCRCOEFFICIENTS", e7[530] = "YCBCRSUBSAMPLING", e7[531] = "YCBCRPOSITIONING", e7[532] = "REFERENCEBLACKWHITE", e7[700] = "XMP", e7[33550] = "GEOPIXELSCALE", e7[33922] = "GEOTIEPOINTS", e7[33432] = "COPYRIGHT", e7[42112] = "GDAL_METADATA", e7[42113] = "GDAL_NODATA", e7[50844] = "RPCCOEFFICIENT", e7[34264] = "GEOTRANSMATRIX", e7[34735] = "GEOKEYDIRECTORY", e7[34736] = "GEODOUBLEPARAMS", e7[34737] = "GEOASCIIPARAMS", e7[34665] = "EXIFIFD", e7[34853] = "GPSIFD", e7[40965] = "INTEROPERABILITYIFD", e7;
})();
var i5 = (() => {
  const i8 = e6.slice();
  return i8[36864] = "ExifVersion", i8[40960] = "FlashpixVersion", i8[40961] = "ColorSpace", i8[42240] = "Gamma", i8[37121] = "ComponentsConfiguration", i8[37122] = "CompressedBitsPerPixel", i8[40962] = "PixelXDimension", i8[40963] = "PixelYDimension", i8[37500] = "MakerNote", i8[37510] = "UserComment", i8[40964] = "RelatedSoundFile", i8[36867] = "DateTimeOriginal", i8[36868] = "DateTimeDigitized", i8[36880] = "OffsetTime", i8[36881] = "OffsetTimeOriginal", i8[36882] = "OffsetTimeDigitized", i8[37520] = "SubSecTime", i8[37521] = "SubSecTimeOriginal", i8[37522] = "SubSecTimeDigitized", i8[37888] = "Temperature", i8[37889] = "Humidity", i8[37890] = "Pressure", i8[37891] = "WaterDepth", i8[37892] = "Acceleration", i8[37893] = "CameraElevationAngle", i8[42016] = "ImageUniqueID", i8[42032] = "CameraOwnerName", i8[42033] = "BodySerialNumber", i8[42034] = "LensSpecification", i8[42035] = "LensMake", i8[42036] = "LensModel", i8[42037] = "LensSerialNumber", i8[33434] = "ExposureTime", i8[33437] = "FNumber", i8[34850] = "ExposureProgram", i8[34852] = "SpectralSensitivity", i8[34855] = "PhotographicSensitivity", i8[34856] = "OECF", i8[34864] = "SensitivityType", i8[34865] = "StandardOutputSensitivity", i8[34866] = "RecommendedExposureIndex", i8[34867] = "ISOSpeed", i8[34868] = "ISOSpeedLatitudeyyy", i8[34869] = "ISOSpeedLatitudezzz", i8[37377] = "ShutterSpeedValue", i8[37378] = "ApertureValue", i8[37379] = "BrightnessValue", i8[37380] = "ExposureBiasValue", i8[37381] = "MaxApertureValue", i8[37382] = "SubjectDistance", i8[37383] = "MeteringMode", i8[37384] = "LightSource", i8[37385] = "Flash", i8[37386] = "FocalLength", i8[37396] = "SubjectArea", i8[41483] = "FlashEnergy", i8[41484] = "SpatialFrequencyResponse", i8[41486] = "FocalPlaneXResolution", i8[41487] = "FocalPlaneYResolution", i8[41488] = "FocalPlaneResolutionUnit", i8[41492] = "SubjectLocation", i8[41493] = "ExposureIndex", i8[41495] = "SensingMethod", i8[41728] = "FileSource", i8[41729] = "SceneType", i8[41730] = "CFAPattern", i8[41985] = "CustomRendered", i8[41986] = "ExposureMode", i8[41987] = "WhiteBalance", i8[41988] = "DigitalZoomRatio", i8[41989] = "FocalLengthIn35mmFilm", i8[41990] = "SceneCaptureType", i8[41991] = "GainControl", i8[41992] = "Contrast", i8[41993] = "Saturation", i8[41994] = "Sharpness", i8[41995] = "DeviceSettingDescription", i8[41996] = "SubjectDistanceRange", i8;
})();
var t7 = ["GPSVersionID", "GPSLatitudeRef", "GPSLatitude", "GPSLongitudeRef", "GPSLongitude", "GPSAltitudeRef", "GPSAltitude", "GPSTimeStamp", "GPSSatellites", "GPSStatus", "GPSMeasureMode", "GPSDOP", "GPSSpeedRef", "GPSSpeed", "GPSTrackRef", "GPSTrack", "GPSImgDirectionRef", "GPSImgDirection", "GPSMapDatum", "GPSDestLatitudeRef", "GPSDestLatitude", "GPSDestLongitudeRef", "GPSDestLongitude", "GPSDestBearingRef", "GPSDestBearing", "GPSDestDistanceRef", "GPSDestDistance", "GPSProcessingMethod", "GPSAreaInformation", "GPSDateStamp", "GPSDifferential", "GPSHPositioningError"];
var o4 = (() => {
  const e7 = [];
  return e7[1024] = "GTModelTypeGeoKey", e7[1025] = "GTRasterTypeGeoKey", e7[1026] = "GTCitationGeoKey", e7[2048] = "GeographicTypeGeoKey", e7[2049] = "GeogCitationGeoKey", e7[2050] = "GeogGeodeticDatumGeoKey", e7[2051] = "GeogPrimeMeridianGeoKey", e7[2052] = "GeogLinearUnitsGeoKey", e7[2053] = "GeogLinearUnitSizeGeoKey", e7[2054] = "GeogAngularUnitsGeoKey", e7[2055] = "GeogAngularUnitSizeGeoKey", e7[2056] = "GeogEllipsoidGeoKey", e7[2057] = "GeogSemiMajorAxisGeoKey", e7[2058] = "GeogSemiMinorAxisGeoKey", e7[2059] = "GeogInvFlatteningGeoKey", e7[2061] = "GeogPrimeMeridianLongGeoKey", e7[2060] = "GeogAzimuthUnitsGeoKey", e7[3072] = "ProjectedCSTypeGeoKey", e7[3073] = "PCSCitationGeoKey", e7[3074] = "ProjectionGeoKey", e7[3075] = "ProjCoordTransGeoKey", e7[3076] = "ProjLinearUnitsGeoKey", e7[3077] = "ProjLinearUnitSizeGeoKey", e7[3078] = "ProjStdParallel1GeoKey", e7[3079] = "ProjStdParallel2GeoKey", e7[3080] = "ProjNatOriginLongGeoKey", e7[3081] = "ProjNatOriginLatGeoKey", e7[3082] = "ProjFalseEastingGeoKey", e7[3083] = "ProjFalseNorthingGeoKey", e7[3084] = "ProjFalseOriginLongGeoKey", e7[3085] = "ProjFalseOriginLatGeoKey", e7[3086] = "ProjFalseOriginEastingGeoKey", e7[3087] = "ProjFalseOriginNorthingGeoKey", e7[3088] = "ProjCenterLongGeoKey", e7[3090] = "ProjCenterEastingGeoKey", e7[3091] = "ProjCenterNorthingGeoKey", e7[3092] = "ProjScaleAtNatOriginGeoKey", e7[3093] = "ProjScaleAtCenterGeoKey", e7[3094] = "ProjAzimuthAngleGeoKey", e7[3095] = "ProjStraightVertPoleLongGeoKey", e7[4096] = "VerticalCSTypeGeoKey", e7[4097] = "VerticalCitationGeoKey", e7[4098] = "VerticalDatumGeoKey", e7[4099] = "VerticalUnitsGeoKey", e7;
})();
var S = (i8, t9) => {
  let o8 = (t9 || e6)[i8];
  return void 0 === o8 && (o8 = "unknown" + String(i8)), o8;
};
var E = /* @__PURE__ */ new Map();
E.set("EXIFIFD", i5), E.set("GPSIFD", t7);
var n4 = { TIFF_TAGS: e6, ifdTags: E, GEO_KEYS: o4, getTagName: S };

// node_modules/@arcgis/core/layers/support/rasterFormats/utils.js
var r10 = (() => {
  const r13 = new ArrayBuffer(4), n11 = new Uint8Array(r13);
  return new Uint32Array(r13)[0] = 1, 1 === n11[0];
})();

// node_modules/@arcgis/core/layers/support/rasterFormats/TiffDecoder.js
var f5 = [0, 1, 1, 2, 4, 8, 1, 1, 2, 4, 8, 4, 8, -1, -1, -1, 8, 8, 8];
var u6 = 4294967296;
var c3 = /* @__PURE__ */ new Set([1, 5, 6, 7, 8, 34712, 34887]);
function h3(e7, t9) {
  let n11 = "unknown";
  return 3 === e7 ? n11 = 64 === t9 ? "f64" : "f32" : 1 === e7 ? 1 === t9 ? n11 = "u1" : 2 === t9 ? n11 = "u2" : 4 === t9 ? n11 = "u4" : t9 <= 8 ? n11 = "u8" : t9 <= 16 ? n11 = "u16" : t9 <= 32 && (n11 = "u32") : 2 === e7 && (t9 <= 8 ? n11 = "s8" : t9 <= 16 ? n11 = "s16" : t9 <= 32 && (n11 = "s32")), n11;
}
function g(e7) {
  let t9 = null;
  switch (e7 ? e7.toLowerCase() : "f32") {
    case "u1":
    case "u2":
    case "u4":
    case "u8":
      t9 = Uint8Array;
      break;
    case "u16":
      t9 = Uint16Array;
      break;
    case "u32":
      t9 = Uint32Array;
      break;
    case "s8":
      t9 = Int8Array;
      break;
    case "s16":
      t9 = Int16Array;
      break;
    case "s32":
      t9 = Int32Array;
      break;
    case "f64":
      t9 = Float64Array;
      break;
    default:
      t9 = Float32Array;
  }
  return t9;
}
function E2(e7, t9) {
  return { x: t9[0] * e7.x + t9[1] * e7.y + t9[2], y: t9[3] * e7.x + t9[4] * e7.y + t9[5] };
}
function T(e7, t9) {
  var _a;
  return (_a = e7.get(t9)) == null ? void 0 : _a.values;
}
function I(e7, t9) {
  var _a;
  return (_a = e7.get(t9)) == null ? void 0 : _a.values;
}
function w(e7, t9) {
  var _a, _b;
  return (_b = (_a = e7.get(t9)) == null ? void 0 : _a.values) == null ? void 0 : _b[0];
}
function p2(e7, t9) {
  var _a, _b;
  return (_b = (_a = e7.get(t9)) == null ? void 0 : _a.values) == null ? void 0 : _b[0];
}
function d(e7, t9, n11, a14 = 0, i8 = n4.TIFF_TAGS, s10 = 4) {
  const l6 = 8 === s10, o8 = l6 ? k(new DataView(e7, n11, 8), 0, t9) : new DataView(e7, n11, 2).getUint16(0, t9), f9 = 4 + 2 * s10, u12 = l6 ? 8 : 2, c7 = u12 + o8 * f9;
  if (n11 + c7 > e7.byteLength)
    return { success: false, ifd: null, nextIFD: null, requiredBufferSize: c7 };
  const h8 = n11 + c7 + 4 <= e7.byteLength ? C(new DataView(e7, n11 + c7, 8 === s10 ? 8 : 4), 0, t9, 8 === s10) : null, g5 = n11 + u12, E3 = /* @__PURE__ */ new Map();
  let T3, I4, w4, p7, d4, S3 = 0, y6 = 0;
  for (let m6 = 0; m6 < o8; m6++) {
    I4 = new DataView(e7, g5 + f9 * m6, f9), w4 = I4.getUint16(0, t9), d4 = I4.getUint16(2, t9), p7 = n4.getTagName(w4, i8);
    const n12 = [];
    2 === s10 ? (S3 = I4.getUint16(4, t9), y6 = I4.getUint16(6, t9)) : 4 === s10 ? (S3 = I4.getUint32(4, t9), y6 = I4.getUint32(8, t9)) : 8 === s10 && (S3 = C(I4, 4, t9, true), y6 = C(I4, 12, t9, true), n12.push(I4.getUint32(12, t9)), n12.push(I4.getUint32(16, t9))), T3 = { id: w4, type: d4, valueCount: S3, valueOffset: y6, valueOffsets: n12, values: null }, L(e7, t9, T3, a14, false, s10), E3.set(p7, T3);
  }
  return { success: true, ifd: E3, nextIFD: h8, requiredBufferSize: c7 };
}
var S2 = (e7, t9) => c2(e7, { inputOffset: t9 }).pixels[0];
function y3(e7, t9) {
  if (1 !== t9 && 2 !== t9 && 4 !== t9)
    return e7;
  const n11 = new Uint8Array(e7), a14 = 8 / t9, i8 = new Uint8Array(e7.byteLength * a14);
  let s10 = 0;
  const r13 = 2 ** t9 - 1;
  for (let l6 = 0; l6 < n11.length; l6++) {
    const e8 = n11[l6];
    for (let n12 = 0; n12 < a14; n12++)
      i8[s10++] = e8 << t9 * n12 >>> 8 - t9 & r13;
  }
  return i8.buffer;
}
function m(e7, n11, a14) {
  const i8 = new t3();
  i8.parse(e7), i8.colorTransform = 6 === a14 ? -1 : 0;
  const s10 = i8.getData(i8.width, i8.height, 1 !== n11);
  return new Uint8Array(s10.buffer);
}
function A(e7) {
  const t9 = new f3(e7).getBytes(), n11 = new ArrayBuffer(t9.length), a14 = new Uint8Array(n11);
  return a14.set(t9), a14;
}
async function M2(e7, t9, a14, s10, r13) {
  const o8 = r10 === t9, f9 = p2(a14, "BITSPERSAMPLE"), u12 = p2(a14, "SAMPLESPERPIXEL") ?? 1, c7 = p2(a14, "PHOTOMETRICINTERPRETATION"), E3 = p2(a14, "SAMPLEFORMAT") ?? 1, T3 = h3(E3, f9), I4 = p2(a14, "COMPRESSION") ?? 1, w4 = g(T3);
  let d4, M4, P3;
  if (34887 === I4)
    return await a7(), S2(e7, s10);
  if (1 === I4)
    d4 = e7.slice(s10, s10 + r13), M4 = new Uint8Array(d4);
  else if (8 === I4 || 32946 === I4)
    M4 = new Uint8Array(e7, s10, r13), M4 = A(M4), d4 = M4.buffer;
  else if (6 === I4)
    M4 = new Uint8Array(e7, s10, r13), M4 = m(M4, u12, c7), d4 = M4.buffer;
  else if (7 === I4) {
    const t10 = a14.get("JPEGTABLES").values, n11 = t10.length - 2;
    M4 = new Uint8Array(n11 + r13 - 2);
    for (let e8 = 0; e8 < n11; e8++)
      M4[e8] = t10[e8];
    const i8 = new Uint8Array(e7, s10 + 2, r13 - 2);
    for (let e8 = 0; e8 < i8.length; e8++)
      M4[n11 + e8] = i8[e8];
    M4 = m(M4, u12, c7), d4 = M4.buffer;
  } else {
    if (5 !== I4)
      throw new Error("tiff-decode: unsupport compression " + I4);
    M4 = i4(e7, s10, r13, t9), d4 = M4.buffer;
  }
  if (d4 = y3(d4, f9), "u8" === T3 || "s8" === T3 || o8)
    P3 = new w4(d4);
  else {
    d4 = new ArrayBuffer(M4.length);
    const e8 = new Uint8Array(d4);
    switch (T3) {
      case "u16":
      case "s16":
        for (let t10 = 0; t10 < M4.length; t10 += 2)
          e8[t10] = M4[t10 + 1], e8[t10 + 1] = M4[t10];
        break;
      case "u32":
      case "s32":
      case "f32":
        for (let t10 = 0; t10 < M4.length; t10 += 4)
          e8[t10] = M4[t10 + 3], e8[t10 + 1] = M4[t10 + 2], e8[t10 + 2] = M4[t10 + 1], e8[t10 + 3] = M4[t10];
    }
    P3 = new w4(d4);
  }
  const O3 = p2(a14, "PREDICTOR") ?? 1, b4 = p2(a14, "TILEWIDTH"), x5 = p2(a14, "TILELENGTH");
  if (O3 > 1 && (5 === I4 || 8 === I4 || 32946 === I4) && b4 && x5) {
    const e8 = D(a14), t10 = new w4(P3.length);
    t10.set(P3), P3 = W(t10, x5, b4, 3 === E3 && 3 === O3, e8 ? 1 : u12);
  }
  return P3;
}
async function P(e7, t9, n11) {
  const a14 = I(n11, "TILEOFFSETS");
  if (void 0 === a14)
    return null;
  const i8 = I(n11, "TILEBYTECOUNTS"), { width: s10, height: r13, pixelType: l6, tileWidth: o8, tileHeight: f9 } = R([n11]), u12 = D(n11, t9), c7 = p2(n11, "SAMPLESPERPIXEL") || t9.planes, h8 = s10 * r13, E3 = p2(n11, "BITSPERSAMPLE"), T3 = 34887 === (p2(n11, "COMPRESSION") ?? 1), w4 = g(l6), d4 = [];
  for (let g5 = 0; g5 < c7; g5++)
    d4.push(new w4(h8));
  let S3, y6, m6, A3, P3, O3, b4, x5, L3, U3, N2, G3, k4;
  const F2 = Math.ceil(s10 / o8);
  if (E3 % 8 == 0) {
    if (T3 && u12 && c7 > 1) {
      const l7 = Math.round(a14.length / c7);
      for (S3 = 0; S3 < l7; S3++) {
        O3 = Math.floor(S3 / F2) * f9, b4 = S3 % F2 * o8, x5 = O3 * s10 + b4;
        for (let l8 = 0; l8 < c7; l8++) {
          const u13 = S3 * c7 + l8;
          if (0 !== i8[u13])
            for (m6 = await M2(e7, t9.littleEndian, n11, a14[u13], i8[u13]), U3 = 0, L3 = x5, G3 = Math.min(o8, s10 - b4), N2 = Math.min(f9, r13 - O3), k4 = d4[l8], A3 = 0; A3 < N2; A3++)
              for (L3 = x5 + A3 * s10, U3 = A3 * o8, P3 = 0; P3 < G3; P3++, L3++, U3++)
                k4[L3] = m6[U3];
        }
      }
    } else
      for (S3 = 0; S3 < a14.length; S3++)
        if (0 !== i8[S3])
          for (O3 = Math.floor(S3 / F2) * f9, b4 = S3 % F2 * o8, x5 = O3 * s10 + b4, m6 = await M2(e7, t9.littleEndian, n11, a14[S3], i8[S3]), U3 = 0, L3 = x5, G3 = Math.min(o8, s10 - b4), N2 = Math.min(f9, r13 - O3), y6 = 0; y6 < c7; y6++)
            if (k4 = d4[y6], u12 || T3)
              for (A3 = 0; A3 < N2; A3++)
                for (L3 = x5 + A3 * s10, U3 = o8 * f9 * y6 + A3 * o8, P3 = 0; P3 < G3; P3++, L3++, U3++)
                  k4[L3] = m6[U3];
            else
              for (A3 = 0; A3 < N2; A3++)
                for (L3 = x5 + A3 * s10, U3 = A3 * o8 * c7 + y6, P3 = 0; P3 < G3; P3++, L3++, U3 += c7)
                  k4[L3] = m6[U3];
  }
  return { width: s10, height: r13, pixelType: l6, pixels: d4 };
}
var O = (e7, t9, n11) => {
  const a14 = r10 === t9.littleEndian, s10 = I(n11, "STRIPOFFSETS");
  if (void 0 === s10)
    return null;
  const { width: r13, height: o8, pixelType: f9 } = R([n11]), u12 = p2(n11, "SAMPLESPERPIXEL") || t9.planes, c7 = p2(n11, "PHOTOMETRICINTERPRETATION"), h8 = r13 * o8, E3 = p2(n11, "BITSPERSAMPLE"), T3 = g(f9), w4 = new T3(h8 * u12), d4 = I(n11, "STRIPBYTECOUNTS"), S3 = p2(n11, "ROWSPERSTRIP"), M4 = p2(n11, "COMPRESSION") ?? 1;
  let P3, O3, b4, x5, L3, D4, U3, N2, G3, k4 = S3;
  if (E3 % 8 == 0)
    for (P3 = 0; P3 < s10.length; P3++) {
      if (L3 = P3 * (S3 * r13) * u12, k4 = (P3 + 1) * S3 > o8 ? o8 - P3 * S3 : S3, "u8" === f9 || "s8" === f9 || a14)
        8 === M4 || 32946 === M4 ? (U3 = new Uint8Array(e7, s10[P3], d4[P3]), U3 = A(U3), D4 = U3.buffer) : 6 === M4 ? (U3 = new Uint8Array(e7, s10[P3], d4[P3]), U3 = m(U3, u12, c7), D4 = U3.buffer) : 5 === M4 ? (U3 = i4(e7, s10[P3], d4[P3], t9.littleEndian), D4 = U3.buffer) : (d4[P3] !== k4 * r13 * u12 * E3 / 8 && console.log("strip byte counts is different than expected"), D4 = e7.slice(s10[P3], s10[P3] + d4[P3])), D4 = y3(D4, E3), x5 = new T3(D4);
      else {
        switch (6 === M4 || 8 === M4 || 32946 === M4 ? (U3 = new Uint8Array(e7, s10[P3], d4[P3]), N2 = A(U3), D4 = N2.buffer) : (d4[P3] !== k4 * r13 * u12 * E3 / 8 && console.log("strip byte counts is different than expected"), D4 = new ArrayBuffer(d4[P3]), U3 = new Uint8Array(e7, s10[P3], d4[P3]), N2 = new Uint8Array(D4)), f9) {
          case "u16":
          case "s16":
            for (b4 = 0; b4 < U3.length; b4 += 2)
              N2[b4] = U3[b4 + 1], N2[b4 + 1] = U3[b4];
            break;
          case "u32":
          case "s32":
          case "f32":
            for (b4 = 0; b4 < U3.length; b4 += 4)
              N2[b4] = U3[b4 + 3], N2[b4 + 1] = U3[b4 + 2], N2[b4 + 2] = U3[b4 + 1], N2[b4 + 3] = U3[b4];
        }
        D4 = y3(D4, E3), x5 = new T3(D4);
      }
      w4.set(x5, L3);
    }
  const F2 = [];
  if (1 === u12)
    F2.push(w4);
  else
    for (P3 = 0; P3 < u12; P3++) {
      for (G3 = new T3(h8), O3 = 0; O3 < h8; O3++)
        G3[O3] = w4[O3 * u12 + P3];
      F2.push(G3);
    }
  return { width: r13, height: o8, pixelType: f9, pixels: F2 };
};
var b = (e7, t9, n11) => {
  if (!(e7 && e7.length > 0 && t9 && n11))
    return null;
  let a14, i8, s10;
  const r13 = e7[0].length, l6 = e7.length, o8 = new Uint8Array(r13);
  for (let f9 = 0; f9 < l6; f9++)
    if (a14 = e7[f9], i8 = t9[f9], s10 = n11[f9], 0 === f9)
      for (let e8 = 0; e8 < r13; e8++)
        o8[e8] = a14[e8] < i8 || a14[e8] > s10 ? 0 : 1;
    else
      for (let e8 = 0; e8 < r13; e8++)
        o8[e8] && (o8[e8] = a14[e8] < i8 || a14[e8] > s10 ? 0 : 1);
  return o8;
};
var x2 = (e7) => {
  if (!e7)
    return null;
  const t9 = e7.match(/<Item(.*?)Item>/gi);
  if (!t9 || 0 === t9.length)
    return null;
  const n11 = /* @__PURE__ */ new Map();
  let a14, i8, s10, r13, l6;
  for (let w4 = 0; w4 < t9.length; w4++)
    a14 = t9[w4], i8 = a14.slice(6, a14.indexOf(">")), r13 = a14.indexOf("sample="), r13 > -1 && (l6 = a14.slice(r13 + 8, a14.indexOf('"', r13 + 8))), r13 = a14.indexOf("name="), r13 > -1 && (i8 = a14.slice(r13 + 6, a14.indexOf('"', r13 + 6))), i8 && (s10 = a14.slice(a14.indexOf(">") + 1, a14.indexOf("</Item>")).trim(), null != l6 ? n11.has(i8) ? n11.get(i8)[l6] = s10 : n11.set(i8, [s10]) : n11.set(i8, s10)), l6 = null;
  const o8 = n11.get("STATISTICS_MINIMUM"), f9 = n11.get("STATISTICS_MAXIMUM"), u12 = n11.get("STATISTICS_MEAN"), c7 = n11.get("STATISTICS_STDDEV");
  let h8 = null;
  if (o8 && f9) {
    h8 = [];
    for (let e8 = 0; e8 < o8.length; e8++)
      h8.push({ min: parseFloat(o8[e8]), max: parseFloat(f9[e8]), avg: u12 && parseFloat(u12[e8]), stddev: c7 && parseFloat(c7[e8]) });
  }
  const g5 = n11.get("BandName"), E3 = n11.get("WavelengthMin"), T3 = n11.get("WavelengthMax");
  let I4 = null;
  if (g5) {
    I4 = [];
    for (let e8 = 0; e8 < g5.length; e8++)
      I4.push({ BandName: g5[e8], WavelengthMin: E3 && parseFloat(E3[e8]), WavelengthMax: T3 && parseFloat(T3[e8]) });
  }
  return { statistics: h8, bandProperties: I4, dataType: n11.get("DataType"), rawMetadata: n11 };
};
function L(e7, t9, n11, a14 = 0, i8 = false, s10 = 4) {
  if (n11.values)
    return true;
  const r13 = n11.type, l6 = n11.valueCount;
  let o8 = n11.valueOffset, c7 = [];
  const h8 = f5[r13], g5 = 8 * h8, E3 = l6 * h8, T3 = l6 * f5[r13] * 8;
  let I4, w4;
  const p7 = 8 === s10 ? 64 : 32, d4 = n11.valueOffsets;
  if (T3 > p7) {
    if (E3 > (i8 ? e7.byteLength : e7 ? e7.byteLength - o8 + a14 : 0))
      return n11.offlineOffsetSize = [o8, E3], n11.values = null, false;
  }
  if (T3 <= p7) {
    if (!t9)
      if (p7 <= 32)
        o8 >>>= 32 - T3;
      else {
        const e8 = (d4 == null ? void 0 : d4.length) ? d4[0] : o8 >>> 0, t10 = (d4 == null ? void 0 : d4.length) ? d4[1] : Math.round((o8 - e8) / u6);
        T3 <= 32 ? (o8 = e8 >>> 32 - T3, d4[0] = o8) : (o8 = e8 * 2 ** (32 - T3) + (t10 >>> 32 - T3), d4[0] = e8, d4[1] = t10 >>> 32 - T3);
      }
    if (1 === l6 && g5 === p7)
      c7 = [o8];
    else if (64 === p7) {
      const e8 = (d4 == null ? void 0 : d4.length) ? d4[0] : o8 >>> 0, t10 = (d4 == null ? void 0 : d4.length) ? d4[1] : Math.round((o8 - e8) / u6);
      let n12 = e8, a15 = 32;
      for (w4 = 1; w4 <= l6; w4++) {
        const e9 = 32 - g5 * w4 % 32;
        if (a15 < g5) {
          const i9 = n12 << e9 >>> 32 - a15, s11 = t10 << 32 - a15 >>> 32 - a15;
          n12 = t10, c7.push(i9 + s11 * 2 ** (g5 - a15)), a15 -= 32 - (g5 - a15);
        } else
          c7.push(n12 << e9 >>> 32 - g5), a15 -= g5;
        0 === a15 && (a15 = 32, n12 = t10);
      }
    } else
      for (w4 = 1; w4 <= l6; w4++) {
        const e8 = 32 - g5 * w4;
        c7.push(o8 << e8 >>> 32 - g5);
      }
  } else {
    o8 -= a14, i8 && (o8 = 0);
    for (let n12 = o8; n12 < o8 + E3; n12 += h8) {
      switch (r13) {
        case 1:
        case 2:
        case 7:
          I4 = new DataView(e7, n12, 1).getUint8(0);
          break;
        case 3:
          I4 = new DataView(e7, n12, 2).getUint16(0, t9);
          break;
        case 4:
        case 13:
          I4 = new DataView(e7, n12, 4).getUint32(0, t9);
          break;
        case 5:
          I4 = new DataView(e7, n12, 4).getUint32(0, t9) / new DataView(e7, n12 + 4, 4).getUint32(0, t9);
          break;
        case 6:
          I4 = new DataView(e7, n12, 1).getInt8(0);
          break;
        case 8:
          I4 = new DataView(e7, n12, 2).getInt16(0, t9);
          break;
        case 9:
          I4 = new DataView(e7, n12, 4).getInt32(0, t9);
          break;
        case 10:
          I4 = new DataView(e7, n12, 4).getInt32(0, t9) / new DataView(e7, n12 + 4, 4).getInt32(0, t9);
          break;
        case 11:
          I4 = new DataView(e7, n12, 4).getFloat32(0, t9);
          break;
        case 12:
          I4 = new DataView(e7, n12, 8).getFloat64(0, t9);
          break;
        case 16:
        case 18:
          I4 = k(new DataView(e7, n12, 8), 0, t9);
          break;
        case 17:
          I4 = F(new DataView(e7, n12, 8), 0, t9);
          break;
        default:
          I4 = null;
      }
      c7.push(I4);
    }
  }
  if (2 === r13) {
    let e8 = "";
    const t10 = c7;
    for (c7 = [], w4 = 0; w4 < t10.length; w4++)
      0 === t10[w4] && "" !== e8 ? (c7.push(e8), e8 = "") : e8 += String.fromCharCode(t10[w4]);
    "" === e8 && 0 !== c7.length || c7.push(e8);
  }
  return n11.values = c7, true;
}
function R(e7) {
  const t9 = e7[0], n11 = p2(t9, "TILEWIDTH"), a14 = p2(t9, "TILELENGTH"), i8 = p2(t9, "IMAGEWIDTH"), s10 = p2(t9, "IMAGELENGTH"), r13 = p2(t9, "BITSPERSAMPLE"), l6 = p2(t9, "SAMPLESPERPIXEL"), o8 = p2(t9, "SAMPLEFORMAT") ?? 1, f9 = h3(o8, r13), u12 = D(t9), g5 = T(t9, "GDAL_NODATA");
  let d4 = null;
  (g5 == null ? void 0 : g5.length) && (d4 = g5.map((e8) => parseFloat(e8)), d4.some((e8) => isNaN(e8)) && (d4 = null));
  const S3 = p2(t9, "COMPRESSION") ?? 1;
  let y6;
  switch (S3) {
    case 1:
      y6 = "NONE";
      break;
    case 2:
    case 3:
    case 4:
    case 32771:
      y6 = "CCITT";
      break;
    case 5:
      y6 = "LZW";
      break;
    case 6:
    case 7:
      y6 = "JPEG";
      break;
    case 32773:
      y6 = "PACKBITS";
      break;
    case 8:
    case 32946:
      y6 = "DEFLATE";
      break;
    case 34712:
      y6 = "JPEG2000";
      break;
    case 34887:
      y6 = "LERC";
      break;
    default:
      y6 = String(S3);
  }
  let m6 = true, A3 = "";
  c3.has(S3) || (m6 = false, A3 += "unsupported tag compression " + S3), o8 > 3 && (m6 = false, A3 += "unsupported tag sampleFormat " + o8), 1 !== r13 && 2 !== r13 && 4 !== r13 && r13 % 8 != 0 && (m6 = false, A3 += "unsupported tag bitsPerSample " + r13);
  const M4 = w(t9, "GEOASCIIPARAMS");
  let P3;
  if (M4) {
    const e8 = M4.split("|").find((e9) => e9.includes("ESRI PE String = ")), t10 = e8 ? e8.replace("ESRI PE String = ", "") : "";
    P3 = t10.startsWith("COMPD_CS") || t10.startsWith("PROJCS") || t10.startsWith("GEOGCS") ? { wkid: null, wkt: t10 } : null;
  }
  const O3 = I(t9, "GEOTIEPOINTS"), b4 = I(t9, "GEOPIXELSCALE"), L3 = I(t9, "GEOTRANSMATRIX"), R3 = t9.has("GEOKEYDIRECTORY") ? t9.get("GEOKEYDIRECTORY").data : null;
  let G3, k4, F2 = false, C5 = false;
  if (R3) {
    F2 = 2 === p2(R3, "GTRasterTypeGeoKey");
    const e8 = p2(R3, "GTModelTypeGeoKey");
    if (2 === e8) {
      const e9 = p2(R3, "GeographicTypeGeoKey");
      e9 >= 1024 && e9 <= 32766 && (P3 = { wkid: e9 }), P3 || 32767 !== e9 || (C5 = true, P3 = { wkid: 4326 });
    } else if (1 === e8) {
      const e9 = p2(R3, "ProjectedCSTypeGeoKey");
      e9 >= 1024 && e9 <= 32766 && (P3 = { wkid: e9 });
    }
  }
  if (b4 && O3 && O3.length >= 6 ? (G3 = [b4[0], 0, O3[3] - O3[0] * b4[0], 0, -Math.abs(b4[1]), O3[4] - O3[1] * b4[1]], F2 && (G3[2] -= 0.5 * G3[0] + 0.5 * G3[1], G3[5] -= 0.5 * G3[3] + 0.5 * G3[4])) : L3 && 16 === L3.length && (G3 = F2 ? [L3[0], L3[1], L3[3] - 0.5 * L3[0], L3[4], L3[5], L3[7] - 0.5 * L3[5]] : [L3[0], L3[1], L3[3], L3[4], L3[5], L3[7]]), G3) {
    const e8 = [{ x: 0, y: s10 }, { x: 0, y: 0 }, { x: i8, y: s10 }, { x: i8, y: 0 }];
    let t10, n12 = Number.POSITIVE_INFINITY, a15 = Number.POSITIVE_INFINITY, r14 = Number.NEGATIVE_INFINITY, l7 = Number.NEGATIVE_INFINITY;
    for (let i9 = 0; i9 < e8.length; i9++)
      t10 = E2(e8[i9], G3), n12 = t10.x > n12 ? n12 : t10.x, r14 = t10.x < r14 ? r14 : t10.x, a15 = t10.y > a15 ? a15 : t10.y, l7 = t10.y < l7 ? l7 : t10.y;
    k4 = { xmin: n12, xmax: r14, ymin: a15, ymax: l7, spatialReference: P3 };
  } else
    k4 = { xmin: -0.5, ymin: 0.5 - s10, xmax: i8 - 0.5, ymax: 0.5, spatialReference: P3 };
  C5 && (k4.xmax - k4.xmin > 400 || Math.max(Math.abs(k4.xmin), Math.abs(k4.xmax)) > 361) && (P3 = null, k4.spatialReference = null);
  const v5 = U(e7);
  let B3, W2, H2, Y2, _2;
  if (v5.length > 0) {
    H2 = Math.round(Math.log(i8 / p2(v5[0], "IMAGEWIDTH")) / Math.LN2);
    const e8 = v5[v5.length - 1];
    Y2 = Math.round(Math.log(i8 / p2(e8, "IMAGEWIDTH")) / Math.LN2), B3 = p2(e8, "TILEWIDTH"), W2 = p2(e8, "TILELENGTH");
  }
  B3 = null != Y2 && Y2 > 0 ? B3 || n11 : null, W2 = null != Y2 && Y2 > 0 ? W2 || a14 : null, n11 && (_2 = [{ maxCol: Math.ceil(i8 / n11) - 1, maxRow: Math.ceil(s10 / a14) - 1, minRow: 0, minCol: 0 }], v5.forEach((e8) => {
    _2.push({ maxCol: Math.ceil(p2(e8, "IMAGEWIDTH") / p2(e8, "TILEWIDTH")) - 1, maxRow: Math.ceil(p2(e8, "IMAGELENGTH") / p2(e8, "TILELENGTH")) - 1, minRow: 0, minCol: 0 });
  }));
  const K = w(e7[0], "GDAL_METADATA"), X = x2(K);
  A3 += " " + V({ width: i8, height: s10, tileWidth: n11, tileHeight: a14, planes: l6, ifds: e7 });
  return { width: i8, height: s10, tileWidth: n11, tileHeight: a14, planes: l6, isBSQ: u12, pixelType: f9, compression: y6, noData: d4, hasMaskBand: N(e7).length === v5.length + 1, isSupported: m6, message: A3, extent: k4, isPseudoGeographic: C5, affine: b4 ? null : G3, firstPyramidLevel: H2, maximumPyramidLevel: Y2, pyramidBlockWidth: B3, pyramidBlockHeight: W2, tileBoundary: _2, metadata: X };
}
function D(e7, t9) {
  const n11 = T(e7, "PLANARCONFIGURATION");
  return n11 ? 2 === n11[0] : !!t9 && t9.isBSQ;
}
function U(e7) {
  return e7.filter((e8) => 1 === p2(e8, "NEWSUBFILETYPE"));
}
function N(e7) {
  return e7.filter((e8) => {
    const t9 = 4 == (4 & (p2(e8, "NEWSUBFILETYPE") ?? 0)), n11 = 4 === p2(e8, "PHOTOMETRICINTERPRETATION");
    return t9 && n11;
  });
}
function G(e7) {
  const { littleEndian: t9, isBigTiff: n11, firstIFDPos: a14 } = v2(e7);
  let i8 = a14;
  const s10 = [];
  do {
    const a15 = B(e7, t9, i8, 0, n4.TIFF_TAGS, n11 ? 8 : 4);
    if (!a15.success)
      break;
    s10.push(a15.ifd), i8 = a15.nextIFD;
  } while (i8 > 0);
  return { ...R(s10), littleEndian: t9, isBigTiff: n11, ifds: s10, pyramidIFDs: U(s10), maskIFDs: N(s10) };
}
function k(e7, t9, n11) {
  const a14 = e7.getUint32(t9, n11), i8 = e7.getUint32(t9 + 4, n11);
  return n11 ? i8 * u6 + a14 : a14 * u6 + i8;
}
function F(e7, t9, n11) {
  let a14 = n11 ? e7.getInt32(t9, n11) : e7.getUint32(t9, n11), i8 = n11 ? e7.getUint32(t9 + 4, n11) : e7.getInt32(t9 + 4, n11);
  const s10 = (n11 ? a14 : i8) >= 0 ? 1 : -1;
  n11 ? a14 *= s10 : i8 *= s10;
  return s10 * (n11 ? i8 * u6 + a14 : a14 * u6 + i8);
}
function C(e7, t9, n11, a14) {
  return a14 ? k(e7, t9, n11) : e7.getUint32(t9, n11);
}
function v2(e7) {
  const t9 = new DataView(e7, 0, 16), n11 = t9.getUint16(0, false);
  let a14 = null;
  if (18761 === n11)
    a14 = true;
  else {
    if (19789 !== n11)
      throw new Error("unexpected endianess byte");
    a14 = false;
  }
  const i8 = t9.getUint16(2, a14);
  if (42 !== i8 && 43 !== i8)
    throw new Error("unexpected tiff identifier");
  let s10 = 4;
  const r13 = 43 === i8;
  if (r13) {
    const e8 = t9.getUint16(s10, a14);
    if (s10 += 2, 8 !== e8)
      throw new Error("unsupported bigtiff version");
    if (0 !== t9.getUint16(s10, a14))
      throw new Error("unsupported bigtiff version");
    s10 += 2;
  }
  return { littleEndian: a14, isBigTiff: r13, firstIFDPos: C(t9, s10, a14, r13) };
}
function B(t9, n11, a14, i8 = 0, s10 = n4.TIFF_TAGS, l6 = 4) {
  const o8 = d(t9, n11, a14, i8, s10, l6);
  let f9;
  const u12 = o8.ifd;
  if (u12) {
    if (n4.ifdTags.forEach((e7, a15) => {
      u12.has(a15) && (f9 = u12.get(a15), f9.data = d(t9, n11, f9.valueOffset - i8, i8, e7).ifd);
    }), u12.has("GEOKEYDIRECTORY")) {
      f9 = u12.get("GEOKEYDIRECTORY");
      const e7 = f9.values;
      if (e7 && e7.length > 4) {
        const a15 = e7[0] + "." + e7[1] + "." + e7[2];
        f9.data = d(t9, n11, f9.valueOffset + 6 - i8, i8, n4.GEO_KEYS, 2).ifd, f9.data && f9.data.set("GEOTIFFVersion", { id: 0, type: 2, valueCount: 1, valueOffset: null, values: [a15] });
      }
    }
    if (u12.has("XMP")) {
      f9 = u12.get("XMP");
      const t10 = f9.values;
      "number" == typeof t10[0] && 7 === f9.type && (f9.values = [r9(new Uint8Array(t10))]);
    }
  }
  return o8;
}
function V(e7) {
  const { width: t9, height: n11, tileHeight: a14, tileWidth: i8 } = e7, s10 = e7.planes, r13 = i8 ? i8 * a14 : t9 * n11, l6 = p2(e7.ifds[0], "BITSPERSAMPLE");
  let o8 = "";
  return r13 * s10 > 2 ** 30 / (l6 > 8 ? l6 / 8 : 1) && (o8 = i8 ? "tiled tiff exceeding 1 gigabits per tile is not supported" : "scanline tiff exceeding 1 gigabits is not supported"), o8;
}
function W(e7, t9, n11, a14, i8) {
  const s10 = a14 ? 4 : 1, r13 = n11 * s10 * i8;
  a14 && (e7 = new Uint8Array(e7.buffer));
  for (let f9 = 0; f9 < t9; f9++) {
    const t10 = f9 * r13;
    for (let n12 = i8; n12 < r13; n12++)
      e7[t10 + n12] += e7[t10 + n12 - i8];
  }
  if (!a14)
    return e7;
  const l6 = new Uint8Array(e7.length), o8 = n11 * i8;
  for (let f9 = 0; f9 < t9; f9++) {
    const t10 = f9 * r13;
    for (let n12 = 0; n12 < o8; n12++)
      for (let a15 = 0; a15 < s10; a15++)
        l6[t10 + n12 * s10 + a15] = e7[t10 + n12 + (s10 - a15 - 1) * o8];
  }
  return new Float32Array(l6.buffer);
}
async function H(e7, t9) {
  const { headerInfo: n11, ifd: a14, offsets: i8, sizes: r13 } = t9, l6 = [];
  for (let s10 = 0; s10 < i8.length; s10++) {
    const t10 = await M2(e7, n11.littleEndian, a14, i8[s10], r13[s10] || e7.byteLength);
    l6.push(t10);
  }
  const o8 = D(a14, n11), f9 = p2(a14, "BITSPERSAMPLE"), u12 = h3(p2(a14, "SAMPLEFORMAT") ?? 1, f9), c7 = p2(a14, "SAMPLESPERPIXEL") || n11.planes, E3 = g(u12), T3 = p2(a14, "TILEWIDTH"), I4 = p2(a14, "TILELENGTH"), w4 = p2(a14, "COMPRESSION") ?? 1, d4 = T3 * I4;
  let S3;
  const y6 = [];
  let m6 = l6[0];
  const A3 = 34887 === w4;
  for (let s10 = 0; s10 < c7; s10++) {
    if (S3 = new E3(d4), l6.length === c7)
      m6 = l6[s10], m6.length === d4 && (S3 = m6);
    else if (m6.length)
      if (o8 || A3)
        S3 = m6.length === d4 ? m6 : m6.slice(d4 * s10, d4 * (s10 + 1));
      else
        for (let e8 = 0; e8 < d4; e8++)
          S3[e8] = m6[e8 * c7 + s10];
    y6.push(S3);
  }
  const P3 = n11.noData ? n11.noData[0] : t9.noDataValue, O3 = n11.metadata ? n11.metadata.statistics : null, x5 = O3 ? O3.map((e8) => e8.min) : null, L3 = O3 ? O3.map((e8) => e8.max) : null, R3 = { pixelType: u12, width: T3, height: I4, pixels: y6, noDataValue: P3 };
  return null != P3 ? u(R3, P3) : x5 && L3 && t9.applyMinMaxConstraint && (R3.mask = b(y6, x5, L3)), R3;
}
async function Y(e7, t9 = {}) {
  const n11 = t9.pyramidLevel || 0, a14 = t9.headerInfo || G(e7), { ifds: i8, noData: r13 } = a14;
  if (0 === i8.length)
    throw new Error("no valid image file directory");
  const l6 = V(a14);
  if (l6)
    throw l6;
  let o8 = null;
  const f9 = -1 === n11 ? i8[i8.length - 1] : i8[n11], u12 = r13 ?? t9.noDataValue;
  return o8 = a14.tileWidth ? await P(e7, a14, f9) : await O(e7, a14, f9), o8 ? (null != u12 && u(o8, u12), o8) : o8;
}

// node_modules/@arcgis/core/layers/support/rasterFormats/RasterCodec.js
var f6 = function(t9) {
  var e7, a14, i8, s10, r13, n11;
  function o8(t10) {
    var e8, a15, i9, s11, r14, n12, o9, h8, c7, l6, p7, d4, u12;
    for (this.data = t10, this.pos = 8, this.palette = [], this.imgData = [], this.transparency = {}, this.animation = null, this.text = {}, r14 = null; ; ) {
      switch (e8 = this.readUInt32(), h8 = (function() {
        var t11, e9;
        for (e9 = [], t11 = 0; t11 < 4; ++t11)
          e9.push(String.fromCharCode(this.data[this.pos++]));
        return e9;
      }).call(this).join(""), h8) {
        case "IHDR":
          this.width = this.readUInt32(), this.height = this.readUInt32(), this.bits = this.data[this.pos++], this.colorType = this.data[this.pos++], this.compressionMethod = this.data[this.pos++], this.filterMethod = this.data[this.pos++], this.interlaceMethod = this.data[this.pos++];
          break;
        case "acTL":
          this.animation = { numFrames: this.readUInt32(), numPlays: this.readUInt32() || 1 / 0, frames: [] };
          break;
        case "PLTE":
          this.palette = this.read(e8);
          break;
        case "fcTL":
          r14 && this.animation.frames.push(r14), this.pos += 4, r14 = { width: this.readUInt32(), height: this.readUInt32(), xOffset: this.readUInt32(), yOffset: this.readUInt32() }, s11 = this.readUInt16(), i9 = this.readUInt16() || 100, r14.delay = 1e3 * s11 / i9, r14.disposeOp = this.data[this.pos++], r14.blendOp = this.data[this.pos++], r14.data = [];
          break;
        case "IDAT":
        case "fdAT":
          for ("fdAT" === h8 && (this.pos += 4, e8 -= 4), t10 = (null != r14 ? r14.data : void 0) || this.imgData, p7 = 0; 0 <= e8 ? p7 < e8 : p7 > e8; 0 <= e8 ? ++p7 : --p7)
            t10.push(this.data[this.pos++]);
          break;
        case "tRNS":
          switch (this.transparency = {}, this.colorType) {
            case 3:
              if (this.transparency.indexed = this.read(e8), (c7 = 255 - this.transparency.indexed.length) > 0)
                for (d4 = 0; 0 <= c7 ? d4 < c7 : d4 > c7; 0 <= c7 ? ++d4 : --d4)
                  this.transparency.indexed.push(255);
              break;
            case 0:
              this.transparency.grayscale = this.read(e8)[0];
              break;
            case 2:
              this.transparency.rgb = this.read(e8);
          }
          break;
        case "tEXt":
          n12 = (l6 = this.read(e8)).indexOf(0), o9 = String.fromCharCode.apply(String, l6.slice(0, n12)), this.text[o9] = String.fromCharCode.apply(String, l6.slice(n12 + 1));
          break;
        case "IEND":
          return r14 && this.animation.frames.push(r14), this.colors = (function() {
            switch (this.colorType) {
              case 0:
              case 3:
              case 4:
                return 1;
              case 2:
              case 6:
                return 3;
            }
          }).call(this), this.hasAlphaChannel = 4 === (u12 = this.colorType) || 6 === u12, a15 = this.colors + (this.hasAlphaChannel ? 1 : 0), this.pixelBitlength = this.bits * a15, this.colorSpace = (function() {
            switch (this.colors) {
              case 1:
                return "DeviceGray";
              case 3:
                return "DeviceRGB";
            }
          }).call(this), void (this.imgData = new Uint8Array(this.imgData));
        default:
          this.pos += e8;
      }
      if (this.pos += 4, this.pos > this.data.length)
        throw new Error("Incomplete or corrupt PNG file");
    }
  }
  return o8.load = function(t10, e8, a15) {
    var i9;
    return "function" == typeof e8 && (a15 = e8), (i9 = new XMLHttpRequest()).open("GET", t10, true), i9.responseType = "arraybuffer", i9.onload = function() {
      var t11;
      return t11 = new o8(new Uint8Array(i9.response || i9.mozResponseArrayBuffer)), "function" == typeof (null != e8 ? e8.getContext : void 0) && t11.render(e8), "function" == typeof a15 ? a15(t11) : void 0;
    }, i9.send(null);
  }, a14 = 1, i8 = 2, e7 = 0, o8.prototype.read = function(t10) {
    var e8, a15;
    for (a15 = [], e8 = 0; 0 <= t10 ? e8 < t10 : e8 > t10; 0 <= t10 ? ++e8 : --e8)
      a15.push(this.data[this.pos++]);
    return a15;
  }, o8.prototype.readUInt32 = function() {
    return this.data[this.pos++] << 24 | this.data[this.pos++] << 16 | this.data[this.pos++] << 8 | this.data[this.pos++];
  }, o8.prototype.readUInt16 = function() {
    return this.data[this.pos++] << 8 | this.data[this.pos++];
  }, o8.prototype.decodePixels = function(t10) {
    var e8, a15, i9, s11, r14, n12, o9, h8, l6, p7, d4, u12, f9, m6, g5, w4, y6, x5, b4, k4, T3, I4, C5;
    if (null == t10 && (t10 = this.imgData), 0 === t10.length)
      return new Uint8Array(0);
    for (t10 = (t10 = new f3(t10)).getBytes(), w4 = (u12 = this.pixelBitlength / 8) * this.width, f9 = new Uint8Array(w4 * this.height), n12 = t10.length, g5 = 0, m6 = 0, a15 = 0; m6 < n12; ) {
      switch (t10[m6++]) {
        case 0:
          for (s11 = b4 = 0; b4 < w4; s11 = b4 += 1)
            f9[a15++] = t10[m6++];
          break;
        case 1:
          for (s11 = k4 = 0; k4 < w4; s11 = k4 += 1)
            e8 = t10[m6++], r14 = s11 < u12 ? 0 : f9[a15 - u12], f9[a15++] = (e8 + r14) % 256;
          break;
        case 2:
          for (s11 = T3 = 0; T3 < w4; s11 = T3 += 1)
            e8 = t10[m6++], i9 = (s11 - s11 % u12) / u12, y6 = g5 && f9[(g5 - 1) * w4 + i9 * u12 + s11 % u12], f9[a15++] = (y6 + e8) % 256;
          break;
        case 3:
          for (s11 = I4 = 0; I4 < w4; s11 = I4 += 1)
            e8 = t10[m6++], i9 = (s11 - s11 % u12) / u12, r14 = s11 < u12 ? 0 : f9[a15 - u12], y6 = g5 && f9[(g5 - 1) * w4 + i9 * u12 + s11 % u12], f9[a15++] = (e8 + Math.floor((r14 + y6) / 2)) % 256;
          break;
        case 4:
          for (s11 = C5 = 0; C5 < w4; s11 = C5 += 1)
            e8 = t10[m6++], i9 = (s11 - s11 % u12) / u12, r14 = s11 < u12 ? 0 : f9[a15 - u12], 0 === g5 ? y6 = x5 = 0 : (y6 = f9[(g5 - 1) * w4 + i9 * u12 + s11 % u12], x5 = i9 && f9[(g5 - 1) * w4 + (i9 - 1) * u12 + s11 % u12]), o9 = r14 + y6 - x5, h8 = Math.abs(o9 - r14), p7 = Math.abs(o9 - y6), d4 = Math.abs(o9 - x5), l6 = h8 <= p7 && h8 <= d4 ? r14 : p7 <= d4 ? y6 : x5, f9[a15++] = (e8 + l6) % 256;
          break;
        default:
          throw new Error("Invalid filter algorithm: " + t10[m6 - 1]);
      }
      g5++;
    }
    return f9;
  }, o8.prototype.decodePalette = function() {
    var t10, e8, a15, i9, s11, r14, n12, o9, h8;
    for (a15 = this.palette, r14 = this.transparency.indexed || [], s11 = new Uint8Array((r14.length || 0) + a15.length), i9 = 0, a15.length, t10 = 0, e8 = n12 = 0, o9 = a15.length; n12 < o9; e8 = n12 += 3)
      s11[i9++] = a15[e8], s11[i9++] = a15[e8 + 1], s11[i9++] = a15[e8 + 2], s11[i9++] = null != (h8 = r14[t10++]) ? h8 : 255;
    return s11;
  }, o8.prototype.copyToImageData = function(t10, e8) {
    var a15, i9, s11, r14, n12, o9, h8, c7, l6, p7, d4;
    if (i9 = this.colors, l6 = null, a15 = this.hasAlphaChannel, this.palette.length && (l6 = null != (d4 = this._decodedPalette) ? d4 : this._decodedPalette = this.decodePalette(), i9 = 4, a15 = true), c7 = (s11 = t10.data || t10).length, n12 = l6 || e8, r14 = o9 = 0, 1 === i9)
      for (; r14 < c7; )
        h8 = l6 ? 4 * e8[r14 / 4] : o9, p7 = n12[h8++], s11[r14++] = p7, s11[r14++] = p7, s11[r14++] = p7, s11[r14++] = a15 ? n12[h8++] : this.transparency.grayscale && this.transparency.grayscale === p7 ? 0 : 255, o9 = h8;
    else
      for (; r14 < c7; )
        h8 = l6 ? 4 * e8[r14 / 4] : o9, s11[r14++] = n12[h8++], s11[r14++] = n12[h8++], s11[r14++] = n12[h8++], s11[r14++] = a15 ? n12[h8++] : this.transparency.rgb && this.transparency.rgb[1] === n12[h8 - 3] && this.transparency.rgb[3] === n12[h8 - 2] && this.transparency.rgb[5] === n12[h8 - 1] ? 0 : 255, o9 = h8;
  }, o8.prototype.decode = function() {
    var t10;
    return t10 = new Uint8Array(this.width * this.height * 4), this.copyToImageData(t10, this.decodePixels()), t10;
  }, r13 = t9.document && t9.document.createElement("canvas"), n11 = r13 && r13.getContext("2d"), s10 = function(t10) {
    var e8;
    return n11.width = t10.width, n11.height = t10.height, n11.clearRect(0, 0, t10.width, t10.height), n11.putImageData(t10, 0, 0), (e8 = new Image()).src = r13.toDataURL(), e8;
  }, o8.prototype.decodeFrames = function(t10) {
    var e8, a15, i9, r14, n12, o9, h8, c7;
    if (this.animation) {
      for (c7 = [], a15 = n12 = 0, o9 = (h8 = this.animation.frames).length; n12 < o9; a15 = ++n12)
        e8 = h8[a15], i9 = t10.createImageData(e8.width, e8.height), r14 = this.decodePixels(new Uint8Array(e8.data)), this.copyToImageData(i9, r14), e8.imageData = i9, c7.push(e8.image = s10(i9));
      return c7;
    }
  }, o8.prototype.renderFrame = function(t10, s11) {
    var r14, n12, o9;
    return r14 = (n12 = this.animation.frames)[s11], o9 = n12[s11 - 1], 0 === s11 && t10.clearRect(0, 0, this.width, this.height), (null != o9 ? o9.disposeOp : void 0) === a14 ? t10.clearRect(o9.xOffset, o9.yOffset, o9.width, o9.height) : (null != o9 ? o9.disposeOp : void 0) === i8 && t10.putImageData(o9.imageData, o9.xOffset, o9.yOffset), r14.blendOp === e7 && t10.clearRect(r14.xOffset, r14.yOffset, r14.width, r14.height), t10.drawImage(r14.image, r14.xOffset, r14.yOffset);
  }, o8.prototype.animate = function(t10) {
    var e8, a15, i9, s11, r14, n12, o9 = this;
    return a15 = 0, n12 = this.animation, s11 = n12.numFrames, i9 = n12.frames, r14 = n12.numPlays, (e8 = function() {
      var n13, h8;
      if (n13 = a15++ % s11, h8 = i9[n13], o9.renderFrame(t10, n13), s11 > 1 && a15 / s11 < r14)
        return o9.animation._timeout = setTimeout(e8, h8.delay);
    })();
  }, o8.prototype.stopAnimation = function() {
    var t10;
    return clearTimeout(null != (t10 = this.animation) ? t10._timeout : void 0);
  }, o8.prototype.render = function(t10) {
    var e8, a15;
    return t10._png && t10._png.stopAnimation(), t10._png = this, t10.width = this.width, t10.height = this.height, e8 = t10.getContext("2d"), this.animation ? (this.decodeFrames(e8), this.animate(e8)) : (a15 = e8.createImageData(this.width, this.height), this.copyToImageData(a15, this.decodePixels()), e8.putImageData(a15, 0, 0));
  }, o8;
}(self);
var m2 = /* @__PURE__ */ new Set(["jpg", "png", "bmp", "gif"]);
async function g2(e7, i8) {
  if (!r10)
    throw new s2("rasterCoded:decode", "lerc decoder is not supported on big endian platform");
  await a7();
  const { offset: s10 } = i8, { width: o8, height: h8, pixelType: c7, statistics: l6, depthCount: p7, noDataValues: d4, bandMasks: f9, pixels: m6, mask: g5 } = c2(e7, { inputOffset: s10, returnInterleaved: i8.returnInterleaved });
  return new u2({ width: o8, height: h8, pixelType: c7.toLowerCase(), pixels: m6, mask: g5, statistics: l6, bandMasks: f9, depthCount: p7, noDataValues: d4 });
}
async function w2(t9, i8) {
  const s10 = await Y(t9, { ...i8, noDataValue: null });
  r(s10);
  const r13 = new u2({ width: s10.width, height: s10.height, pixels: s10.pixels, pixelType: s10.pixelType.toLowerCase(), mask: s10.mask, statistics: null });
  return r13.updateStatistics(), r13;
}
async function y4(t9, e7) {
  const i8 = await H(t9, e7.customOptions), s10 = new u2({ width: i8.width, height: i8.height, pixels: i8.pixels, pixelType: i8.pixelType.toLowerCase(), mask: i8.mask, statistics: null });
  return s10.updateStatistics(), s10;
}
function x3(t9, e7) {
  const i8 = e7.pixelType || "u8", s10 = u2.getPixelArrayConstructor(i8), r13 = "u8" === i8 ? t9 : new s10(t9.buffer), n11 = [], o8 = e7.planes || 1;
  if (1 === o8)
    n11.push(r13);
  else
    for (let a14 = 0; a14 < o8; a14++) {
      const i9 = (e7.width || 1) * (e7.height || t9.length), h9 = new s10(i9);
      for (let t10 = 0; t10 < i9; t10++)
        h9[t10] = r13[t10 * o8 + a14];
      n11.push(h9);
    }
  const h8 = new u2({ width: e7.width || 1, height: e7.height || t9.length, pixels: n11, pixelType: i8, statistics: null });
  return h8.updateStatistics(), h8;
}
function b2(t9, e7) {
  return x3(new f3(new Uint8Array(t9)).getBytes(), e7);
}
function k2(t9, e7) {
  return x3(i4(t9, e7.offset, e7.eof, !e7.isInputBigEndian), e7);
}
function T2(t9, e7, i8) {
  const { pixelTypeCtor: s10 } = D2(e7.pixelType), r13 = (0, a8.decode)(t9, { width: e7.width, height: e7.height, pixelType: s10, format: i8 }), n11 = new u2({ width: e7.width, height: e7.height, pixels: r13.pixels, pixelType: e7.pixelType, mask: r13.mask, statistics: null });
  return n11.updateStatistics(), n11;
}
function I2(t9, e7) {
  const i8 = r5.decode(t9, e7.hasNoZlibMask ?? void 0), r13 = new u2({ width: i8.width, height: i8.height, pixels: i8.pixels, pixelType: "U8", mask: i8.mask, statistics: null });
  return r13.updateStatistics(), r13;
}
function C2(t9, e7) {
  const i8 = new Uint8Array(t9), s10 = new f6(i8), { width: r13, height: n11 } = e7, o8 = r13 * n11, h8 = s10.decode();
  let c7, l6 = 0, p7 = 0;
  const d4 = new Uint8Array(o8);
  for (l6 = 0; l6 < o8; l6++)
    d4[l6] = h8[4 * l6 + 3];
  const u12 = new u2({ width: r13, height: n11, pixels: [], pixelType: "U8", mask: d4, statistics: [] });
  for (l6 = 0; l6 < 3; l6++) {
    for (c7 = new Uint8Array(o8), p7 = 0; p7 < o8; p7++)
      c7[p7] = h8[4 * p7 + l6];
    u12.addData({ pixels: c7 });
  }
  return u12.updateStatistics(), u12;
}
async function v3(t9, e7, s10, r13) {
  const n11 = new i2(), o8 = { applyJpegMask: false, format: e7, ...s10 }, h8 = await n11.decode(t9, o8, r13), c7 = new u2(h8);
  return c7.updateStatistics(), c7;
}
function U2(e7) {
  if (null == e7)
    throw new s2("rasterCodec:decode", "parameter encodeddata is required.");
  const a14 = new Uint8Array(e7, 0, 10);
  let i8 = "";
  return 255 === a14[0] && 216 === a14[1] ? i8 = "jpg" : 137 === a14[0] && 80 === a14[1] && 78 === a14[2] && 71 === a14[3] ? i8 = "png" : 67 === a14[0] && 110 === a14[1] && 116 === a14[2] && 90 === a14[3] && 73 === a14[4] && 109 === a14[5] && 97 === a14[6] && 103 === a14[7] && 101 === a14[8] && 32 === a14[9] ? i8 = "lerc" : 76 === a14[0] && 101 === a14[1] && 114 === a14[2] && 99 === a14[3] && 50 === a14[4] && 32 === a14[5] ? i8 = "lerc2" : 73 === a14[0] && 73 === a14[1] && 42 === a14[2] && 0 === a14[3] || 77 === a14[0] && 77 === a14[1] && 0 === a14[2] && 42 === a14[3] || 73 === a14[0] && 73 === a14[1] && 43 === a14[2] && 0 === a14[3] || 77 === a14[0] && 77 === a14[1] && 0 === a14[2] && 43 === a14[3] ? i8 = "tiff" : 71 === a14[0] && 73 === a14[1] && 70 === a14[2] ? i8 = "gif" : 66 === a14[0] && 77 === a14[1] ? i8 = "bmp" : String.fromCharCode.apply(null, a14).toLowerCase().includes("error") && (i8 = "error"), i8;
}
function A2(e7) {
  let a14 = null;
  switch (e7) {
    case "lerc":
    case "lerc2":
      a14 = g2;
      break;
    case "jpg":
      a14 = I2;
      break;
    case "png":
      a14 = C2;
      break;
    case "bsq":
    case "bip":
      a14 = (t9, a15) => T2(t9, a15, e7);
      break;
    case "tiff":
      a14 = w2;
      break;
    case "deflate":
      a14 = b2;
      break;
    case "lzw":
      a14 = k2;
      break;
    case "error":
      a14 = () => {
        throw new s2("rasterCodec:decode", "input data contains error");
      };
      break;
    default:
      a14 = () => {
        throw new s2("rasterCodec:decode", "unsupported raster format");
      };
  }
  return a14;
}
function D2(t9) {
  let e7 = null, a14 = null;
  switch (t9 ? t9.toLowerCase() : "f32") {
    case "u1":
    case "u2":
    case "u4":
    case "u8":
      a14 = 255, e7 = Uint8Array;
      break;
    case "u16":
      a14 = a14 || 65535, e7 = Uint16Array;
      break;
    case "u32":
      a14 = a14 || 2 ** 32 - 1, e7 = Uint32Array;
      break;
    case "s8":
      a14 = a14 || -128, e7 = Int8Array;
      break;
    case "s16":
      a14 = a14 || -32768, e7 = Int16Array;
      break;
    case "s32":
      a14 = a14 || 0 - 2 ** 31, e7 = Int32Array;
      break;
    default:
      e7 = Float32Array;
  }
  return { pixelTypeCtor: e7, noDataValue: a14 };
}
function O2(t9, e7 = 1) {
  if (!t9)
    return;
  const { pixels: i8, width: s10, height: r13, mask: n11 } = t9;
  if (!i8 || 0 === i8.length)
    return;
  const o8 = i8.length, h8 = s10 - 1, c7 = r13 - 1, l6 = [];
  let p7, d4, u12, f9, m6, g5, w4 = null;
  const y6 = u2.getPixelArrayConstructor(t9.pixelType);
  if (0 === e7) {
    for (p7 = 0; p7 < o8; p7++) {
      for (m6 = i8[p7], g5 = new y6(h8 * c7), d4 = 0; d4 < c7; d4++)
        for (f9 = d4 * s10, u12 = 0; u12 < h8; u12++)
          g5[d4 * h8 + u12] = m6[f9 + u12];
      l6.push(g5);
    }
    if (null != n11)
      for (w4 = new Uint8Array(h8 * c7), d4 = 0; d4 < c7; d4++)
        for (f9 = d4 * s10, u12 = 0; u12 < h8; u12++)
          w4[d4 * h8 + u12] = n11[f9 + u12];
  } else {
    for (p7 = 0; p7 < o8; p7++) {
      for (m6 = i8[p7], g5 = new y6(h8 * c7), d4 = 0; d4 < c7; d4++)
        for (f9 = d4 * s10, u12 = 0; u12 < h8; u12++)
          g5[d4 * h8 + u12] = (m6[f9 + u12] + m6[f9 + u12 + 1] + m6[f9 + s10 + u12] + m6[f9 + s10 + u12 + 1]) / 4;
      l6.push(g5);
    }
    if (n11)
      for (w4 = new Uint8Array(h8 * c7), d4 = 0; d4 < c7; d4++)
        for (f9 = d4 * s10, u12 = 0; u12 < h8; u12++)
          w4[d4 * h8 + u12] = Math.min.apply(null, [n11[f9 + u12], n11[f9 + u12 + 1], n11[f9 + s10 + u12], n11[f9 + s10 + u12 + 1]]);
  }
  t9.width = h8, t9.height = c7, t9.mask = w4, t9.pixels = l6;
}
function P2(t9) {
  let e7 = U2(t9);
  return "lerc2" === e7 ? e7 = "lerc" : "error" === e7 && (e7 = ""), e7;
}
async function j(e7, a14 = {}, i8) {
  if (null == e7)
    throw new s2("rasterCodec:decode", "missing encodeddata parameter.");
  let s10 = a14.format && a14.format.toLowerCase();
  if (!("bsq" !== s10 && "bip" !== s10 || null != a14.width && null != a14.height))
    throw new s2("rasterCodec:decode", "requires width and height in options parameter.");
  if ("tiff" === s10 && a14.customOptions)
    return y4(e7, a14);
  if ((!s10 || "bsq" !== s10 && "bip" !== s10 && "deflate" !== s10 && "lzw" !== s10) && (s10 = U2(e7)), a14.useCanvas && m2.has(s10))
    return v3(e7, s10, a14, i8);
  const r13 = A2(s10);
  a14.isPoint && (null != (a14 = { ...a14 }).width && a14.width++, null != a14.height && a14.height++);
  const n11 = await r13(e7, a14);
  return n11 ? ("jpg" !== s10 && null != a14.noDataValue && 1 === n11.depthCount && u(n11, a14.noDataValue, { customFloatTolerance: a14.tolerance }), a14.isPoint && O2(n11), n11) : n11;
}

// node_modules/@arcgis/core/renderers/support/stretchRendererUtils.js
var n5 = new s3({ none: "none", standardDeviation: "standard-deviation", histogramEqualization: "histogram-equalization", minMax: "min-max", percentClip: "percent-clip", sigmoid: "sigmoid" });
var a9 = { 0: "none", 3: "standardDeviation", 4: "histogramEqualization", 5: "minMax", 6: "percentClip", 9: "sigmoid" };

// node_modules/@arcgis/core/layers/support/rasterFunctions/stretchUtils.js
var i6 = 1;
var o5 = [0.299, 0.587, 0.114];
function r11(t9, n11 = 256) {
  n11 = Math.min(n11, 256);
  const { size: s10, counts: e7 } = t9, i8 = new Uint8Array(s10), o8 = e7.reduce((t10, s11) => t10 + s11 / n11, 0);
  let r13 = 0, a14 = 0, l6 = 0, u12 = o8;
  for (let f9 = 0; f9 < s10; f9++)
    if (l6 += e7[f9], !(f9 < s10 - 1 && l6 + e7[f9 + 1] < u12)) {
      for (; r13 < n11 - 1 && u12 < l6; )
        r13++, u12 += o8;
      for (let t10 = a14; t10 <= f9; t10++)
        i8[t10] = r13;
      a14 = f9 + 1;
    }
  for (let f9 = a14; f9 < s10; f9++)
    i8[f9] = n11 - 1;
  return i8;
}
function a10(t9) {
  const { minCutOff: n11, maxCutOff: s10, gamma: e7, pixelType: i8, rounding: o8 } = t9, r13 = t9.outMin || 0, a14 = t9.outMax || 255;
  if (!["u8", "u16", "s8", "s16"].includes(i8))
    return null;
  const u12 = n11.length;
  let f9, c7, m6 = 0;
  "s8" === i8 ? m6 = -127 : "s16" === i8 && (m6 = -32767);
  let h8 = 256;
  ["u16", "s16"].includes(i8) && (h8 = 65536);
  const g5 = [], p7 = [], x5 = a14 - r13;
  for (f9 = 0; f9 < u12; f9++)
    p7[f9] = s10[f9] - n11[f9], g5[f9] = 0 === p7[f9] ? 0 : x5 / p7[f9];
  let M4;
  const y6 = [];
  let b4, v5, k4;
  if (e7 && e7.length >= u12) {
    const t10 = d2(u12, e7);
    for (f9 = 0; f9 < u12; f9++) {
      for (k4 = [], c7 = 0; c7 < h8; c7++)
        if (0 !== p7[f9])
          if (b4 = c7 + m6, M4 = (b4 - n11[f9]) / p7[f9], v5 = 1, e7[f9] > 1 && (v5 -= (1 / x5) ** (M4 * t10[f9])), b4 < s10[f9] && b4 > n11[f9]) {
            const t11 = v5 * x5 * M4 ** (1 / e7[f9]) + r13;
            k4[c7] = "floor" === o8 ? Math.floor(t11) : "round" === o8 ? Math.round(t11) : t11;
          } else
            b4 >= s10[f9] ? k4[c7] = a14 : k4[c7] = r13;
        else
          k4[c7] = r13;
      y6[f9] = k4;
    }
  } else
    for (f9 = 0; f9 < u12; f9++) {
      for (k4 = [], c7 = 0; c7 < h8; c7++)
        if (b4 = c7 + m6, b4 <= n11[f9])
          k4[c7] = r13;
        else if (b4 >= s10[f9])
          k4[c7] = a14;
        else {
          const t10 = (b4 - n11[f9]) * g5[f9] + r13;
          k4[c7] = "floor" === o8 ? Math.floor(t10) : "round" === o8 ? Math.round(t10) : t10;
        }
      y6[f9] = k4;
    }
  if (null != t9.contrastOffset) {
    const n12 = l3(t9.contrastOffset, t9.brightnessOffset);
    for (f9 = 0; f9 < u12; f9++)
      for (k4 = y6[f9], c7 = 0; c7 < h8; c7++)
        k4[c7] = n12[k4[c7]];
  }
  return { lut: y6, offset: m6 };
}
function l3(t9, n11) {
  const s10 = Math.min(Math.max(t9, -100), 100), e7 = Math.min(Math.max(n11 ?? 0, -100), 100), i8 = 255, o8 = 128;
  let r13 = 0, a14 = 0;
  const l6 = new Uint8Array(256);
  for (r13 = 0; r13 < 256; r13++)
    s10 > 0 && s10 < 100 ? a14 = (200 * r13 - 100 * i8 + 2 * i8 * e7) / (2 * (100 - s10)) + o8 : s10 <= 0 && s10 > -100 ? a14 = (200 * r13 - 100 * i8 + 2 * i8 * e7) * (100 + s10) / 2e4 + o8 : 100 === s10 ? (a14 = 200 * r13 - 100 * i8 + (i8 + 1) * (100 - s10) + 2 * i8 * e7, a14 = a14 > 0 ? i8 : 0) : -100 === s10 && (a14 = o8), l6[r13] = a14 > i8 ? i8 : a14 < 0 ? 0 : a14;
  return l6;
}
function u7(t9, n11, s10) {
  const e7 = [];
  for (let i8 = 0; i8 < n11.length; i8++) {
    let r13 = 0, a14 = 0, l6 = 0;
    "min" in n11[i8] ? { min: r13, max: a14, avg: l6 } = n11[i8] : [r13, a14, l6] = n11[i8];
    let u12 = l6 ?? 0;
    "u8" !== t9 && (u12 = 255 * (u12 - r13) / (a14 - r13)), s10 && (u12 *= o5[i8]), e7.push(f7(u12));
  }
  return e7;
}
function f7(t9) {
  if (t9 <= 0 || t9 >= 255)
    return i6;
  let n11 = 0;
  150 !== t9 && (n11 = t9 <= 150 ? 45 * Math.cos(0.01047 * t9) : 17 * Math.sin(0.021 * t9));
  const s10 = 255, e7 = t9 + n11, o8 = Math.log(t9 / s10), r13 = Math.log(e7 / s10);
  if (0 === r13)
    return i6;
  const a14 = o8 / r13;
  return isNaN(a14) ? i6 : Math.min(9.9, Math.max(0.01, a14));
}
function c4(t9, n11, s10, e7) {
  let i8 = 1 / 0, o8 = -1 / 0, r13 = 0, a14 = 0;
  const l6 = t9.length;
  for (let d4 = 0; d4 < l6; d4++) {
    const s11 = t9[d4];
    n11 && !n11[d4] || (i8 = s11 < i8 ? s11 : i8, o8 = s11 > o8 ? s11 : o8, r13 += s11, a14++);
  }
  if (0 === a14)
    return { statistics: { min: 0, max: 0, avg: 0, stddev: 0 }, histogram: null };
  const u12 = r13 / a14;
  let f9 = 0;
  for (let d4 = 0; d4 < l6; d4++)
    n11 && !n11[d4] || (f9 += (t9[d4] - u12) ** 2);
  const c7 = n11 ? n11.filter((t10) => t10).length : l6, m6 = { min: i8, max: o8, avg: u12, stddev: c7 <= 1 ? 0 : Math.sqrt(f9 / (c7 - 1)) };
  if (!e7)
    return { statistics: m6, histogram: null };
  if (["u8", "s8", "u4", "u2", "u1"].includes(s10)) {
    const s11 = o8 - i8 + 1, e8 = new Uint32Array(s11);
    for (let o9 = 0; o9 < l6; o9++)
      n11 && !n11[o9] || e8[t9[o9] - i8]++;
    return { statistics: m6, histogram: { min: i8 - 0.5, max: o8 + 0.5, size: s11, counts: e8 } };
  }
  const h8 = 256, g5 = new Uint32Array(h8), p7 = (o8 - i8) / h8;
  if (0 === p7)
    return { statistics: m6, histogram: { min: i8, max: o8, size: 1, counts: new Uint32Array(1).fill(a14) } };
  const x5 = new Uint32Array(h8 + 1);
  for (let d4 = 0; d4 < l6; d4++)
    n11 && !n11[d4] || x5[Math.floor((t9[d4] - i8) / p7)]++;
  for (let d4 = 0; d4 < h8 - 1; d4++)
    g5[d4] = x5[d4];
  return g5[h8 - 1] = x5[h8 - 1] + x5[h8], { statistics: m6, histogram: { min: i8, max: o8, size: h8, counts: g5 } };
}
function m3(t9) {
  const { pixels: n11, mask: s10, pixelType: e7, bandMasks: i8 } = t9, o8 = n11.map((t10, n12) => c4(t10, (i8 == null ? void 0 : i8[n12]) ?? s10, e7, true));
  return { statistics: o8.map(({ statistics: t10 }) => t10), histograms: o8.map(({ histogram: t10 }) => t10) };
}
function h4(t9) {
  var _a;
  if (null == t9 || !((_a = t9.pixels) == null ? void 0 : _a.length))
    return null;
  const { pixels: n11, mask: s10, bandMasks: e7, pixelType: i8 } = t9, o8 = t9.width * t9.height, r13 = n11.length;
  let a14, l6, u12, f9, c7;
  const m6 = [], h8 = [];
  let g5, p7, x5, d4, M4, y6, b4, v5, k4, w4;
  const z2 = 256;
  for (f9 = 0; f9 < r13; f9++) {
    g5 = new Uint32Array(z2), x5 = n11[f9];
    const r14 = (e7 == null ? void 0 : e7[f9]) ?? s10;
    if ("u8" === i8)
      if (a14 = -0.5, l6 = 255.5, r14)
        for (c7 = 0; c7 < o8; c7++)
          r14[c7] && g5[x5[c7]]++;
      else
        for (c7 = 0; c7 < o8; c7++)
          g5[x5[c7]]++;
    else {
      let n12 = false;
      t9.statistics || (t9.updateStatistics(), n12 = true);
      const s11 = t9.statistics;
      if (a14 = s11[f9].minValue, l6 = s11[f9].maxValue, u12 = (l6 - a14) / z2, 0 === u12) {
        !s11 || t9.validPixelCount || n12 || t9.updateStatistics();
        const e8 = (t9.validPixelCount || t9.width * t9.height) / z2;
        for (let t10 = 0; t10 < z2; t10++)
          g5[t10] = Math.round(e8 * (t10 + 1)) - Math.round(e8 * t10);
      } else {
        for (p7 = new Uint32Array(z2 + 1), c7 = 0; c7 < o8; c7++)
          r14 && !r14[c7] || p7[Math.floor((x5[c7] - a14) / u12)]++;
        for (c7 = 0; c7 < z2 - 1; c7++)
          g5[c7] = p7[c7];
        g5[z2 - 1] = p7[z2 - 1] + p7[z2];
      }
    }
    for (m6.push({ min: a14, max: l6, size: z2, counts: g5 }), d4 = 0, M4 = 0, v5 = 0, c7 = 0; c7 < z2; c7++)
      d4 += g5[c7], M4 += c7 * g5[c7];
    for (k4 = M4 / d4, c7 = 0; c7 < z2; c7++)
      v5 += g5[c7] * (c7 - k4) ** 2;
    w4 = Math.sqrt(v5 / (d4 - 1)), u12 = (l6 - a14) / z2, y6 = (k4 + 0.5) * u12 + a14, b4 = w4 * u12, h8.push({ min: a14, max: l6, avg: y6, stddev: b4 });
  }
  return { statistics: h8, histograms: m6 };
}
function g3(t9) {
  const n11 = [];
  for (let s10 = 0; s10 < t9.length; s10++) {
    const { min: e7, max: i8, size: o8, counts: r13 } = t9[s10];
    let a14 = 0, l6 = 0;
    for (let t10 = 0; t10 < o8; t10++)
      a14 += r13[t10], l6 += t10 * r13[t10];
    const u12 = l6 / a14;
    let f9 = 0;
    for (let t10 = 0; t10 < o8; t10++)
      f9 += r13[t10] * (t10 - u12) ** 2;
    const c7 = (i8 - e7) / o8, m6 = (u12 + 0.5) * c7 + e7, h8 = Math.sqrt(f9 / (a14 - 1)) * c7;
    n11.push({ min: e7, max: i8, avg: m6, stddev: h8 });
  }
  return n11;
}
function p3(n11, i8) {
  var _a;
  const { pixelBlock: o8, bandIds: a14, returnHistogramLut: l6, rasterInfo: u12 } = i8;
  let f9 = null, c7 = null, m6 = n11.stretchType;
  if ("number" == typeof m6 && (m6 = a9[m6]), n11.dra)
    if ("minMax" === m6 && null != o8 && o8.statistics)
      f9 = o8.statistics.map((t9) => [t9.minValue, t9.maxValue, 0, 0]);
    else {
      const t9 = h4(o8);
      f9 = null != t9 ? t9.statistics : null, c7 = null != t9 ? t9.histograms : null;
    }
  else
    f9 = ((_a = n11.statistics) == null ? void 0 : _a.length) > 0 ? n11.statistics : u12.statistics, c7 = "histograms" in n11 ? n11.histograms : void 0, c7 || (c7 = u12.histograms);
  "percentClip" !== m6 && "histogramEqualization" !== m6 || (c7 == null ? void 0 : c7.length) || (m6 = "minMax");
  const g5 = (f9 == null ? void 0 : f9.length) || (c7 == null ? void 0 : c7.length) || u12.bandCount, p7 = [], d4 = [];
  let M4, y6, b4, v5, k4, w4, z2, C5, O3;
  f9 && !Array.isArray(f9[0]) && (f9 = f9.map((t9) => [t9.min, t9.max, t9.avg, t9.stddev]));
  const [A3, U3] = s4(u12.pixelType);
  if (!(f9 == null ? void 0 : f9.length)) {
    for (f9 = [], C5 = 0; C5 < g5; C5++)
      f9.push([A3, U3, 1, 1]);
    "standardDeviation" === m6 && (m6 = "minMax");
  }
  switch (m6) {
    case "none":
      for (C5 = 0; C5 < g5; C5++)
        p7[C5] = A3, d4[C5] = U3;
      break;
    case "minMax":
      for (C5 = 0; C5 < g5; C5++) {
        const t9 = f9[C5];
        p7[C5] = t9[0], d4[C5] = t9[1];
      }
      break;
    case "standardDeviation":
      for (C5 = 0; C5 < g5; C5++) {
        const t9 = f9[C5];
        p7[C5] = t9[2] - n11.numberOfStandardDeviations * t9[3], d4[C5] = t9[2] + n11.numberOfStandardDeviations * t9[3], p7[C5] < t9[0] && (p7[C5] = t9[0]), d4[C5] > t9[1] && (d4[C5] = t9[1]);
      }
      break;
    case "histogramEqualization":
      for (r(c7), C5 = 0; C5 < g5; C5++)
        p7[C5] = c7[C5].min, d4[C5] = c7[C5].max;
      break;
    case "percentClip":
      for (r(c7), C5 = 0; C5 < c7.length; C5++) {
        for (M4 = c7[C5], k4 = new Uint32Array(M4.size), v5 = [...M4.counts], v5.length >= 20 && (v5[0] = v5[1] = v5[2] = v5[v5.length - 1] = v5[v5.length - 2] = 0), b4 = 0, y6 = (M4.max - M4.min) / M4.size, z2 = -0.5 === M4.min && 1 === y6 ? 0.5 : 0, O3 = 0; O3 < M4.size; O3++)
          b4 += v5[O3], k4[O3] = b4;
        for (w4 = (n11.minPercent || 0) * b4 / 100, p7[C5] = M4.min + z2, O3 = 0; O3 < M4.size; O3++)
          if (k4[O3] > w4) {
            p7[C5] = M4.min + y6 * (O3 + z2);
            break;
          }
        for (w4 = (1 - (n11.maxPercent || 0) / 100) * b4, d4[C5] = M4.max + z2, O3 = M4.size - 2; O3 >= 0; O3--)
          if (k4[O3] < w4) {
            d4[C5] = M4.min + y6 * (O3 + 2 - z2);
            break;
          }
        if (d4[C5] < p7[C5]) {
          const t9 = p7[C5];
          p7[C5] = d4[C5], d4[C5] = t9;
        }
      }
      break;
    default:
      for (C5 = 0; C5 < g5; C5++) {
        const t9 = f9[C5];
        p7[C5] = t9[0], d4[C5] = t9[1];
      }
  }
  let T3, q, P3;
  "histogramEqualization" === m6 ? (r(c7), q = c7[0].size || 256, T3 = 0, l6 && (P3 = c7.map((t9) => r11(t9)))) : (q = n11.max || 255, T3 = n11.min || 0);
  return x4({ minCutOff: p7, maxCutOff: d4, outMax: q, outMin: T3, histogramLut: P3 }, a14);
}
function x4(t9, n11) {
  if (null == n11 || 0 === n11.length)
    return t9;
  const s10 = Math.max.apply(null, n11), { minCutOff: e7, maxCutOff: i8, outMin: o8, outMax: r13, histogramLut: a14 } = t9;
  return e7.length === n11.length || e7.length <= s10 ? t9 : { minCutOff: n11.map((t10) => e7[t10]), maxCutOff: n11.map((t10) => i8[t10]), histogramLut: a14 ? n11.map((t10) => a14[t10]) : null, outMin: o8, outMax: r13 };
}
function d2(t9, n11) {
  const s10 = new Float32Array(t9);
  for (let e7 = 0; e7 < t9; e7++)
    n11[e7] > 1 ? n11[e7] > 2 ? s10[e7] = 6.5 + (n11[e7] - 2) ** 2.5 : s10[e7] = 6.5 + 100 * (2 - n11[e7]) ** 4 : s10[e7] = 1;
  return s10;
}
function M3(t9, s10) {
  var _a;
  if (null == t9 || !((_a = t9.pixels) == null ? void 0 : _a.length))
    return t9;
  const { mask: e7, bandMasks: i8, width: o8, height: r13, pixels: a14 } = t9, { minCutOff: l6, maxCutOff: u12, gamma: f9 } = s10, c7 = s10.outMin || 0, m6 = s10.outMax || 255, h8 = o8 * r13, g5 = s10.outputPixelType || "u8", p7 = t9.pixels.map(() => u2.createEmptyBand(g5, h8)), x5 = p7.length, M4 = m6 - c7, y6 = [], b4 = [];
  for (let n11 = 0; n11 < x5; n11++)
    b4[n11] = u12[n11] - l6[n11], y6[n11] = 0 === b4[n11] ? 0 : M4 / b4[n11];
  const v5 = g5.startsWith("u") || g5.startsWith("s"), k4 = f9 && f9.length >= x5, w4 = !!s10.isRenderer;
  if (k4) {
    const t10 = d2(x5, f9);
    for (let n11 = 0; n11 < x5; n11++) {
      const s11 = (i8 == null ? void 0 : i8[n11]) ?? e7;
      for (let e8 = 0; e8 < h8; e8++)
        if (null == s11 || s11[e8]) {
          if (0 === b4[n11]) {
            p7[n11][e8] = c7;
            continue;
          }
          const s12 = a14[n11][e8], i9 = (s12 - l6[n11]) / b4[n11];
          let o9 = 1;
          if (f9[n11] > 1 && (o9 -= (1 / M4) ** (i9 * t10[n11])), s12 < u12[n11] && s12 > l6[n11]) {
            const t11 = o9 * M4 * i9 ** (1 / f9[n11]) + c7;
            p7[n11][e8] = w4 ? Math.floor(t11) : v5 ? Math.round(t11) : t11;
          } else
            s12 >= u12[n11] ? p7[n11][e8] = m6 : p7[n11][e8] = c7;
        }
    }
  } else
    for (let n11 = 0; n11 < x5; n11++) {
      const t10 = (i8 == null ? void 0 : i8[n11]) ?? e7;
      for (let s11 = 0; s11 < h8; s11++)
        if (null == t10 || t10[s11]) {
          const t11 = a14[n11][s11];
          if (t11 < u12[n11] && t11 > l6[n11]) {
            const e8 = (t11 - l6[n11]) * y6[n11] + c7;
            p7[n11][s11] = w4 ? Math.floor(e8) : v5 ? Math.round(e8) : e8;
          } else
            t11 >= u12[n11] ? p7[n11][s11] = m6 : p7[n11][s11] = c7;
        }
    }
  const z2 = new u2({ width: o8, height: r13, mask: e7, bandMasks: i8, pixels: p7, pixelType: g5 });
  return z2.updateStatistics(), z2;
}

// node_modules/@arcgis/core/layers/support/RasterBandInfo.js
var t8;
function n6(e7) {
  return e7 = Number(e7), isNaN(e7) ? void 0 : e7;
}
var o6 = t8 = class extends l {
  constructor() {
    super(...arguments), this.name = null, this.minWavelength = void 0, this.maxWavelength = void 0, this.radianceBias = void 0, this.radianceGain = void 0, this.reflectanceBias = void 0, this.reflectanceGain = void 0, this.solarIrradiance = void 0;
  }
  clone() {
    return new t8({ name: this.name, minWavelength: this.minWavelength, maxWavelength: this.maxWavelength, radianceBias: this.radianceBias, radianceGain: this.radianceGain, reflectanceBias: this.reflectanceBias, reflectanceGain: this.reflectanceGain, solarIrradiance: this.solarIrradiance });
  }
};
e([y({ json: { name: "BandName", write: true } })], o6.prototype, "name", void 0), e([y({ json: { name: "WavelengthMin", read: { reader: n6 }, write: true } })], o6.prototype, "minWavelength", void 0), e([y({ json: { name: "WavelengthMax", read: { reader: n6 }, write: true } })], o6.prototype, "maxWavelength", void 0), e([y({ json: { name: "RadianceBias", read: { reader: n6 }, write: true } })], o6.prototype, "radianceBias", void 0), e([y({ json: { name: "RadianceGain", read: { reader: n6 }, write: true } })], o6.prototype, "radianceGain", void 0), e([y({ json: { name: "ReflectanceBias", read: { reader: n6 }, write: true } })], o6.prototype, "reflectanceBias", void 0), e([y({ json: { name: "ReflectanceGain", read: { reader: n6 }, write: true } })], o6.prototype, "reflectanceGain", void 0), e([y({ json: { name: "SolarIrradiance", read: { reader: n6 }, write: true } })], o6.prototype, "solarIrradiance", void 0), o6 = t8 = e([a3("esri.layers.support.RasterBandInfo")], o6);
var s7 = o6;

// node_modules/@arcgis/core/layers/support/RasterSensorInfo.js
var a11;
function n7(o8) {
  return o8 = Number(o8), isNaN(o8) ? void 0 : o8;
}
var u8 = a11 = class extends l {
  constructor() {
    super(...arguments), this.acquisitionDate = void 0, this.cloudCover = void 0, this.productName = void 0, this.sensorName = null, this.sensorAzimuth = void 0, this.sensorElevation = void 0, this.sunAzimuth = void 0, this.sunElevation = void 0;
  }
  readAcquisitionDate(o8) {
    return new Date(o8);
  }
  writeAcquisitionDate(o8, e7) {
    e7.AcquisitionDate = o8.getTime();
  }
  clone() {
    return new a11({ acquisitionDate: this.acquisitionDate, cloudCover: this.cloudCover, productName: this.productName, sensorName: this.sensorName, sensorAzimuth: this.sensorAzimuth, sensorElevation: this.sensorElevation, sunAzimuth: this.sunAzimuth, sunElevation: this.sunElevation });
  }
};
e([y({ json: { name: "AcquisitionDate", write: true } })], u8.prototype, "acquisitionDate", void 0), e([o("acquisitionDate")], u8.prototype, "readAcquisitionDate", null), e([r2("acquisitionDate")], u8.prototype, "writeAcquisitionDate", null), e([y({ json: { name: "CloudCover", read: { reader: n7 }, write: true } })], u8.prototype, "cloudCover", void 0), e([y({ json: { name: "ProductName", write: true } })], u8.prototype, "productName", void 0), e([y({ json: { name: "SensorName", write: true } })], u8.prototype, "sensorName", void 0), e([y({ json: { name: "SensorAzimuth", read: { reader: n7 }, write: true } })], u8.prototype, "sensorAzimuth", void 0), e([y({ json: { name: "SensorElevation", read: { reader: n7 }, write: true } })], u8.prototype, "sensorElevation", void 0), e([y({ json: { name: "SunAzimuth", read: { reader: n7 }, write: true } })], u8.prototype, "sunAzimuth", void 0), e([y({ json: { name: "SunElevation", read: { reader: n7 }, write: true } })], u8.prototype, "sunElevation", void 0), u8 = a11 = e([a3("esri.layers.support.RasterSensorInfo")], u8);
var p4 = u8;

// node_modules/@arcgis/core/layers/support/RasterStorageInfo.js
var p5;
var l4 = p5 = class extends l {
  constructor() {
    super(...arguments), this.blockWidth = void 0, this.blockHeight = void 0, this.compression = null, this.origin = null, this.firstPyramidLevel = null, this.maximumPyramidLevel = null, this.pyramidScalingFactor = 2, this.pyramidBlockWidth = null, this.pyramidBlockHeight = null, this.isVirtualTileInfo = false, this.tileInfo = null, this.transposeInfo = null, this.blockBoundary = null;
  }
  clone() {
    return new p5({ blockWidth: this.blockWidth, blockHeight: this.blockHeight, compression: this.compression, origin: a(this.origin), firstPyramidLevel: this.firstPyramidLevel, maximumPyramidLevel: this.maximumPyramidLevel, pyramidResolutions: a(this.pyramidResolutions), pyramidScalingFactor: this.pyramidScalingFactor, pyramidBlockWidth: this.pyramidBlockWidth, pyramidBlockHeight: this.pyramidBlockHeight, isVirtualTileInfo: this.isVirtualTileInfo, tileInfo: a(this.tileInfo), transposeInfo: a(this.transposeInfo), blockBoundary: a(this.blockBoundary) });
  }
};
e([y({ type: Number, json: { write: true } })], l4.prototype, "blockWidth", void 0), e([y({ type: Number, json: { write: true } })], l4.prototype, "blockHeight", void 0), e([y({ type: String, json: { write: true } })], l4.prototype, "compression", void 0), e([y({ type: x, json: { write: true } })], l4.prototype, "origin", void 0), e([y({ type: Number, json: { write: true } })], l4.prototype, "firstPyramidLevel", void 0), e([y({ type: Number, json: { write: true } })], l4.prototype, "maximumPyramidLevel", void 0), e([y({ json: { write: true } })], l4.prototype, "pyramidResolutions", void 0), e([y({ type: Number, json: { write: true } })], l4.prototype, "pyramidScalingFactor", void 0), e([y({ type: Number, json: { write: true } })], l4.prototype, "pyramidBlockWidth", void 0), e([y({ type: Number, json: { write: true } })], l4.prototype, "pyramidBlockHeight", void 0), e([y({ type: Boolean, json: { write: true } })], l4.prototype, "isVirtualTileInfo", void 0), e([y({ json: { write: true } })], l4.prototype, "tileInfo", void 0), e([y()], l4.prototype, "transposeInfo", void 0), e([y()], l4.prototype, "blockBoundary", void 0), l4 = p5 = e([a3("esri.layers.support.RasterStorageInfo")], l4);
var n8 = l4;

// node_modules/@arcgis/core/layers/support/RasterInfo.js
var h5;
var u9 = h5 = class extends l {
  constructor(t9) {
    super(t9), this.attributeTable = null, this.bandCount = null, this.colormap = null, this.extent = null, this.format = void 0, this.height = null, this.width = null, this.histograms = null, this.keyProperties = {}, this.multidimensionalInfo = null, this.noDataValue = null, this.pixelSize = null, this.pixelType = null, this.isPseudoSpatialReference = false, this.spatialReference = null, this.statistics = null, this.storageInfo = null, this.transform = null;
  }
  get bandInfos() {
    const t9 = this.keyProperties.BandProperties;
    if (!(t9 == null ? void 0 : t9.length)) {
      const t10 = [];
      for (let e8 = 1; e8 <= this.bandCount; e8++)
        t10.push(new s7({ name: "band_" + e8 }));
      return t10;
    }
    const e7 = t9.map((t10) => s7.fromJSON(t10));
    for (let o8 = 0; o8 < e7.length; o8++)
      e7[o8].name = e7[o8].name ?? "band_" + (o8 + 1);
    return e7;
  }
  get dataType() {
    var _a, _b;
    const t9 = ((_b = (_a = this.keyProperties) == null ? void 0 : _a.DataType) == null ? void 0 : _b.toLowerCase()) ?? "generic";
    return "stdtime" === t9 ? "standard-time" : t9;
  }
  get nativeExtent() {
    return this._get("nativeExtent") || this.extent;
  }
  set nativeExtent(t9) {
    t9 && this._set("nativeExtent", t9);
  }
  get nativePixelSize() {
    if (null == this.transform || !this.transform.affectsPixelSize)
      return this.pixelSize;
    const t9 = this.nativeExtent;
    return { x: t9.width / this.width, y: t9.height / this.height };
  }
  get hasMultidimensionalTranspose() {
    var _a;
    return !!((_a = this.storageInfo) == null ? void 0 : _a.transposeInfo);
  }
  get sensorInfo() {
    var _a;
    if ((_a = this.keyProperties) == null ? void 0 : _a.SensorName)
      return p4.fromJSON(this.keyProperties);
  }
  clone() {
    return new h5({ attributeTable: a(this.attributeTable), bandCount: this.bandCount, colormap: a(this.colormap), extent: a(this.extent), nativePixelSize: a(this.nativePixelSize), format: this.format, height: this.height, width: this.width, histograms: a(this.histograms), keyProperties: a(this.keyProperties), multidimensionalInfo: a(this.multidimensionalInfo), noDataValue: this.noDataValue, pixelSize: a(this.pixelSize), pixelType: this.pixelType, isPseudoSpatialReference: this.isPseudoSpatialReference, spatialReference: a(this.spatialReference), statistics: a(this.statistics), storageInfo: a(this.storageInfo), transform: a(this.transform) });
  }
};
e([y({ json: { write: true } })], u9.prototype, "attributeTable", void 0), e([y({ json: { write: true } })], u9.prototype, "bandCount", void 0), e([y({ readOnly: true })], u9.prototype, "bandInfos", null), e([y({ json: { write: true } })], u9.prototype, "colormap", void 0), e([y({ type: String, readOnly: true })], u9.prototype, "dataType", null), e([y({ type: M, json: { write: true } })], u9.prototype, "extent", void 0), e([y({ type: M, json: { write: true } })], u9.prototype, "nativeExtent", null), e([y({ json: { write: true } })], u9.prototype, "nativePixelSize", null), e([y({ json: { write: true } })], u9.prototype, "format", void 0), e([y({ json: { write: true } })], u9.prototype, "height", void 0), e([y({ json: { write: true } })], u9.prototype, "width", void 0), e([y({ json: { write: true } })], u9.prototype, "hasMultidimensionalTranspose", null), e([y({ json: { write: true } })], u9.prototype, "histograms", void 0), e([y({ json: { write: true } })], u9.prototype, "keyProperties", void 0), e([y({ json: { write: true } })], u9.prototype, "multidimensionalInfo", void 0), e([y({ json: { write: true } })], u9.prototype, "noDataValue", void 0), e([y({ json: { write: true } })], u9.prototype, "pixelSize", void 0), e([y({ json: { write: true } })], u9.prototype, "pixelType", void 0), e([y()], u9.prototype, "isPseudoSpatialReference", void 0), e([y({ readOnly: true })], u9.prototype, "sensorInfo", null), e([y({ type: f, json: { write: true } })], u9.prototype, "spatialReference", void 0), e([y({ json: { write: true } })], u9.prototype, "statistics", void 0), e([y({ type: n8, json: { write: true } })], u9.prototype, "storageInfo", void 0), e([y({ json: { write: true } })], u9.prototype, "transform", void 0), u9 = h5 = e([a3("esri.layers.support.RasterInfo")], u9);
var m4 = u9;

// node_modules/@arcgis/core/layers/support/rasterFunctions/surfaceUtils.js
var i7 = 1;
var s8 = 1 / 111e3;
function n9(t9) {
  let { altitude: e7, azimuth: i8 } = t9;
  const { hillshadeType: n11, pixelSizePower: a14 = 1, pixelSizeFactor: l6 = 1, scalingType: o8, isGCS: r13, resolution: c7 } = t9, h8 = "multi-directional" === n11 ? 2 * t9.zFactor : t9.zFactor, { x: u12, y: f9 } = c7;
  let d4 = h8 / (8 * u12), p7 = h8 / (8 * f9);
  if (r13 && h8 > 1e-3 && (d4 /= s8, p7 /= s8), "adjusted" === o8)
    if (r13) {
      const t10 = u12 * s8, e8 = f9 * s8;
      d4 = (h8 + t10 ** a14 * l6) / (8 * t10), p7 = (h8 + e8 ** a14 * l6) / (8 * e8);
    } else
      d4 = (h8 + u12 ** a14 * l6) / (8 * u12), p7 = (h8 + f9 ** a14 * l6) / (8 * f9);
  let x5 = (90 - e7) * Math.PI / 180, w4 = Math.cos(x5), y6 = (360 - i8 + 90) * Math.PI / 180, M4 = Math.sin(x5) * Math.cos(y6), m6 = Math.sin(x5) * Math.sin(y6);
  const A3 = [315, 270, 225, 360, 180, 0], g5 = [60, 60, 60, 60, 60, 90], k4 = new Float32Array([3, 5, 3, 2, 1, 4]), z2 = k4.reduce((t10, e8) => t10 + e8), F2 = k4.map((t10) => t10 / z2), P3 = "multi-directional" === n11 ? A3.length : 1, C5 = new Float32Array(6), Z = new Float32Array(6), v5 = new Float32Array(6);
  if ("multi-directional" === n11)
    for (let s10 = 0; s10 < P3; s10++)
      e7 = g5[s10], i8 = A3[s10], x5 = (90 - e7) * Math.PI / 180, w4 = Math.cos(x5), y6 = (360 - i8 + 90) * Math.PI / 180, M4 = Math.sin(x5) * Math.cos(y6), m6 = Math.sin(x5) * Math.sin(y6), C5[s10] = w4, Z[s10] = M4, v5[s10] = m6;
  else
    C5.fill(w4), Z.fill(M4), v5.fill(m6);
  return { resolution: c7, factor: [d4, p7], sinZcosA: M4, sinZsinA: m6, cosZ: w4, sinZcosAs: Z, sinZsinAs: v5, cosZs: C5, weights: F2, hillshadeType: ["traditional", "multi-directional"].indexOf(n11) };
}
function a12(t9, e7) {
  const { width: s10, height: n11 } = t9, a14 = s10 * n11, l6 = new Uint8Array(a14), o8 = null != t9.mask;
  let r13;
  if (o8) {
    r13 = new Uint8Array(t9.mask);
    for (let t10 = 0; t10 < r13.length; t10++)
      r13[t10] && (l6[t10] = 1, r13[t10] = 1);
  }
  const c7 = t9.pixels[0], h8 = new Float32Array(a14), u12 = new Float32Array(a14);
  let f9, d4 = 0;
  if (e7) {
    const { resolution: t10 } = e7, i8 = t10 ? (t10.x + t10.y) / 2 : 1;
    d4 = 200 * e7.zFactor / (i8 * i8), f9 = new Float32Array(a14);
  }
  const p7 = e7 == null ? void 0 : e7.curvatureType;
  let x5, w4, y6, M4, m6, A3, g5, k4;
  for (let z2 = i7; z2 < n11 - i7; z2++) {
    const t10 = z2 * s10;
    for (let e8 = i7; e8 < s10 - i7; e8++) {
      const i8 = t10 + e8;
      if (!r13 || 0 !== r13[i8]) {
        if (r13) {
          if (r13[i8 - s10 - 1] + r13[i8 - s10] + r13[i8 - s10 + 1] + r13[i8 - 1] + r13[i8 + 1] + r13[i8 + s10 - 1] + r13[i8 + s10] + r13[i8 + s10 + 1] < 7) {
            l6[i8] = 0;
            continue;
          }
          x5 = r13[i8 - s10 - 1] ? c7[i8 - s10 - 1] : c7[i8], w4 = r13[i8 - s10] ? c7[i8 - s10] : c7[i8], y6 = r13[i8 - s10 + 1] ? c7[i8 - s10 + 1] : c7[i8], M4 = r13[i8 - 1] ? c7[i8 - 1] : c7[i8], m6 = r13[i8 + 1] ? c7[i8 + 1] : c7[i8], A3 = r13[i8 + s10 - 1] ? c7[i8 + s10 - 1] : c7[i8], g5 = r13[i8 + s10] ? c7[i8 + s10] : c7[i8], k4 = r13[i8 + s10 + 1] ? c7[i8 + s10 + 1] : c7[i8];
        } else
          x5 = c7[i8 - s10 - 1], w4 = c7[i8 - s10], y6 = c7[i8 - s10 + 1], M4 = c7[i8 - 1], m6 = c7[i8 + 1], A3 = c7[i8 + s10 - 1], g5 = c7[i8 + s10], k4 = c7[i8 + s10 + 1];
        if (h8[i8] = y6 + m6 + m6 + k4 - (x5 + M4 + M4 + A3), u12[i8] = A3 + g5 + g5 + k4 - (x5 + w4 + w4 + y6), null != f9) {
          const t11 = c7[i8], e9 = 0.5 * (M4 + m6) - t11, s11 = 0.5 * (w4 + g5) - t11;
          if ("standard" === p7)
            f9[i8] = -d4 * (e9 + s11);
          else {
            const t12 = (-x5 + y6 + A3 - k4) / 4, n12 = (-M4 + m6) / 2, a15 = (w4 - g5) / 2, l7 = n12 * n12, o9 = a15 * a15, r14 = l7 + o9;
            r14 && (f9[i8] = "profile" === p7 ? d4 * (e9 * l7 + s11 * o9 + t12 * n12 * a15) / r14 : -d4 * (e9 * o9 + s11 * l7 - t12 * n12 * a15) / r14);
          }
        }
      }
    }
  }
  return { outMask: o8 ? l6 : null, dzxs: h8, dzys: u12, curvatures: f9 };
}
function l5(t9, e7, i8) {
  for (let s10 = 0; s10 < i8; s10++)
    t9[s10 * e7] = t9[s10 * e7 + 1], t9[(s10 + 1) * e7 - 1] = t9[(s10 + 1) * e7 - 2];
  for (let s10 = 1; s10 < e7 - 1; s10++)
    t9[s10] = t9[s10 + e7], t9[s10 + (i8 - 1) * e7] = t9[s10 + (i8 - 2) * e7];
}
function o7(s10, o8) {
  if (!o2(s10))
    return s10;
  const { factor: r13, sinZcosA: c7, sinZsinA: h8, cosZ: u12, sinZcosAs: f9, sinZsinAs: d4, cosZs: p7, weights: x5 } = n9(o8), [w4, y6] = r13, M4 = "traditional" === o8.hillshadeType, { width: m6, height: A3 } = s10, g5 = new Uint8Array(m6 * A3), { dzxs: k4, dzys: z2, outMask: F2 } = a12(s10);
  for (let t9 = i7; t9 < A3 - i7; t9++) {
    const e7 = t9 * m6;
    for (let t10 = i7; t10 < m6 - i7; t10++) {
      const i8 = e7 + t10;
      if (!F2 || F2[i8]) {
        const t11 = k4[i8] * w4, e8 = z2[i8] * y6, s11 = Math.sqrt(1 + t11 * t11 + e8 * e8);
        let n11 = 0;
        if (M4) {
          let i9 = 255 * (u12 + h8 * e8 - c7 * t11) / s11;
          i9 < 0 && (i9 = 0), n11 = i9;
        } else {
          const i9 = d4.length;
          for (let a14 = 0; a14 < i9; a14++) {
            let i10 = 255 * (p7[a14] + d4[a14] * e8 - f9[a14] * t11) / s11;
            i10 < 0 && (i10 = 0), n11 += i10 * x5[a14];
          }
        }
        g5[i8] = 255 & n11;
      }
    }
  }
  l5(g5, m6, A3);
  return new u2({ width: m6, height: A3, pixels: [g5], mask: F2, pixelType: "u8", validPixelCount: s10.validPixelCount, statistics: [{ minValue: 0, maxValue: 255 }] });
}
function r12(t9, i8, s10, n11) {
  if (!o2(t9) || !o2(i8))
    return;
  const { min: a14, max: l6 } = n11, o8 = t9.pixels[0], { pixels: r13, mask: c7 } = i8, h8 = r13[0], u12 = 255.00001 / (l6 - a14), f9 = new Uint8ClampedArray(h8.length), d4 = new Uint8ClampedArray(h8.length), p7 = new Uint8ClampedArray(h8.length), x5 = s10.length - 1;
  for (let e7 = 0; e7 < h8.length; e7++) {
    if (c7 && 0 === c7[e7])
      continue;
    const t10 = Math.floor((h8[e7] - a14) * u12), [i9, n12] = s10[t10 < 0 ? 0 : t10 > x5 ? x5 : t10], l7 = o8[e7], r14 = l7 * n12, w4 = r14 * (1 - Math.abs(i9 % 2 - 1)), y6 = l7 - r14;
    switch (Math.floor(i9)) {
      case 0:
        f9[e7] = r14 + y6, d4[e7] = w4 + y6, p7[e7] = y6;
        break;
      case 1:
        f9[e7] = w4 + y6, d4[e7] = r14 + y6, p7[e7] = y6;
        break;
      case 2:
        f9[e7] = y6, d4[e7] = r14 + y6, p7[e7] = w4 + y6;
        break;
      case 3:
        f9[e7] = y6, d4[e7] = w4 + y6, p7[e7] = r14 + y6;
        break;
      case 4:
        f9[e7] = w4 + y6, d4[e7] = y6, p7[e7] = r14 + y6;
        break;
      case 5:
      case 6:
        f9[e7] = r14 + y6, d4[e7] = y6, p7[e7] = w4 + y6;
    }
  }
  t9.pixels = [f9, d4, p7], t9.updateStatistics();
}
function c5(n11, o8) {
  if (!o2(n11))
    return n11;
  const r13 = o8.zFactor, c7 = o8.pixelSizePower ?? 1, h8 = o8.pixelSizeFactor ?? 1, u12 = o8.slopeType, f9 = o8.isGCS, { x: d4, y: p7 } = o8.resolution;
  let x5 = r13 / (8 * d4), w4 = r13 / (8 * p7);
  f9 && Math.abs(r13 - 1) < 1e-4 && (x5 /= s8, w4 /= s8), "adjusted" === u12 && (x5 = (r13 + d4 ** c7 * h8) / (8 * d4), w4 = (r13 + p7 ** c7 * h8) / (8 * p7));
  const { dzxs: y6, dzys: M4, outMask: m6 } = a12(n11), { width: A3, height: g5 } = n11, k4 = new Float32Array(A3 * g5);
  for (let t9 = i7; t9 < g5 - i7; t9++) {
    const e7 = t9 * A3;
    for (let t10 = i7; t10 < A3 - i7; t10++) {
      const i8 = e7 + t10;
      if (!m6 || m6[i8]) {
        const s10 = y6[i8] * x5, n12 = M4[i8] * w4, a14 = Math.sqrt(s10 * s10 + n12 * n12);
        k4[e7 + t10] = "percent-rise" === u12 ? 100 * a14 : 57.2957795 * Math.atan(a14);
      }
    }
  }
  l5(k4, A3, g5);
  const z2 = new u2({ width: A3, height: g5, pixels: [k4], mask: m6, pixelType: "f32", validPixelCount: n11.validPixelCount });
  return z2.updateStatistics(), z2;
}
function h6(s10, n11 = {}) {
  if (!o2(s10))
    return s10;
  const { resolution: o8 } = n11, r13 = o8 ? 1 / o8.x : 1, c7 = o8 ? 1 / o8.y : 1, { dzxs: h8, dzys: u12, outMask: f9 } = a12(s10), { width: d4, height: p7 } = s10, x5 = new Float32Array(d4 * p7);
  for (let t9 = i7; t9 < p7 - i7; t9++) {
    const e7 = t9 * d4;
    for (let t10 = i7; t10 < d4 - i7; t10++) {
      const i8 = e7 + t10;
      if (!f9 || f9[i8]) {
        const s11 = h8[i8] * r13, n12 = u12[i8] * c7;
        let a14 = -1;
        0 === s11 && 0 === n12 || (a14 = 90 - 57.29578 * Math.atan2(n12, -s11), a14 < 0 && (a14 += 360), 360 === a14 ? a14 = 0 : a14 > 360 && (a14 %= 360)), x5[e7 + t10] = a14;
      }
    }
  }
  l5(x5, d4, p7);
  return new u2({ width: d4, height: p7, pixels: [x5], mask: f9, pixelType: "f32", validPixelCount: s10.validPixelCount, statistics: [{ minValue: -1, maxValue: 360 }] });
}
function u10(i8, s10) {
  if (!o2(i8))
    return i8;
  const { curvatures: n11, outMask: o8 } = a12(i8, s10), { width: r13, height: c7 } = i8;
  l5(n11, r13, c7);
  const h8 = new u2({ width: r13, height: c7, pixels: [n11], mask: o8, pixelType: "f32", validPixelCount: i8.validPixelCount });
  return h8.updateStatistics(), h8;
}

// node_modules/@arcgis/core/renderers/support/colorRampUtils.js
var n10 = ["random", "ndvi", "ndvi2", "ndvi3", "elevation", "gray", "hillshade"];
var C3 = [{ id: "aspect", type: "multipart", colorRamps: [{ fromColor: [190, 190, 190], toColor: [255, 45, 8] }, { fromColor: [255, 45, 8], toColor: [255, 181, 61] }, { fromColor: [255, 181, 61], toColor: [255, 254, 52] }, { fromColor: [255, 254, 52], toColor: [0, 251, 50] }, { fromColor: [0, 251, 50], toColor: [255, 254, 52] }, { fromColor: [0, 253, 255], toColor: [0, 181, 255] }, { fromColor: [0, 181, 255], toColor: [26, 35, 253] }, { fromColor: [26, 35, 253], toColor: [255, 57, 251] }, { fromColor: [255, 57, 251], toColor: [255, 45, 8] }] }, { id: "black-to-white", fromColor: [0, 0, 0], toColor: [255, 255, 255] }, { id: "blue-bright", fromColor: [204, 204, 255], toColor: [0, 0, 224] }, { id: "blue-light-to-dark", fromColor: [211, 229, 232], toColor: [46, 100, 140] }, { id: "blue-green-bright", fromColor: [203, 245, 234], toColor: [48, 207, 146] }, { id: "blue-green-light-to-dark", fromColor: [216, 242, 237], toColor: [21, 79, 74] }, { id: "brown-light-to-dark", fromColor: [240, 236, 170], toColor: [102, 72, 48] }, { id: "brown-to-blue-green-diverging-right", type: "multipart", colorRamps: [{ fromColor: [156, 85, 31], toColor: [255, 255, 191] }, { fromColor: [255, 255, 191], toColor: [33, 130, 145] }] }, { id: "brown-to-blue-green-diverging-dark", type: "multipart", colorRamps: [{ fromColor: [110, 70, 45], toColor: [204, 204, 102] }, { fromColor: [204, 204, 102], toColor: [48, 100, 102] }] }, { id: "coefficient-bias", fromColor: [214, 214, 255], toColor: [0, 57, 148] }, { id: "cold-to-hot-diverging", type: "multipart", colorRamps: [{ fromColor: [69, 117, 181], toColor: [255, 255, 191] }, { fromColor: [255, 255, 191], toColor: [214, 47, 39] }] }, { id: "condition-number", type: "multipart", colorRamps: [{ fromColor: [0, 97, 0], toColor: [255, 255, 0] }, { fromColor: [255, 255, 0], toColor: [255, 34, 0] }] }, { id: "cyan-to-purple", type: "multipart", colorRamps: [{ fromColor: [0, 245, 245], toColor: [0, 0, 245] }, { fromColor: [0, 0, 245], toColor: [245, 0, 245] }] }, { id: "cyan-light-to-blue-dark", type: "multipart", colorRamps: [{ fromColor: [182, 237, 240], toColor: [31, 131, 224] }, { fromColor: [31, 131, 224], toColor: [9, 9, 145] }] }, { id: "distance", fromColor: [255, 200, 0], toColor: [0, 0, 255] }, { id: "elevation1", type: "multipart", colorRamps: [{ fromColor: [175, 240, 233], toColor: [255, 255, 179] }, { fromColor: [255, 255, 179], toColor: [0, 128, 64] }, { fromColor: [0, 128, 64], toColor: [252, 186, 3] }, { fromColor: [252, 186, 3], toColor: [128, 0, 0] }, { fromColor: [120, 0, 0], toColor: [105, 48, 13] }, { fromColor: [105, 48, 13], toColor: [171, 171, 171] }, { fromColor: [171, 171, 171], toColor: [255, 252, 255] }] }, { id: "elevation2", type: "multipart", colorRamps: [{ fromColor: [118, 219, 211], toColor: [255, 255, 199] }, { fromColor: [255, 255, 199], toColor: [255, 255, 128] }, { fromColor: [255, 255, 128], toColor: [217, 194, 121] }, { fromColor: [217, 194, 121], toColor: [135, 96, 38] }, { fromColor: [135, 96, 38], toColor: [150, 150, 181] }, { fromColor: [150, 150, 181], toColor: [181, 150, 181] }, { fromColor: [181, 150, 181], toColor: [255, 252, 255] }] }, { id: "errors", fromColor: [255, 235, 214], toColor: [196, 10, 10] }, { id: "gray-light-to-dark", fromColor: [219, 219, 219], toColor: [69, 69, 69] }, { id: "green-bright", fromColor: [204, 255, 204], toColor: [14, 204, 14] }, { id: "green-light-to-dark", fromColor: [220, 245, 233], toColor: [34, 102, 51] }, { id: "green-to-blue", type: "multipart", colorRamps: [{ fromColor: [32, 204, 16], toColor: [0, 242, 242] }, { fromColor: [0, 242, 242], toColor: [2, 33, 227] }] }, { id: "orange-bright", fromColor: [255, 235, 204], toColor: [240, 118, 5] }, { id: "orange-light-to-dark", fromColor: [250, 233, 212], toColor: [171, 65, 36] }, { id: "partial-spectrum", type: "multipart", colorRamps: [{ fromColor: [242, 241, 162], toColor: [255, 255, 0] }, { fromColor: [255, 255, 0], toColor: [255, 0, 0] }, { fromColor: [252, 3, 69], toColor: [176, 7, 237] }, { fromColor: [176, 7, 237], toColor: [2, 29, 173] }] }, { id: "partial-spectrum-1-diverging", type: "multipart", colorRamps: [{ fromColor: [135, 38, 38], toColor: [240, 149, 12] }, { fromColor: [240, 149, 12], toColor: [255, 255, 191] }, { fromColor: [255, 255, 191], toColor: [74, 80, 181] }, { fromColor: [74, 80, 181], toColor: [39, 32, 122] }] }, { id: "partial-spectrum-2-diverging", type: "multipart", colorRamps: [{ fromColor: [115, 77, 42], toColor: [201, 137, 52] }, { fromColor: [201, 137, 52], toColor: [255, 255, 191] }, { fromColor: [255, 255, 191], toColor: [91, 63, 176] }, { fromColor: [91, 63, 176], toColor: [81, 13, 97] }] }, { id: "pink-to-yellow-green-diverging-bright", type: "multipart", colorRamps: [{ fromColor: [158, 30, 113], toColor: [255, 255, 191] }, { fromColor: [255, 255, 191], toColor: [99, 110, 45] }] }, { id: "pink-to-yellow-green-diverging-dark", type: "multipart", colorRamps: [{ fromColor: [97, 47, 73], toColor: [204, 204, 102] }, { fromColor: [204, 204, 102], toColor: [22, 59, 15] }] }, { id: "precipitation", type: "multipart", colorRamps: [{ fromColor: [194, 82, 60], toColor: [237, 161, 19] }, { fromColor: [237, 161, 19], toColor: [255, 255, 0] }, { fromColor: [255, 255, 0], toColor: [0, 219, 0] }, { fromColor: [0, 219, 0], toColor: [32, 153, 143] }, { fromColor: [32, 153, 143], toColor: [11, 44, 122] }] }, { id: "prediction", type: "multipart", colorRamps: [{ fromColor: [40, 146, 199], toColor: [250, 250, 100] }, { fromColor: [250, 250, 100], toColor: [232, 16, 20] }] }, { id: "purple-bright", fromColor: [255, 204, 255], toColor: [199, 0, 199] }, { id: "purple-to-green-diverging-bright", type: "multipart", colorRamps: [{ fromColor: [77, 32, 150], toColor: [255, 255, 191] }, { fromColor: [255, 255, 191], toColor: [20, 122, 11] }] }, { id: "purple-to-green-diverging-dark", type: "multipart", colorRamps: [{ fromColor: [67, 14, 89], toColor: [204, 204, 102] }, { fromColor: [204, 204, 102], toColor: [24, 79, 15] }] }, { id: "purple-blue-bright", fromColor: [223, 184, 230], toColor: [112, 12, 242] }, { id: "purple-blue-light-to-dark", fromColor: [229, 213, 242], toColor: [93, 44, 112] }, { id: "purple-red-bright", fromColor: [255, 204, 225], toColor: [199, 0, 99] }, { id: "purple-red-light-to-dark", fromColor: [250, 215, 246], toColor: [143, 17, 57] }, { id: "red-bright", fromColor: [255, 204, 204], toColor: [219, 0, 0] }, { id: "red-light-to-dark", fromColor: [255, 224, 224], toColor: [143, 10, 10] }, { id: "red-to-blue-diverging-bright", type: "multipart", colorRamps: [{ fromColor: [196, 69, 57], toColor: [255, 255, 191] }, { fromColor: [255, 255, 191], toColor: [48, 95, 207] }] }, { id: "red-to-blue-diverging-dark", type: "multipart", colorRamps: [{ fromColor: [107, 13, 13], toColor: [204, 204, 102] }, { fromColor: [204, 204, 102], toColor: [13, 53, 97] }] }, { id: "red-to-green", type: "multipart", colorRamps: [{ fromColor: [245, 0, 0], toColor: [245, 245, 0] }, { fromColor: [245, 245, 0], toColor: [0, 245, 0] }] }, { id: "red-to-green-diverging-bright", type: "multipart", colorRamps: [{ fromColor: [186, 20, 20], toColor: [255, 255, 191] }, { fromColor: [255, 255, 191], toColor: [54, 145, 33] }] }, { id: "red-to-green-diverging-dark", type: "multipart", colorRamps: [{ fromColor: [97, 21, 13], toColor: [204, 204, 102] }, { fromColor: [204, 204, 102], toColor: [16, 69, 16] }] }, { id: "slope", type: "multipart", colorRamps: [{ fromColor: [56, 168, 0], toColor: [255, 255, 0] }, { fromColor: [255, 255, 0], toColor: [255, 0, 0] }] }, { id: "spectrum-full-bright", type: "multipart", colorRamps: [{ fromColor: [255, 0, 0], toColor: [255, 255, 0] }, { fromColor: [255, 255, 0], toColor: [0, 255, 255] }, { fromColor: [0, 255, 255], toColor: [0, 0, 255] }] }, { id: "spectrum-full-dark", type: "multipart", colorRamps: [{ fromColor: [153, 0, 0], toColor: [153, 153, 0] }, { fromColor: [153, 153, 0], toColor: [0, 153, 153] }, { fromColor: [0, 153, 153], toColor: [0, 0, 153] }] }, { id: "spectrum-full-light", type: "multipart", colorRamps: [{ fromColor: [255, 153, 153], toColor: [255, 255, 153] }, { fromColor: [255, 255, 153], toColor: [153, 255, 255] }, { fromColor: [153, 255, 255], toColor: [153, 153, 255] }] }, { id: "surface", type: "multipart", colorRamps: [{ fromColor: [112, 153, 89], toColor: [242, 238, 162] }, { fromColor: [242, 238, 162], toColor: [242, 206, 133] }, { fromColor: [242, 206, 133], toColor: [194, 140, 124] }, { fromColor: [194, 140, 124], toColor: [255, 242, 255] }] }, { id: "temperature", type: "multipart", colorRamps: [{ fromColor: [255, 252, 255], toColor: [255, 0, 255] }, { fromColor: [255, 0, 255], toColor: [0, 0, 255] }, { fromColor: [0, 0, 255], toColor: [0, 255, 255] }, { fromColor: [0, 255, 255], toColor: [0, 255, 0] }, { fromColor: [0, 255, 0], toColor: [255, 255, 0] }, { fromColor: [255, 255, 0], toColor: [255, 128, 0] }, { fromColor: [255, 128, 0], toColor: [128, 0, 0] }] }, { id: "white-to-black", fromColor: [255, 255, 255], toColor: [0, 0, 0] }, { id: "yellow-to-dark-red", type: "multipart", colorRamps: [{ fromColor: [255, 255, 128], toColor: [242, 167, 46] }, { fromColor: [242, 167, 46], toColor: [107, 0, 0] }] }, { id: "yellow-to-green-to-dark-blue", type: "multipart", colorRamps: [{ fromColor: [255, 255, 128], toColor: [56, 224, 9] }, { fromColor: [56, 224, 9], toColor: [26, 147, 171] }, { fromColor: [26, 147, 171], toColor: [12, 16, 120] }] }, { id: "yellow-to-red", fromColor: [245, 245, 0], toColor: [255, 0, 0] }, { id: "yellow-green-bright", fromColor: [236, 252, 204], toColor: [157, 204, 16] }, { id: "yellow-green-light-to-dark", fromColor: [215, 240, 175], toColor: [96, 107, 45] }];
var a13 = new s3({ Aspect: "aspect", "Black to White": "black-to-white", "Blue Bright": "blue-bright", "Blue Light to Dark": "blue-light-to-dark", "Blue-Green Bright": "blue-green-bright", "Blue-Green Light to Dark": "blue-green-light-to-dark", "Brown Light to Dark": "brown-light-to-dark", "Brown to Blue Green Diverging, Bright": "brown-to-blue-green-diverging-right", "Brown to Blue Green Diverging, Dark": "brown-to-blue-green-diverging-dark", "Coefficient Bias": "coefficient-bias", "Cold to Hot Diverging": "cold-to-hot-diverging", "Condition Number": "condition-number", "Cyan to Purple": "cyan-to-purple", "Cyan-Light to Blue-Dark": "cyan-light-to-blue-dark", Distance: "distance", "Elevation #1": "elevation1", "Elevation #2": "elevation2", Errors: "errors", "Gray Light to Dark": "gray-light-to-dark", "Green Bright": "green-bright", "Green Light to Dark": "green-light-to-dark", "Green to Blue": "green-to-blue", "Orange Bright": "orange-bright", "Orange Light to Dark": "orange-light-to-dark", "Partial Spectrum": "partial-spectrum", "Partial Spectrum 1 Diverging": "partial-spectrum-1-diverging", "Partial Spectrum 2 Diverging": "partial-spectrum-2-diverging", "Pink to YellowGreen Diverging, Bright": "pink-to-yellow-green-diverging-bright", "Pink to YellowGreen Diverging, Dark": "pink-to-yellow-green-diverging-dark", Precipitation: "precipitation", Prediction: "prediction", "Purple Bright": "purple-bright", "Purple to Green Diverging, Bright": "purple-to-green-diverging-bright", "Purple to Green Diverging, Dark": "purple-to-green-diverging-dark", "Purple-Blue Bright": "purple-blue-bright", "Purple-Blue Light to Dark": "purple-blue-light-to-dark", "Purple-Red Bright": "purple-red-bright", "Purple-Red Light to Dark": "purple-red-light-to-dark", "Red Bright": "red-bright", "Red Light to Dark": "red-light-to-dark", "Red to Blue Diverging, Bright": "red-to-blue-diverging-bright", "Red to Blue Diverging, Dark": "red-to-blue-diverging-dark", "Red to Green": "red-to-green", "Red to Green Diverging, Bright": "red-to-green-diverging-bright", "Red to Green Diverging, Dark": "red-to-green-diverging-dark", Slope: "slope", "Spectrum-Full Bright": "spectrum-full-bright", "Spectrum-Full Dark": "spectrum-full-dark", "Spectrum-Full Light": "spectrum-full-light", Surface: "surface", Temperature: "temperature", "White to Black": "white-to-black", "Yellow to Dark Red": "yellow-to-dark-red", "Yellow to Green to Dark Blue": "yellow-to-green-to-dark-blue", "Yellow to Red": "yellow-to-red", "Yellow-Green Bright": "yellow-green-bright", "Yellow-Green Light to Dark": "yellow-green-light-to-dark" });
function m5(o8, r13) {
  if (!o8 || !r13 || o8.length !== r13.length)
    return false;
  for (let t9 = 0; t9 < o8.length; t9++)
    if (o8[t9] > r13[t9] + 2 || o8[t9] < r13[t9] - 2)
      return false;
  return true;
}
function g4(o8) {
  const r13 = o8.clone();
  return r13.fromColor = o8.toColor, r13.toColor = o8.fromColor, r13.algorithm = o8.algorithm, r13;
}
function p6(o8) {
  var _a;
  if ("multipart" === o8.type) {
    const r13 = o8.clone();
    return ((_a = r13.colorRamps) == null ? void 0 : _a.length) ? (r13.colorRamps = r13.colorRamps.reverse().map((o9) => g4(o9)), r13) : r13;
  }
  return g4(o8);
}
function u11(r13, t9) {
  if (!r13)
    return;
  const l6 = t9 ?? C3;
  let e7 = null;
  return "algorithmic" === r13.type ? l6.some((o8) => {
    if (m5(r13.fromColor.toRgb(), o8.fromColor) && m5(r13.toColor.toRgb(), o8.toColor))
      return e7 = o8.id, true;
  }) : "multipart" === r13.type && l6.some((t10) => {
    const l7 = r13.colorRamps, i8 = t10.colorRamps;
    if (l7 && i8 && l7.length === i8.length && !i8.some((r14, t11) => {
      if (!m5(l7[t11].fromColor.toRgb(), new h(r14.fromColor).toRgb()) || !m5(l7[t11].toColor.toRgb(), new h(r14.toColor).toRgb()))
        return true;
    })) {
      if (e7)
        return true;
      e7 = t10.id;
    }
  }), e7;
}
function f8(o8, r13, t9 = false) {
  if (!o8)
    return;
  let l6 = u11(o8, r13);
  return null != l6 || t9 || (l6 = u11(o8 = p6(o8), r13)), l6;
}
function s9(o8, r13 = false) {
  const t9 = "string" == typeof o8 ? o8 : f8(o8, void 0, r13);
  return t9 ? a13.toJSON(t9) : null;
}
function c6(o8, r13 = "esriCIELabAlgorithm") {
  const t9 = C3.find(({ id: r14 }) => r14 === o8);
  return t9 ? t9.colorRamps ? { type: "multipart", colorRamps: t9.colorRamps.map((o9) => ({ type: "algorithmic", algorithm: r13, fromColor: [...o9.fromColor], toColor: [...o9.toColor] })) } : { type: "algorithmic", algorithm: r13, fromColor: [...t9.fromColor], toColor: [...t9.toColor] } : null;
}
function d3(o8) {
  const r13 = (o8 = o8 || {}).numColors || 256, t9 = o8.distanceOffset || 0, l6 = null != o8.isCustomInterval ? o8.isCustomInterval : null !== o8.distanceInterval && o8.distanceInterval !== 1 / (r13 - 1), e7 = o8.distanceInterval || 1 / (r13 - 1);
  return { ...o8, numColors: r13, distanceOffset: t9, interpolateAlpha: !!o8.interpolateAlpha, distanceInterval: e7, isCustomInterval: l6, weights: o8.weights };
}
function h7(o8, r13, t9) {
  const { numColors: l6, distanceOffset: e7, distanceInterval: i8, isCustomInterval: n11 } = t9, C5 = 0 === o8.s, a14 = 0 === r13.s;
  let m6 = o8.h, g5 = r13.h;
  C5 && !a14 ? m6 = g5 : a14 && !C5 && (r13 = { ...r13, h: m6 }, g5 = m6);
  let p7, u12 = Math.abs(g5 - m6);
  const f9 = 360;
  u12 < f9 / 2 ? p7 = (g5 - m6) * i8 : (u12 = f9 - u12, p7 = m6 > g5 ? u12 * i8 : -u12 * i8);
  const s10 = (r13.s - o8.s) * i8, c7 = (r13.v - o8.v) * i8;
  let { s: d4, v: h8 } = o8, b4 = m6;
  if (e7) {
    const o9 = e7 / i8;
    b4 = (b4 + o9 * p7 + f9) % f9, d4 += o9 * s10, h8 += o9 * c7;
  }
  const v5 = [];
  for (let k4 = 0; k4 < l6 - 1; k4++)
    v5.push({ h: b4, s: d4, v: h8 }), b4 = (b4 + p7 + f9) % f9, d4 += s10, h8 += c7;
  return v5.push(n11 ? { h: b4, s: d4, v: h8 } : r13), v5;
}
function b3(o8, r13, t9) {
  const { numColors: l6, distanceOffset: e7, distanceInterval: i8, isCustomInterval: n11 } = t9;
  let { l: C5, a: a14, b: m6 } = o8;
  const g5 = (r13.l - C5) * i8, p7 = (r13.a - a14) * i8, u12 = (r13.b - m6) * i8, f9 = [];
  if (e7) {
    const o9 = e7 / i8;
    C5 += o9 * g5, a14 += o9 * p7, m6 += o9 * u12;
  }
  for (let s10 = 0; s10 < l6 - 1; s10++)
    f9.push({ l: C5, a: a14, b: m6 }), C5 += g5, a14 += p7, m6 += u12;
  return f9.push(n11 ? { l: C5, a: a14, b: m6 } : r13), f9;
}
function v4(o8, r13, t9) {
  const { numColors: l6, distanceOffset: e7, distanceInterval: i8, isCustomInterval: n11 } = t9, C5 = o8.h, a14 = r13.h, m6 = 2 * Math.PI;
  let g5;
  if (C5 <= a14) {
    const o9 = a14 - C5, r14 = a14 - C5 - m6;
    g5 = Math.abs(r14) < Math.abs(o9) ? r14 : o9;
  } else {
    const o9 = a14 + m6 - C5, r14 = a14 - C5;
    g5 = Math.abs(r14) < Math.abs(o9) ? r14 : o9;
  }
  const p7 = g5 * i8, u12 = (r13.l - o8.l) * i8, f9 = (r13.c - o8.c) * i8;
  let { l: s10, c: c7, h: d4 } = o8;
  if (e7) {
    const o9 = e7 / i8;
    s10 += o9 * u12, c7 += o9 * f9, d4 = (d4 + o9 * p7 + m6) % m6;
  }
  const h8 = [];
  for (let b4 = 0; b4 < l6 - 1; b4++)
    h8.push({ l: s10, c: c7, h: d4 }), s10 += u12, c7 += f9, d4 = (d4 + p7 + m6) % m6;
  return h8.push(n11 ? { l: s10, c: c7, h: d4 } : r13), h8;
}
function k3(o8, i8) {
  let { fromColor: n11, toColor: C5 } = o8;
  n11 = [...n11], C5 = [...C5], 3 === n11.length && (n11 = n11.concat([255])), 3 === C5.length && (C5 = C5.concat([255]));
  const a14 = o8.algorithm || "esriCIELabAlgorithm", m6 = d3(i8), { numColors: g5, distanceOffset: p7, isCustomInterval: u12, interpolateAlpha: f9 } = m6;
  if (1 === g5 && 0 === p7)
    return [n11];
  if (2 === g5 && 0 === p7 && !u12)
    return [n11, C5];
  const s10 = { r: n11[0], g: n11[1], b: n11[2] }, c7 = { r: C5[0], g: C5[1], b: C5[2] }, k4 = "esriCIELabAlgorithm" === a14 ? b3(z(s10), z(c7), m6) : "esriHSVAlgorithm" === a14 ? h7(y2(s10), y2(c7), m6) : v4(v(s10), v(c7), m6), y6 = [], R3 = n11[3] ?? 255, w4 = ((C5[3] ?? 255) - R3) / (g5 - 1);
  for (let r13 = 0; r13 < g5; r13++) {
    const { r: o9, g: t9, b: l6 } = p(k4[r13]), i9 = f9 ? Math.round(R3 + w4 * r13) : 255;
    y6.push([o9, t9, l6, i9]);
  }
  return y6;
}
function y5(o8, r13) {
  const { numColors: t9, interpolateAlpha: l6 } = d3(r13);
  let e7 = r13 == null ? void 0 : r13.weights;
  const { colorRamps: i8 } = o8;
  if (e7) {
    const o9 = e7.reduce((o10, r14) => o10 + r14);
    e7 = e7.map((r14) => r14 / o9);
  } else {
    e7 = [];
    for (let o9 = 0; o9 < i8.length; o9++)
      e7[o9] = 1 / i8.length;
  }
  const n11 = [];
  let C5 = 0, a14 = 0;
  const m6 = 1 / (t9 - 1);
  let g5 = false;
  for (let u12 = 0; u12 < i8.length; u12++) {
    let o9 = g5 ? 0 : C5 * m6 - a14, r14 = u12 === i8.length - 1 ? t9 - 1 - C5 : (e7[u12] - o9) / m6;
    if (g5 = Math.ceil(r14) === r14, r14 = Math.ceil(r14), 0 === r14)
      continue;
    o9 /= e7[u12];
    const p8 = k3(i8[u12], { numColors: r14, interpolateAlpha: l6, distanceOffset: o9, distanceInterval: m6 / e7[u12] });
    C5 += p8.length, n11.push(...p8), a14 += e7[u12];
  }
  const p7 = [...i8[i8.length - 1].toColor];
  return 3 === p7.length && p7.push(255), n11.push(p7), n11;
}
function R2(o8, r13) {
  const t9 = "toJSON" in o8 ? o8.toJSON() : o8;
  return "multipart" === t9.type ? y5(t9, r13) : k3(t9, r13);
}
function w3(o8, r13) {
  const t9 = R2(o8, r13), l6 = r13 == null ? void 0 : r13.interpolateAlpha;
  return t9.forEach((o9, r14) => {
    o9.unshift(r14), l6 || o9.pop();
  }), t9;
}
function B2(o8) {
  const r13 = y2(o8);
  return { type: "HsvColor", Hue: r13.h, Saturation: r13.s, Value: r13.v, AlphaValue: 255 };
}
function D3(o8) {
  const r13 = o8.toJSON();
  return { Algorithm: (r13 == null ? void 0 : r13.Algorithm) || "esriHSVAlgorithm", type: "AlgorithmicColorRamp", FromColor: B2(o8.fromColor), ToColor: B2(o8.toColor) };
}
function I3(o8) {
  const r13 = s9(o8);
  if (!r13)
    return null;
  if ("algorithmic" === o8.type)
    return { ...D3(o8), Name: r13 };
  if (o8.colorRamps) {
    const t9 = o8.colorRamps.map(D3);
    return { type: "MultiPartColorRamp", NumColorRamps: t9.length, ArrayOfColorRamp: t9, Name: r13 };
  }
  return null;
}
function G2(o8) {
  const r13 = o8.reverse().map((o9) => {
    const r14 = o9.toString(16);
    return r14.length < 2 ? "0" + r14 : r14;
  });
  return 4294967295 & Number.parseInt(r13.join(""), 16);
}

// node_modules/@arcgis/core/renderers/support/RasterSymbolizer.js
var _ = class extends l {
  constructor(e7) {
    super(e7);
  }
  bind() {
    const { rendererJSON: e7 } = this;
    if (!e7)
      return { success: false };
    let t9;
    switch (this.lookup = { rendererJSON: {} }, e7.type) {
      case "uniqueValue":
        t9 = this._updateUVRenderer(e7);
        break;
      case "rasterColormap":
        t9 = this._updateColormapRenderer(e7);
        break;
      case "rasterStretch":
        t9 = this._updateStretchRenderer(e7);
        break;
      case "classBreaks":
        t9 = this._updateClassBreaksRenderer(e7);
        break;
      case "rasterShadedRelief":
        t9 = this._updateShadedReliefRenderer(e7);
        break;
      case "vectorField":
        t9 = this._updateVectorFieldRenderer();
        break;
      case "flowRenderer":
        t9 = this._updateFlowRenderer();
    }
    return t9;
  }
  symbolize(e7) {
    let t9 = e7 && e7.pixelBlock;
    if (!C4(t9))
      return t9;
    if (e7.simpleStretchParams && "rasterStretch" === this.rendererJSON.type)
      return this.simpleStretch(t9, e7.simpleStretchParams);
    try {
      let r13;
      switch (t9.pixels.length > 3 && (t9 = t9.extractBands([0, 1, 2])), this.rendererJSON.type) {
        case "uniqueValue":
        case "rasterColormap":
          r13 = this._symbolizeColormap(t9);
          break;
        case "classBreaks":
          r13 = this._symbolizeClassBreaks(t9);
          break;
        case "rasterStretch":
          r13 = this._symbolizeStretch(t9, e7.bandIds);
          break;
        case "rasterShadedRelief": {
          const s10 = e7.extent, a14 = s10.spatialReference.isGeographic, o8 = { x: (s10.xmax - s10.xmin) / t9.width, y: (s10.ymax - s10.ymin) / t9.height };
          r13 = this._symbolizeShadedRelief(t9, { isGCS: a14, resolution: o8 });
          break;
        }
      }
      return r13;
    } catch (r13) {
      return s.getLogger(this).error("symbolize", r13.message), t9;
    }
  }
  simpleStretch(e7, t9) {
    if (!C4(e7))
      return e7;
    try {
      return e7.pixels.length > 3 && (e7 = e7.extractBands([0, 1, 2])), M3(e7, { ...t9, isRenderer: true });
    } catch (r13) {
      return s.getLogger(this).error("symbolize", r13.message), e7;
    }
  }
  generateWebGLParameters(e7) {
    if (["uniqueValue", "rasterColormap", "classBreaks"].includes(this.rendererJSON.type)) {
      const { indexedColormap: e8, offset: t10 } = this.lookup.colormapLut || {};
      return { colormap: e8, colormapOffset: t10, type: "lut" };
    }
    const { pixelBlock: t9, isGCS: r13, resolution: s10, bandIds: a14 } = e7, { rendererJSON: o8 } = this;
    return "rasterStretch" === o8.type ? this._generateStretchWebGLParams(t9, o8, a14) : "rasterShadedRelief" === o8.type ? this._generateShadedReliefWebGLParams(o8, r13, s10 ?? void 0) : "vectorField" === o8.type ? this._generateVectorFieldWebGLParams(o8) : null;
  }
  _isLUTChanged(e7) {
    if (!this.lookup || !this.lookup.rendererJSON)
      return true;
    if ("colorRamp" in this.rendererJSON) {
      const t9 = this.rendererJSON.colorRamp;
      return e7 ? JSON.stringify(t9) !== JSON.stringify(this.lookup.rendererJSON.colorRamp) : (this.rendererJSON, this.lookup.rendererJSON, JSON.stringify(this.rendererJSON) !== JSON.stringify(this.lookup.rendererJSON));
    }
    return JSON.stringify(this.rendererJSON) !== JSON.stringify(this.lookup.rendererJSON);
  }
  _symbolizeColormap(e7) {
    if (this._isLUTChanged()) {
      if (!this.bind().success)
        return e7;
    }
    return h2(e7, this.lookup.colormapLut);
  }
  _symbolizeClassBreaks(e7) {
    const { canUseIndexedLUT: t9 } = this._analyzeClassBreaks(this.rendererJSON);
    if (this._isLUTChanged()) {
      if (!this.bind().success)
        return e7;
    }
    return t9 ? h2(e7, this.lookup.colormapLut) : u3(e7, this.lookup.remapLut ?? []);
  }
  _symbolizeStretch(e7, t9) {
    var _a, _b;
    const { rasterInfo: r13 } = this, { pixelType: s10, bandCount: a14 } = r13, o8 = this.rendererJSON, n11 = ["u8", "u16", "s8", "s16"].includes(s10);
    let l6, c7;
    const { dra: p7 } = o8, { gamma: f9 } = this.lookup;
    if ("histogramEqualization" === o8.stretchType) {
      const s11 = p7 ? null : (_a = this.lookup) == null ? void 0 : _a.histogramLut, a15 = p3(o8, { rasterInfo: r13, pixelBlock: e7, bandIds: t9, returnHistogramLut: !s11 }), n12 = M3(e7, { ...a15, gamma: f9, isRenderer: true });
      c7 = f2(n12, { lut: p7 ? a15.histogramLut : s11, offset: 0 });
    } else if (n11) {
      if (p7) {
        const a15 = p3(o8, { rasterInfo: r13, pixelBlock: e7, bandIds: t9 });
        l6 = a10({ pixelType: s10, ...a15, gamma: f9, rounding: "floor" });
      } else if (this._isLUTChanged()) {
        if (!this.bind().success)
          return e7;
        l6 = this.lookup ? this.lookup.stretchLut : null;
      } else
        l6 = this.lookup ? this.lookup.stretchLut : null;
      if (!l6)
        return e7;
      a14 > 1 && null != t9 && t9.length === (e7 == null ? void 0 : e7.pixels.length) && (l6 == null ? void 0 : l6.lut.length) === a14 && (l6 = { lut: t9.map((e8) => l6.lut[e8]), offset: l6.offset }), c7 = f2(e7, l6);
    } else {
      const s11 = p3(o8, { rasterInfo: r13, pixelBlock: e7, bandIds: t9 });
      c7 = M3(e7, { ...s11, gamma: f9, isRenderer: true });
    }
    if (o8.colorRamp) {
      if (this._isLUTChanged(true)) {
        if (!this.bind().success)
          return e7;
      }
      c7 = h2(c7, (_b = this.lookup) == null ? void 0 : _b.colormapLut);
    }
    return c7;
  }
  _symbolizeShadedRelief(e7, t9) {
    var _a;
    const r13 = this.rendererJSON, s10 = { ...r13, ...t9 }, a14 = o7(e7, s10);
    if (!r13.colorRamp)
      return a14;
    let o8;
    if (this._isLUTChanged(true)) {
      if (!this.bind().success)
        return a14;
      o8 = this.lookup ? this.lookup.hsvMap : null;
    } else
      o8 = this.lookup ? this.lookup.hsvMap : null;
    if (!o8)
      return a14;
    const n11 = ((_a = this.rasterInfo.statistics) == null ? void 0 : _a[0]) ?? { min: 0, max: 8e3 };
    return r12(a14, e7, o8, n11), a14;
  }
  _isVectorFieldData() {
    const { bandCount: e7, dataType: t9 } = this.rasterInfo;
    return 2 === e7 && ("vector-magdir" === t9 || "vector-uv" === t9);
  }
  _updateVectorFieldRenderer() {
    return this._isVectorFieldData() ? { success: true } : { success: false, error: `Unsupported data type "${this.rasterInfo.dataType}"; VectorFieldRenderer only supports "vector-magdir" and "vector-uv".` };
  }
  _updateFlowRenderer() {
    return this._isVectorFieldData() ? { success: true } : { success: false, error: `Unsupported data type "${this.rasterInfo.dataType}"; FlowRenderer only supports "vector-magdir" and "vector-uv".` };
  }
  _updateUVRenderer(e7) {
    var _a;
    const { bandCount: t9, attributeTable: r13, pixelType: s10 } = this.rasterInfo, a14 = e7.field1;
    if (!a14)
      return { success: false, error: "Unsupported renderer; missing UniqueValueRenderer.field." };
    const o8 = e7.defaultSymbol, n11 = 1 === t9 && ["u8", "s8"].includes(s10);
    if (!t2(this.rasterInfo, a14) && !n11)
      return { success: false, error: "Unsupported data; UniqueValueRenderer is only supported on single band data with a valid raster attribute table." };
    const i8 = [];
    if (null != r13) {
      const t10 = r13.fields.find((e8) => "value" === e8.name.toLowerCase());
      if (!t10)
        return { success: false, error: "Unsupported data; the data's raster attribute table does not have a value field." };
      r13.features.forEach((r14) => {
        var _a2, _b;
        const s11 = (_a2 = e7.uniqueValueInfos) == null ? void 0 : _a2.find((e8) => String(e8.value) === String(r14.attributes[a14])), n12 = (_b = s11 == null ? void 0 : s11.symbol) == null ? void 0 : _b.color;
        n12 ? i8.push([r14.attributes[t10.name]].concat(n12)) : o8 && i8.push([r14.attributes[t10.name]].concat(o8.color));
      });
    } else {
      if ("value" !== a14.toLowerCase())
        return { success: false, error: 'Unsupported renderer; UniqueValueRenderer.field must be "Value" when raster attribute table is not availalbe.' };
      (_a = e7.uniqueValueInfos) == null ? void 0 : _a.forEach((e8) => {
        var _a2;
        const t10 = (_a2 = e8 == null ? void 0 : e8.symbol) == null ? void 0 : _a2.color;
        t10 ? i8.push([parseInt("" + e8.value, 10)].concat(t10)) : o8 && i8.push([parseInt("" + e8.value, 10)].concat(o8 == null ? void 0 : o8.color));
      });
    }
    if (0 === i8.length)
      return { success: false, error: "Invalid UniqueValueRenderer. Cannot find matching records in the raster attribute table." };
    const l6 = a5({ colormap: i8 });
    return this.lookup = { rendererJSON: e7, colormapLut: l6 }, this.canRenderInWebGL = true, { success: true };
  }
  _updateColormapRenderer(e7) {
    if (!u4(this.rasterInfo))
      return { success: false, error: "Unsupported data; the data source does not have a colormap." };
    const t9 = e7.colormapInfos.map((e8) => [e8.value].concat(e8.color)).sort((e8, t10) => e8[0] - t10[0]);
    if (!t9 || 0 === t9.length)
      return { success: false, error: "Unsupported renderer; ColormapRenderer must have meaningful colormapInfos." };
    const r13 = a5({ colormap: t9 });
    return this.lookup = { rendererJSON: e7, colormapLut: r13 }, this.canRenderInWebGL = true, { success: true };
  }
  _updateShadedReliefRenderer(e7) {
    if (!e2(this.rasterInfo))
      return { success: false, error: `Unsupported data type "${this.rasterInfo.dataType}"; ShadedReliefRenderer only supports "elevation", or single band float/s16 data.` };
    if (e7.colorRamp) {
      const r13 = w3(e7.colorRamp, { interpolateAlpha: true }), s10 = a5({ colormap: r13 }), a14 = [], o8 = s10.indexedColormap;
      for (let e8 = 0; e8 < o8.length; e8 += 4) {
        const r14 = y2({ r: o8[e8], g: o8[e8 + 1], b: o8[e8 + 2] });
        a14.push([r14.h / 60, r14.s / 100, 255 * r14.v / 100]);
      }
      this.lookup = { rendererJSON: e7, colormapLut: s10, hsvMap: a14 };
    } else
      this.lookup = null;
    return this.canRenderInWebGL = true, { success: true };
  }
  _analyzeClassBreaks(e7) {
    const { attributeTable: t9, pixelType: r13 } = this.rasterInfo, s10 = null != t9 ? t9.fields.find((e8) => "value" === e8.name.toLowerCase()) : null, a14 = null != t9 ? t9.fields.find((t10) => t10.name.toLowerCase() === e7.field.toLowerCase()) : null, o8 = null != s10 && null !== a14;
    return { canUseIndexedLUT: ["u8", "u16", "s8", "s16"].includes(r13) || o8, tableValueField: s10, tableBreakField: a14 };
  }
  _updateClassBreaksRenderer(e7) {
    const { attributeTable: t9 } = this.rasterInfo, { canUseIndexedLUT: r13, tableValueField: s10, tableBreakField: a14 } = this._analyzeClassBreaks(e7), o8 = e7.classBreakInfos;
    if (!(o8 == null ? void 0 : o8.length))
      return { success: false, error: "Unsupported renderer; missing or invalid ClassBreaksRenderer.classBreakInfos." };
    const n11 = o8.sort((e8, t10) => e8.classMaxValue - t10.classMaxValue), i8 = n11[n11.length - 1];
    let l6 = e7.minValue;
    if (!r13) {
      const t10 = [];
      for (let e8 = 0; e8 < n11.length; e8++)
        t10.push({ value: n11[e8].classMinValue ?? l6, mappedColor: n11[e8].symbol.color }), l6 = n11[e8].classMaxValue;
      return t10.push({ value: i8.classMaxValue, mappedColor: i8.symbol.color }), this.lookup = { rendererJSON: e7, remapLut: t10 }, this.canRenderInWebGL = false, { success: true };
    }
    const u12 = [];
    if (null != t9 && null != s10 && null !== a14 && s10 !== a14) {
      const r14 = s10.name, o9 = a14.name, i9 = n11[n11.length - 1], { classMaxValue: c7 } = i9;
      l6 = e7.minValue;
      for (const e8 of t9.features) {
        const t10 = e8.attributes[r14], s11 = e8.attributes[o9], a15 = s11 === c7 ? i9 : s11 < l6 ? null : n11.find(({ classMaxValue: e9 }) => e9 > s11);
        a15 && u12.push([t10].concat(a15.symbol.color));
      }
    } else {
      l6 = Math.floor(e7.minValue);
      for (let e8 = 0; e8 < n11.length; e8++) {
        const t10 = n11[e8];
        for (let e9 = l6; e9 < t10.classMaxValue; e9++)
          u12.push([e9].concat(t10.symbol.color));
        l6 = Math.ceil(t10.classMaxValue);
      }
      i8.classMaxValue === l6 && u12.push([i8.classMaxValue].concat(i8.symbol.color));
    }
    const p7 = a5({ colormap: u12, fillUnspecified: false });
    return this.lookup = { rendererJSON: e7, colormapLut: p7 }, this.canRenderInWebGL = true, { success: true };
  }
  _isHistogramRequired(e7) {
    return "percentClip" === e7 || "histogramEqualization" === e7;
  }
  _isValidRasterStatistics(e7) {
    return null != e7 && e7.length > 0 && null != e7[0].min && null != e7[0].max;
  }
  _updateStretchRenderer(e7) {
    var _a, _b;
    let { stretchType: t9, dra: r13 } = e7;
    if (!("none" === t9 || ((_a = e7.statistics) == null ? void 0 : _a.length) || this._isValidRasterStatistics(this.rasterInfo.statistics) || r13))
      return { success: false, error: "Unsupported renderer; StretchRenderer.statistics is required when dynamic range adjustment is not used." };
    const s10 = e7.histograms || this.rasterInfo.histograms;
    !this._isHistogramRequired(e7.stretchType) || (s10 == null ? void 0 : s10.length) || r13 || (t9 = "minMax");
    const { computeGamma: a14, useGamma: o8, colorRamp: n11 } = e7;
    let { gamma: i8 } = e7;
    if (o8 && a14 && !(i8 == null ? void 0 : i8.length)) {
      const t10 = ((_b = e7.statistics) == null ? void 0 : _b.length) ? e7.statistics : this.rasterInfo.statistics;
      i8 = u7(this.rasterInfo.pixelType, t10);
    }
    const l6 = this.rasterInfo.pixelType, u12 = !r13 && ["u8", "u16", "s8", "s16"].includes(l6);
    if ("histogramEqualization" === t9) {
      const t10 = s10.map((e8) => r11(e8));
      this.lookup = { rendererJSON: e7, histogramLut: t10 };
    } else if (u12) {
      const t10 = p3(e7, { rasterInfo: this.rasterInfo }), r14 = a10({ pixelType: l6, ...t10, gamma: o8 ? i8 : null, rounding: "floor" });
      this.lookup = { rendererJSON: e7, stretchLut: r14 };
    }
    if (n11) {
      const t10 = w3(n11, { interpolateAlpha: true });
      this.lookup || (this.lookup = { rendererJSON: e7 }), this.lookup.colormapLut = a5({ colormap: t10 }), this.lookup.rendererJSON = e7;
    }
    return this.lookup.gamma = o8 && (i8 == null ? void 0 : i8.length) ? i8 : null, this.canRenderInWebGL = true, { success: true };
  }
  _generateStretchWebGLParams(e7, t9, r13) {
    let s10 = null, a14 = null;
    const o8 = this.lookup && this.lookup.colormapLut;
    t9.colorRamp && o8 && (s10 = o8.indexedColormap, a14 = o8.offset), "histogramEqualization" === t9.stretchType && (t9 = { ...t9, stretchType: "minMax" });
    const { gamma: n11 } = this.lookup, i8 = !!(t9.useGamma && n11 && n11.some((e8) => 1 !== e8)), { minCutOff: l6, maxCutOff: u12, outMin: c7, outMax: p7 } = p3(t9, { rasterInfo: this.rasterInfo, pixelBlock: e7, bandIds: r13 });
    let d4 = 0;
    null != e7 && (d4 = e7.getPlaneCount(), 2 === d4 && ((e7 = e7.clone()).statistics = [e7.statistics[0]], e7.pixels = [e7.pixels[0]]));
    const { bandCount: m6 } = this.rasterInfo, f9 = Math.min(3, (r13 == null ? void 0 : r13.length) || d4 || m6, m6), y6 = new Float32Array(f9), g5 = s10 || i8 ? 1 : 255;
    let b4;
    for (b4 = 0; b4 < l6.length; b4++)
      y6[b4] = u12[b4] === l6[b4] ? 0 : (p7 - c7) / (u12[b4] - l6[b4]) / g5;
    const S3 = new Float32Array(f9);
    if (i8 && n11)
      for (b4 = 0; b4 < f9; b4++)
        n11[b4] > 1 ? n11[b4] > 2 ? S3[b4] = 6.5 + (n11[b4] - 2) ** 2.5 : S3[b4] = 6.5 + 100 * (2 - n11[b4]) ** 4 : S3[b4] = 1;
    return { bandCount: f9, outMin: c7 / g5, outMax: p7 / g5, minCutOff: l6, maxCutOff: u12, factor: y6, useGamma: i8, gamma: i8 ? n11 : [1, 1, 1], gammaCorrection: i8 ? S3 : [1, 1, 1], colormap: s10, colormapOffset: a14, stretchType: t9.stretchType, type: "stretch" };
  }
  _generateShadedReliefWebGLParams(e7, t9 = false, r13 = { x: 0, y: 0 }) {
    var _a;
    let s10 = null, a14 = null;
    const o8 = this.lookup && this.lookup.colormapLut;
    e7.colorRamp && o8 && (s10 = o8.indexedColormap, a14 = o8.offset);
    const n11 = { ...e7, isGCS: t9, resolution: r13 }, i8 = n9(n11), l6 = (_a = this.rasterInfo.statistics) == null ? void 0 : _a[0];
    return { ...i8, minValue: (l6 == null ? void 0 : l6.min) ?? 0, maxValue: (l6 == null ? void 0 : l6.max) ?? 8e3, hillshadeType: "traditional" === e7.hillshadeType ? 0 : 1, type: "hillshade", colormap: s10, colormapOffset: a14 };
  }
  _generateVectorFieldWebGLParams(e7) {
    var _a, _b, _c;
    const { style: t9, inputUnit: r13, outputUnit: s10, visualVariables: a14, symbolTileSize: o8, flowRepresentation: n11 } = e7;
    let i8;
    const l6 = ((_a = this.rasterInfo.statistics) == null ? void 0 : _a[0].min) ?? 0, u12 = ((_b = this.rasterInfo.statistics) == null ? void 0 : _b[0].max) ?? 50, c7 = (a14 == null ? void 0 : a14.find((e8) => "sizeInfo" === e8.type)) ?? { type: "sizeInfo", field: "Magnitude", maxDataValue: u12, maxSize: 0.8 * o8, minDataValue: l6, minSize: 0.2 * o8 }, p7 = c7.minDataValue ?? l6, d4 = c7.maxDataValue ?? u12, h8 = null != c7.maxSize && null != c7.minSize ? [c7.minSize / o8, c7.maxSize / o8] : [0.2, 0.8];
    if ("wind_speed" === t9) {
      const e8 = (h8[0] + h8[1]) / 2;
      h8[0] = h8[1] = e8;
    }
    const m6 = null != p7 && null != d4 ? [p7, d4] : null;
    if ("classified_arrow" === t9)
      if (null != p7 && null != d4 && null != c7) {
        i8 = [];
        const e8 = (c7.maxDataValue - c7.minDataValue) / 5;
        for (let t10 = 0; t10 < 6; t10++)
          i8.push(c7.minDataValue + e8 * t10);
      } else
        i8 = [0, 1e-6, 3.5, 7, 10.5, 14];
    const f9 = "flow_to" === n11 === ("ocean_current_kn" === t9 || "ocean_current_m" === t9) ? 0 : Math.PI, y6 = a14 == null ? void 0 : a14.find((e8) => "rotationInfo" === e8.type);
    return { breakValues: i8, dataRange: m6, inputUnit: r13, outputUnit: s10, symbolTileSize: o8, symbolPercentRange: h8, style: t9 || "single_arrow", rotation: f9, rotationType: ((_c = this.rasterInfo.storageInfo) == null ? void 0 : _c.tileInfo) && "vector-uv" === this.rasterInfo.dataType ? "geographic" : (y6 == null ? void 0 : y6.rotationType) || e7.rotationType, type: "vectorField" };
  }
};
function C4(e7) {
  return o2(e7) && 0 !== e7.validPixelCount;
}
e([y({ json: { write: true } })], _.prototype, "rendererJSON", void 0), e([y({ type: m4, json: { write: true } })], _.prototype, "rasterInfo", void 0), e([y({ json: { write: true } })], _.prototype, "lookup", void 0), e([y()], _.prototype, "canRenderInWebGL", void 0), _ = e([a3("esri.renderers.support.RasterSymbolizer")], _);
var L2 = _;

export {
  r9 as r,
  n4 as n,
  r10 as r2,
  L,
  R,
  D,
  U,
  N,
  v2 as v,
  B,
  P2 as P,
  j,
  n8 as n2,
  m4 as m,
  s8 as s,
  c5 as c,
  h6 as h,
  u10 as u,
  n10 as n3,
  C3 as C,
  a13 as a,
  s9 as s2,
  c6 as c2,
  R2,
  w3 as w,
  I3 as I,
  G2 as G,
  n5 as n4,
  a9 as a2,
  a10 as a3,
  m3 as m2,
  h4 as h2,
  g3 as g,
  p3 as p,
  d2 as d,
  M3 as M,
  L2
};
//# sourceMappingURL=chunk-QUF6BZJO.js.map
