import {
  i
} from "./chunk-HFINIBOV.js";
import "./chunk-2SB5E3DQ.js";
import {
  oe
} from "./chunk-HVNVJMIO.js";
import "./chunk-M7TZTH7O.js";
import "./chunk-Y2JGNMOW.js";
import "./chunk-TOXOPWS2.js";
import "./chunk-HSAM6HYE.js";
import "./chunk-7YWQQHOF.js";
import {
  r
} from "./chunk-HO7D7VOQ.js";
import {
  d,
  f
} from "./chunk-KPMUAI6T.js";
import "./chunk-TBMS67KR.js";
import {
  h as h3
} from "./chunk-FZIEP3HG.js";
import "./chunk-N5CR6S5Y.js";
import "./chunk-55E4WCHV.js";
import "./chunk-PEYWLFGJ.js";
import "./chunk-NE5U5H4D.js";
import "./chunk-U3JB4DA4.js";
import "./chunk-AER5JAFS.js";
import "./chunk-7HZ72XIE.js";
import "./chunk-YM46NRFF.js";
import "./chunk-3Y3ICAIL.js";
import "./chunk-TNXVIMSN.js";
import "./chunk-ZMKH5ZRU.js";
import "./chunk-Y7HVH6RU.js";
import "./chunk-UIVGJZCT.js";
import "./chunk-MVR2W3C6.js";
import "./chunk-FNTT27FW.js";
import "./chunk-HPXPYN62.js";
import "./chunk-AC3INPLN.js";
import "./chunk-C3ULZZZU.js";
import "./chunk-A6DRT2G4.js";
import "./chunk-4BRWSSYR.js";
import "./chunk-C7U2SKSO.js";
import "./chunk-NVZXNBIH.js";
import "./chunk-GTENSI4J.js";
import "./chunk-CN3PB7HS.js";
import "./chunk-NLX3GR5V.js";
import "./chunk-ZL3HOHNK.js";
import "./chunk-ZO32FGGH.js";
import "./chunk-PX3Q44FM.js";
import "./chunk-XYJMHUDA.js";
import "./chunk-CSLWFQJE.js";
import "./chunk-XP6ESZGI.js";
import "./chunk-3VTULECI.js";
import "./chunk-A4HFWKMU.js";
import "./chunk-TDXHXKUI.js";
import "./chunk-PR2OEILG.js";
import "./chunk-PJP6JTP7.js";
import "./chunk-IVABPLLZ.js";
import "./chunk-TBHRKIAA.js";
import "./chunk-34QQ6GDH.js";
import "./chunk-KTII3LWY.js";
import "./chunk-BBJLFBMQ.js";
import "./chunk-JSMUQBPG.js";
import "./chunk-QAWS7Y22.js";
import "./chunk-OCIERVFA.js";
import "./chunk-QOWAKGE4.js";
import "./chunk-UX5D32RO.js";
import "./chunk-FHYNSVC4.js";
import "./chunk-FF5LS3YE.js";
import "./chunk-BCDDCNQ2.js";
import "./chunk-32JSK7KN.js";
import "./chunk-D5EV57FM.js";
import "./chunk-EISDT6B4.js";
import "./chunk-LREUW66K.js";
import "./chunk-PM3CFO6N.js";
import "./chunk-6VJWKAPY.js";
import "./chunk-UQOM5GR4.js";
import "./chunk-YBMFRTPB.js";
import "./chunk-KKGVORR5.js";
import "./chunk-WTKN55TU.js";
import "./chunk-TDPKDZC3.js";
import "./chunk-M5UHI5WR.js";
import "./chunk-YAWND7HF.js";
import "./chunk-FJYIB7HF.js";
import "./chunk-SCOBW7KR.js";
import "./chunk-AHAGGZUI.js";
import "./chunk-TQGXXOXA.js";
import "./chunk-SO7CVIZK.js";
import "./chunk-RADYXGQH.js";
import "./chunk-KKBQS7Z3.js";
import "./chunk-D5NSNTGJ.js";
import "./chunk-OMDLZQUU.js";
import "./chunk-FQZ2JEHK.js";
import "./chunk-CNCZBOLJ.js";
import "./chunk-E2DURSMR.js";
import "./chunk-4YNW7QZY.js";
import "./chunk-E2BBTG5C.js";
import "./chunk-QNFDBY7V.js";
import "./chunk-EL72ISXP.js";
import "./chunk-5KLICR5E.js";
import "./chunk-PNA6D76Z.js";
import "./chunk-NDQCNJMM.js";
import "./chunk-R2HXL6HT.js";
import "./chunk-2PAQQUAG.js";
import "./chunk-QXPTMFGZ.js";
import {
  h as h2
} from "./chunk-4SARN32Z.js";
import "./chunk-QA4FMJA6.js";
import "./chunk-VFQINJTY.js";
import "./chunk-4J6R7QH6.js";
import "./chunk-HB3KZNZ3.js";
import "./chunk-VZAEQ6CY.js";
import "./chunk-SS33L3LC.js";
import "./chunk-X4Y5OF5X.js";
import "./chunk-LNMNRMVX.js";
import "./chunk-OO4A3EBQ.js";
import "./chunk-ZBWBCN2I.js";
import "./chunk-GZTLZ6RD.js";
import "./chunk-KTEJJM3A.js";
import "./chunk-SO6DBMQG.js";
import "./chunk-KTSEQWMB.js";
import "./chunk-QXGO5RRL.js";
import "./chunk-EIE3W25Z.js";
import "./chunk-7KM4XBUC.js";
import "./chunk-OZXJDVTE.js";
import "./chunk-KIEN3CY2.js";
import "./chunk-4CZO65BK.js";
import "./chunk-7E3Q7HTF.js";
import "./chunk-FXDEKQIL.js";
import "./chunk-GJ5WE5D3.js";
import "./chunk-KKGH4SRQ.js";
import "./chunk-Y2CLYMXQ.js";
import {
  V
} from "./chunk-4RFFPIT2.js";
import "./chunk-KSQTM6XI.js";
import "./chunk-7KX64CAH.js";
import "./chunk-J4R3XNTP.js";
import "./chunk-Y6FRAP2R.js";
import "./chunk-BVNZ3ETW.js";
import "./chunk-FJQ7HIY7.js";
import "./chunk-T4XWQYGC.js";
import "./chunk-4H5JODOT.js";
import "./chunk-TCASQSKO.js";
import "./chunk-5HAVROZG.js";
import "./chunk-MOPR7RFH.js";
import "./chunk-KW3ZNPTA.js";
import "./chunk-TJB4CGOM.js";
import "./chunk-CWQ6Q3PH.js";
import {
  a as a2,
  h,
  l
} from "./chunk-XN5VV437.js";
import "./chunk-ODFH3BSN.js";
import "./chunk-WBSPL6CJ.js";
import "./chunk-N5ULYWRU.js";
import "./chunk-LQVUN6IS.js";
import "./chunk-JZM5YUHA.js";
import "./chunk-MOIETNWJ.js";
import "./chunk-3GSONYPC.js";
import "./chunk-SFV6XLDZ.js";
import "./chunk-3PLRSFLA.js";
import "./chunk-VBD33VNW.js";
import "./chunk-7A5C2EQ3.js";
import "./chunk-OYBXMT5R.js";
import {
  a2 as a
} from "./chunk-CIDWM2UN.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";
import "./chunk-SHJI4PR4.js";
import "./chunk-2YSHZRCT.js";
import "./chunk-HKVL2MJK.js";
import "./chunk-MH2LNFJK.js";
import "./chunk-O3CHVGVF.js";
import "./chunk-HNHXEGH2.js";
import "./chunk-DWOEYHKS.js";
import "./chunk-W2N7YT6I.js";
import "./chunk-I5JT24BO.js";
import {
  R
} from "./chunk-I4U7MQNO.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/views/2d/layers/MapNotesLayerView2D.js
var u = "sublayers";
var f2 = "layerView";
var m = Object.freeze({ remove() {
}, pause() {
}, resume() {
} });
var w = class extends f(d) {
  constructor() {
    super(...arguments), this._highlightIds = /* @__PURE__ */ new Map(), this.container = new r();
  }
  async fetchPopupFeatures(e2) {
    return Array.from(this.graphicsViews(), (i2) => i2.hitTest(e2).filter((e3) => !!e3.popupTemplate)).flat();
  }
  *graphicsViews() {
    null == this._graphicsViewsFeatureCollectionMap ? null == this._graphicsViews ? yield* [] : yield* this._graphicsViews : yield* this._graphicsViewsFeatureCollectionMap.keys();
  }
  async hitTest(e2, i2) {
    return Array.from(this.graphicsViews(), (i3) => {
      const s = i3.hitTest(e2);
      if (null != this._graphicsViewsFeatureCollectionMap) {
        const e3 = this._graphicsViewsFeatureCollectionMap.get(i3);
        for (const i4 of s)
          !i4.popupTemplate && e3.popupTemplate && (i4.popupTemplate = e3.popupTemplate), i4.sourceLayer = i4.layer = this.layer;
      }
      return s;
    }).flat().map((i3) => ({ type: "graphic", graphic: i3, layer: this.layer, mapPoint: e2 }));
  }
  highlight(e2) {
    let r2;
    "number" == typeof e2 ? r2 = [e2] : e2 instanceof h2 ? r2 = [e2.uid] : Array.isArray(e2) && e2.length > 0 ? r2 = "number" == typeof e2[0] ? e2 : e2.map((e3) => e3 && e3.uid) : V.isCollection(e2) && (r2 = e2.map((e3) => e3 && e3.uid).toArray());
    const a3 = r2 == null ? void 0 : r2.filter(R);
    return (a3 == null ? void 0 : a3.length) ? (this._addHighlight(a3), { remove: () => {
      this._removeHighlight(a3);
    } }) : m;
  }
  update(e2) {
    for (const i2 of this.graphicsViews())
      i2.processUpdate(e2);
  }
  attach() {
    const e2 = this.view, i2 = () => this.requestUpdate(), s = this.layer.featureCollections;
    if (null != s && s.length) {
      this._graphicsViewsFeatureCollectionMap = /* @__PURE__ */ new Map();
      for (const t of s) {
        const s2 = new i(this.view.featuresTilingScheme), a3 = new oe({ view: e2, graphics: t.source, renderer: t.renderer, requestUpdateCallback: i2, container: s2 });
        this._graphicsViewsFeatureCollectionMap.set(a3, t), this.container.addChild(a3.container), this.addHandles([l(() => t.visible, (e3) => a3.container.visible = e3, h), l(() => a3.updating, () => this.notifyChange("updating"), h)], f2);
      }
      this._updateHighlight();
    } else
      null != this.layer.sublayers && this.addHandles(a2(() => this.layer.sublayers, "change", () => this._createGraphicsViews(), { onListenerAdd: () => this._createGraphicsViews(), onListenerRemove: () => this._destroyGraphicsViews() }), u);
  }
  detach() {
    this._destroyGraphicsViews(), this.removeHandles(u);
  }
  moveStart() {
  }
  moveEnd() {
  }
  viewChange() {
    for (const e2 of this.graphicsViews())
      e2.viewChange();
  }
  isUpdating() {
    for (const e2 of this.graphicsViews())
      if (e2.updating)
        return true;
    return false;
  }
  _destroyGraphicsViews() {
    this.container.removeAllChildren(), this.removeHandles(f2);
    for (const e2 of this.graphicsViews())
      e2.destroy();
    this._graphicsViews = null, this._graphicsViewsFeatureCollectionMap = null;
  }
  _createGraphicsViews() {
    if (this._destroyGraphicsViews(), null == this.layer.sublayers)
      return;
    const e2 = [], i2 = this.view, s = () => this.requestUpdate();
    for (const t of this.layer.sublayers) {
      const a3 = new h3(), o = new i(this.view.featuresTilingScheme);
      o.fadeTransitionEnabled = true;
      const l2 = new oe({ view: i2, graphics: t.graphics, requestUpdateCallback: s, container: o });
      this.addHandles([t.on("graphic-update", l2.graphicUpdateHandler), l(() => t.visible, (e3) => l2.container.visible = e3, h), l(() => l2.updating, () => this.notifyChange("updating"), h)], f2), a3.addChild(l2.container), this.container.addChild(a3), e2.push(l2);
    }
    this._graphicsViews = e2, this._updateHighlight();
  }
  _addHighlight(e2) {
    for (const i2 of e2)
      if (this._highlightIds.has(i2)) {
        const e3 = this._highlightIds.get(i2);
        this._highlightIds.set(i2, e3 + 1);
      } else
        this._highlightIds.set(i2, 1);
    this._updateHighlight();
  }
  _removeHighlight(e2) {
    for (const i2 of e2)
      if (this._highlightIds.has(i2)) {
        const e3 = this._highlightIds.get(i2) - 1;
        0 === e3 ? this._highlightIds.delete(i2) : this._highlightIds.set(i2, e3);
      }
    this._updateHighlight();
  }
  _updateHighlight() {
    const e2 = Array.from(this._highlightIds.keys());
    for (const i2 of this.graphicsViews())
      i2.setHighlight(e2);
  }
};
w = e([a("esri.views.2d.layers.MapNotesLayerView2D")], w);
var y = w;
export {
  y as default
};
//# sourceMappingURL=MapNotesLayerView2D-RUXJ3WCK.js.map
