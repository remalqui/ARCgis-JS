import {
  l
} from "./chunk-CIDWM2UN.js";

// node_modules/@arcgis/core/core/MemCache.js
var e = -3;
var i;
!function(t) {
  t[t.ALL = 0] = "ALL", t[t.SOME = 1] = "SOME";
}(i || (i = {}));
var s = class {
  constructor(t, e3, i2) {
    this.name = t, this._storage = e3, this.id = h++ + ":", this.size = 0, this.maxSize = 0, this._removeFunc = false, this._hit = 0, this._miss = 0, this._storage.register(this), i2 && (this._storage.registerRemoveFunc(this.id, i2), this._removeFunc = true);
  }
  destroy() {
    this._storage.clear(this), this._removeFunc && this._storage.deregisterRemoveFunc(this.id), this._storage.deregister(this), this._storage = null;
  }
  get hitRate() {
    return this._hit / (this._hit + this._miss);
  }
  get sizeAll() {
    return this._storage.size;
  }
  resetHitRate() {
    this._hit = this._miss = 0;
  }
  put(t, e3, i2, s2 = 0) {
    this._storage.put(this, t, e3, i2, s2);
  }
  get(t) {
    const e3 = this._storage.get(this, t);
    return void 0 === e3 ? ++this._miss : ++this._hit, e3;
  }
  pop(t) {
    const e3 = this._storage.pop(this, t);
    return void 0 === e3 ? ++this._miss : ++this._hit, e3;
  }
  updateSize(t, e3, i2) {
    this._storage.updateSize(this, t, e3, i2);
  }
  clear() {
    this._storage.clear(this);
  }
  clearAll() {
    this._storage.clearAll();
  }
  get performanceInfo() {
    return this._storage.performanceInfo;
  }
  resetStats() {
    this._storage.resetStats();
  }
};
var r = class {
  get size() {
    return this._size;
  }
  constructor(e3 = 10485760) {
    this._maxSize = e3, this._db = /* @__PURE__ */ new Map(), this._size = 0, this._hit = 0, this._miss = 0, this._removeFuncs = new l(), this._users = new l();
  }
  destroy() {
    this.clearAll(), this._removeFuncs.clear(), this._users.clear(), this._db = null;
  }
  register(t) {
    this._users.push(t);
  }
  deregister(t) {
    this._users.removeUnordered(t);
  }
  registerRemoveFunc(t, e3) {
    this._removeFuncs.push([t, e3]);
  }
  deregisterRemoveFunc(t) {
    this._removeFuncs.filterInPlace((e3) => e3[0] !== t);
  }
  get maxSize() {
    return this._maxSize;
  }
  set maxSize(t) {
    this._maxSize = Math.max(t, 0), this._checkSizeLimits();
  }
  put(t, s2, r2, h2, o) {
    s2 = t.id + s2;
    const n = this._db.get(s2);
    if (n && (this._size -= n.size, t.size -= n.size, this._db.delete(s2), n.entry !== r2 && this._notifyRemove(s2, n.entry, i.ALL)), h2 > this._maxSize)
      return void this._notifyRemove(s2, r2, i.ALL);
    if (void 0 === r2)
      return void console.warn("Refusing to cache undefined entry ");
    if (!h2 || h2 < 0)
      return void console.warn("Refusing to cache entry with invalid size " + h2);
    const _ = 1 + Math.max(o, e) - e;
    this._db.set(s2, { entry: r2, size: h2, lifetime: _, lives: _ }), this._size += h2, t.size += h2, this._checkSizeLimits();
  }
  updateSize(t, e3, s2, r2) {
    e3 = t.id + e3;
    const h2 = this._db.get(e3);
    if (h2 && h2.entry === s2) {
      for (this._size -= h2.size, t.size -= h2.size; r2 > this._maxSize; ) {
        const t2 = this._notifyRemove(e3, s2, i.SOME);
        if (!(null != t2 && t2 > 0))
          return void this._db.delete(e3);
        r2 = t2;
      }
      h2.size = r2, this._size += r2, t.size += r2, this._checkSizeLimits();
    }
  }
  pop(t, e3) {
    e3 = t.id + e3;
    const i2 = this._db.get(e3);
    if (i2)
      return this._size -= i2.size, t.size -= i2.size, this._db.delete(e3), ++this._hit, i2.entry;
    ++this._miss;
  }
  get(t, e3) {
    e3 = t.id + e3;
    const i2 = this._db.get(e3);
    if (void 0 !== i2)
      return this._db.delete(e3), i2.lives = i2.lifetime, this._db.set(e3, i2), ++this._hit, i2.entry;
    ++this._miss;
  }
  get performanceInfo() {
    const t = { Size: Math.round(this._size / 1048576) + "/" + Math.round(this._maxSize / 1048576) + "MB", "Hit rate": Math.round(100 * this._getHitRate()) + "%", Entries: this._db.size.toString() }, i2 = {}, s2 = new Array();
    this._db.forEach((t2, e3) => {
      const r3 = t2.lifetime;
      s2[r3] = (s2[r3] || 0) + t2.size, this._users.forAll((s3) => {
        const { id: r4, name: h3 } = s3;
        if (e3.startsWith(r4)) {
          const e4 = i2[h3] || 0;
          i2[h3] = e4 + t2.size;
        }
      });
    });
    const r2 = {};
    this._users.forAll((t2) => {
      const e3 = t2.name;
      if ("hitRate" in t2 && "number" == typeof t2.hitRate && !isNaN(t2.hitRate) && t2.hitRate > 0) {
        const s3 = i2[e3] || 0;
        i2[e3] = s3, r2[e3] = Math.round(100 * t2.hitRate) + "%";
      } else
        r2[e3] = "0%";
    });
    const h2 = Object.keys(i2);
    h2.sort((t2, e3) => i2[e3] - i2[t2]), h2.forEach((e3) => t[e3] = Math.round(i2[e3] / 2 ** 20) + "MB / " + r2[e3]);
    for (let o = s2.length - 1; o >= 0; --o) {
      const i3 = s2[o];
      i3 && (t["Priority " + (o + e - 1)] = Math.round(i3 / this._size * 100) + "%");
    }
    return t;
  }
  resetStats() {
    this._hit = this._miss = 0, this._users.forAll((t) => t.resetHitRate());
  }
  clear(t) {
    const e3 = t.id;
    this._db.forEach((t2, s2) => {
      s2.startsWith(e3) && (this._size -= t2.size, this._db.delete(s2), this._notifyRemove(s2, t2.entry, i.ALL));
    }), t.size = 0;
  }
  clearAll() {
    this._db.forEach((t, e3) => this._notifyRemove(e3, t.entry, i.ALL)), this._users.forEach((t) => t.size = 0), this._size = 0, this._db.clear();
  }
  _getHitRate() {
    return this._hit / (this._hit + this._miss);
  }
  _notifyRemove(t, e3, i2) {
    let s2;
    return this._removeFuncs.some((r2) => {
      if (t.startsWith(r2[0])) {
        const t2 = r2[1](e3, i2);
        return "number" == typeof t2 && (s2 = t2), true;
      }
      return false;
    }), s2;
  }
  _checkSizeLimits() {
    if (this._size > this._maxSize) {
      for (const [t, e3] of this._db)
        if (this._purgeItem(t, e3), this._size <= 0.9 * this.maxSize)
          return;
    }
    this._users.forEach((t) => {
      if (t.maxSize > 0 && t.size > t.maxSize) {
        for (const [e3, i2] of this._db)
          if (e3.startsWith(t.id) && (this._purgeItem(e3, i2, t), t.size <= 0.9 * t.maxSize))
            return;
      }
    });
  }
  _purgeItem(t, e3, s2 = this._users.find((e4) => t.startsWith(e4.id))) {
    if (this._db.delete(t), e3.lives <= 1) {
      this._size -= e3.size, s2 && (s2.size -= e3.size);
      const r2 = this._notifyRemove(t, e3.entry, i.SOME);
      null != r2 && r2 > 0 && (this._size += r2, s2 && (s2.size += r2), e3.lives = e3.lifetime, e3.size = r2, this._db.set(t, e3));
    } else
      --e3.lives, this._db.set(t, e3);
  }
};
var h = 0;

// node_modules/@arcgis/core/core/LRUCache.js
var e2 = class {
  constructor(e3, s2) {
    this._storage = new r(), this.id = "", this.name = "", this.size = 0, this._storage.maxSize = e3, this._storage.register(this), s2 && this._storage.registerRemoveFunc("", s2);
  }
  destroy() {
    this._storage.deregister(this), this._storage.destroy();
  }
  put(t, e3, s2 = 1) {
    this._storage.put(this, t, e3, s2, 1);
  }
  pop(t) {
    return this._storage.pop(this, t);
  }
  get(t) {
    return this._storage.get(this, t);
  }
  clear() {
    this._storage.clearAll();
  }
  get maxSize() {
    return this._storage.maxSize;
  }
  set maxSize(t) {
    this._storage.maxSize = t;
  }
  resetHitRate() {
  }
};

export {
  s,
  r,
  e2 as e
};
//# sourceMappingURL=chunk-LREUW66K.js.map
