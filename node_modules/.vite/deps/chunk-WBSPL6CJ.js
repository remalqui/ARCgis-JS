import {
  m
} from "./chunk-OYBXMT5R.js";
import {
  a2 as a,
  n
} from "./chunk-CIDWM2UN.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";

// node_modules/@arcgis/core/core/Evented.js
var i = class _i {
  constructor() {
    this._emitter = new _i.EventEmitter(this);
  }
  emit(t, e2) {
    return this._emitter.emit(t, e2);
  }
  on(t, e2) {
    return this._emitter.on(t, e2);
  }
  once(t, e2) {
    return this._emitter.once(t, e2);
  }
  hasEventListener(t) {
    return this._emitter.hasEventListener(t);
  }
};
!function(n3) {
  class o {
    constructor(t = null) {
      this._target = t, this._listenersMap = null;
    }
    clear() {
      var _a;
      (_a = this._listenersMap) == null ? void 0 : _a.clear(), this._listenersMap = null;
    }
    destroy() {
      this.clear();
    }
    emit(t, e2) {
      const s = this._listenersMap && this._listenersMap.get(t);
      if (!s)
        return false;
      const r = this._target || this;
      return [...s].forEach((t2) => {
        t2.call(r, e2);
      }), s.length > 0;
    }
    on(t, e2) {
      if (Array.isArray(t)) {
        const r2 = t.map((t2) => this.on(t2, e2));
        return n(r2);
      }
      if (t.includes(","))
        throw new TypeError("Evented.on() with a comma delimited string of event types is not supported");
      this._listenersMap || (this._listenersMap = /* @__PURE__ */ new Map());
      const r = this._listenersMap.get(t) || [];
      return r.push(e2), this._listenersMap.set(t, r), { remove: () => {
        const s = this._listenersMap && this._listenersMap.get(t) || [], r2 = s.indexOf(e2);
        r2 >= 0 && s.splice(r2, 1);
      } };
    }
    once(t, e2) {
      const s = this.on(t, (t2) => {
        s.remove(), e2.call(null, t2);
      });
      return s;
    }
    hasEventListener(t) {
      const e2 = this._listenersMap && this._listenersMap.get(t);
      return null != e2 && e2.length > 0;
    }
  }
  n3.EventEmitter = o, n3.EventedMixin = (e2) => {
    let s = class extends e2 {
      constructor() {
        super(...arguments), this._emitter = new o();
      }
      destroy() {
        this._emitter.clear();
      }
      emit(t, e3) {
        return this._emitter.emit(t, e3);
      }
      on(t, e3) {
        return this._emitter.on(t, e3);
      }
      once(t, e3) {
        return this._emitter.once(t, e3);
      }
      hasEventListener(t) {
        return this._emitter.hasEventListener(t);
      }
    };
    return s = e([a("esri.core.Evented")], s), s;
  };
  let h = class extends m {
    constructor() {
      super(...arguments), this._emitter = new i.EventEmitter(this);
    }
    destroy() {
      this._emitter.clear();
    }
    emit(t, e2) {
      return this._emitter.emit(t, e2);
    }
    on(t, e2) {
      return this._emitter.on(t, e2);
    }
    once(t, e2) {
      return this._emitter.once(t, e2);
    }
    hasEventListener(t) {
      return this._emitter.hasEventListener(t);
    }
  };
  h = e([a("esri.core.Evented")], h), n3.EventedAccessor = h;
}(i || (i = {}));
var n2 = i;

export {
  n2 as n
};
//# sourceMappingURL=chunk-WBSPL6CJ.js.map
