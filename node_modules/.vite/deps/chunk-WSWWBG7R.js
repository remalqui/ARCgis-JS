import {
  a
} from "./chunk-X3B7R5MJ.js";
import {
  I,
  j,
  v,
  w
} from "./chunk-5WFLOVSU.js";
import {
  t
} from "./chunk-2SVUAH2L.js";
import {
  s as s2
} from "./chunk-JDYLSHC3.js";
import {
  c
} from "./chunk-7E3Q7HTF.js";
import {
  x
} from "./chunk-D5MIJ6WT.js";
import {
  s3 as s
} from "./chunk-W2N7YT6I.js";

// node_modules/@arcgis/core/portal/support/portalLayers.js
async function l(e) {
  !e.portalItem || e.portalItem instanceof x || (e = { ...e, portalItem: new x(e.portalItem) });
  const r = await y(e.portalItem);
  return new (0, r.constructor)({ portalItem: e.portalItem, ...r.properties });
}
async function y(e) {
  await e.load();
  return p(await m(e));
}
async function m(r) {
  switch (r.type) {
    case "Map Service":
      return f(r);
    case "Feature Service":
      return L(r);
    case "Feature Collection":
      return w2(r);
    case "Scene Service":
      return N(r);
    case "Image Service":
      return d(r);
    case "Stream Service":
      return S();
    case "Vector Tile Service":
      return I2();
    case "GeoJson":
      return g();
    case "CSV":
      return T();
    case "KML":
      return j2();
    case "WFS":
      return v2();
    case "WMTS":
      return F();
    case "WMS":
      return M();
    case "Feed":
      return G();
    default:
      throw new s("portal:unknown-item-type", "Unknown item type '${type}'", { type: r.type });
  }
}
async function p(e) {
  const r = e.className, t2 = a[r];
  return { constructor: await t2(), properties: e.properties };
}
async function f(e) {
  return await b(e) ? { className: "TileLayer" } : { className: "MapImageLayer" };
}
async function L(e) {
  if (s2(e, "Oriented Imagery Layer"))
    return h(e);
  const r = await C(e);
  if ("object" == typeof r) {
    const e2 = {};
    return null != r.id && (e2.layerId = r.id), { className: r.className || "FeatureLayer", properties: e2 };
  }
  return { className: "GroupLayer" };
}
async function N(e) {
  var _a;
  const a2 = await C(e);
  if ("object" == typeof a2) {
    const t2 = {};
    let n;
    if (null != a2.id ? (t2.layerId = a2.id, n = `${e.url}/layers/${a2.id}`) : n = e.url, (_a = e.typeKeywords) == null ? void 0 : _a.length) {
      for (const a3 of Object.keys(c))
        if (e.typeKeywords.includes(a3))
          return { className: c[a3] };
    }
    const s3 = await t(n);
    return { className: c[s3 == null ? void 0 : s3.layerType] || "SceneLayer", properties: t2 };
  }
  if (false === a2) {
    const r = await t(e.url);
    return "Voxel" === (r == null ? void 0 : r.layerType) ? { className: "VoxelLayer" } : { className: "GroupLayer" };
  }
  return { className: "GroupLayer" };
}
async function w2(e) {
  await e.load();
  const r = s2(e, "Map Notes"), a2 = s2(e, "Markup");
  if (r || a2)
    return { className: "MapNotesLayer" };
  if (s2(e, "Route Layer"))
    return { className: "RouteLayer" };
  const t2 = await e.fetchData();
  return 1 === v(t2) ? { className: "FeatureLayer" } : { className: "GroupLayer" };
}
async function d(e) {
  var _a, _b, _c;
  await e.load();
  const r = ((_a = e.typeKeywords) == null ? void 0 : _a.map((e2) => e2.toLowerCase())) ?? [];
  if (r.includes("elevation 3d layer"))
    return { className: "ElevationLayer" };
  if (r.includes("tiled imagery"))
    return { className: "ImageryTileLayer" };
  const a2 = await e.fetchData(), t2 = a2 == null ? void 0 : a2.layerType;
  if ("ArcGISTiledImageServiceLayer" === t2)
    return { className: "ImageryTileLayer" };
  if ("ArcGISImageServiceLayer" === t2)
    return { className: "ImageryLayer" };
  const n = await t(e.url), s3 = (_b = n.cacheType) == null ? void 0 : _b.toLowerCase(), c2 = (_c = n.capabilities) == null ? void 0 : _c.toLowerCase().includes("tilesonly");
  return "map" === s3 || c2 ? { className: "ImageryTileLayer" } : { className: "ImageryLayer" };
}
function S() {
  return { className: "StreamLayer" };
}
function I2() {
  return { className: "VectorTileLayer" };
}
function g() {
  return { className: "GeoJSONLayer" };
}
function T() {
  return { className: "CSVLayer" };
}
function j2() {
  return { className: "KMLLayer" };
}
function v2() {
  return { className: "WFSLayer" };
}
function M() {
  return { className: "WMSLayer" };
}
function F() {
  return { className: "WMTSLayer" };
}
function G() {
  return { className: "StreamLayer" };
}
async function h(e) {
  await e.load();
  return { className: "OrientedImageryLayer", properties: await e.fetchData() };
}
async function b(e) {
  return (await t(e.url)).tileInfo;
}
async function C(e) {
  const r = e.url;
  if (!r || /\/\d+$/.test(r))
    return {};
  await e.load();
  const a2 = await e.fetchData();
  if ("Feature Service" === e.type) {
    const e2 = V(await w(a2, r));
    if ("object" == typeof e2) {
      const r2 = j(a2);
      e2.className = null != e2.id && r2.includes(e2.id) ? "SubtypeGroupLayer" : "FeatureLayer";
    }
    return e2;
  }
  if (v(a2) > 0)
    return V(a2);
  return V(await t(r));
}
function V(e) {
  return 1 === v(e) && { id: I(e) };
}

export {
  l,
  m
};
//# sourceMappingURL=chunk-WSWWBG7R.js.map
