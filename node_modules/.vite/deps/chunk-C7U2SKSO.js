import {
  G
} from "./chunk-GTENSI4J.js";
import {
  f as f2
} from "./chunk-PJP6JTP7.js";
import {
  E,
  S
} from "./chunk-TBHRKIAA.js";
import {
  h
} from "./chunk-OCIERVFA.js";
import {
  a,
  c
} from "./chunk-QOWAKGE4.js";
import {
  b2 as b,
  c as c2,
  d,
  p,
  w
} from "./chunk-UX5D32RO.js";
import {
  i
} from "./chunk-OO4A3EBQ.js";
import {
  j
} from "./chunk-7KX64CAH.js";
import {
  L
} from "./chunk-O3CHVGVF.js";
import {
  f
} from "./chunk-HNHXEGH2.js";
import {
  s3 as s
} from "./chunk-W2N7YT6I.js";

// node_modules/@arcgis/core/symbols/cim/ExpandedCIM.js
var s2 = { marker: E.MARKER, fill: E.FILL, line: E.LINE, text: E.TEXT };
var l = class {
  constructor(e, l2, n2, r2) {
    const c3 = { minScale: l2 == null ? void 0 : l2.minScale, maxScale: l2 == null ? void 0 : l2.maxScale }, m = i2(c3);
    this.layers = e, this.data = l2, this.hash = this._createHash() + m, this.rendererKey = n2;
    const o = { isOutline: false, placement: null, symbologyType: S.DEFAULT, vvFlags: n2 };
    for (const t of e) {
      const e2 = s2[t.type];
      o.isOutline = "line" === t.type && t.isOutline, t.materialKey = f2(e2, o), t.maxVVSize = r2, t.scaleInfo = c3, t.templateHash += m;
    }
  }
  get type() {
    return "expanded-cim";
  }
  _createHash() {
    let e = "";
    for (const t of this.layers)
      e += t.templateHash;
    return e;
  }
};
function i2(e) {
  return e.minScale || e.maxScale ? e.minScale + "-" + e.maxScale : "";
}

// node_modules/@arcgis/core/views/2d/layers/support/webStyleUtils.js
async function f3(t, r2, s3) {
  if (!t.name)
    throw new s("style-symbol-reference-name-missing", "Missing name in style symbol reference");
  if (t.styleName && "Esri2DPointSymbolsStyle" === t.styleName)
    return p2(t, s3);
  try {
    return b2(await c2(t, r2, s3), t.name, r2, s3);
  } catch (l2) {
    return f(l2), null;
  }
}
async function p2(t, r2) {
  const o = w.replaceAll(/\{SymbolName\}/gi, t.name);
  try {
    const t2 = await b(o, r2);
    return p(t2.data);
  } catch (s3) {
    return f(s3), null;
  }
}
async function b2(m, a2, f4, p3) {
  const b3 = { portal: f4 && null != f4.portal ? f4.portal : j.getDefault(), url: L(m.baseUrl), origin: "portal-item" }, j2 = h(a2, m.data);
  if (!j2) {
    throw new s("symbolstyleutils:symbol-name-not-found", `The symbol name '${a2}' could not be found`, { symbolName: a2 });
  }
  let w2 = i(d(j2, "cimRef"), b3);
  c() && (w2 = a(w2));
  try {
    const t = await b(w2, p3);
    return p(t.data);
  } catch (U) {
    return f(U), null;
  }
}

// node_modules/@arcgis/core/views/2d/layers/support/cimSymbolUtils.js
var i3 = async (a2, i4, r2) => {
  const n2 = new G(r2, i4);
  return new l(await n2.analyzeSymbolReference(a2.data, false), a2.data, a2.rendererKey, a2.maxVVSize);
};
async function r(e, t, r2, n2) {
  if (!e)
    return null;
  if ("cim" === e.type)
    return i3(e, t, r2);
  if ("web-style" === e.type) {
    const l2 = { type: "cim", data: await f3(e, null, n2) ?? void 0, rendererKey: e.rendererKey, maxVVSize: e.maxVVSize };
    return i3(l2, t, r2);
  }
  return e;
}
function n(e) {
  if (!e)
    return null;
  const { avoidSDFRasterization: t, type: a2, cim: i4, url: r2, materialHash: n2, maxVVSize: l2 } = e, m = { cim: i4, type: a2, mosaicHash: n2, url: r2, size: null, dashTemplate: null, path: null, text: null, fontName: null, animatedSymbolProperties: null, avoidSDFRasterization: t };
  switch (a2) {
    case "marker":
      l2 && "size" in i4 && (i4.size = Math.max(l2, i4.size)), m.size = e.size, m.path = e.path, m.animatedSymbolProperties = e.animatedSymbolProperties;
      break;
    case "line":
      m.dashTemplate = e.dashTemplate;
      break;
    case "text":
      m.text = e.text, m.fontName = e.fontName;
  }
  return m;
}

export {
  r,
  n
};
//# sourceMappingURL=chunk-C7U2SKSO.js.map
