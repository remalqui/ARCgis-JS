import {
  o,
  u
} from "./chunk-XR4HIGQP.js";
import {
  j
} from "./chunk-HKVL2MJK.js";
import {
  s as s2
} from "./chunk-HNHXEGH2.js";
import {
  s
} from "./chunk-I4U7MQNO.js";

// node_modules/@arcgis/core/geometry/support/meshUtils/External.js
var a = class {
  constructor(t, r, e) {
    this.assetName = t, this.assetMimeType = r, this.parts = e;
  }
  equals(t) {
    return this === t || this.assetName === t.assetName && this.assetMimeType === t.assetMimeType && s(this.parts, t.parts, (t2, r) => t2.equals(r));
  }
  isOnService(t) {
    return this.parts.every((r) => r.isOnService(t));
  }
  makeHash() {
    let t = "";
    for (const r of this.parts)
      t += r.partHash;
    return t;
  }
  async toBlob(t) {
    const { parts: r } = this;
    if (1 === r.length)
      return r[0].toBlob(t);
    const s3 = await Promise.all(r.map((r2) => r2.toBlob(t)));
    return s2(t), new Blob(s3);
  }
};
var i = class {
  constructor(t, r) {
    this.partUrl = t, this.partHash = r;
  }
  equals(t) {
    return this === t || this.partUrl === t.partUrl && this.partHash === t.partHash;
  }
  isOnService(t) {
    return this.partUrl.startsWith(`${t.path}/assets/`);
  }
  async toBlob(r) {
    const { data: s3 } = await j(this.partUrl, { responseType: "blob" });
    return s2(r), s3;
  }
};
function o2(t) {
  return l(t == null ? void 0 : t.source);
}
function u2(t) {
  if (!Array.isArray(t))
    return false;
  return t.every((t2) => t2 instanceof a);
}
var c = /^(model\/gltf\+json)|(model\/gltf-binary)$/;
var f = /\.(gltf|glb)/i;
function l(t) {
  if (!t)
    return false;
  if (Array.isArray(t)) {
    return t.some(p);
  }
  return p(t);
}
function p(t) {
  if (t instanceof File) {
    const { type: r, name: e } = t;
    return c.test(r) || f.test(e);
  }
  return c.test(t.assetMimeType) || f.test(t.assetName);
}
function m(t, r) {
  if (!t)
    return false;
  const { source: e } = t;
  return y(e, r);
}
function h(t, r) {
  if (t === r)
    return true;
  const { source: e } = t, { source: s3 } = r;
  if (e === s3)
    return true;
  if (u2(e) && u2(s3)) {
    if (e.length !== s3.length)
      return false;
    const t2 = (t3, r3) => t3.assetName < r3.assetName ? -1 : t3.assetName > r3.assetName ? 1 : 0, r2 = [...e].sort(t2), n = [...s3].sort(t2);
    for (let e2 = 0; e2 < r2.length; ++e2)
      if (!r2[e2].equals(n[e2]))
        return false;
    return true;
  }
  return false;
}
function y(t, r) {
  if (Array.isArray(t)) {
    return t.every((t2) => b(t2, r));
  }
  return b(t, r);
}
function b(t, r) {
  return t instanceof a && t.isOnService(r);
}
function g(t, r) {
  return t instanceof File ? u(t.name, r) ?? o(t.type, r) : o(t.assetMimeType, r) ?? u(t.assetName, r);
}
function N(t) {
  return Array.isArray(t) ? t : [t];
}
function A(t) {
  return !!t.original;
}

export {
  a,
  i,
  o2 as o,
  m,
  h,
  g,
  N,
  A
};
//# sourceMappingURL=chunk-5U4S3W7H.js.map
