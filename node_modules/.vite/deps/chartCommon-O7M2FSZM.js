import {
  u
} from "./chunk-UVKRF2GY.js";
import {
  n,
  o
} from "./chunk-XR4ENMV2.js";
import {
  s
} from "./chunk-VGD6ZKBY.js";
import {
  A,
  Je,
  Kt,
  Re,
  U,
  Xt,
  Yt,
  l,
  pt,
  ti,
  v,
  z
} from "./chunk-7WSXGFCK.js";
import "./chunk-PD5Q7TDW.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/widgets/Feature/FeatureMedia/chartCommon.js
var m = class extends Je {
  constructor() {
    super(...arguments), Object.defineProperty(this, "thumb", { enumerable: true, configurable: true, writable: true, value: this._makeThumb() }), Object.defineProperty(this, "startGrip", { enumerable: true, configurable: true, writable: true, value: this._makeButton() }), Object.defineProperty(this, "endGrip", { enumerable: true, configurable: true, writable: true, value: this._makeButton() }), Object.defineProperty(this, "_thumbBusy", { enumerable: true, configurable: true, writable: true, value: false }), Object.defineProperty(this, "_startDown", { enumerable: true, configurable: true, writable: true, value: false }), Object.defineProperty(this, "_endDown", { enumerable: true, configurable: true, writable: true, value: false }), Object.defineProperty(this, "_thumbDown", { enumerable: true, configurable: true, writable: true, value: false }), Object.defineProperty(this, "_gripDown", { enumerable: true, configurable: true, writable: true, value: void 0 });
  }
  _addOrientationClass() {
    this._settings.themeTags = Kt(this._settings.themeTags, ["scrollbar", this._settings.orientation]), this._settings.background || (this._settings.background = n.new(this._root, { themeTags: Kt(this._settings.themeTags, ["main", "background"]) }));
  }
  _makeButton() {
    return this.children.push(o.new(this._root, { themeTags: ["resize", "button", this.get("orientation")], icon: Re.new(this._root, { themeTags: ["icon"] }) }));
  }
  _makeThumb() {
    return this.children.push(n.new(this._root, { themeTags: ["thumb", this.get("orientation")] }));
  }
  _handleAnimation(t) {
    t && this._disposers.push(t.events.on("stopped", () => {
      this.setPrivateRaw("isBusy", false), this._thumbBusy = false;
    }));
  }
  _afterNew() {
    this._addOrientationClass(), super._afterNew();
    const t = this.startGrip, e = this.endGrip, i = this.thumb, a = this.get("background");
    a && this._disposers.push(a.events.on("click", (t2) => {
      this.setPrivateRaw("isBusy", true);
      const e2 = this._display.toLocal(t2.point), s2 = this.width(), a2 = this.height(), n2 = this.get("orientation");
      let r, h, o2;
      r = "vertical" == n2 ? (e2.y - i.height() / 2) / a2 : (e2.x - i.width() / 2) / s2, "vertical" == n2 ? (h = r * a2, o2 = "y") : (h = r * s2, o2 = "x");
      const l2 = this.get("animationDuration", 0);
      l2 > 0 ? (this._thumbBusy = true, this._handleAnimation(this.thumb.animate({ key: o2, to: h, duration: l2, easing: this.get("animationEasing") }))) : (this.thumb.set(o2, h), this._root.events.once("frameended", () => {
        this.setPrivateRaw("isBusy", false);
      }));
    })), this._disposers.push(i.events.on("dblclick", (t2) => {
      if (!pt(t2.originalEvent, this))
        return;
      const e2 = this.get("animationDuration", 0), i2 = this.get("animationEasing");
      this.animate({ key: "start", to: 0, duration: e2, easing: i2 }), this.animate({ key: "end", to: 1, duration: e2, easing: i2 });
    })), this._disposers.push(t.events.on("pointerdown", () => {
      this.setPrivateRaw("isBusy", true), this._startDown = true, this._gripDown = "start";
    })), this._disposers.push(e.events.on("pointerdown", () => {
      this.setPrivateRaw("isBusy", true), this._endDown = true, this._gripDown = "end";
    })), this._disposers.push(i.events.on("pointerdown", () => {
      this.setPrivateRaw("isBusy", true), this._thumbDown = true, this._gripDown = void 0;
    })), this._disposers.push(t.events.on("globalpointerup", () => {
      this._startDown && this.setPrivateRaw("isBusy", false), this._startDown = false;
    })), this._disposers.push(e.events.on("globalpointerup", () => {
      this._endDown && this.setPrivateRaw("isBusy", false), this._endDown = false;
    })), this._disposers.push(i.events.on("globalpointerup", () => {
      this._thumbDown && this.setPrivateRaw("isBusy", false), this._thumbDown = false;
    })), this._disposers.push(t.on("x", () => {
      this._updateThumb();
    })), this._disposers.push(e.on("x", () => {
      this._updateThumb();
    })), this._disposers.push(t.on("y", () => {
      this._updateThumb();
    })), this._disposers.push(e.on("y", () => {
      this._updateThumb();
    })), this._disposers.push(i.events.on("positionchanged", () => {
      this._updateGripsByThumb();
    })), "vertical" == this.get("orientation") ? (t.set("x", 0), e.set("x", 0), this._disposers.push(i.adapters.add("y", (t2) => Math.max(Math.min(Number(t2), this.height() - i.height()), 0))), this._disposers.push(i.adapters.add("x", (t2) => this.width() / 2)), this._disposers.push(t.adapters.add("x", (t2) => this.width() / 2)), this._disposers.push(e.adapters.add("x", (t2) => this.width() / 2)), this._disposers.push(t.adapters.add("y", (t2) => Math.max(Math.min(Number(t2), this.height()), 0))), this._disposers.push(e.adapters.add("y", (t2) => Math.max(Math.min(Number(t2), this.height()), 0)))) : (t.set("y", 0), e.set("y", 0), this._disposers.push(i.adapters.add("x", (t2) => Math.max(Math.min(Number(t2), this.width() - i.width()), 0))), this._disposers.push(i.adapters.add("y", (t2) => this.height() / 2)), this._disposers.push(t.adapters.add("y", (t2) => this.height() / 2)), this._disposers.push(e.adapters.add("y", (t2) => this.height() / 2)), this._disposers.push(t.adapters.add("x", (t2) => Math.max(Math.min(Number(t2), this.width()), 0))), this._disposers.push(e.adapters.add("x", (t2) => Math.max(Math.min(Number(t2), this.width()), 0))));
  }
  _updateChildren() {
    super._updateChildren(), (this.isDirty("end") || this.isDirty("start") || this._sizeDirty) && this.updateGrips();
  }
  _changed() {
    if (super._changed(), this.isDirty("start") || this.isDirty("end")) {
      const t = "rangechanged";
      this.events.isEnabled(t) && this.events.dispatch(t, { type: t, target: this, start: this.get("start", 0), end: this.get("end", 1), grip: this._gripDown });
    }
  }
  updateGrips() {
    const t = this.startGrip, e = this.endGrip, i = this.get("orientation"), s2 = this.height(), a = this.width();
    "vertical" == i ? (t.set("y", s2 * this.get("start", 0)), e.set("y", s2 * this.get("end", 1))) : (t.set("x", a * this.get("start", 0)), e.set("x", a * this.get("end", 1)));
    const n2 = this.getPrivate("positionTextFunction"), r = Math.round(100 * this.get("start", 0)), h = Math.round(100 * this.get("end", 0));
    let o2, l2;
    n2 ? (o2 = n2.call(this, this.get("start", 0)), l2 = n2.call(this, this.get("end", 0))) : (o2 = r + "%", l2 = h + "%"), t.set("ariaLabel", this._t("From %1", void 0, o2)), t.set("ariaValueNow", "" + r), t.set("ariaValueText", r + "%"), t.set("ariaValueMin", "0"), t.set("ariaValueMax", "100"), e.set("ariaLabel", this._t("To %1", void 0, l2)), e.set("ariaValueNow", "" + h), e.set("ariaValueText", h + "%"), e.set("ariaValueMin", "0"), e.set("ariaValueMax", "100");
  }
  _updateThumb() {
    const t = this.thumb, e = this.startGrip, i = this.endGrip, s2 = this.height(), n2 = this.width();
    let r = e.x(), h = i.x(), o2 = e.y(), l2 = i.y(), d = 0, u2 = 1;
    "vertical" == this.get("orientation") ? l(o2) && l(l2) && (this._thumbBusy || t.isDragging() || (t.set("height", l2 - o2), t.set("y", o2)), d = o2 / s2, u2 = l2 / s2) : l(r) && l(h) && (this._thumbBusy || t.isDragging() || (t.set("width", h - r), t.set("x", r)), d = r / n2, u2 = h / n2), !this.getPrivate("isBusy") || this.get("start") == d && this.get("end") == u2 || (this.set("start", d), this.set("end", u2));
    const g = this.getPrivate("positionTextFunction"), m2 = Math.round(100 * this.get("start", 0)), p2 = Math.round(100 * this.get("end", 0));
    let c2, b2;
    g ? (c2 = g.call(this, this.get("start", 0)), b2 = g.call(this, this.get("end", 0))) : (c2 = m2 + "%", b2 = p2 + "%"), t.set("ariaLabel", this._t("From %1 to %2", void 0, c2, b2)), t.set("ariaValueNow", "" + m2), t.set("ariaValueText", m2 + "%");
  }
  _updateGripsByThumb() {
    const t = this.thumb, e = this.startGrip, i = this.endGrip;
    if ("vertical" == this.get("orientation")) {
      const s2 = t.height();
      e.set("y", t.y()), i.set("y", t.y() + s2);
    } else {
      const s2 = t.width();
      e.set("x", t.x()), i.set("x", t.x() + s2);
    }
  }
};
Object.defineProperty(m, "className", { enumerable: true, configurable: true, writable: true, value: "Scrollbar" }), Object.defineProperty(m, "classNames", { enumerable: true, configurable: true, writable: true, value: Je.classNames.concat([m.className]) });
var p = class extends ti {
  setupDefaultRules() {
    super.setupDefaultRules(), this.rule("Component").setAll({ interpolationDuration: 600 }), this.rule("Hierarchy").set("animationDuration", 600), this.rule("Scrollbar").set("animationDuration", 600), this.rule("Tooltip").set("animationDuration", 300), this.rule("MapChart").set("animationDuration", 1e3), this.rule("MapChart").set("wheelDuration", 300), this.rule("Entity").setAll({ stateAnimationDuration: 600 }), this.rule("Sprite").states.create("default", { stateAnimationDuration: 600 }), this.rule("Tooltip", ["axis"]).setAll({ animationDuration: 200 }), this.rule("WordCloud").set("animationDuration", 500);
  }
};
var c = class extends ti {
  setupDefaultRules() {
    super.setupDefaultRules(), this.rule("InterfaceColors").setAll({ stroke: Xt.fromHex(0), fill: Xt.fromHex(2829099), primaryButton: Xt.lighten(Xt.fromHex(6788316), -0.2), primaryButtonHover: Xt.lighten(Xt.fromHex(6779356), -0.2), primaryButtonDown: Xt.lighten(Xt.fromHex(6872181), -0.2), primaryButtonActive: Xt.lighten(Xt.fromHex(6872182), -0.2), primaryButtonText: Xt.fromHex(16777215), primaryButtonStroke: Xt.lighten(Xt.fromHex(6788316), -0.2), secondaryButton: Xt.fromHex(3881787), secondaryButtonHover: Xt.lighten(Xt.fromHex(3881787), 0.1), secondaryButtonDown: Xt.lighten(Xt.fromHex(3881787), 0.15), secondaryButtonActive: Xt.lighten(Xt.fromHex(3881787), 0.2), secondaryButtonText: Xt.fromHex(12303291), secondaryButtonStroke: Xt.lighten(Xt.fromHex(3881787), -0.2), grid: Xt.fromHex(12303291), background: Xt.fromHex(0), alternativeBackground: Xt.fromHex(16777215), text: Xt.fromHex(16777215), alternativeText: Xt.fromHex(0), disabled: Xt.fromHex(11382189), positive: Xt.fromHex(5288704), negative: Xt.fromHex(11730944) });
  }
};
var b = class extends ti {
  constructor() {
    super(...arguments), Object.defineProperty(this, "responsiveRules", { enumerable: true, configurable: true, writable: true, value: [] });
  }
  static widthXXS(t, e) {
    return t <= b.XXS;
  }
  static widthXS(t, e) {
    return t <= b.XS;
  }
  static widthS(t, e) {
    return t <= b.S;
  }
  static widthM(t, e) {
    return t <= b.M;
  }
  static widthL(t, e) {
    return t <= b.L;
  }
  static widthXL(t, e) {
    return t <= b.XL;
  }
  static widthXXL(t, e) {
    return t <= b.XXL;
  }
  static heightXXS(t, e) {
    return e <= b.XXS;
  }
  static heightXS(t, e) {
    return e <= b.XS;
  }
  static heightS(t, e) {
    return e <= b.S;
  }
  static heightM(t, e) {
    return e <= b.M;
  }
  static heightL(t, e) {
    return e <= b.L;
  }
  static heightXL(t, e) {
    return e <= b.XL;
  }
  static heightXXL(t, e) {
    return e <= b.XXL;
  }
  static isXXS(t, e) {
    return t <= b.XXS && e <= b.XXS;
  }
  static isXS(t, e) {
    return t <= b.XS && e <= b.XS;
  }
  static isS(t, e) {
    return t <= b.S && e <= b.S;
  }
  static isM(t, e) {
    return t <= b.M && e <= b.M;
  }
  static isL(t, e) {
    return t <= b.L && e <= b.L;
  }
  static isXL(t, e) {
    return t <= b.XL && e <= b.XL;
  }
  static isXXL(t, e) {
    return t <= b.XXL && e <= b.XXL;
  }
  static maybeXXS(t, e) {
    return t <= b.XXS || e <= b.XXS;
  }
  static maybeXS(t, e) {
    return t <= b.XS || e <= b.XS;
  }
  static maybeS(t, e) {
    return t <= b.S || e <= b.S;
  }
  static maybeM(t, e) {
    return t <= b.M || e <= b.M;
  }
  static maybeL(t, e) {
    return t <= b.L || e <= b.L;
  }
  static maybeXL(t, e) {
    return t <= b.XL || e <= b.XL;
  }
  static maybeXXL(t, e) {
    return t <= b.XXL || e <= b.XXL;
  }
  static newEmpty(t) {
    return new this(t, true);
  }
  addRule(t) {
    return t.name && !t.template && (t.template = this.rule(t.name, t.tags)), t._dp = new A([this._root._rootContainer.onPrivate("width", (e) => {
      this._isUsed() && this._applyRule(t);
    }), this._root._rootContainer.onPrivate("height", (e) => {
      this._isUsed() && this._applyRule(t);
    })]), this.responsiveRules.push(t), this._applyRule(t), t;
  }
  removeRule(t) {
    v(this.responsiveRules, t), t._dp && t._dp.dispose();
  }
  _isUsed() {
    return -1 !== this._root._rootContainer.get("themes").indexOf(this);
  }
  _applyRule(t) {
    const e = this._root._rootContainer.getPrivate("width"), i = this._root._rootContainer.getPrivate("height"), s2 = t.relevant.call(t, e, i), a = t.applied;
    s2 ? a || (t.applied = true, t.template && t.settings && t.template.setAll(t.settings), t.applying && t.applying.call(t)) : a && (t.applied = false, t.template && t.template.removeAll(), t.removing && t.removing.call(t));
  }
  setupDefaultRules() {
    super.setupDefaultRules();
    const t = (t2) => this.addRule(t2);
    t({ name: "Chart", relevant: b.widthXXS, settings: { paddingLeft: 0, paddingRight: 0 } }), t({ name: "Chart", relevant: b.heightXXS, settings: { paddingTop: 0, paddingBottom: 0 } }), t({ name: "Bullet", relevant: b.isXS, settings: { forceHidden: true } }), t({ name: "Legend", relevant: b.isXS, settings: { forceHidden: true } }), t({ name: "HeatLegend", tags: ["vertical"], relevant: b.widthXS, settings: { forceHidden: true } }), t({ name: "HeatLegend", tags: ["horizontal"], relevant: b.heightXS, settings: { forceHidden: true } }), t({ name: "Label", tags: ["heatlegend", "start"], relevant: b.maybeXS, settings: { forceHidden: true } }), t({ name: "Label", tags: ["heatlegend", "end"], relevant: b.maybeXS, settings: { forceHidden: true } }), t({ name: "Button", tags: ["resize"], relevant: b.maybeXS, settings: { forceHidden: true } }), t({ name: "AxisRendererX", relevant: b.heightXS, settings: { inside: true } }), t({ name: "AxisRendererY", relevant: b.widthXS, settings: { inside: true } }), t({ name: "AxisRendererXLabel", relevant: b.heightXS, settings: { minPosition: 0.1, maxPosition: 0.9 } }), t({ name: "AxisLabel", tags: ["y"], relevant: b.widthXS, settings: { centerY: z, maxPosition: 0.9 } }), t({ name: "AxisLabel", tags: ["x"], relevant: b.heightXXS, settings: { forceHidden: true } }), t({ name: "AxisLabel", tags: ["y"], relevant: b.widthXXS, settings: { forceHidden: true } }), t({ name: "AxisTick", tags: ["x"], relevant: b.heightXS, settings: { inside: true, minPosition: 0.1, maxPosition: 0.9 } }), t({ name: "AxisTick", tags: ["y"], relevant: b.widthXXS, settings: { inside: true, minPosition: 0.1, maxPosition: 0.9 } }), t({ name: "Grid", relevant: b.maybeXXS, settings: { forceHidden: true } }), t({ name: "RadialLabel", tags: ["radial"], relevant: b.maybeXS, settings: { forceHidden: true } }), t({ name: "RadialLabel", tags: ["circular"], relevant: b.maybeS, settings: { inside: true } }), t({ name: "AxisTick", relevant: b.maybeS, settings: { inside: true } }), t({ name: "RadialLabel", tags: ["circular"], relevant: b.maybeXS, settings: { forceHidden: true } }), t({ name: "AxisTick", tags: ["circular"], relevant: b.maybeXS, settings: { inside: true } }), t({ name: "PieChart", relevant: b.maybeXS, settings: { radius: U(99) } }), t({ name: "PieChart", relevant: b.widthM, settings: { radius: U(99) } }), t({ name: "RadialLabel", tags: ["pie"], relevant: b.maybeXS, settings: { forceHidden: true } }), t({ name: "RadialLabel", tags: ["pie"], relevant: b.widthM, settings: { forceHidden: true } }), t({ name: "Tick", tags: ["pie"], relevant: b.maybeXS, settings: { forceHidden: true } }), t({ name: "Tick", tags: ["pie"], relevant: b.widthM, settings: { forceHidden: true } }), t({ name: "FunnelSeries", relevant: b.widthM, settings: { alignLabels: false } }), t({ name: "Label", tags: ["funnel", "vertical"], relevant: b.widthL, settings: { forceHidden: true } }), t({ name: "Tick", tags: ["funnel", "vertical"], relevant: b.widthL, settings: { forceHidden: true } }), t({ name: "Label", tags: ["funnel", "horizontal"], relevant: b.heightS, settings: { forceHidden: true } }), t({ name: "Tick", tags: ["funnel", "horizontal"], relevant: b.heightS, settings: { forceHidden: true } }), t({ name: "PyramidSeries", relevant: b.widthM, settings: { alignLabels: false } }), t({ name: "Label", tags: ["pyramid", "vertical"], relevant: b.widthL, settings: { forceHidden: true } }), t({ name: "Tick", tags: ["pyramid", "vertical"], relevant: b.widthL, settings: { forceHidden: true } }), t({ name: "Label", tags: ["pyramid", "horizontal"], relevant: b.heightS, settings: { forceHidden: true } }), t({ name: "Tick", tags: ["pyramid", "horizontal"], relevant: b.heightS, settings: { forceHidden: true } }), t({ name: "PictorialStackedSeries", relevant: b.widthM, settings: { alignLabels: false } }), t({ name: "Label", tags: ["pictorial", "vertical"], relevant: b.widthL, settings: { forceHidden: true } }), t({ name: "Tick", tags: ["pictorial", "vertical"], relevant: b.widthL, settings: { forceHidden: true } }), t({ name: "Label", tags: ["pictorial", "horizontal"], relevant: b.heightS, settings: { forceHidden: true } }), t({ name: "Tick", tags: ["pictorial", "horizontal"], relevant: b.heightS, settings: { forceHidden: true } }), t({ name: "Label", tags: ["flow", "horizontal"], relevant: b.widthS, settings: { forceHidden: true } }), t({ name: "Label", tags: ["flow", "vertical"], relevant: b.heightS, settings: { forceHidden: true } }), t({ name: "Chord", relevant: b.maybeXS, settings: { radius: U(99) } }), t({ name: "Label", tags: ["hierarchy", "node"], relevant: b.maybeXS, settings: { forceHidden: true } });
  }
};
Object.defineProperty(b, "XXS", { enumerable: true, configurable: true, writable: true, value: 100 }), Object.defineProperty(b, "XS", { enumerable: true, configurable: true, writable: true, value: 200 }), Object.defineProperty(b, "S", { enumerable: true, configurable: true, writable: true, value: 300 }), Object.defineProperty(b, "M", { enumerable: true, configurable: true, writable: true, value: 400 }), Object.defineProperty(b, "L", { enumerable: true, configurable: true, writable: true, value: 600 }), Object.defineProperty(b, "XL", { enumerable: true, configurable: true, writable: true, value: 800 }), Object.defineProperty(b, "XXL", { enumerable: true, configurable: true, writable: true, value: 1e3 });
var v2 = b;
export {
  p as AnimatedThemeAm5,
  s as ColorSetAm5,
  c as DarkThemeAm5,
  v2 as ResponsiveThemeAm5,
  m as ScrollbarAm5,
  ti as ThemeAm5,
  u as TooltipAm5,
  Yt as colorAm5
};
//# sourceMappingURL=chartCommon-O7M2FSZM.js.map
