import {
  n
} from "./chunk-WBSPL6CJ.js";
import {
  a2
} from "./chunk-CIDWM2UN.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";
import {
  C
} from "./chunk-HNHXEGH2.js";
import {
  a
} from "./chunk-I5JT24BO.js";

// node_modules/@arcgis/core/layers/mixins/EditBusLayer.js
var i = new n.EventEmitter();
function l(e2, t, d = false) {
  const r = C();
  return d = null == t || d, i.emit("apply-edits", { serviceUrl: e2, layerId: t, mayReceiveServiceEdits: d, result: r.promise }), r;
}
var a3 = "esri.layers.mixins.EditBusLayer";
var o = Symbol(a3);
function n2(e2) {
  return null != e2 && "object" == typeof e2 && o in e2;
}
var c = (t) => {
  var s;
  let l2 = class extends t {
    constructor(...e2) {
      super(...e2), this[s] = true, this.when().then(() => {
        this.own([i.on("apply-edits", (e3) => {
          const { serviceUrl: t2, layerId: s2, mayReceiveServiceEdits: r, result: i2 } = e3, l3 = t2 === this.url, a4 = null != s2 && null != this.layerId && s2 === this.layerId;
          if (!l3 || !a4 && !r)
            return;
          const o2 = i2.then((e4) => {
            var _a;
            if (a4 && (e4.addedFeatures.length || e4.updatedFeatures.length || e4.deletedFeatures.length || e4.addedAttachments.length || e4.updatedAttachments.length || e4.deletedAttachments.length))
              return this.emit("edits", a(e4)), e4;
            const t3 = (_a = e4.editedFeatures) == null ? void 0 : _a.find(({ layerId: e5 }) => e5 === this.layerId);
            if (t3) {
              const { adds: s3, updates: r2, deletes: i3 } = t3.editedFeatures, l4 = { edits: null, addedAttachments: [], deletedAttachments: [], updatedAttachments: [], addedFeatures: s3 ? s3.map(({ attributes: e5 }) => ({ objectId: this.objectIdField && e5[this.objectIdField], globalId: this.globalIdField && e5[this.globalIdField] })) : [], deletedFeatures: i3 ? i3.map(({ attributes: e5 }) => ({ objectId: this.objectIdField && e5[this.objectIdField], globalId: this.globalIdField && e5[this.globalIdField] })) : [], updatedFeatures: r2 ? r2.map(({ current: { attributes: e5 } }) => ({ objectId: this.objectIdField && e5[this.objectIdField], globalId: this.globalIdField && e5[this.globalIdField] })) : [], editedFeatures: a(e4.editedFeatures), exceededTransferLimit: false };
              return this.emit("edits", l4), l4;
            }
            return { edits: null, addedAttachments: [], deletedAttachments: [], updatedAttachments: [], addedFeatures: [], deletedFeatures: [], updatedFeatures: [], editedFeatures: a(e4.editedFeatures), exceededTransferLimit: false };
          });
          this.emit("apply-edits", { result: o2 });
        })]);
      }, () => {
      });
    }
  };
  return s = o, l2 = e([a2(a3)], l2), l2;
};

export {
  l,
  n2 as n,
  c
};
//# sourceMappingURL=chunk-MLNTHYHD.js.map
