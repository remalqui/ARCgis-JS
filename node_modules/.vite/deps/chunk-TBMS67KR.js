import {
  h as h2,
  i as i3
} from "./chunk-FZIEP3HG.js";
import {
  e as e4,
  e2 as e5
} from "./chunk-N5CR6S5Y.js";
import {
  c as c4,
  i as i2,
  n as n6,
  u as u5,
  x
} from "./chunk-PEYWLFGJ.js";
import {
  T as T2,
  e2 as e3
} from "./chunk-NE5U5H4D.js";
import {
  e
} from "./chunk-AER5JAFS.js";
import {
  l as l3,
  n as n4,
  r as r2
} from "./chunk-7HZ72XIE.js";
import {
  c as c3
} from "./chunk-NVZXNBIH.js";
import {
  ee as ee2,
  u as u4
} from "./chunk-3VTULECI.js";
import {
  M,
  w
} from "./chunk-A4HFWKMU.js";
import {
  i
} from "./chunk-PR2OEILG.js";
import {
  C as C2,
  N as N3,
  P as P2,
  U as U2,
  Z,
  w as w2
} from "./chunk-PJP6JTP7.js";
import {
  E as E3,
  S,
  T
} from "./chunk-TBHRKIAA.js";
import {
  D as D2,
  E as E2,
  F as F2,
  G as G2,
  H,
  I as I2,
  J,
  N as N2,
  O as O2,
  c as c2,
  ee,
  l as l2,
  m,
  me,
  n as n2,
  re,
  te
} from "./chunk-JSMUQBPG.js";
import {
  t as t4
} from "./chunk-FF5LS3YE.js";
import {
  B,
  C,
  D,
  E,
  F,
  G,
  I,
  L,
  N,
  O,
  P,
  R,
  U,
  _
} from "./chunk-BCDDCNQ2.js";
import {
  K,
  Q
} from "./chunk-KKGVORR5.js";
import {
  t as t3
} from "./chunk-M5UHI5WR.js";
import {
  u as u3
} from "./chunk-SCOBW7KR.js";
import {
  e as e2
} from "./chunk-D5NSNTGJ.js";
import {
  n as n5
} from "./chunk-OMDLZQUU.js";
import {
  n as n3,
  t as t5
} from "./chunk-5KLICR5E.js";
import {
  n
} from "./chunk-VZAEQ6CY.js";
import {
  r
} from "./chunk-X4Y5OF5X.js";
import {
  u as u2
} from "./chunk-EIE3W25Z.js";
import {
  h
} from "./chunk-KKGH4SRQ.js";
import {
  c
} from "./chunk-MOPR7RFH.js";
import {
  l
} from "./chunk-XN5VV437.js";
import {
  t,
  u
} from "./chunk-DWOEYHKS.js";
import {
  s2 as s,
  s3 as s2
} from "./chunk-W2N7YT6I.js";
import {
  t as t2
} from "./chunk-I4U7MQNO.js";

// node_modules/@arcgis/core/views/2d/engine/webgl/VertexStream.js
var n7 = class {
  constructor(s8, n12) {
    this._rctx = s8, this._vertexBuffer = c4.createVertex(s8, F.STATIC_DRAW, new Uint16Array(n12)), this._vao = new u5(s8, /* @__PURE__ */ new Map([["a_position", 0]]), { geometry: [new t4("a_position", 2, C.SHORT, 0, 4)] }, { geometry: this._vertexBuffer }), this._count = n12.length / 2;
  }
  bind() {
    this._rctx.bindVAO(this._vao);
  }
  unbind() {
    this._rctx.bindVAO(null);
  }
  dispose() {
    this._vao.dispose();
  }
  draw() {
    this._rctx.bindVAO(this._vao), this._rctx.drawArrays(E.TRIANGLE_STRIP, 0, this._count);
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/brushes/WGLBrush.js
var t6 = class {
  constructor() {
    this.name = this.constructor.name || "UnnamedBrush", this.brushEffect = null;
  }
  prepareState(t12, r6) {
  }
  draw(t12, r6, s8) {
  }
  drawMany(t12, r6, s8) {
    for (const a5 of r6)
      a5.visible && this.draw(t12, a5, s8);
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/brushes/BrushBitmap.js
var a = { nearest: { defines: [], samplingMode: L.NEAREST, mips: false }, bilinear: { defines: [], samplingMode: L.LINEAR, mips: false }, bicubic: { defines: ["bicubic"], samplingMode: L.LINEAR, mips: false }, trilinear: { defines: [], samplingMode: L.LINEAR_MIPMAP_LINEAR, mips: true } };
var o = (e9, t12, i12) => {
  if ("dynamic" === i12.samplingMode) {
    const { state: i13 } = e9, s8 = t12.resolution / t12.pixelRatio / i13.resolution, n12 = Math.round(e9.pixelRatio) !== e9.pixelRatio, r6 = s8 > 1.05 || s8 < 0.95;
    return i13.rotation || r6 || n12 || t12.isSourceScaled || t12.rotation ? a.bilinear : a.nearest;
  }
  return a[i12.samplingMode];
};
var d = class extends t6 {
  constructor() {
    super(...arguments), this._desc = { vsPath: "raster/bitmap", fsPath: "raster/bitmap", attributes: /* @__PURE__ */ new Map([["a_pos", 0]]) };
  }
  dispose() {
    this._quad && this._quad.dispose();
  }
  prepareState({ context: e9 }) {
    e9.setBlendingEnabled(true), e9.setColorMask(true, true, true, true), e9.setStencilWriteMask(0), e9.setStencilTestEnabled(true);
  }
  draw(i12, s8) {
    const { context: a5, renderingOptions: d3, painter: l9, requestRender: m4, allowDelayedRender: c10 } = i12;
    if (!s8.source || !s8.isReady)
      return;
    const p4 = o(i12, s8, d3), u10 = l9.materialManager.getProgram(this._desc, p4.defines);
    if (c10 && null != m4 && !u10.compiled)
      return void m4();
    i12.timeline.begin(this.name), "additive" === s8.blendFunction ? a5.setBlendFunctionSeparate(R.ONE, R.ONE, R.ONE, R.ONE) : a5.setBlendFunctionSeparate(R.ONE, R.ONE_MINUS_SRC_ALPHA, R.ONE, R.ONE_MINUS_SRC_ALPHA), a5.setStencilFunction(I.EQUAL, s8.stencilRef, 255), this._quad || (this._quad = new n7(a5, [0, 0, 1, 0, 0, 1, 1, 1]));
    const { coordScale: f3, computedOpacity: _5, transforms: E5 } = s8;
    s8.setSamplingProfile(p4), s8.bind(i12.context, D2), a5.useProgram(u10), u10.setUniformMatrix3fv("u_dvsMat3", E5.dvs), u10.setUniform1i("u_texture", D2), u10.setUniform2fv("u_coordScale", f3), u10.setUniform1f("u_opacity", _5), this._quad.draw(), i12.timeline.end(this.name);
  }
};

// node_modules/@arcgis/core/chunks/vec4f32.js
function n8() {
  return new Float32Array(4);
}
function t7(n12) {
  const t12 = new Float32Array(4);
  return t12[0] = n12[0], t12[1] = n12[1], t12[2] = n12[2], t12[3] = n12[3], t12;
}
function r3(n12, t12, r6, e9) {
  const a5 = new Float32Array(4);
  return a5[0] = n12, a5[1] = t12, a5[2] = r6, a5[3] = e9, a5;
}
function e6(n12, t12) {
  return new Float32Array(n12, t12, 4);
}
function a2() {
  return n8();
}
function o2() {
  return r3(1, 1, 1, 1);
}
function u6() {
  return r3(1, 0, 0, 0);
}
function s3() {
  return r3(0, 1, 0, 0);
}
function c5() {
  return r3(0, 0, 1, 0);
}
function i4() {
  return r3(0, 0, 0, 1);
}
var f = a2();
var l4 = o2();
var _2 = u6();
var y = s3();
var w3 = c5();
var N4 = i4();
var O3 = Object.freeze(Object.defineProperty({ __proto__: null, ONES: l4, UNIT_W: N4, UNIT_X: _2, UNIT_Y: y, UNIT_Z: w3, ZEROS: f, clone: t7, create: n8, createView: e6, fromValues: r3, ones: o2, unitW: i4, unitX: u6, unitY: s3, unitZ: c5, zeros: a2 }, Symbol.toStringTag, { value: "Module" }));

// node_modules/@arcgis/core/views/2d/engine/webgl/shaders/sources/shaderRepository.js
var e7 = { background: { "background.frag": "uniform lowp vec4 u_color;\nvoid main() {\ngl_FragColor = u_color;\n}", "background.vert": "attribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform mediump vec2 u_coord_range;\nuniform mediump float u_depth;\nvoid main() {\nvec3 v_pos = u_dvsMat3 * vec3(u_coord_range * a_pos, 1.0);\ngl_Position = vec4(v_pos.xy, 0.0, 1.0);\n}" }, bitBlit: { "bitBlit.frag": "uniform lowp sampler2D u_tex;\nuniform lowp float u_opacity;\nvarying mediump vec2 v_uv;\nvoid main() {\nlowp vec4 color = texture2D(u_tex, v_uv);\ngl_FragColor = color *  u_opacity;\n}", "bitBlit.vert": "attribute vec2 a_pos;\nattribute vec2 a_tex;\nvarying mediump vec2 v_uv;\nvoid main(void) {\ngl_Position = vec4(a_pos, 0.0, 1.0);\nv_uv = a_tex;\n}" }, blend: { "blend.frag": "precision mediump float;\nuniform sampler2D u_layerTexture;\nuniform lowp float u_opacity;\nuniform lowp float u_inFadeOpacity;\n#ifndef NORMAL\nuniform sampler2D u_backbufferTexture;\n#endif\nvarying mediump vec2 v_uv;\nfloat rgb2v(in vec3 c) {\nreturn max(c.x, max(c.y, c.z));\n}\nvec3 rgb2hsv(in vec3 c) {\nvec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\nvec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\nvec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\nfloat d = q.x - min(q.w, q.y);\nfloat e = 1.0e-10;\nreturn vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), min(d / (q.x + e), 1.0), q.x);\n}\nvec3 hsv2rgb(in vec3 c) {\nvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\nreturn c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\nvec3 tint(in vec3 Cb, in vec3 Cs) {\nfloat vIn = rgb2v(Cb);\nvec3 hsvTint = rgb2hsv(Cs);\nvec3 hsvOut = vec3(hsvTint.x, hsvTint.y, vIn * hsvTint.z);\nreturn hsv2rgb(hsvOut);\n}\nfloat overlay(in float Cb, in float Cs) {\nreturn (1.0 - step(0.5, Cs)) * (1.0 - 2.0 * (1.0 - Cs ) * (1.0 - Cb)) + step(0.5, Cs) * (2.0 * Cs * Cb);\n}\nfloat colorDodge(in float Cb, in float Cs) {\nreturn (Cb == 0.0) ? 0.0 : (Cs == 1.0) ? 1.0 : min(1.0, Cb / (1.0 - Cs));\n}\nfloat colorBurn(in float Cb, in float Cs) {\nreturn (Cb == 1.0) ? 1.0 : (Cs == 0.0) ? 0.0 : 1.0 - min(1.0, (1.0 - Cb) / Cs);\n}\nfloat hardLight(in float Cb, in float Cs) {\nreturn (1.0 - step(0.5, Cs)) * (2.0 * Cs * Cb) + step(0.5, Cs) * (1.0 - 2.0 * (1.0 - Cs) * (1.0 - Cb));\n}\nfloat reflectBlend(in float Cb, in float Cs) {\nreturn (Cs == 1.0) ? Cs : min(Cb * Cb / (1.0 - Cs), 1.0);\n}\nfloat softLight(in float Cb, in float Cs) {\nif (Cs <= 0.5) {\nreturn Cb - (1.0 - 2.0 * Cs) * Cb * (1.0 - Cb);\n}\nif (Cb <= 0.25) {\nreturn Cb + (2.0 * Cs - 1.0) * Cb * ((16.0 * Cb - 12.0) * Cb + 3.0);\n}\nreturn Cb + (2.0 * Cs - 1.0) * (sqrt(Cb) - Cb);\n}\nfloat vividLight(in float Cb, in float Cs) {\nreturn (1.0 - step(0.5, Cs)) * colorBurn(Cb, 2.0 * Cs) + step(0.5, Cs) * colorDodge(Cb, (2.0 * (Cs - 0.5)));\n}\nfloat minv3(in vec3 c) {\nreturn min(min(c.r, c.g), c.b);\n}\nfloat maxv3(in vec3 c) {\nreturn max(max(c.r, c.g), c.b);\n}\nfloat lumv3(in vec3 c) {\nreturn dot(c, vec3(0.3, 0.59, 0.11));\n}\nfloat satv3(vec3 c) {\nreturn maxv3(c) - minv3(c);\n}\nvec3 clipColor(vec3 color) {\nfloat lum = lumv3(color);\nfloat mincol = minv3(color);\nfloat maxcol = maxv3(color);\nif (mincol < 0.0) {\ncolor = lum + ((color - lum) * lum) / (lum - mincol);\n}\nif (maxcol > 1.0) {\ncolor = lum + ((color - lum) * (1.0 - lum)) / (maxcol - lum);\n}\nreturn color;\n}\nvec3 setLum(vec3 cbase, vec3 clum) {\nfloat lbase = lumv3(cbase);\nfloat llum = lumv3(clum);\nfloat ldiff = llum - lbase;\nvec3 color = cbase + vec3(ldiff);\nreturn clipColor(color);\n}\nvec3 setLumSat(vec3 cbase, vec3 csat, vec3 clum)\n{\nfloat minbase = minv3(cbase);\nfloat sbase = satv3(cbase);\nfloat ssat = satv3(csat);\nvec3 color;\nif (sbase > 0.0) {\ncolor = (cbase - minbase) * ssat / sbase;\n} else {\ncolor = vec3(0.0);\n}\nreturn setLum(color, clum);\n}\nvoid main() {\nvec4 src = texture2D(u_layerTexture, v_uv);\n#ifdef NORMAL\ngl_FragColor = src *  u_opacity;\n#else\nvec4 dst = texture2D(u_backbufferTexture, v_uv);\nvec3 Cs = src.a == 0.0 ? src.rgb : vec3(src.rgb / src.a);\nvec3 Cb = dst.a == 0.0 ? dst.rgb : vec3(dst.rgb / dst.a);\nfloat as = u_opacity * src.a;\nfloat ab = dst.a;\n#ifdef DESTINATION_OVER\ngl_FragColor = vec4(as * Cs * (1.0 - ab) + ab * Cb, as + ab - as * ab);\n#endif\n#ifdef SOURCE_IN\nvec4 color = vec4(as * Cs * ab, as * ab);\nvec4 fadeColor = (1.0 - u_opacity) * u_inFadeOpacity * vec4(ab * Cb, ab);\ngl_FragColor = color + fadeColor;\n#endif\n#ifdef DESTINATION_IN\nvec4 color = vec4(ab * Cb * as, ab * as);\nvec4 fadeColor = (1.0 - u_opacity) * u_inFadeOpacity * vec4(ab * Cb, ab);\ngl_FragColor = color + fadeColor;\n#endif\n#ifdef SOURCE_OUT\ngl_FragColor = vec4(as * Cs * (1.0 - ab), as * (1.0 - ab));\n#endif\n#ifdef DESTINATION_OUT\ngl_FragColor = vec4(ab * Cb * (1.0 - as), ab * (1.0 - as));\n#endif\n#ifdef SOURCE_ATOP\ngl_FragColor = vec4(as * Cs * ab + ab * Cb * (1.0 - as), ab);\n#endif\n#ifdef DESTINATION_ATOP\ngl_FragColor = vec4(as * Cs * (1.0 - ab) + ab * Cb * as, as);\n#endif\n#ifdef XOR\ngl_FragColor = vec4(as * Cs * (1.0 - ab) + ab * Cb * (1.0 - as),\nas * (1.0 - ab) + ab * (1.0 - as));\n#endif\n#ifdef MULTIPLY\ngl_FragColor = vec4(as * Cs * ab * Cb + (1.0 - ab) * as * Cs + (1.0 - as) * ab * Cb,\nas + ab * (1.0 - as));\n#endif\n#ifdef SCREEN\ngl_FragColor = vec4((Cs + Cb - Cs * Cb) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef OVERLAY\nvec3 f = vec3(overlay(Cb.r, Cs.r), overlay(Cb.g, Cs.g), overlay(Cb.b, Cs.b));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef DARKEN\ngl_FragColor = vec4(min(Cs, Cb) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef LIGHTER\ngl_FragColor = vec4(as * Cs + ab * Cb, as + ab);\n#endif\n#ifdef LIGHTEN\ngl_FragColor = vec4(max(Cs, Cb) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef COLOR_DODGE\nvec3 f = clamp(vec3(colorDodge(Cb.r, Cs.r), colorDodge(Cb.g, Cs.g), colorDodge(Cb.b, Cs.b)), vec3(0.0), vec3(1.0));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef COLOR_BURN\nvec3 f = vec3(colorBurn(Cb.r, Cs.r), colorBurn(Cb.g, Cs.g), colorBurn(Cb.b, Cs.b));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef HARD_LIGHT\nvec3 f = vec3(hardLight(Cb.r, Cs.r), hardLight(Cb.g, Cs.g), hardLight(Cb.b, Cs.b));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef SOFT_LIGHT\nvec3 f = vec3(softLight(Cb.r, Cs.r), softLight(Cb.g, Cs.g), softLight(Cb.b, Cs.b));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef DIFFERENCE\ngl_FragColor = vec4(abs(Cb - Cs) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef EXCLUSION\nvec3 f = Cs + Cb - 2.0 * Cs * Cb;\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef INVERT\ngl_FragColor = vec4((1.0 - Cb) * as * ab + Cb * ab * (1.0 - as), ab);\n#endif\n#ifdef VIVID_LIGHT\nvec3 f = vec3(clamp(vividLight(Cb.r, Cs.r), 0.0, 1.0),\nclamp(vividLight(Cb.g, Cs.g), 0.0, 1.0),\nclamp(vividLight(Cb.b, Cs.b), 0.0, 1.0));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef HUE\nvec3 f = setLumSat(Cs,Cb,Cb);\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef SATURATION\nvec3 f = setLumSat(Cb,Cs,Cb);\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef COLOR\nvec3 f = setLum(Cs,Cb);\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef LUMINOSITY\nvec3 f = setLum(Cb,Cs);\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef PLUS\ngl_FragColor = clamp(vec4(src.r + Cb.r, src.g + Cb.g, src.b + Cb.b, as + ab), 0.0, 1.0);\n#endif\n#ifdef MINUS\ngl_FragColor = vec4(clamp(vec3(Cb.r - src.r, Cb.g - src.g, Cb.b - src.b), 0.0, 1.0), ab * as);\n#endif\n#ifdef AVERAGE\nvec3 f = (Cb + Cs) / 2.0;\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef REFLECT\nvec3 f = clamp(vec3(reflectBlend(Cb.r, Cs.r),\nreflectBlend(Cb.g, Cs.g),\nreflectBlend(Cb.b, Cs.b)), vec3(0.0), vec3(1.0));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#endif\n}", "blend.vert": "attribute vec2 a_position;\nvarying mediump vec2 v_uv;\nvoid main(void) {\ngl_Position = vec4(a_position , 0.0, 1.0);\nv_uv = (a_position + 1.0) / 2.0;\n}" }, debug: { overlay: { "overlay.frag": "precision mediump float;\nvarying vec4 v_color;\nvoid main(void) {\ngl_FragColor = v_color;\n}", "overlay.vert": "attribute vec3 a_PositionAndFlags;\nuniform mat3 u_dvsMat3;\nuniform vec4 u_colors[4];\nuniform float u_opacities[4];\nvarying vec4 v_color;\nvoid main(void) {\nvec2 position = a_PositionAndFlags.xy;\nfloat flags = a_PositionAndFlags.z;\nint colorIndex = int(mod(flags, 4.0));\nvec4 color;\nfor (int i = 0; i < 4; i++) {\ncolor = u_colors[i];\nif (i == colorIndex) {\nbreak;\n}\n}\nint opacityIndex = int(mod(floor(flags / 4.0), 4.0));\nfloat opacity;\nfor (int i = 0; i < 4; i++) {\nopacity = u_opacities[i];\nif (i == opacityIndex) {\nbreak;\n}\n}\nv_color = color * opacity;\ngl_Position = vec4((u_dvsMat3 * vec3(position, 1.0)).xy, 0.0, 1.0);\n}" } }, dot: { dot: { "dot.frag": "precision mediump float;\nvarying vec4 v_color;\nvarying float v_dotRatio;\nvarying float v_invEdgeRatio;\nuniform highp float u_tileZoomFactor;\nvoid main()\n{\nfloat dist = length(gl_PointCoord - vec2(.5, .5)) * 2.;\nfloat alpha = smoothstep(0., 1., v_invEdgeRatio * (dist - v_dotRatio) + 1.);\ngl_FragColor = v_color * alpha;\n}", "dot.vert": "precision highp float;\nattribute vec2 a_pos;\nuniform sampler2D u_texture;\nuniform highp mat3 u_dvsMat3;\nuniform highp float u_tileZoomFactor;\nuniform highp float u_dotSize;\nuniform highp float u_pixelRatio;\nvarying vec2 v_pos;\nvarying vec4 v_color;\nvarying float v_dotRatio;\nvarying float v_invEdgeRatio;\nconst float EPSILON = 0.000001;\nvoid main()\n{\nmat3 tileToTileTexture = mat3(  1., 0., 0.,\n0., -1., 0.,\n0., 1., 1.  );\nvec3 texCoords = tileToTileTexture * vec3(a_pos.xy / 512., 1.);\nv_color = texture2D(u_texture, texCoords.xy);\nfloat smoothEdgeWidth = max(u_dotSize / 2., 1.) ;\nfloat z = 0.;\nz += 2.0 * step(v_color.a, EPSILON);\ngl_PointSize = (smoothEdgeWidth + u_dotSize);\ngl_Position = vec4((u_dvsMat3 * vec3(a_pos + .5, 1.)).xy, z, 1.);\nv_dotRatio = u_dotSize / gl_PointSize;\nv_invEdgeRatio = -1. / ( smoothEdgeWidth / gl_PointSize );\ngl_PointSize  *= (u_pixelRatio * u_tileZoomFactor);\n}" } }, filtering: { "bicubic.glsl": "vec4 computeWeights(float v) {\nfloat b = 1.0 / 6.0;\nfloat v2 = v * v;\nfloat v3 = v2 * v;\nfloat w0 = b * (-v3 + 3.0 * v2 - 3.0 * v + 1.0);\nfloat w1 = b * (3.0 * v3  - 6.0 * v2 + 4.0);\nfloat w2 = b * (-3.0 * v3 + 3.0 * v2 + 3.0 * v + 1.0);\nfloat w3 = b * v3;\nreturn vec4(w0, w1, w2, w3);\n}\nvec4 bicubicOffsetsAndWeights(float v) {\nvec4 w = computeWeights(v);\nfloat g0 = w.x + w.y;\nfloat g1 = w.z + w.w;\nfloat h0 = 1.0 - (w.y / g0) + v;\nfloat h1 = 1.0 + (w.w / g1) - v;\nreturn vec4(h0, h1, g0, g1);\n}\nvec4 sampleBicubicBSpline(sampler2D sampler, vec2 coords, vec2 texSize) {\nvec2 eX = vec2(1.0 / texSize.x, 0.0);\nvec2 eY = vec2(0.0, 1.0 / texSize.y);\nvec2 texel = coords * texSize - 0.5;\nvec3 hgX = bicubicOffsetsAndWeights(fract(texel).x).xyz;\nvec3 hgY = bicubicOffsetsAndWeights(fract(texel).y).xyz;\nvec2 coords10 = coords + hgX.x * eX;\nvec2 coords00 = coords - hgX.y * eX;\nvec2 coords11 = coords10 + hgY.x * eY;\nvec2 coords01 = coords00 + hgY.x * eY;\ncoords10 = coords10 - hgY.y * eY;\ncoords00 = coords00 - hgY.y * eY;\nvec4 color00 = texture2D(sampler, coords00);\nvec4 color10 = texture2D(sampler, coords10);\nvec4 color01 = texture2D(sampler, coords01);\nvec4 color11 = texture2D(sampler, coords11);\ncolor00 = mix(color00, color01, hgY.z);\ncolor10 = mix(color10, color11, hgY.z);\ncolor00 = mix(color00, color10, hgX.z);\nreturn color00;\n}", "bilinear.glsl": "vec4 sampleBilinear(sampler2D sampler, vec2 coords, vec2 texSize) {\nvec2 texelStart = floor(coords * texSize);\nvec2 coord0 = texelStart / texSize;\nvec2 coord1 = (texelStart +  vec2(1.0, 0.0)) / texSize;\nvec2 coord2 = (texelStart +  vec2(0.0, 1.0)) / texSize;\nvec2 coord3 = (texelStart +  vec2(1.0, 1.0)) / texSize;\nvec4 color0 = texture2D(sampler, coord0);\nvec4 color1 = texture2D(sampler, coord1);\nvec4 color2 = texture2D(sampler, coord2);\nvec4 color3 = texture2D(sampler, coord3);\nvec2 blend = fract(coords * texSize);\nvec4 color01 = mix(color0, color1, blend.x);\nvec4 color23 = mix(color2, color3, blend.x);\nvec4 color = mix(color01, color23, blend.y);\n#ifdef NNEDGE\nfloat alpha = floor(color0.a * color1.a * color2.a * color3.a + 0.5);\ncolor = color * alpha + (1.0 - alpha) * texture2D(sampler, coords);\n#endif\nreturn color;\n}", "epx.glsl": "vec4 sampleEPX(sampler2D sampler, float size, vec2 coords, vec2 texSize) {\nvec2 invSize = 1.0 / texSize;\nvec2 texel = coords * texSize;\nvec2 texel_i = floor(texel);\nvec2 texel_frac = fract(texel);\nvec4 colorP = texture2D(sampler, texel_i * invSize);\nvec4 colorP1 = vec4(colorP);\nvec4 colorP2 = vec4(colorP);\nvec4 colorP3 = vec4(colorP);\nvec4 colorP4 = vec4(colorP);\nvec4 colorA = texture2D(sampler, (texel_i - vec2(0.0, 1.0)) * invSize);\nvec4 colorB = texture2D(sampler, (texel_i + vec2(1.0, 0.0)) * invSize);\nvec4 colorC = texture2D(sampler, (texel_i - vec2(1.0, 0.0)) * invSize);\nvec4 colorD = texture2D(sampler, (texel_i + vec2(0.0, 1.0)) * invSize);\nif (colorC == colorA && colorC != colorD && colorA != colorB) {\ncolorP1 = colorA;\n}\nif (colorA == colorB && colorA != colorC && colorB != colorD) {\ncolorP2 = colorB;\n}\nif (colorD == colorC && colorD != colorB && colorC != colorA) {\ncolorP3 = colorC;\n}\nif (colorB == colorD && colorB != colorA && colorD != colorC) {\ncolorP4 = colorD;\n}\nvec4 colorP12 = mix(colorP1, colorP2, texel_frac.x);\nvec4 colorP34 = mix(colorP1, colorP2, texel_frac.x);\nreturn mix(colorP12, colorP34, texel_frac.y);\n}" }, fx: { integrate: { "integrate.frag": "precision mediump float;\nuniform lowp sampler2D u_sourceTexture;\nuniform lowp sampler2D u_maskTexture;\nuniform mediump float u_zoomLevel;\nuniform highp float u_timeDelta;\nuniform highp float u_animationTime;\nvarying highp vec2 v_texcoord;\n#include <materials/utils.glsl>\nvoid main()\n{\n#ifdef DELTA\nvec4 texel = texture2D(u_sourceTexture, v_texcoord);\nvec4 data0 = texture2D(u_maskTexture, v_texcoord);\nfloat flags = data0.r * 255.0;\nfloat groupMinZoom = data0.g * 255.0;\nfloat isVisible = getFilterBit(flags, 0);\nfloat wouldClip = step(groupMinZoom, u_zoomLevel);\nfloat direction = wouldClip * 1.0 + (1.0 - wouldClip) * -1.0;\nfloat dt = u_timeDelta / max(u_animationTime, 0.0001);\nvec4 nextState = vec4(texel + direction * dt);\ngl_FragColor =  vec4(nextState);\n#elif defined(UPDATE)\nvec4 texel = texture2D(u_sourceTexture, v_texcoord);\ngl_FragColor = texel;\n#endif\n}", "integrate.vert": "precision mediump float;\nattribute vec2 a_pos;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\nv_texcoord = a_pos;\ngl_Position = vec4(a_pos * 2.0 - 1.0, 0.0, 1.0);\n}" } }, heatmap: { heatmapResolve: { "heatmapResolve.frag": "precision highp float;\n#ifdef HEATMAP_PRECISION_HALF_FLOAT\n#define COMPRESSION_FACTOR 4.0\n#else\n#define COMPRESSION_FACTOR 1.0\n#endif\nuniform sampler2D u_texture;\nuniform sampler2D u_gradient;\nuniform vec2 u_densityMinAndInvRange;\nuniform float u_densityNormalization;\nvarying vec2 v_uv;\nvoid main() {\nvec4 data = texture2D(u_texture, v_uv);\nfloat density = data.r * COMPRESSION_FACTOR;\ndensity *= u_densityNormalization;\ndensity = (density - u_densityMinAndInvRange.x) * u_densityMinAndInvRange.y;\nvec4 color = texture2D(u_gradient, vec2(density, 0.5));\ngl_FragColor = vec4(color.rgb * color.a, color.a);\n}", "heatmapResolve.vert": "precision highp float;\nattribute vec2 a_pos;\nvarying vec2 v_uv;\nvoid main() {\nv_uv = a_pos;\ngl_Position = vec4(a_pos * 2.0 - 1.0, 1., 1.);\n}" } }, highlight: { "blur.frag": "varying mediump vec2 v_texcoord;\nuniform mediump vec4 u_direction;\nuniform mediump mat4 u_channelSelector;\nuniform mediump float u_sigma;\nuniform sampler2D u_texture;\nmediump float gauss1(mediump vec2 dir) {\nreturn exp(-dot(dir, dir) / (2.0 * u_sigma * u_sigma));\n}\nmediump vec4 selectChannel(mediump vec4 sample) {\nreturn u_channelSelector * sample;\n}\nvoid accumGauss1(mediump float i, inout mediump float tot, inout mediump float weight) {\nmediump float w = gauss1(i * u_direction.xy);\ntot += selectChannel(texture2D(u_texture, v_texcoord + i * u_direction.zw))[3] * w;\nweight += w;\n}\nvoid main(void) {\nmediump float tot = 0.0;\nmediump float weight = 0.0;\naccumGauss1(-5.0, tot, weight);\naccumGauss1(-4.0, tot, weight);\naccumGauss1(-3.0, tot, weight);\naccumGauss1(-2.0, tot, weight);\naccumGauss1(-1.0, tot, weight);\naccumGauss1(0.0, tot, weight);\naccumGauss1(1.0, tot, weight);\naccumGauss1(2.0, tot, weight);\naccumGauss1(3.0, tot, weight);\naccumGauss1(4.0, tot, weight);\naccumGauss1(5.0, tot, weight);\ngl_FragColor = vec4(0.0, 0.0, 0.0, tot / weight);\n}", "highlight.frag": "varying mediump vec2 v_texcoord;\nuniform sampler2D u_texture;\nuniform mediump float u_sigma;\nuniform sampler2D u_shade;\nuniform mediump vec2 u_minMaxDistance;\nmediump float estimateDistance() {\nmediump float y = texture2D(u_texture, v_texcoord)[3];\nconst mediump float y0 = 0.5;\nmediump float m0 = 1.0 / (sqrt(2.0 * 3.1415) * u_sigma);\nmediump float d = (y - y0) / m0;\nreturn d;\n}\nmediump vec4 shade(mediump float d) {\nmediump float mappedDistance = (d - u_minMaxDistance.x) / (u_minMaxDistance.y - u_minMaxDistance.x);\nmappedDistance = clamp(mappedDistance, 0.0, 1.0);\nreturn texture2D(u_shade, vec2(mappedDistance, 0.5));\n}\nvoid main(void) {\nmediump float d = estimateDistance();\ngl_FragColor = shade(d);\n}", "textured.vert": "attribute mediump vec2 a_position;\nattribute mediump vec2 a_texcoord;\nvarying mediump vec2 v_texcoord;\nvoid main(void) {\ngl_Position = vec4(a_position, 0.0, 1.0);\nv_texcoord = a_texcoord;\n}" }, magnifier: { "magnifier.frag": "uniform lowp vec4 u_background;\nuniform mediump sampler2D u_readbackTexture;\nuniform mediump sampler2D u_maskTexture;\nuniform mediump sampler2D u_overlayTexture;\nuniform bool u_maskEnabled;\nuniform bool u_overlayEnabled;\nvarying mediump vec2 v_texCoord;\nconst lowp float barrelFactor = 1.1;\nlowp vec2 barrel(lowp vec2 uv) {\nlowp vec2 uvn = uv * 2.0 - 1.0;\nif (uvn.x == 0.0 && uvn.y == 0.0) {\nreturn vec2(0.5, 0.5);\n}\nlowp float theta = atan(uvn.y, uvn.x);\nlowp float r = pow(length(uvn), barrelFactor);\nreturn r * vec2(cos(theta), sin(theta)) * 0.5 + 0.5;\n}\nvoid main(void)\n{\nlowp vec4 color = texture2D(u_readbackTexture, barrel(v_texCoord));\ncolor = (color + (1.0 - color.a) * u_background);\nlowp float mask = u_maskEnabled ? texture2D(u_maskTexture, v_texCoord).a : 1.0;\ncolor *= mask;\nlowp vec4 overlayColor = u_overlayEnabled ? texture2D(u_overlayTexture, v_texCoord) : vec4(0);\ngl_FragColor = overlayColor + (1.0 - overlayColor.a) * color;\n}", "magnifier.vert": "precision mediump float;\nattribute mediump vec2 a_pos;\nuniform mediump vec4 u_drawPos;\nvarying mediump vec2 v_texCoord;\nvoid main(void)\n{\nv_texCoord = a_pos;\ngl_Position = vec4(u_drawPos.xy + vec2(a_pos - 0.5) * u_drawPos.zw, 0.0, 1.0);\n}" }, materials: { "attributeData.glsl": "uniform highp sampler2D u_attributeData0;\nuniform highp sampler2D u_attributeData1;\nuniform highp sampler2D u_attributeData2;\nuniform highp sampler2D u_attributeData3;\nuniform highp sampler2D u_attributeData4;\nuniform highp sampler2D u_attributeData5;\nuniform highp int u_attributeTextureSize;\nhighp vec2 getAttributeDataCoords(in highp vec3 id) {\nhighp vec3  texel = unpackDisplayIdTexel(id);\nhighp float size = float(u_attributeTextureSize);\nhighp float u32 = float(int(texel.r) + int(texel.g) * 256 + int(texel.b) * 256 * 256);\nhighp float col = mod(u32, size);\nhighp float row = (u32 - col) / size;\nhighp float u = col / size;\nhighp float v = row / size;\nreturn vec2(u, v);\n}\nhighp vec2 getAttributeDataTextureCoords(in highp vec3 id) {\nreturn (getAttributeDataCoords(id) * 2.0) - 1.0 + (.5 / vec2(u_attributeTextureSize));\n}\nhighp vec4 getAttributeData0(in highp vec3 id) {\nvec2 coords = getAttributeDataCoords(id);\nreturn texture2D(u_attributeData0, coords);\n}\nhighp vec4 getAttributeData1(in highp vec3 id) {\nhighp vec2 coords = getAttributeDataCoords(id);\nreturn texture2D(u_attributeData1, coords);\n}\nhighp vec4 getAttributeData2(in highp vec3 id) {\nhighp vec2 coords = getAttributeDataCoords(id);\nreturn texture2D(u_attributeData2, coords);\n}\nhighp vec4 getAttributeData3(in highp vec3 id) {\nhighp vec2 coords = getAttributeDataCoords(id);\nreturn texture2D(u_attributeData3, coords);\n}\nhighp vec4 getAttributeData4(in highp vec3 id) {\nhighp vec2 coords = getAttributeDataCoords(id);\nreturn texture2D(u_attributeData4, coords);\n}\nhighp vec4 getAttributeData5(in highp vec3 id) {\nhighp vec2 coords = getAttributeDataCoords(id);\nreturn texture2D(u_attributeData5, coords);\n}\nfloat u88VVToFloat(in vec2 v) {\nbool isMagic = v.x == 255.0 && v.y == 255.0;\nif (isMagic) {\nreturn NAN_MAGIC_NUMBER;\n}\nreturn (v.x + v.y * float(0x100)) - 32768.0;\n}", "barycentric.glsl": "float inTriangle(vec3 bary) {\nvec3 absBary = abs(bary);\nreturn step((absBary.x + absBary.y + absBary.z), 1.05);\n}\nvec3 xyToBarycentric(in vec2 pos, in vec2 v0,  in vec2 v1, in vec2 v2) {\nmat3 xyToBarycentricMat3 = mat3(\nv1.x * v2.y - v2.x * v1.y, v2.x * v0.y - v0.x * v2.y, v0.x * v1.y - v1.x * v0.y,\nv1.y - v2.y, v2.y - v0.y, v0.y - v1.y,\nv2.x - v1.x, v0.x - v2.x, v1.x - v0.x\n);\nfloat A2 = v0.x * (v1.y - v2.y) + v1.x * (v2.y - v0.y) + v2.x * (v0.y - v1.y);\nreturn (1. / A2) * xyToBarycentricMat3 * vec3(1., pos);\n}", "constants.glsl": "const float C_DEG_TO_RAD = 3.14159265359 / 180.0;\nconst float C_256_TO_RAD = 3.14159265359 / 128.0;\nconst float C_RAD_TO_DEG = 180.0 / 3.141592654;\nconst float POSITION_PRECISION = 1.0 / 8.0;\nconst float FILL_POSITION_PRECISION = 1.0 / 1.0;\nconst float SOFT_EDGE_RATIO = 1.0;\nconst float THIN_LINE_WIDTH_FACTOR = 1.1;\nconst float THIN_LINE_HALF_WIDTH = 1.0;\nconst float EXTRUDE_SCALE_PLACEMENT_PADDING = 1.0 / 4.0;\nconst float OFFSET_PRECISION = 1.0 / 8.0;\nconst float OUTLINE_SCALE = 1.0 / 5.0;\nconst float SDF_FONT_SIZE = 24.0;\nconst float MAX_SDF_DISTANCE = 8.0;\nconst float PLACEMENT_PADDING = 8.0;\nconst float EPSILON = 0.00001;\nconst float EPSILON_HITTEST = 0.05;\nconst int MAX_FILTER_COUNT = 2;\nconst int ATTR_VV_SIZE = 0;\nconst int ATTR_VV_COLOR = 1;\nconst int ATTR_VV_OPACITY = 2;\nconst int ATTR_VV_ROTATION = 3;\nconst highp float NAN_MAGIC_NUMBER = 1e-30;\nconst int BITSET_GENERIC_LOCK_COLOR = 1;\nconst int BITSET_GENERIC_CONSIDER_ALPHA_ONLY = 4;\nconst int BITSET_MARKER_ALIGNMENT_MAP = 0;\nconst int BITSET_MARKER_OUTLINE_ALLOW_COLOR_OVERRIDE = 2;\nconst int BITSET_MARKER_SCALE_SYMBOLS_PROPORTIONALLY = 3;\nconst int BITSET_TYPE_FILL_OUTLINE = 0;\nconst int BITSET_FILL_RANDOM_PATTERN_OFFSET = 2;\nconst int BITSET_FILL_HAS_UNRESOLVED_REPLACEMENT_COLOR = 3;\nconst int BITSET_FILL_HAS_PATTERN_HEIGHT_PRECISION_FACTOR = 5;\nconst int BITSET_FILL_HAS_PATTERN_WIDTH_PRECISION_FACTOR = 6;\nconst int BITSET_LINE_SCALE_DASH = 2;", fill: { "common.glsl": "#include <materials/symbologyTypeUtils.glsl>\n#ifdef PATTERN\nuniform mediump vec2 u_mosaicSize;\nvarying mediump float v_sampleAlphaOnly;\n#endif\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\nuniform lowp vec4 u_isActive[ 2 ];\nuniform highp float u_dotValue;\nuniform highp float u_tileDotsOverArea;\nuniform highp float u_dotTextureDotCount;\nuniform mediump float u_tileZoomFactor;\n#endif\nvarying highp vec3 v_id;\nvarying lowp vec4 v_color;\nvarying lowp float v_opacity;\nvarying mediump vec4 v_aux1;\n#ifdef PATTERN\nvarying mediump vec2 v_tileTextureCoord;\n#endif\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\nvarying lowp float v_isOutline;\n#endif\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\nvarying highp vec2 v_dotTextureCoords;\nvarying highp vec4 v_dotThresholds[ 2 ];\n#endif", "fill.frag": "precision highp float;\n#include <materials/constants.glsl>\n#include <materials/utils.glsl>\n#include <materials/fill/common.glsl>\n#ifdef PATTERN\nuniform lowp sampler2D u_texture;\n#endif\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\nuniform mediump mat4 u_dotColors[ 2 ];\nuniform sampler2D u_dotTextures[ 2 ];\nuniform vec4 u_dotBackgroundColor;\n#endif\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\n#include <materials/shared/line/common.glsl>\n#include <materials/shared/line/line.frag>\nlowp vec4 drawLine() {\nfloat v_lineWidth = v_aux1.x;\nvec2  v_normal    = v_aux1.yz;\nLineData inputs = LineData(\nv_color,\nv_normal,\nv_lineWidth,\nv_opacity,\nv_id\n);\nreturn shadeLine(inputs);\n}\n#endif\nlowp vec4 drawFill() {\nlowp vec4 out_color = vec4(0.);\n#ifdef HITTEST\nout_color = v_color;\n#elif defined(PATTERN)\nmediump vec4 v_tlbr = v_aux1;\nmediump vec2 normalizedTextureCoord = mod(v_tileTextureCoord, 1.0);\nmediump vec2 samplePos = mix(v_tlbr.xy, v_tlbr.zw, normalizedTextureCoord);\nlowp vec4 color = texture2D(u_texture, samplePos);\nif (v_sampleAlphaOnly > 0.5) {\ncolor.rgb = vec3(color.a);\n}\nout_color = v_opacity * v_color * color;\n#elif SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY && !defined(HIGHLIGHT)\nvec4 textureThresholds0 = texture2D(u_dotTextures[0], v_dotTextureCoords);\nvec4 textureThresholds1 = texture2D(u_dotTextures[1], v_dotTextureCoords);\nvec4 difference0 = v_dotThresholds[0] - textureThresholds0;\nvec4 difference1 = v_dotThresholds[1] - textureThresholds1;\n#ifdef DD_DOT_BLENDING\nvec4 isPositive0 = step(0.0, difference0);\nvec4 isPositive1 = step(0.0, difference1);\nfloat weightSum = dot(isPositive0, difference0) + dot(isPositive1, difference1);\nfloat lessThanEqZero = step(weightSum, 0.0);\nfloat greaterThanZero = 1.0 - lessThanEqZero ;\nfloat divisor = (weightSum + lessThanEqZero);\nvec4 weights0 = difference0 * isPositive0 / divisor;\nvec4 weights1 = difference1 * isPositive1 / divisor;\nvec4 dotColor = u_dotColors[0] * weights0 + u_dotColors[1] * weights1;\nvec4 preEffectColor = greaterThanZero * dotColor + lessThanEqZero * u_dotBackgroundColor;\n#else\nfloat diffMax = max(max4(difference0), max4(difference1));\nfloat lessThanZero = step(diffMax, 0.0);\nfloat greaterOrEqZero = 1.0 - lessThanZero;\nvec4 isMax0 = step(diffMax, difference0);\nvec4 isMax1 = step(diffMax, difference1);\nvec4 dotColor = u_dotColors[0] * isMax0 + u_dotColors[1] * isMax1;\nvec4 preEffectColor = greaterOrEqZero * dotColor + lessThanZero * u_dotBackgroundColor;\n#endif\nout_color = preEffectColor;\n#else\nout_color = v_opacity * v_color;\n#endif\n#ifdef HIGHLIGHT\nout_color.a = 1.0;\n#endif\nreturn out_color;\n}\nvoid main() {\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\nif (v_isOutline > 0.5) {\ngl_FragColor = drawLine();\n} else {\ngl_FragColor = drawFill();\n}\n#else\ngl_FragColor = drawFill();\n#endif\n}", "fill.vert": "#include <materials/symbologyTypeUtils.glsl>\n#define PACKED_LINE\nprecision highp float;\nattribute float a_bitset;\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\nattribute float a_inverseArea;\nvec4 a_color = vec4(0.0, 0.0, 0.0, 1.0);\nvec2 a_zoomRange = vec2(0.0, 10000.0);\n#else\nattribute vec4 a_color;\nattribute vec4 a_aux2;\nattribute vec4 a_aux3;\n#ifndef SYMBOLOGY_TYPE_IS_SIMPLE_LIKE\nattribute vec4 a_aux1;\nattribute vec2 a_zoomRange;\n#else\nvec2 a_zoomRange = vec2(0.0, 10000.0);\n#endif\n#endif\nuniform vec2 u_tileOffset;\nuniform vec2 u_maxIntNumOfCrossing;\n#include <util/encoding.glsl>\n#include <materials/vcommon.glsl>\n#include <materials/fill/common.glsl>\n#include <materials/fill/hittest.glsl>\nconst float INV_SCALE_COMPRESSION_FACTOR = 1.0 / 128.0;\nconst float MAX_REPRESENTABLE_INT = 16777216.0;\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\nvec4 dotThreshold(vec4 featureAttrOverFeatureArea, float dotValue, float tileDotsOverArea) {\nreturn featureAttrOverFeatureArea * (1.0 / dotValue)  * (1.0 / tileDotsOverArea);\n}\n#endif\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\n#include <materials/shared/line/common.glsl>\n#include <materials/shared/line/line.vert>\nvoid drawLine(out lowp vec4 out_color, out highp vec3 out_pos) {\nLineData outputs = buildLine(\nout_pos,\na_id,\na_pos,\na_color,\n(a_aux3.xy - 128.) / 16.,\n(a_aux3.zw - 128.) / 16.,\n0.,\na_aux2.z / 16.,\na_bitset,\nvec4(0.),\nvec2(0.),\na_aux2.w / 16.\n);\nv_id      = outputs.id;\nv_opacity = outputs.opacity;\nv_aux1    = vec4(outputs.lineHalfWidth, outputs.normal, 0.);\nout_color = outputs.color;\n}\n#endif\nvoid drawFill(out lowp vec4 out_color, out highp vec3 out_pos) {\nfloat a_bitSet = a_bitset;\nout_color = getColor(a_color, a_bitSet, BITSET_GENERIC_LOCK_COLOR);\nv_opacity = getOpacity();\nv_id      = norm(a_id);\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\nmat3 tileToTileNormalized = mat3(  2. / 512.,  0.,  0.,\n0., -2. / 512.,  0.,\n-1.,  1.,  1.  );\nout_pos   = tileToTileNormalized * vec3((a_pos * FILL_POSITION_PRECISION), 1.);\n#else\nout_pos   = u_dvsMat3 * vec3(a_pos * FILL_POSITION_PRECISION, 1.);\n#endif\n#ifdef PATTERN\nvec4  a_tlbr   = a_aux1;\nfloat a_width  = a_aux2.x;\nfloat a_height = a_aux2.y;\nvec2  a_offset = a_aux2.zw;\nvec2  a_scale  = a_aux3.xy;\nfloat a_angle  = a_aux3.z;\nif (getBit(a_bitset, BITSET_FILL_HAS_PATTERN_WIDTH_PRECISION_FACTOR) > 0.5) {\na_width *= INV_SCALE_COMPRESSION_FACTOR;\n}\nif (getBit(a_bitset, BITSET_FILL_HAS_PATTERN_HEIGHT_PRECISION_FACTOR) > 0.5) {\na_height *= INV_SCALE_COMPRESSION_FACTOR;\n}\nvec2 scale = INV_SCALE_COMPRESSION_FACTOR * a_scale;\nfloat width = u_zoomFactor * a_width * scale.x;\nfloat height = u_zoomFactor * a_height * scale.y;\nfloat angle = C_256_TO_RAD * a_angle;\nfloat sinA = sin(angle);\nfloat cosA = cos(angle);\nfloat dx = 0.0;\nfloat dy = 0.0;\nif (getBit(a_bitset, BITSET_FILL_RANDOM_PATTERN_OFFSET) > 0.5) {\nfloat id = rgba2float(vec4(a_id, 0.0));\ndx = rand(vec2(id, 0.0));\ndy = rand(vec2(0.0, id));\n}\nmat3 patternMatrix = mat3(cosA / width, sinA / height, 0,\n-sinA / width, cosA / height, 0,\ndx,            dy,           1);\nvec2 patternSize = vec2(a_width, a_height);\nvec2 numPatternsPerMaxInt = vec2(MAX_REPRESENTABLE_INT) / patternSize;\nvec2 maxIntCrossingOffsetCorrection = patternSize * fract(u_maxIntNumOfCrossing * numPatternsPerMaxInt);\nvec2 tileOffset = u_tileOffset + maxIntCrossingOffsetCorrection - 0.5 * patternSize;\ntileOffset = vec2(tileOffset.x * cosA - tileOffset.y * sinA, tileOffset.x * sinA + tileOffset.y * cosA);\ntileOffset = mod(tileOffset, patternSize);\nvec2 symbolOffset = u_zoomFactor * scale * vec2(a_offset - tileOffset) / vec2(width, height);\nv_tileTextureCoord = (patternMatrix * vec3(a_pos * FILL_POSITION_PRECISION, 1.0)).xy - symbolOffset;\nv_aux1 = a_tlbr / u_mosaicSize.xyxy;\nv_sampleAlphaOnly = getBit(a_bitset, BITSET_GENERIC_CONSIDER_ALPHA_ONLY);\nif (getBit(a_bitSet, BITSET_FILL_HAS_UNRESOLVED_REPLACEMENT_COLOR) > 0.5) {\n#ifdef VV_COLOR\nv_sampleAlphaOnly *= (1.0 - float(isNan(VV_ADATA[ATTR_VV_COLOR]))) * (1.0 - getBit(a_bitSet, BITSET_GENERIC_LOCK_COLOR));\n#else\nv_sampleAlphaOnly = 0.0;\n#endif\n}\n#elif SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\nvec4 ddAttributeData0 = getAttributeData2(a_id) * u_isActive[0] * a_inverseArea;\nvec4 ddAttributeData1 = getAttributeData3(a_id) * u_isActive[1] * a_inverseArea;\nfloat size = u_tileZoomFactor * 512.0 * 1.0 / u_pixelRatio;\nv_dotThresholds[0] = dotThreshold(ddAttributeData0, u_dotValue, u_tileDotsOverArea);\nv_dotThresholds[1] = dotThreshold(ddAttributeData1, u_dotValue, u_tileDotsOverArea);\nv_dotTextureCoords = (a_pos * FILL_POSITION_PRECISION + 0.5) / size;\n#endif\n}\n#ifdef HITTEST\nvoid draw(out lowp vec4 out_color, out highp vec3 out_pos) {\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\nif (getBit(a_bitset, BITSET_TYPE_FILL_OUTLINE) > 0.5) {\nout_pos = vec3(0., 0., 2.);\nreturn;\n}\n#endif\nhittestFill(out_color, out_pos);\ngl_PointSize = 1.0;\n}\n#elif defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE)\nvoid draw(out lowp vec4 out_color, out highp vec3 out_pos) {\nv_isOutline = getBit(a_bitset, BITSET_TYPE_FILL_OUTLINE);\nif (v_isOutline > 0.5) {\ndrawLine(out_color, out_pos);\n} else {\ndrawFill(out_color, out_pos);\n}\n}\n#else\n#define draw drawFill\n#endif\nvoid main()\n{\nINIT;\nhighp vec3 pos  = vec3(0.);\nhighp vec4 color  = vec4(0.);\ndraw(color, pos);\nv_color = color;\ngl_Position = vec4(clip(v_color, pos, getFilterFlags(), a_zoomRange), 1.0);\n}", "hittest.glsl": "#ifdef HITTEST\n#include <materials/hittest/common.glsl>\nattribute vec2 a_pos1;\nattribute vec2 a_pos2;\nvoid hittestFill(\nout lowp vec4 out_color,\nout highp vec3 out_pos\n) {\nvec3 pos        = u_viewMat3 * u_tileMat3 * vec3(a_pos  * FILL_POSITION_PRECISION, 1.);\nvec3 pos1       = u_viewMat3 * u_tileMat3 * vec3(a_pos1 * FILL_POSITION_PRECISION, 1.);\nvec3 pos2       = u_viewMat3 * u_tileMat3 * vec3(a_pos2 * FILL_POSITION_PRECISION, 1.);\nfloat hittestDist = u_hittestDist;\nfloat dist = distPointTriangle(u_hittestPos, pos.xy, pos1.xy, pos2.xy);\nout_pos = vec3(getAttributeDataTextureCoords(a_id), 0.0);\nif (dist < 0. || dist >= hittestDist) {\nout_pos.z += 2.0;\n}\nout_color = vec4(1. / 255., 0, 0, dist == 0. ? (1. / 255.) : 0.);\n}\n#endif" }, hittest: { "common.glsl": "#ifdef HITTEST\nuniform float u_hittestDist;\nuniform highp vec2 u_hittestPos;\nfloat projectScalar(vec2 a, vec2 b) {\nreturn dot(a, normalize(b));\n}\nfloat distPointSegment(vec2 p0, vec2 p1, vec2 p2) {\nvec2 L = p2 - p1;\nvec2 A = p0 - p1;\nfloat projAL = projectScalar(A, L);\nfloat t = clamp(projAL / length(L), 0., 1.);\nreturn distance(p0, p1 + t * (p2 - p1));\n}\nvoid hittestMarker(out lowp vec4 out_color, out highp vec3 out_pos, in highp vec3 pos, float size) {\nfloat dist = distance(pos, vec3(u_hittestPos, 1.));\nout_pos = vec3(getAttributeDataTextureCoords(a_id), 0.0);\nif ((dist - size) > u_hittestDist) {\nout_pos.z += 2.0;\n}\nout_color = vec4(1. / 255., 0, 0, (dist - size) < 0. ? (1. / 255.) : 0.);\n}\nfloat intersectPointTriangleBary(vec2 p, vec2 a, vec2 b, vec2 c) {\nreturn inTriangle(xyToBarycentric(p, a, b, c));\n}\nfloat distPointTriangle(vec2 p, vec2 a, vec2 b, vec2 c) {\nvec2 ba = b - a;\nvec2 ca = c - a;\nfloat crossProduct = ba.x * ca.y - ca.x * ba.y;\nbool isParallel = crossProduct < EPSILON_HITTEST && crossProduct > -EPSILON_HITTEST;\nif (isParallel) {\nreturn -1.;\n}\nif (intersectPointTriangleBary(p.xy, a, b, c) == 1.) {\nreturn 0.;\n}\nfloat distAB = distPointSegment(p, a, b);\nfloat distBC = distPointSegment(p, b, c);\nfloat distCA = distPointSegment(p, c, a);\nreturn min(min(distAB, distBC), distCA);\n}\n#endif" }, icon: { "common.glsl": "#include <util/encoding.glsl>\nuniform lowp vec2 u_mosaicSize;\nvarying lowp vec4 v_color;\nvarying highp vec3 v_id;\nvarying highp vec4 v_sizeTex;\nvarying mediump vec3 v_pos;\nvarying lowp float v_opacity;\nuniform lowp sampler2D u_texture;\n#ifdef SDF\nvarying lowp vec4 v_outlineColor;\nvarying mediump float v_outlineWidth;\nvarying mediump float v_distRatio;\nvarying mediump float v_overridingOutlineColor;\nvarying mediump float v_isThin;\n#endif\n#ifdef SDF\nvec4 getColor(vec2 v_size, vec2 v_tex) {\nlowp vec4 fillPixelColor = v_color;\nfloat d = 0.5 - rgba2float(texture2D(u_texture, v_tex));\nfloat size = max(v_size.x, v_size.y);\nfloat dist = d * size * SOFT_EDGE_RATIO * v_distRatio;\nfillPixelColor *= clamp(0.5 - dist, 0.0, 1.0);\nfloat outlineWidth = v_outlineWidth;\n#ifdef HIGHLIGHT\noutlineWidth = max(outlineWidth, 4.0 * v_isThin);\n#endif\nif (outlineWidth > 0.25) {\nlowp vec4 outlinePixelColor = v_overridingOutlineColor * v_color + (1.0 - v_overridingOutlineColor) * v_outlineColor;\nfloat clampedOutlineSize = min(outlineWidth, size);\noutlinePixelColor *= clamp(0.5 - abs(dist) + clampedOutlineSize * 0.5, 0.0, 1.0);\nreturn v_opacity * ((1.0 - outlinePixelColor.a) * fillPixelColor + outlinePixelColor);\n}\nreturn v_opacity * fillPixelColor;\n}\n#else\nvec4 getColor(vec2 _v_size, vec2 v_tex) {\nlowp vec4 texColor = texture2D(u_texture, v_tex);\nreturn v_opacity * texColor * v_color;\n}\n#endif", heatmapAccumulate: { "common.glsl": "varying lowp vec4 v_hittestResult;\nvarying mediump vec2 v_offsetFromCenter;\nvarying highp float v_fieldValue;", "heatmapAccumulate.frag": "precision mediump float;\n#include <materials/icon/heatmapAccumulate/common.glsl>\n#ifdef HEATMAP_PRECISION_HALF_FLOAT\n#define COMPRESSION_FACTOR 0.25\n#else\n#define COMPRESSION_FACTOR 1.0\n#endif\nuniform lowp sampler2D u_texture;\nvoid main() {\n#ifdef HITTEST\ngl_FragColor = v_hittestResult;\n#else\nfloat radius = length(v_offsetFromCenter);\nfloat shapeWeight = step(radius, 1.0);\nfloat oneMinusRadiusSquared = 1.0 - radius * radius;\nfloat kernelWeight = oneMinusRadiusSquared * oneMinusRadiusSquared;\ngl_FragColor = vec4(shapeWeight * kernelWeight * v_fieldValue * COMPRESSION_FACTOR);\n#endif\n}", "heatmapAccumulate.vert": "precision highp float;\nattribute vec2 a_vertexOffset;\nvec4 a_color = vec4(0.0);\nvec2 a_zoomRange = vec2(0.0, 10000.0);\nuniform float u_radius;\nuniform float u_isFieldActive;\n#include <materials/vcommon.glsl>\n#include <materials/hittest/common.glsl>\n#include <materials/icon/heatmapAccumulate/common.glsl>\nvoid main() {\nfloat filterFlags = getFilterFlags();\n#ifdef HITTEST\nhighp vec4 out_hittestResult = vec4(0.);\nhighp vec3 out_pos = vec3(0.);\nvec3 pos = u_viewMat3 * u_tileMat3 * vec3(a_pos * POSITION_PRECISION, 1.0);\nhittestMarker(out_hittestResult, out_pos, pos, u_radius);\nv_hittestResult = out_hittestResult;\ngl_PointSize = 1.;\ngl_Position = vec4(clip(a_color, out_pos, filterFlags, a_zoomRange), 1.0);\n#else\nv_offsetFromCenter = sign(a_vertexOffset);\nv_fieldValue = getAttributeData2(a_id).x * u_isFieldActive + 1.0 - u_isFieldActive;\nvec3 centerPos = u_dvsMat3 * vec3(a_pos * POSITION_PRECISION, 1.0);\nvec3 vertexPos = centerPos + u_displayViewMat3 * vec3(v_offsetFromCenter, 0.0) * u_radius;\ngl_Position = vec4(clip(a_color, vertexPos, filterFlags, a_zoomRange), 1.0);\n#endif\n}" }, "hittest.glsl": "#ifdef HITTEST\n#include <materials/hittest/common.glsl>\nattribute vec2 a_vertexOffset1;\nattribute vec2 a_vertexOffset2;\nattribute vec2 a_texCoords1;\nattribute vec2 a_texCoords2;\nvec2 getTextureCoords(in vec3 bary, in vec2 texCoords0, in vec2 texCoords1, in vec2 texCoords2) {\nreturn texCoords0 * bary.x + texCoords1 * bary.y + texCoords2 * bary.z;\n}\nvoid hittestIcon(\ninout lowp vec4 out_color,\nout highp vec3 out_pos,\nin vec3 pos,\nin vec3 offset,\nin vec2 size,\nin float scaleFactor,\nin float isMapAligned\n) {\nout_pos = vec3(getAttributeDataTextureCoords(a_id), 0.0);\nvec3 posBase = u_viewMat3 * u_tileMat3  * pos;\nvec3 offset1 = scaleFactor * vec3(a_vertexOffset1 / 16.0, 0.);\nvec3 offset2 = scaleFactor * vec3(a_vertexOffset2 / 16.0, 0.);\nvec2 pos0    = (posBase + getMatrixNoDisplay(isMapAligned) * offset).xy;\nvec2 pos1    = (posBase + getMatrixNoDisplay(isMapAligned) * offset1).xy;\nvec2 pos2    = (posBase + getMatrixNoDisplay(isMapAligned) * offset2).xy;\nvec3 bary0 = xyToBarycentric(u_hittestPos + vec2(-u_hittestDist, -u_hittestDist), pos0, pos1, pos2);\nvec3 bary1 = xyToBarycentric(u_hittestPos + vec2(0., -u_hittestDist), pos0, pos1, pos2);\nvec3 bary2 = xyToBarycentric(u_hittestPos + vec2(u_hittestDist, -u_hittestDist), pos0, pos1, pos2);\nvec3 bary3 = xyToBarycentric(u_hittestPos + vec2(-u_hittestDist, 0.), pos0, pos1, pos2);\nvec3 bary4 = xyToBarycentric(u_hittestPos, pos0, pos1, pos2);\nvec3 bary5 = xyToBarycentric(u_hittestPos + vec2(u_hittestDist, 0.), pos0, pos1, pos2);\nvec3 bary6 = xyToBarycentric(u_hittestPos + vec2(-u_hittestDist, u_hittestDist), pos0, pos1, pos2);\nvec3 bary7 = xyToBarycentric(u_hittestPos + vec2(0., u_hittestDist), pos0, pos1, pos2);\nvec3 bary8 = xyToBarycentric(u_hittestPos + vec2(u_hittestDist, u_hittestDist), pos0, pos1, pos2);\nvec2 tex0 = a_texCoords  / u_mosaicSize;\nvec2 tex1 = a_texCoords1 / u_mosaicSize;\nvec2 tex2 = a_texCoords2 / u_mosaicSize;\nfloat alphaSum = 0.;\nalphaSum += inTriangle(bary0) * getColor(size, getTextureCoords(bary0, tex0, tex1, tex2)).a;\nalphaSum += inTriangle(bary1) * getColor(size, getTextureCoords(bary1, tex0, tex1, tex2)).a;\nalphaSum += inTriangle(bary2) * getColor(size, getTextureCoords(bary2, tex0, tex1, tex2)).a;\nalphaSum += inTriangle(bary3) * getColor(size, getTextureCoords(bary3, tex0, tex1, tex2)).a;\nalphaSum += inTriangle(bary4) * getColor(size, getTextureCoords(bary4, tex0, tex1, tex2)).a;\nalphaSum += inTriangle(bary5) * getColor(size, getTextureCoords(bary5, tex0, tex1, tex2)).a;\nalphaSum += inTriangle(bary6) * getColor(size, getTextureCoords(bary6, tex0, tex1, tex2)).a;\nalphaSum += inTriangle(bary7) * getColor(size, getTextureCoords(bary7, tex0, tex1, tex2)).a;\nout_pos.z += step(alphaSum, .05) * 2.0;\nout_color = vec4(1. / 255., 0., 0., alphaSum / 255.);\n}\n#endif", "icon.frag": "precision mediump float;\n#include <materials/constants.glsl>\n#include <materials/utils.glsl>\n#include <materials/icon/common.glsl>\nvoid main()\n{\n#ifdef HITTEST\nvec4 color = v_color;\n#else\nvec4 color = getColor(v_sizeTex.xy, v_sizeTex.zw);\n#endif\n#ifdef HIGHLIGHT\ncolor.a = step(1.0 / 255.0, color.a);\n#endif\ngl_FragColor = color;\n}", "icon.vert": "precision highp float;\nattribute vec4 a_color;\nattribute vec4 a_outlineColor;\nattribute vec4 a_sizeAndOutlineWidth;\nattribute vec2 a_vertexOffset;\nattribute vec2 a_texCoords;\nattribute vec2 a_bitSetAndDistRatio;\nattribute vec2 a_zoomRange;\n#include <materials/vcommon.glsl>\n#include <materials/icon/common.glsl>\n#include <materials/icon/hittest.glsl>\nfloat getMarkerScaleFactor(inout vec2 size, in float referenceSize) {\n#ifdef VV_SIZE\nfloat f = getSize(size.y) / size.y;\nfloat sizeFactor = size.y / referenceSize;\nreturn getSize(referenceSize) / referenceSize;\n#else\nreturn 1.;\n#endif\n}\nvoid main()\n{\nINIT;\nfloat a_bitSet = a_bitSetAndDistRatio.x;\nvec3  pos           = vec3(a_pos * POSITION_PRECISION, 1.0);\nvec2  size          = a_sizeAndOutlineWidth.xy * a_sizeAndOutlineWidth.xy / 128.0;\nvec3  offset        = vec3(a_vertexOffset / 16.0, 0.);\nfloat outlineSize   = a_sizeAndOutlineWidth.z * a_sizeAndOutlineWidth.z / 128.0;\nfloat isMapAligned  = getBit(a_bitSet, BITSET_MARKER_ALIGNMENT_MAP);\nfloat referenceSize = a_sizeAndOutlineWidth.w * a_sizeAndOutlineWidth.w / 128.0;\nfloat scaleSymbolProportionally = getBit(a_bitSet, BITSET_MARKER_SCALE_SYMBOLS_PROPORTIONALLY);\nfloat scaleFactor               = getMarkerScaleFactor(size, referenceSize);\nsize.xy     *= scaleFactor;\noffset.xy   *= scaleFactor;\noutlineSize *= scaleSymbolProportionally * (scaleFactor - 1.0) + 1.0;\nvec2 v_tex   = a_texCoords / u_mosaicSize;\nfloat filterFlags = getFilterFlags();\nv_color    = getColor(a_color, a_bitSet, BITSET_GENERIC_LOCK_COLOR);\nv_opacity  = getOpacity();\nv_id       = norm(a_id);\nv_pos      = u_dvsMat3 * pos + getMatrix(isMapAligned) * getRotation()  * offset;\nv_sizeTex  = vec4(size.xy, v_tex.xy);\n#ifdef SDF\nv_isThin   = getBit(a_bitSet, BITSET_MARKER_OUTLINE_ALLOW_COLOR_OVERRIDE);\n#ifdef VV_COLOR\nv_overridingOutlineColor = v_isThin;\n#else\nv_overridingOutlineColor = 0.0;\n#endif\nv_outlineWidth = min(outlineSize, max(max(size.x, size.y) - 0.99, 0.0));\nv_outlineColor = a_outlineColor;\nv_distRatio = a_bitSetAndDistRatio.y / 128.0;\n#endif\n#ifdef HITTEST\nhighp vec4 out_color = vec4(0.);\nhighp vec3 out_pos   = vec3(0.);\nhittestIcon(out_color, out_pos, pos, offset, size, scaleFactor, isMapAligned);\nv_color = out_color;\ngl_PointSize = 1.;\ngl_Position = vec4(clip(v_color, out_pos, filterFlags, a_zoomRange), 1.0);\n#else\ngl_Position = vec4(clip(v_color, v_pos, filterFlags, a_zoomRange), 1.0);\n#endif\n}" }, label: { "common.glsl": "uniform mediump float u_zoomLevel;\nuniform mediump float u_mapRotation;\nuniform mediump float u_mapAligned;\nuniform mediump vec2 u_mosaicSize;\nvarying mediump float v_antialiasingWidth;\nvarying mediump float v_edgeDistanceOffset;\nvarying mediump vec2 v_tex;\nvarying mediump vec4 v_color;\nvarying lowp vec4 v_animation;", "label.frag": "#include <materials/text/text.frag>", "label.vert": "precision highp float;\n#include <materials/vcommon.glsl>\n#include <materials/text/common.glsl>\nattribute vec4 a_color;\nattribute vec4 a_haloColor;\nattribute vec4 a_texAndSize;\nattribute vec4 a_refSymbolAndPlacementOffset;\nattribute vec4 a_glyphData;\nattribute vec2 a_vertexOffset;\nattribute vec2 a_texCoords;\nuniform float u_isHaloPass;\nuniform float u_isBackgroundPass;\nuniform float u_mapRotation;\nuniform float u_mapAligned;\nfloat getZ(in float minZoom, in float maxZoom, in float angle) {\nfloat glyphAngle = angle * 360.0 / 254.0;\nfloat mapAngle = u_mapRotation * 360.0 / 254.0;\nfloat diffAngle = min(360.0 - abs(mapAngle - glyphAngle), abs(mapAngle - glyphAngle));\nfloat z = 0.0;\nz += u_mapAligned * (2.0 * (1.0 - step(minZoom, u_currentZoom)));\nz += u_mapAligned * 2.0 * step(90.0, diffAngle);\nz += 2.0 * (1.0 - step(u_currentZoom, maxZoom));\nreturn z;\n}\nvoid main()\n{\nINIT;\nfloat groupMinZoom    = getMinZoom();\nfloat glyphMinZoom    = a_glyphData.x;\nfloat glyphMaxZoom    = a_glyphData.y;\nfloat glyphAngle      = a_glyphData.z;\nfloat a_isBackground  = a_glyphData.w;\nfloat a_minZoom          = max(groupMinZoom, glyphMinZoom);\nfloat a_placementPadding = a_refSymbolAndPlacementOffset.x * EXTRUDE_SCALE_PLACEMENT_PADDING;\nvec2  a_placementDir     = unpack_u8_nf32(a_refSymbolAndPlacementOffset.zw);\nfloat a_refSymbolSize    = a_refSymbolAndPlacementOffset.y;\nfloat fontSize           = a_texAndSize.z;\nfloat haloSize           = a_texAndSize.w * OUTLINE_SCALE;\nvec2  vertexOffset = a_vertexOffset * OFFSET_PRECISION;\nvec3  pos          = vec3(a_pos * POSITION_PRECISION, 1.0);\nfloat z            = getZ(a_minZoom, glyphMaxZoom, glyphAngle);\nfloat fontScale    = fontSize / SDF_FONT_SIZE;\nfloat halfSize     = getSize(a_refSymbolSize) / 2.0;\nfloat animation    = pow(getAnimationState(), vec4(2.0)).r;\nfloat isText = 1.0 - a_isBackground;\nfloat isBackground = u_isBackgroundPass * a_isBackground;\nvec4  nonHaloColor = (isBackground + isText) * a_color;\nv_color     = animation * ((1.0 - u_isHaloPass) * nonHaloColor + (u_isHaloPass * a_haloColor));\nv_opacity   = 1.0;\nv_tex       = a_texCoords / u_mosaicSize;\nv_edgeDistanceOffset = u_isHaloPass * haloSize / fontScale / MAX_SDF_DISTANCE;\nv_antialiasingWidth  = 0.105 * SDF_FONT_SIZE / fontSize / u_pixelRatio;\nvec2 placementOffset = a_placementDir * (halfSize + a_placementPadding);\nvec3 glyphOffset     = u_displayMat3 * vec3(vertexOffset + placementOffset, 0.0);\nvec3 v_pos           = vec3((u_dvsMat3 * pos + glyphOffset).xy, z);\nfloat isHidden = u_isBackgroundPass * isText + (1.0 - u_isBackgroundPass) * a_isBackground;\nv_pos.z += 2.0 * isHidden;\ngl_Position = vec4(v_pos, 1.0);\n#ifdef DEBUG\nv_color = vec4(a_color.rgb, z == 0.0 ? 1.0 : 0.645);\n#endif\n}" }, line: { "common.glsl": "varying lowp vec4 v_color;\nvarying highp vec3 v_id;\nvarying mediump vec2 v_normal;\nvarying mediump float v_lineHalfWidth;\nvarying lowp float v_opacity;\n#ifdef PATTERN\nvarying mediump vec4 v_tlbr;\nvarying mediump vec2 v_patternSize;\n#endif\n#if defined(PATTERN) || defined(SDF)\nvarying highp float v_accumulatedDistance;\n#endif\n#ifdef SDF\nvarying mediump float v_lineWidthRatio;\n#endif", "hittest.glsl": "#include <materials/hittest/common.glsl>\n#ifdef HITTEST\nattribute vec2 a_pos1;\nattribute vec2 a_pos2;\nvoid hittestLine(out lowp vec4 out_color, out highp vec3 out_pos, float halfWidth) {\nvec3 pos        = u_viewMat3 * u_tileMat3 * vec3(a_pos  * POSITION_PRECISION, 1.);\nvec3 pos1       = u_viewMat3 * u_tileMat3 * vec3(a_pos1 * POSITION_PRECISION, 1.);\nvec3 pos2       = u_viewMat3 * u_tileMat3 * vec3(a_pos2 * POSITION_PRECISION, 1.);\nvec3 outTextureCoords = vec3(getAttributeDataTextureCoords(a_id), 0.0);\nfloat dist = min(distPointSegment(u_hittestPos, pos.xy, pos1.xy),\ndistPointSegment(u_hittestPos, pos.xy, pos2.xy)) - halfWidth;\nout_pos = vec3(getAttributeDataTextureCoords(a_id), 0.0);\nif (dist >= u_hittestDist) {\nout_pos.z += 2.0;\n}\nout_color = vec4(1. / 255., 0, 0, dist <= 0. ? (1. / 255.) : 0.);\n}\n#endif", "line.frag": "precision lowp float;\n#include <util/encoding.glsl>\n#include <materials/constants.glsl>\n#include <materials/symbologyTypeUtils.glsl>\n#include <materials/line/common.glsl>\n#include <materials/shared/line/common.glsl>\n#include <materials/shared/line/line.frag>\n#ifdef HITTEST\nvoid main() {\ngl_FragColor = v_color;\n}\n#else\nvoid main() {\nLineData inputs = LineData(\nv_color,\nv_normal,\nv_lineHalfWidth,\nv_opacity,\n#ifndef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\n#ifdef PATTERN\nv_tlbr,\nv_patternSize,\n#endif\n#ifdef SDF\nv_lineWidthRatio,\n#endif\n#if defined(PATTERN) || defined(SDF)\nv_accumulatedDistance,\n#endif\n#endif\nv_id\n);\ngl_FragColor = shadeLine(inputs);\n}\n#endif", "line.vert": "precision highp float;\nattribute vec4 a_color;\nattribute vec4 a_offsetAndNormal;\nattribute vec2 a_accumulatedDistanceAndHalfWidth;\nattribute vec4 a_tlbr;\nattribute vec4 a_segmentDirection;\nattribute vec2 a_aux;\nattribute vec2 a_zoomRange;\n#include <materials/vcommon.glsl>\n#include <materials/symbologyTypeUtils.glsl>\n#include <materials/line/common.glsl>\n#include <materials/line/hittest.glsl>\n#include <materials/shared/line/common.glsl>\n#include <materials/shared/line/line.vert>\n#ifdef HITTEST\nvoid draw() {\nfloat aa        = 0.5 * u_antialiasing;\nfloat a_halfWidth = a_accumulatedDistanceAndHalfWidth.y / 16.;\nfloat a_cimHalfWidth = a_aux.x / 16. ;\nvec2  a_offset = a_offsetAndNormal.xy / 16.;\nfloat baseWidth = getBaseLineHalfWidth(a_halfWidth, a_cimHalfWidth);\nfloat halfWidth = getLineHalfWidth(baseWidth, aa);\nhighp vec3 pos  = vec3(0.);\nv_color = vec4(0.);\nhittestLine(v_color, pos, halfWidth);\ngl_PointSize = 1.;\ngl_Position = vec4(clip(v_color, pos, getFilterFlags(), a_zoomRange), 1.0);\n}\n#else\nvoid draw()\n{\nhighp vec3 pos = vec3(0.);\nLineData outputs = buildLine(\npos,\na_id,\na_pos,\na_color,\na_offsetAndNormal.xy / 16.,\na_offsetAndNormal.zw / 16.,\na_accumulatedDistanceAndHalfWidth.x,\na_accumulatedDistanceAndHalfWidth.y / 16.,\na_segmentDirection.w,\na_tlbr,\na_segmentDirection.xy / 16.,\na_aux.x / 16.\n);\nv_id              = outputs.id;\nv_color           = outputs.color;\nv_normal          = outputs.normal;\nv_lineHalfWidth   = outputs.lineHalfWidth;\nv_opacity         = outputs.opacity;\n#ifndef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\n#ifdef PATTERN\nv_tlbr          = outputs.tlbr;\nv_patternSize   = outputs.patternSize;\n#endif\n#ifdef SDF\nv_lineWidthRatio = outputs.lineWidthRatio;\n#endif\n#if defined(PATTERN) || defined(SDF)\nv_accumulatedDistance = outputs.accumulatedDistance;\n#endif\n#endif\ngl_Position = vec4(clip(outputs.color, pos, getFilterFlags(), a_zoomRange), 1.0);\n}\n#endif\nvoid main() {\nINIT;\ndraw();\n}" }, pie: { "pie.frag": "precision mediump float;\n#include <util/atan2.glsl>\n#include <materials/constants.glsl>\n#include <materials/utils.glsl>\n#include <materials/icon/common.glsl>\nvarying float v_size;\nvarying vec2 v_offset;\nvarying vec2 v_filteredSectorToColorId[NUMBER_OF_FIELDS];\nvarying float v_numOfEntries;\nvarying float v_maxSectorAngle;\nuniform lowp vec4 u_colors[NUMBER_OF_FIELDS];\nuniform lowp vec4 u_defaultColor;\nuniform lowp vec4 u_othersColor;\nuniform lowp vec4 u_outlineColor;\nuniform float u_donutRatio;\nuniform float u_sectorThreshold;\nstruct FilteredChartInfo {\nfloat endSectorAngle;\nint colorId;\n};\nlowp vec4 getSectorColor(in int index, in vec2 filteredSectorToColorId[NUMBER_OF_FIELDS]) {\n#if __VERSION__ == 300\nmediump int colorIndex = int(filteredSectorToColorId[index].y);\nreturn u_colors[colorIndex];\n#else\nmediump int colorIndex;\nfor (int i = 0; i < NUMBER_OF_FIELDS; ++i) {\nif (i == index) {\ncolorIndex = int(filteredSectorToColorId[i].y);\n}\n}\nfor (int i = 0; i < NUMBER_OF_FIELDS; ++i) {\nif (i == colorIndex) {\nreturn u_colors[i];\n}\n}\nreturn u_colors[NUMBER_OF_FIELDS - 1];\n#endif\n}\nconst int OTHER_SECTOR_ID = 255;\n#ifdef HITTEST\nvec4 getColor() {\nreturn v_color;\n}\n#else\nvec4 getColor() {\nfloat angle = 90.0 - C_RAD_TO_DEG * atan2(v_offset.y, v_offset.x);\nif (angle < 0.0) {\nangle += 360.0;\n} else if (angle > 360.0) {\nangle = mod(angle, 360.0);\n}\nint numOfEntries = int(v_numOfEntries);\nfloat maxSectorAngle = v_maxSectorAngle;\nlowp vec4 fillColor = (maxSectorAngle > 0.0 || u_sectorThreshold > 0.0) ? u_othersColor : u_defaultColor;\nlowp vec4 prevColor = vec4(0.0);\nlowp vec4 nextColor = vec4(0.0);\nfloat startSectorAngle = 0.0;\nfloat endSectorAngle = 0.0;\nif (angle < maxSectorAngle) {\nfor (int index = 0; index < NUMBER_OF_FIELDS; ++index) {\nstartSectorAngle = endSectorAngle;\nendSectorAngle = v_filteredSectorToColorId[index].x;\nif (endSectorAngle > angle) {\nfillColor = getSectorColor(index, v_filteredSectorToColorId);\nprevColor = u_sectorThreshold != 0.0 && index == 0 && abs(360.0 - maxSectorAngle) < EPSILON ? u_othersColor :\ngetSectorColor(index > 0 ? index - 1 : numOfEntries - 1, v_filteredSectorToColorId);\nnextColor = u_sectorThreshold != 0.0 && abs(endSectorAngle - maxSectorAngle) < EPSILON ? u_othersColor :\ngetSectorColor(index < numOfEntries - 1 ? index + 1 : 0, v_filteredSectorToColorId);\nbreak;\n}\nif (index == numOfEntries - 1) {\nbreak;\n}\n}\n} else {\nprevColor = getSectorColor(numOfEntries - 1, v_filteredSectorToColorId);\nnextColor = getSectorColor(0, v_filteredSectorToColorId);\nstartSectorAngle = maxSectorAngle;\nendSectorAngle = 360.0;\n}\nlowp vec4 outlineColor = u_outlineColor;\nfloat offset = length(v_offset);\nfloat distanceSize = offset * v_size;\nif (startSectorAngle != 0.0 || endSectorAngle != 360.0) {\nfloat distanceToStartSector = (angle - startSectorAngle);\nfloat distanceToEndSector = (endSectorAngle - angle);\nfloat sectorThreshold = 0.6;\nfloat beginSectorAlpha = smoothstep(0.0, sectorThreshold, distanceToStartSector * offset);\nfloat endSectorAlpha = smoothstep(0.0, sectorThreshold, distanceToEndSector * offset);\nif (endSectorAlpha > 0.0) {\nfillColor = mix(nextColor, fillColor, endSectorAlpha);\n} else if (beginSectorAlpha > 0.0) {\nfillColor = mix(prevColor, fillColor, beginSectorAlpha);\n}\n}\nfloat donutSize = u_donutRatio * (v_size - v_outlineWidth);\nfloat endOfDonut = donutSize - v_outlineWidth;\nfloat aaThreshold = 0.75;\nfloat innerCircleAlpha = endOfDonut - aaThreshold > 0.0 ? smoothstep(endOfDonut - aaThreshold, endOfDonut + aaThreshold, distanceSize) : 1.0;\nfloat outerCircleAlpha = 1.0 - smoothstep(v_size - aaThreshold, v_size + aaThreshold , distanceSize);\nfloat circleAlpha = innerCircleAlpha * outerCircleAlpha;\nfloat startOfOutline = v_size - v_outlineWidth;\nif (startOfOutline > 0.0 && v_outlineWidth > 0.25) {\nfloat outlineFactor = smoothstep(startOfOutline - aaThreshold, startOfOutline + aaThreshold, distanceSize);\nfloat innerLineFactor = donutSize - aaThreshold > 0.0 ? 1.0 - smoothstep(donutSize - aaThreshold, donutSize + aaThreshold , distanceSize) : 0.0;\nfillColor = mix(fillColor, outlineColor, innerLineFactor + outlineFactor);\n}\nreturn v_opacity * circleAlpha * fillColor;\n}\n#endif\nvoid main()\n{\nvec4 color = getColor();\n#ifdef HIGHLIGHT\ncolor.a = step(1.0 / 255.0, color.a);\n#endif\ngl_FragColor = color;\n}", "pie.vert": "precision highp float;\nattribute vec4 a_color;\nattribute vec4 a_outlineColor;\nattribute vec4 a_sizeAndOutlineWidth;\nattribute vec2 a_vertexOffset;\nattribute vec2 a_texCoords;\nattribute vec2 a_bitSetAndDistRatio;\nattribute vec2 a_zoomRange;\nuniform float u_outlineWidth;\nuniform mediump float u_sectorThreshold;\nvarying float v_size;\nvarying vec2 v_offset;\nvarying vec2 v_filteredSectorToColorId[NUMBER_OF_FIELDS];\nvarying float v_numOfEntries;\nvarying float v_maxSectorAngle;\nstruct FilteredChartInfo {\nfloat endSectorAngle;\nint colorId;\n};\nint filter(in float sectorAngle,\nin int currentIndex,\ninout FilteredChartInfo filteredInfo,\ninout vec2 filteredSectorToColorId[NUMBER_OF_FIELDS]) {\nif (sectorAngle > u_sectorThreshold * 360.0) {\nfilteredInfo.endSectorAngle += sectorAngle;\n#if __VERSION__ == 300\nfilteredSectorToColorId[filteredInfo.colorId] = vec2(filteredInfo.endSectorAngle, currentIndex);\n#else\nfor (int i = 0; i < NUMBER_OF_FIELDS; i++) {\nif (i == filteredInfo.colorId) {\nfilteredSectorToColorId[i] = vec2(filteredInfo.endSectorAngle, currentIndex);\n}\n}\n#endif\n++filteredInfo.colorId;\n}\nreturn 0;\n}\nint filterValues(inout vec2 filteredSectorToColorId[NUMBER_OF_FIELDS],\ninout FilteredChartInfo filteredInfo,\nin float sectorAngles[NUMBER_OF_FIELDS]) {\nfor (int index = 0; index < NUMBER_OF_FIELDS; ++index) {\nfloat sectorValue = sectorAngles[index];\nfilter(sectorValue, index, filteredInfo, filteredSectorToColorId);\n}\nreturn filteredInfo.colorId;\n}\n#include <materials/vcommon.glsl>\n#include <materials/icon/common.glsl>\n#include <materials/hittest/common.glsl>\nvec2 getMarkerSize(inout vec2 offset, inout vec2 baseSize, inout float outlineSize, in float referenceSize, in float bitSet) {\nvec2 outSize = baseSize;\n#ifdef VV_SIZE\nfloat r = 0.5 * getSize(referenceSize) / referenceSize;\noutSize.xy *= r;\noffset.xy *= r;\nfloat scaleSymbolProportionally = getBit(bitSet, BITSET_MARKER_SCALE_SYMBOLS_PROPORTIONALLY);\noutlineSize *= scaleSymbolProportionally * (r - 1.0) + 1.0;\n#endif\nreturn outSize;\n}\nvec3 getOffset(in vec2 in_offset, float a_bitSet) {\nfloat isMapAligned = getBit(a_bitSet, BITSET_MARKER_ALIGNMENT_MAP);\nvec3  offset       = vec3(in_offset, 0.0);\nreturn getMatrix(isMapAligned) * offset;\n}\nfloat filterNaNValues(in float value) {\nreturn value != NAN_MAGIC_NUMBER && value > 0.0 ? value : 0.0;\n}\nvoid main()\n{\nINIT;\nvec2  a_size   = a_sizeAndOutlineWidth.xy * a_sizeAndOutlineWidth.xy / 128.0;\nvec2  a_offset = a_vertexOffset / 16.0;\nfloat outlineSize = u_outlineWidth;\nfloat a_bitSet = a_bitSetAndDistRatio.x;\nvec2 size = getMarkerSize(a_offset, a_size, outlineSize, a_sizeAndOutlineWidth.w * a_sizeAndOutlineWidth.w / 128.0, a_bitSet);\nfloat filterFlags = getFilterFlags();\nvec3  pos         = vec3(a_pos * POSITION_PRECISION, 1.0);\nv_opacity      = getOpacity();\nv_id           = norm(a_id);\nv_pos          = u_dvsMat3 * pos + getOffset(a_offset, a_bitSet);\nv_offset       = sign(a_texCoords - 0.5);\nv_size         = max(size.x, size.y);\nv_outlineWidth = outlineSize;\nfloat attributeData[10];\nvec4 attributeData0 = getAttributeData3(a_id);\nattributeData[0] = filterNaNValues(attributeData0.x);\nattributeData[1] = filterNaNValues(attributeData0.y);\nattributeData[2] = filterNaNValues(attributeData0.z);\nattributeData[3] = filterNaNValues(attributeData0.w);\n#if (NUMBER_OF_FIELDS > 4)\nvec4 attributeData1 = getAttributeData4(a_id);\nattributeData[4] = filterNaNValues(attributeData1.x);\nattributeData[5] = filterNaNValues(attributeData1.y);\nattributeData[6] = filterNaNValues(attributeData1.z);\nattributeData[7] = filterNaNValues(attributeData1.w);\n#endif\n#if (NUMBER_OF_FIELDS > 8)\nvec4 attributeData2 = getAttributeData5(a_id);\nattributeData[8] = filterNaNValues(attributeData2.x);\nattributeData[9] = filterNaNValues(attributeData2.y);\n#endif\nfloat sum = 0.0;\nfor (int i = 0; i < NUMBER_OF_FIELDS; ++i) {\nsum += attributeData[i];\n}\nfloat sectorAngles[NUMBER_OF_FIELDS];\nfor (int i = 0; i < NUMBER_OF_FIELDS; ++i) {\nsectorAngles[i] = 360.0 * attributeData[i] / sum;\n}\nvec2 filteredSectorToColorId[NUMBER_OF_FIELDS];\nFilteredChartInfo filteredInfo = FilteredChartInfo(0.0, 0);\nint numOfEntries = filterValues(filteredSectorToColorId, filteredInfo, sectorAngles);\nv_numOfEntries = float(numOfEntries);\nv_maxSectorAngle = filteredInfo.endSectorAngle;\n#if __VERSION__ == 300\nv_filteredSectorToColorId = filteredSectorToColorId;\n#else\nfor (int i = 0; i < NUMBER_OF_FIELDS; ++i) {\nif (i == numOfEntries) {\nbreak;\n}\nv_filteredSectorToColorId[i] = filteredSectorToColorId[i];\n}\n#endif\n#ifdef HITTEST\nhighp vec3 out_pos = vec3(0.0);\nv_color            = vec4(0.0);\nhittestMarker(v_color, out_pos, u_viewMat3 * u_tileMat3 *  pos, v_size);\ngl_PointSize = 1.0;\ngl_Position = vec4(clip(v_color, out_pos, filterFlags, a_zoomRange), 1.0);\n#else\ngl_Position = vec4(clip(v_color, v_pos, filterFlags, a_zoomRange), 1.0);\n#endif\n}" }, shared: { line: { "common.glsl": "#if !defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE) && defined(PATTERN)\nuniform mediump vec2 u_mosaicSize;\nvarying mediump float v_sampleAlphaOnly;\n#endif\nstruct LineData {\nlowp vec4 color;\nmediump vec2 normal;\nmediump float lineHalfWidth;\nlowp float opacity;\n#ifndef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\n#ifdef PATTERN\nmediump vec4 tlbr;\nmediump vec2 patternSize;\n#endif\n#ifdef SDF\nmediump float lineWidthRatio;\n#endif\n#if defined(PATTERN) || defined(SDF)\nhighp float accumulatedDistance;\n#endif\n#endif\nhighp vec3 id;\n};", "line.frag": "uniform lowp float u_blur;\n#if !defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE) && !defined(HIGHLIGHT)\n#if defined(PATTERN) || defined(SDF)\nuniform sampler2D u_texture;\nuniform highp float u_pixelRatio;\n#endif\n#endif\n#if defined(SDF) && !defined(HIGHLIGHT) && !defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE)\nlowp vec4 getLineColor(LineData line) {\nmediump float adjustedPatternWidth = line.patternSize.x * 2.0 * line.lineWidthRatio;\nmediump float relativeTexX = fract(line.accumulatedDistance / adjustedPatternWidth);\nmediump float relativeTexY = 0.5 + 0.25 * line.normal.y;\nmediump vec2 texCoord = mix(line.tlbr.xy, line.tlbr.zw, vec2(relativeTexX, relativeTexY));\nmediump float d = rgba2float(texture2D(u_texture, texCoord)) - 0.5;\nfloat dist = d * line.lineHalfWidth;\nreturn line.opacity * clamp(0.5 - dist, 0.0, 1.0) * line.color;\n}\n#elif defined(PATTERN) && !defined(HIGHLIGHT) && !defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE)\nlowp vec4 getLineColor(LineData line) {\nmediump float lineHalfWidth = line.lineHalfWidth;\nmediump float adjustedPatternHeight = line.patternSize.y * 2.0 * lineHalfWidth / line.patternSize.x;\nmediump float relativeTexY = fract(line.accumulatedDistance / adjustedPatternHeight);\nmediump float relativeTexX = 0.5 + 0.5 * line.normal.y;\nmediump vec2 texCoord = mix(line.tlbr.xy, line.tlbr.zw, vec2(relativeTexX, relativeTexY));\nlowp vec4 color = texture2D(u_texture, texCoord);\n#ifdef VV_COLOR\nif (v_sampleAlphaOnly > 0.5) {\ncolor.rgb = vec3(color.a);\n}\n#endif\nreturn line.opacity * line.color * color;\n}\n#else\nlowp vec4 getLineColor(LineData line) {\nreturn line.opacity * line.color;\n}\n#endif\nvec4 shadeLine(LineData line)\n{\nmediump float thinLineFactor = max(THIN_LINE_WIDTH_FACTOR * step(line.lineHalfWidth, THIN_LINE_HALF_WIDTH), 1.0);\nmediump float fragDist = length(line.normal) * line.lineHalfWidth;\nlowp float alpha = clamp(thinLineFactor * (line.lineHalfWidth - fragDist) / (u_blur + thinLineFactor - 1.0), 0.0, 1.0);\nlowp vec4 out_color = getLineColor(line) * alpha;\n#ifdef HIGHLIGHT\nout_color.a = step(1.0 / 255.0, out_color.a);\n#endif\n#ifdef ID\nif (out_color.a < 1.0 / 255.0) {\ndiscard;\n}\nout_color = vec4(line.id, 0.0);\n#endif\nreturn out_color;\n}", "line.vert": "float getBaseLineHalfWidth(in float lineHalfWidth, in float referenceHalfWidth) {\n#ifdef VV_SIZE\nfloat refLineWidth = 2.0 * referenceHalfWidth;\nreturn 0.5 * (lineHalfWidth / max(referenceHalfWidth, EPSILON)) * getSize(refLineWidth);\n#else\nreturn lineHalfWidth;\n#endif\n}\nfloat getLineHalfWidth(in float baseWidth, in float aa) {\nfloat halfWidth = max(baseWidth + aa, 0.45) + 0.1 * aa;\n#ifdef HIGHLIGHT\nhalfWidth = max(halfWidth, 2.0);\n#endif\nreturn halfWidth;\n}\nvec2 getDist(in vec2 offset, in float halfWidth) {\nfloat thinLineFactor = max(THIN_LINE_WIDTH_FACTOR * step(halfWidth, THIN_LINE_HALF_WIDTH), 1.0);\nreturn thinLineFactor * halfWidth * offset;\n}\nLineData buildLine(\nout vec3 out_pos,\nin vec3 in_id,\nin vec2 in_pos,\nin vec4 in_color,\nin vec2 in_offset,\nin vec2 in_normal,\nin float in_accumulatedDist,\nin float in_lineHalfWidth,\nin float in_bitSet,\nin vec4 in_tlbr,\nin vec2 in_segmentDirection,\nin float in_referenceHalfWidth\n)\n{\nfloat aa        = 0.5 * u_antialiasing;\nfloat baseWidth = getBaseLineHalfWidth(in_lineHalfWidth, in_referenceHalfWidth);\nfloat halfWidth = getLineHalfWidth(baseWidth, aa);\nfloat z         = 2.0 * step(baseWidth, 0.0);\nvec2  dist      = getDist(in_offset, halfWidth);\nvec3  offset    = u_displayViewMat3 * vec3(dist, 0.0);\nvec3  pos       = u_dvsMat3 * vec3(in_pos * POSITION_PRECISION, 1.0) + offset;\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\nvec4  color     = in_color;\nfloat opacity   = 1.0;\n#else\nvec4  color     = getColor(in_color, in_bitSet, BITSET_GENERIC_LOCK_COLOR);\nfloat opacity   = getOpacity();\n#ifdef SDF\nconst float SDF_PATTERN_HALF_WIDTH = 15.5;\nfloat scaleDash = getBit(in_bitSet, BITSET_LINE_SCALE_DASH);\nfloat lineWidthRatio = (scaleDash * max(halfWidth - 0.55 * u_antialiasing, 0.25) + (1.0 - scaleDash)) / SDF_PATTERN_HALF_WIDTH;\n#endif\n#endif\n#if !defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE) && defined(PATTERN)\nv_sampleAlphaOnly = getBit(in_bitSet, BITSET_GENERIC_CONSIDER_ALPHA_ONLY);\n#endif\nout_pos = vec3(pos.xy, z);\nreturn LineData(\ncolor,\nin_normal,\nhalfWidth,\nopacity,\n#ifndef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\n#ifdef PATTERN\nin_tlbr / u_mosaicSize.xyxy,\nvec2(in_tlbr.z - in_tlbr.x, in_tlbr.w - in_tlbr.y),\n#endif\n#ifdef SDF\nlineWidthRatio,\n#endif\n#if defined(PATTERN) || defined(SDF)\nin_accumulatedDist * u_zoomFactor + dot(in_segmentDirection, dist),\n#endif\n#endif\nnorm(in_id)\n);\n}" } }, "symbologyTypeUtils.glsl": "#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_OUTLINE_FILL || SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_OUTLINE_FILL_SIMPLE\n#define SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\n#endif\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_SIMPLE || SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_OUTLINE_FILL_SIMPLE\n#define SYMBOLOGY_TYPE_IS_SIMPLE_LIKE\n#endif", text: { "common.glsl": "uniform highp vec2 u_mosaicSize;\nvarying highp vec3 v_id;\nvarying mediump vec3 v_pos;\nvarying lowp float v_opacity;\nvarying lowp vec4 v_color;\nvarying highp vec2 v_tex;\nvarying mediump float v_antialiasingWidth;\nvarying mediump float v_edgeDistanceOffset;\nvarying lowp float v_transparency;", "hittest.glsl": "#include <materials/hittest/common.glsl>", "text.frag": "precision mediump float;\n#include <materials/text/common.glsl>\nuniform lowp sampler2D u_texture;\n#ifdef HITTEST\nvec4 getColor() {\nreturn v_color;\n}\n#else\nvec4 getColor()\n{\nfloat SDF_CUTOFF = (2.0 / 8.0);\nfloat SDF_BASE_EDGE_DIST = 1.0 - SDF_CUTOFF;\nlowp float dist = texture2D(u_texture, v_tex).a;\nmediump float edge = SDF_BASE_EDGE_DIST - v_edgeDistanceOffset;\n#ifdef HIGHLIGHT\nedge /= 2.0;\n#endif\nlowp float aa = v_antialiasingWidth;\nlowp float alpha = smoothstep(edge - aa, edge + aa, dist);\nreturn alpha * v_color * v_opacity;\n}\n#endif\nvoid main()\n{\ngl_FragColor = getColor();\n}", "text.vert": "precision highp float;\n#include <materials/utils.glsl>\n#include <materials/vcommon.glsl>\n#include <materials/text/common.glsl>\n#include <materials/text/hittest.glsl>\nattribute vec4 a_color;\nattribute vec4 a_haloColor;\nattribute vec4 a_texFontSize;\nattribute vec4 a_aux;\nattribute vec2 a_zoomRange;\nattribute vec2 a_vertexOffset;\nattribute vec2 a_texCoords;\nuniform float u_isHaloPass;\nuniform float u_isBackgroundPass;\nfloat getTextSize(inout vec2 offset, inout float baseSize, in float referenceSize) {\n#ifdef VV_SIZE\nfloat r = getSize(referenceSize) / referenceSize;\nbaseSize *= r;\noffset.xy *= r;\nreturn baseSize;\n#endif\nreturn baseSize;\n}\nvoid main()\n{\nINIT;\nfloat a_isBackground  = a_aux.y;\nfloat a_referenceSize = a_aux.z * a_aux.z / 256.0;\nfloat a_bitSet        = a_aux.w;\nfloat a_fontSize      = a_texFontSize.z;\nvec2  a_offset        = a_vertexOffset * OFFSET_PRECISION;\nvec3  in_pos        = vec3(a_pos * POSITION_PRECISION, 1.0);\nfloat fontSize      = getTextSize(a_offset, a_fontSize, a_referenceSize);\nfloat fontScale     = fontSize / SDF_FONT_SIZE;\nvec3  offset        = getRotation() * vec3(a_offset, 0.0);\nmat3  extrudeMatrix = getBit(a_bitSet, 0) == 1.0 ? u_displayViewMat3 : u_displayMat3;\nfloat isText = 1.0 - a_isBackground;\nfloat isBackground = u_isBackgroundPass * a_isBackground;\nvec4  nonHaloColor  = (isBackground * a_color) + (isText * getColor(a_color, a_bitSet, 1));\nv_color   = u_isHaloPass * a_haloColor + (1.0 - u_isHaloPass) * nonHaloColor;\nv_opacity = getOpacity();\nv_id      = norm(a_id);\nv_tex     = a_texCoords / u_mosaicSize;\nv_pos     = u_dvsMat3 * in_pos + extrudeMatrix * offset;\nfloat isHidden = u_isBackgroundPass * isText + (1.0 - u_isBackgroundPass) * a_isBackground;\nv_pos.z += 2.0 * isHidden;\nv_edgeDistanceOffset = u_isHaloPass * OUTLINE_SCALE * a_texFontSize.w / fontScale / MAX_SDF_DISTANCE;\nv_antialiasingWidth  = 0.105 * SDF_FONT_SIZE / fontSize / u_pixelRatio;\n#ifdef HITTEST\nhighp vec3 out_pos  = vec3(0.);\nv_color = vec4(0.);\nhittestMarker(v_color, out_pos, u_viewMat3 * u_tileMat3 *  vec3(a_pos * POSITION_PRECISION, 1.0)\n+ u_tileMat3 * offset, fontSize / 2.);\ngl_PointSize = 1.;\ngl_Position = vec4(clip(v_color, out_pos, getFilterFlags(), a_zoomRange), 1.0);\n#else\ngl_Position =  vec4(clip(v_color, v_pos, getFilterFlags(), a_zoomRange), 1.0);\n#endif\n}" }, "utils.glsl": "float rshift(in float u32, in int amount) {\nreturn floor(u32 / pow(2.0, float(amount)));\n}\nfloat getBit(in float bitset, in int bitIndex) {\nfloat offset = pow(2.0, float(bitIndex));\nreturn mod(floor(bitset / offset), 2.0);\n}\nfloat getFilterBit(in float bitset, in int bitIndex) {\nreturn getBit(bitset, bitIndex + 1);\n}\nfloat getHighlightBit(in float bitset) {\nreturn getBit(bitset, 0);\n}\nhighp vec3 unpackDisplayIdTexel(in highp vec3 bitset) {\nfloat isAggregate = getBit(bitset.b, 7);\nreturn (1.0 - isAggregate) * bitset + isAggregate * (vec3(bitset.rgb) - vec3(0.0, 0.0, float(0x80)));\n}\nvec4 unpack(in float u32) {\nfloat r = mod(rshift(u32, 0), 255.0);\nfloat g = mod(rshift(u32, 8), 255.0);\nfloat b = mod(rshift(u32, 16), 255.0);\nfloat a = mod(rshift(u32, 24), 255.0);\nreturn vec4(r, g, b, a);\n}\nvec3 norm(in vec3 v) {\nreturn v /= 255.0;\n}\nvec4 norm(in vec4 v) {\nreturn v /= 255.0;\n}\nfloat max4(vec4 target) {\nreturn max(max(max(target.x, target.y), target.z), target.w);\n}\nvec2 unpack_u8_nf32(vec2 bytes) {\nreturn (bytes - 127.0) / 127.0;\n}\nhighp float rand(in vec2 co) {\nhighp float a = 12.9898;\nhighp float b = 78.233;\nhighp float c = 43758.5453;\nhighp float dt = dot(co, vec2(a,b));\nhighp float sn = mod(dt, 3.14);\nreturn fract(sin(sn) * c);\n}", "vcommon.glsl": "#include <materials/constants.glsl>\n#include <materials/utils.glsl>\n#include <materials/attributeData.glsl>\n#include <materials/vv.glsl>\n#include <materials/barycentric.glsl>\nattribute vec2 a_pos;\nattribute highp vec3 a_id;\nuniform highp mat3 u_dvsMat3;\nuniform highp mat3 u_displayMat3;\nuniform highp mat3 u_displayViewMat3;\nuniform highp mat3 u_tileMat3;\nuniform highp mat3 u_viewMat3;\nuniform highp float u_pixelRatio;\nuniform mediump float u_zoomFactor;\nuniform mediump float u_antialiasing;\nuniform mediump float u_currentZoom;\nvec4 VV_ADATA = vec4(0.0);\nvoid loadVisualVariableData(inout vec4 target) {\n#ifdef SUPPORTS_TEXTURE_FLOAT\ntarget.rgba = getAttributeData2(a_id);\n#else\nvec4 data0 = getAttributeData2(a_id);\nvec4 data1 = getAttributeData3(a_id);\ntarget.r = u88VVToFloat(data0.rg * 255.0);\ntarget.g = u88VVToFloat(data0.ba * 255.0);\ntarget.b = u88VVToFloat(data1.rg * 255.0);\ntarget.a = u88VVToFloat(data1.ba * 255.0);\n#endif\n}\n#ifdef VV\n#define INIT loadVisualVariableData(VV_ADATA)\n#else\n#define INIT\n#endif\nvec4 getColor(in vec4 a_color, in float a_bitSet, int index) {\n#ifdef VV_COLOR\nfloat isColorLocked   = getBit(a_bitSet, index);\nreturn getVVColor(VV_ADATA[ATTR_VV_COLOR], a_color, isColorLocked);\n#else\nreturn a_color;\n#endif\n}\nfloat getOpacity() {\n#ifdef VV_OPACITY\nreturn getVVOpacity(VV_ADATA[ATTR_VV_OPACITY]);\n#else\nreturn 1.0;\n#endif\n}\nfloat getSize(in float in_size) {\n#ifdef VV_SIZE\nreturn getVVSize(in_size, VV_ADATA[ATTR_VV_SIZE]);\n#else\nreturn in_size;\n#endif\n}\nmat3 getRotation() {\n#ifdef VV_ROTATION\nreturn getVVRotationMat3(mod(VV_ADATA[ATTR_VV_ROTATION], 360.0));\n#else\nreturn mat3(1.0);\n#endif\n}\nfloat getFilterFlags() {\n#ifdef IGNORES_SAMPLER_PRECISION\nreturn ceil(getAttributeData0(a_id).x * 255.0);\n#else\nreturn getAttributeData0(a_id).x * 255.0;\n#endif\n}\nvec4 getAnimationState() {\nreturn getAttributeData1(a_id);\n}\nfloat getMinZoom() {\nvec4 data0 = getAttributeData0(a_id) * 255.0;\nreturn data0.g;\n}\nmat3 getMatrixNoDisplay(float isMapAligned) {\nreturn isMapAligned * u_viewMat3 * u_tileMat3 + (1.0 - isMapAligned) * u_tileMat3;\n}\nmat3 getMatrix(float isMapAligned) {\nreturn isMapAligned * u_displayViewMat3 + (1.0 - isMapAligned) * u_displayMat3;\n}\nvec3 clip(inout vec4 color, inout vec3 pos, in float filterFlags, in vec2 minMaxZoom) {\npos.z += 2.0 * (1.0 - getFilterBit(filterFlags, 0));\n#ifdef INSIDE\npos.z += 2.0 * (1.0 - getFilterBit(filterFlags, 1));\n#elif defined(OUTSIDE)\npos.z += 2.0 * getFilterBit(filterFlags, 1);\n#elif defined(HIGHLIGHT)\n#if !defined(HIGHLIGHT_ALL)\npos.z += 2.0 * (1.0 - getHighlightBit(filterFlags));\n#endif\n#endif\npos.z += 2.0 * (step(minMaxZoom.y, u_currentZoom) + (1.0 - step(minMaxZoom.x, u_currentZoom)));\nreturn pos;\n}", "vv.glsl": "#if defined(VV_SIZE_MIN_MAX_VALUE) || defined(VV_SIZE_SCALE_STOPS) || defined(VV_SIZE_FIELD_STOPS) || defined(VV_SIZE_UNIT_VALUE)\n#define VV_SIZE\n#endif\n#if defined(VV_COLOR) || defined(VV_SIZE) || defined(VV_OPACITY) || defined(VV_ROTATION)\n#define VV\n#endif\n#ifdef VV_COLOR\nuniform highp float u_vvColorValues[8];\nuniform vec4 u_vvColors[8];\n#endif\n#ifdef VV_SIZE_MIN_MAX_VALUE\nuniform highp vec4 u_vvSizeMinMaxValue;\n#endif\n#ifdef VV_SIZE_SCALE_STOPS\nuniform highp float u_vvSizeScaleStopsValue;\n#endif\n#ifdef VV_SIZE_FIELD_STOPS\nuniform highp float u_vvSizeFieldStopsValues[6];\nuniform float u_vvSizeFieldStopsSizes[6];\n#endif\n#ifdef VV_SIZE_UNIT_VALUE\nuniform highp float u_vvSizeUnitValueWorldToPixelsRatio;\n#endif\n#ifdef VV_OPACITY\nuniform highp float u_vvOpacityValues[8];\nuniform float u_vvOpacities[8];\n#endif\n#ifdef VV_ROTATION\nuniform lowp float u_vvRotationType;\n#endif\nbool isNan(float val) {\nreturn (val == NAN_MAGIC_NUMBER);\n}\n#ifdef VV_SIZE_MIN_MAX_VALUE\nfloat getVVMinMaxSize(float sizeValue, float fallback) {\nif (isNan(sizeValue)) {\nreturn fallback;\n}\nfloat interpolationRatio = (sizeValue  - u_vvSizeMinMaxValue.x) / (u_vvSizeMinMaxValue.y - u_vvSizeMinMaxValue.x);\ninterpolationRatio = clamp(interpolationRatio, 0.0, 1.0);\nreturn u_vvSizeMinMaxValue.z + interpolationRatio * (u_vvSizeMinMaxValue.w - u_vvSizeMinMaxValue.z);\n}\n#endif\n#ifdef VV_SIZE_FIELD_STOPS\nconst int VV_SIZE_N = 6;\nfloat getVVStopsSize(float sizeValue, float fallback) {\nif (isNan(sizeValue)) {\nreturn fallback;\n}\nif (sizeValue <= u_vvSizeFieldStopsValues[0]) {\nreturn u_vvSizeFieldStopsSizes[0];\n}\nfor (int i = 1; i < VV_SIZE_N; ++i) {\nif (u_vvSizeFieldStopsValues[i] >= sizeValue) {\nfloat f = (sizeValue - u_vvSizeFieldStopsValues[i-1]) / (u_vvSizeFieldStopsValues[i] - u_vvSizeFieldStopsValues[i-1]);\nreturn mix(u_vvSizeFieldStopsSizes[i-1], u_vvSizeFieldStopsSizes[i], f);\n}\n}\nreturn u_vvSizeFieldStopsSizes[VV_SIZE_N - 1];\n}\n#endif\n#ifdef VV_SIZE_UNIT_VALUE\nfloat getVVUnitValue(float sizeValue, float fallback) {\nif (isNan(sizeValue)) {\nreturn fallback;\n}\nreturn u_vvSizeUnitValueWorldToPixelsRatio * sizeValue;\n}\n#endif\n#ifdef VV_OPACITY\nconst int VV_OPACITY_N = 8;\nfloat getVVOpacity(float opacityValue) {\nif (isNan(opacityValue)) {\nreturn 1.0;\n}\nif (opacityValue <= u_vvOpacityValues[0]) {\nreturn u_vvOpacities[0];\n}\nfor (int i = 1; i < VV_OPACITY_N; ++i) {\nif (u_vvOpacityValues[i] >= opacityValue) {\nfloat f = (opacityValue - u_vvOpacityValues[i-1]) / (u_vvOpacityValues[i] - u_vvOpacityValues[i-1]);\nreturn mix(u_vvOpacities[i-1], u_vvOpacities[i], f);\n}\n}\nreturn u_vvOpacities[VV_OPACITY_N - 1];\n}\n#endif\n#ifdef VV_ROTATION\nmat4 getVVRotation(float rotationValue) {\nif (isNan(rotationValue)) {\nreturn mat4(1, 0, 0, 0,\n0, 1, 0, 0,\n0, 0, 1, 0,\n0, 0, 0, 1);\n}\nfloat rotation = rotationValue;\nif (u_vvRotationType == 1.0) {\nrotation = 90.0 - rotation;\n}\nfloat angle = C_DEG_TO_RAD * rotation;\nfloat sinA = sin(angle);\nfloat cosA = cos(angle);\nreturn mat4(cosA, sinA, 0, 0,\n-sinA,  cosA, 0, 0,\n0,     0, 1, 0,\n0,     0, 0, 1);\n}\nmat3 getVVRotationMat3(float rotationValue) {\nif (isNan(rotationValue)) {\nreturn mat3(1, 0, 0,\n0, 1, 0,\n0, 0, 1);\n}\nfloat rotation = rotationValue;\nif (u_vvRotationType == 1.0) {\nrotation = 90.0 - rotation;\n}\nfloat angle = C_DEG_TO_RAD * -rotation;\nfloat sinA = sin(angle);\nfloat cosA = cos(angle);\nreturn mat3(cosA, -sinA, 0,\nsinA, cosA, 0,\n0,    0,    1);\n}\n#endif\n#ifdef VV_COLOR\nconst int VV_COLOR_N = 8;\nvec4 getVVColor(float colorValue, vec4 fallback, float isColorLocked) {\nif (isNan(colorValue) || isColorLocked == 1.0) {\nreturn fallback;\n}\nif (colorValue <= u_vvColorValues[0]) {\nreturn u_vvColors[0];\n}\nfor (int i = 1; i < VV_COLOR_N; ++i) {\nif (u_vvColorValues[i] >= colorValue) {\nfloat f = (colorValue - u_vvColorValues[i-1]) / (u_vvColorValues[i] - u_vvColorValues[i-1]);\nreturn mix(u_vvColors[i-1], u_vvColors[i], f);\n}\n}\nreturn u_vvColors[VV_COLOR_N - 1];\n}\n#endif\nfloat getVVSize(in float size, in float vvSize)  {\n#ifdef VV_SIZE_MIN_MAX_VALUE\nreturn getVVMinMaxSize(vvSize, size);\n#elif defined(VV_SIZE_SCALE_STOPS)\nreturn u_vvSizeScaleStopsValue;\n#elif defined(VV_SIZE_FIELD_STOPS)\nfloat outSize = getVVStopsSize(vvSize, size);\nreturn isNan(outSize) ? size : outSize;\n#elif defined(VV_SIZE_UNIT_VALUE)\nreturn getVVUnitValue(vvSize, size);\n#else\nreturn size;\n#endif\n}" }, overlay: { overlay: { "overlay.frag": "precision lowp float;\nuniform lowp sampler2D u_texture;\nuniform lowp float u_opacity;\nvarying mediump vec2 v_uv;\nvoid main() {\nvec4 color = texture2D(u_texture, v_uv);\ngl_FragColor = color *  u_opacity;\n}", "overlay.vert": "precision mediump float;\nattribute vec2 a_pos;\nattribute vec2 a_uv;\nuniform highp mat3 u_dvsMat3;\nuniform mediump vec2 u_perspective;\nvarying mediump vec2 v_uv;\nvoid main(void) {\nv_uv = a_uv;\nfloat w = 1.0 + dot(a_uv, u_perspective);\nvec3 pos = u_dvsMat3 * vec3(a_pos, 1.0);\ngl_Position = vec4(w * pos.xy, 0.0, w);\n}" } }, "post-processing": { blit: { "blit.frag": "precision mediump float;\nuniform sampler2D u_texture;\nvarying vec2 v_uv;\nvoid main() {\ngl_FragColor = texture2D(u_texture, v_uv);\n}" }, bloom: { composite: { "composite.frag": "precision mediump float;\nvarying vec2 v_uv;\nuniform sampler2D u_blurTexture1;\nuniform sampler2D u_blurTexture2;\nuniform sampler2D u_blurTexture3;\nuniform sampler2D u_blurTexture4;\nuniform sampler2D u_blurTexture5;\nuniform float u_bloomStrength;\nuniform float u_bloomRadius;\nuniform float u_bloomFactors[NUMMIPS];\nuniform vec3 u_bloomTintColors[NUMMIPS];\nfloat lerpBloomFactor(const in float factor) {\nfloat mirrorFactor = 1.2 - factor;\nreturn mix(factor, mirrorFactor, u_bloomRadius);\n}\nvoid main() {\nvec4 color = u_bloomStrength * (\nlerpBloomFactor(u_bloomFactors[0]) * vec4(u_bloomTintColors[0], 1.0) * texture2D(u_blurTexture1, v_uv) +\nlerpBloomFactor(u_bloomFactors[1]) * vec4(u_bloomTintColors[1], 1.0) * texture2D(u_blurTexture2, v_uv) +\nlerpBloomFactor(u_bloomFactors[2]) * vec4(u_bloomTintColors[2], 1.0) * texture2D(u_blurTexture3, v_uv) +\nlerpBloomFactor(u_bloomFactors[3]) * vec4(u_bloomTintColors[3], 1.0) * texture2D(u_blurTexture4, v_uv) +\nlerpBloomFactor(u_bloomFactors[4]) * vec4(u_bloomTintColors[4], 1.0) * texture2D(u_blurTexture5, v_uv)\n);\ngl_FragColor = clamp(color, 0.0, 1.0);\n}" }, gaussianBlur: { "gaussianBlur.frag": "precision mediump float;\nuniform sampler2D u_colorTexture;\nuniform vec2 u_texSize;\nuniform vec2 u_direction;\nvarying vec2 v_uv;\n#define KERNEL_RADIUS RADIUS\n#define SIGMA RADIUS\nfloat gaussianPdf(in float x, in float sigma) {\nreturn 0.39894 * exp(-0.5 * x * x / ( sigma * sigma)) / sigma;\n}\nvoid main() {\nvec2 invSize = 1.0 / u_texSize;\nfloat fSigma = float(SIGMA);\nfloat weightSum = gaussianPdf(0.0, fSigma);\nvec4 pixelColorSum = texture2D(u_colorTexture, v_uv) * weightSum;\nfor (int i = 1; i < KERNEL_RADIUS; i ++) {\nfloat x = float(i);\nfloat w = gaussianPdf(x, fSigma);\nvec2 uvOffset = u_direction * invSize * x;\nvec4 sample1 = texture2D(u_colorTexture, v_uv + uvOffset);\nvec4 sample2 = texture2D(u_colorTexture, v_uv - uvOffset);\npixelColorSum += (sample1 + sample2) * w;\nweightSum += 2.0 * w;\n}\ngl_FragColor = pixelColorSum /weightSum;\n}" }, luminosityHighPass: { "luminosityHighPass.frag": "precision mediump float;\nuniform sampler2D u_texture;\nuniform vec3 u_defaultColor;\nuniform float u_defaultOpacity;\nuniform float u_luminosityThreshold;\nuniform float u_smoothWidth;\nvarying vec2 v_uv;\nvoid main() {\nvec4 texel = texture2D(u_texture, v_uv);\nvec3 luma = vec3(0.299, 0.587, 0.114);\nfloat v = dot(texel.xyz, luma);\nvec4 outputColor = vec4(u_defaultColor.rgb, u_defaultOpacity);\nfloat alpha = smoothstep(u_luminosityThreshold, u_luminosityThreshold + u_smoothWidth, v);\ngl_FragColor = mix(outputColor, texel, alpha);\n}" } }, blur: { gaussianBlur: { "gaussianBlur.frag": "precision mediump float;\nuniform sampler2D u_colorTexture;\nuniform vec2 u_texSize;\nuniform vec2 u_direction;\nuniform float u_sigma;\nvarying vec2 v_uv;\n#define KERNEL_RADIUS RADIUS\nfloat gaussianPdf(in float x, in float sigma) {\nreturn 0.39894 * exp(-0.5 * x * x / ( sigma * sigma)) / sigma;\n}\nvoid main() {\nvec2 invSize = 1.0 / u_texSize;\nfloat fSigma = u_sigma;\nfloat weightSum = gaussianPdf(0.0, fSigma);\nvec4 pixelColorSum = texture2D(u_colorTexture, v_uv) * weightSum;\nfor (int i = 1; i < KERNEL_RADIUS; i ++) {\nfloat x = float(i);\nfloat w = gaussianPdf(x, fSigma);\nvec2 uvOffset = u_direction * invSize * x;\nvec4 sample1 = texture2D(u_colorTexture, v_uv + uvOffset);\nvec4 sample2 = texture2D(u_colorTexture, v_uv - uvOffset);\npixelColorSum += (sample1 + sample2) * w;\nweightSum += 2.0 * w;\n}\ngl_FragColor = pixelColorSum /weightSum;\n}" }, "radial-blur": { "radial-blur.frag": "precision mediump float;\nuniform sampler2D u_colorTexture;\nvarying vec2 v_uv;\nconst float sampleDist = 1.0;\nconst float sampleStrength = 2.2;\nvoid main(void) {\nfloat samples[10];\nsamples[0] = -0.08;\nsamples[1] = -0.05;\nsamples[2] = -0.03;\nsamples[3] = -0.02;\nsamples[4] = -0.01;\nsamples[5] =  0.01;\nsamples[6] =  0.02;\nsamples[7] =  0.03;\nsamples[8] =  0.05;\nsamples[9] =  0.08;\nvec2 dir = 0.5 - v_uv;\nfloat dist = sqrt(dir.x * dir.x + dir.y * dir.y);\ndir = dir / dist;\nvec4 color = texture2D(u_colorTexture,v_uv);\nvec4 sum = color;\nfor (int i = 0; i < 10; i++) {\nsum += texture2D(u_colorTexture, v_uv + dir * samples[i] * sampleDist);\n}\nsum *= 1.0 / 11.0;\nfloat t = dist * sampleStrength;\nt = clamp(t, 0.0, 1.0);\ngl_FragColor = mix(color, sum, t);\n}" } }, dra: { "dra.frag": "precision mediump float;\nuniform sampler2D u_minColor;\nuniform sampler2D u_maxColor;\nuniform sampler2D u_texture;\nvarying vec2 v_uv;\nvoid main() {\nvec4 minColor = texture2D(u_minColor, vec2(0.5));\nvec4 maxColor = texture2D(u_maxColor, vec2(0.5));\nvec4 color = texture2D(u_texture, v_uv);\nvec3 minColorUnpremultiply = minColor.rgb / minColor.a;\nvec3 maxColorUnpremultiply = maxColor.rgb / maxColor.a;\nvec3 colorUnpremultiply = color.rgb / color.a;\nvec3 range = maxColorUnpremultiply - minColorUnpremultiply;\ngl_FragColor = vec4(color.a * (colorUnpremultiply - minColorUnpremultiply) / range, color.a);\n}", "min-max": { "min-max.frag": "#extension GL_EXT_draw_buffers : require\nprecision mediump float;\n#define CELL_SIZE 2\nuniform sampler2D u_minTexture;\nuniform sampler2D u_maxTexture;\nuniform vec2 u_srcResolution;\nuniform vec2 u_dstResolution;\nvarying vec2 v_uv;\nvoid main() {\nvec2 srcPixel = floor(gl_FragCoord.xy) * float(CELL_SIZE);\nvec2 onePixel = vec2(1.0) / u_srcResolution;\nvec2 uv = (srcPixel + 0.5) / u_srcResolution;\nvec4 minColor = vec4(1.0);\nvec4 maxColor = vec4(0.0);\nfor (int y = 0; y < CELL_SIZE; ++y) {\nfor (int x = 0; x < CELL_SIZE; ++x) {\nvec2 offset = uv + vec2(x, y) * onePixel;\nminColor = min(minColor, texture2D(u_minTexture, offset));\nmaxColor = max(maxColor, texture2D(u_maxTexture, offset));\n}\n}\ngl_FragData[0] = minColor;\ngl_FragData[1] = maxColor;\n}" } }, "drop-shadow": { composite: { "composite.frag": "precision mediump float;\nuniform sampler2D u_layerFBOTexture;\nuniform sampler2D u_blurTexture;\nuniform vec4 u_shadowColor;\nuniform vec2 u_shadowOffset;\nuniform highp mat3 u_displayViewMat3;\nvarying vec2 v_uv;\nvoid main() {\nvec3 offset = u_displayViewMat3 * vec3(u_shadowOffset, 0.0);\nvec4 layerColor = texture2D(u_layerFBOTexture, v_uv);\nvec4 blurColor = texture2D(u_blurTexture, v_uv - offset.xy / 2.0);\ngl_FragColor = ((1.0 - layerColor.a) * blurColor.a * u_shadowColor + layerColor);\n}" } }, "edge-detect": { "frei-chen": { "frei-chen.frag": "precision mediump float;\nuniform sampler2D u_colorTexture;\nuniform vec2 u_texSize;\nvarying vec2 v_uv;\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\nmat3 G[9];\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\nvoid main() {\nG[0] = g0,\nG[1] = g1,\nG[2] = g2,\nG[3] = g3,\nG[4] = g4,\nG[5] = g5,\nG[6] = g6,\nG[7] = g7,\nG[8] = g8;\nmat3 I;\nfloat cnv[9];\nvec3 sample;\nfor (float i = 0.0; i < 3.0; i++) {\nfor (float j = 0.0; j < 3.0; j++) {\nsample = texture2D(u_colorTexture, v_uv + texel * vec2(i - 1.0,j - 1.0)).rgb;\nI[int(i)][int(j)] = length(sample);\n}\n}\nfor (int i = 0; i < 9; i++) {\nfloat dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\ncnv[i] = dp3 * dp3;\n}\nfloat M = (cnv[0] + cnv[1]) + (cnv[2] + cnv[3]);\nfloat S = (cnv[4] + cnv[5]) + (cnv[6] + cnv[7]) + (cnv[8] + M);\ngl_FragColor = vec4(vec3(sqrt(M / S)), texture2D(u_colorTexture, v_uv).a);\n}" }, sobel: { "sobel.frag": "precision mediump float;\nuniform sampler2D u_colorTexture;\nvarying vec2 v_uv;\nuniform vec2 u_texSize;\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\nmat3 G[2];\nconst mat3 g0 = mat3( 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, -1.0, -2.0, -1.0 );\nconst mat3 g1 = mat3( 1.0, 0.0, -1.0, 2.0, 0.0, -2.0, 1.0, 0.0, -1.0 );\nvoid main() {\nmat3 I;\nfloat cnv[2];\nvec3 sample;\nG[0] = g0;\nG[1] = g1;\nfor (float i = 0.0; i < 3.0; i++) {\nfor (float j = 0.0; j < 3.0; j++) {\nsample = texture2D( u_colorTexture, v_uv + texel * vec2(i-1.0,j-1.0) ).rgb;\nI[int(i)][int(j)] = length(sample);\n}\n}\nfor (int i = 0; i < 2; i++) {\nfloat dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\ncnv[i] = dp3 * dp3;\n}\ngl_FragColor = vec4(vec3(0.5 * sqrt(cnv[0] * cnv[0] + cnv[1] * cnv[1])), texture2D(u_colorTexture, v_uv).a);\n}" } }, "edge-enhance": { "edge-enhance.frag": "precision mediump float;\nuniform sampler2D u_colorTexture;\nvarying vec2 v_uv;\nuniform vec2 u_texSize;\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\nmat3 G[2];\nconst mat3 g0 = mat3( 1.0, 0.0, -1.0, 1.0, 0.0, -1.0, 1.0, 0.0, -1.0 );\nconst mat3 g1 = mat3( 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, -1.0, -1.0, -1.0 );\nvoid main() {\nmat3 I;\nfloat cnv[2];\nvec3 sample;\nG[0] = g0;\nG[1] = g1;\nfor (float i = 0.0; i < 3.0; i++) {\nfor (float j = 0.0; j < 3.0; j++) {\nsample = texture2D( u_colorTexture, v_uv + texel * vec2(i-1.0,j-1.0) ).rgb;\nI[int(i)][int(j)] = length(sample);\n}\n}\nfor (int i = 0; i < 2; i++) {\nfloat dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\ncnv[i] = dp3 * dp3;\n}\nvec4 color = texture2D(u_colorTexture, v_uv);\ngl_FragColor = vec4(0.5 * sqrt(cnv[0] * cnv[0] + cnv[1] * cnv[1]) * color);\n}" }, filterEffect: { "filterEffect.frag": "precision mediump float;\nuniform sampler2D u_colorTexture;\nuniform mat4 u_coefficients;\nvarying vec2 v_uv;\nvoid main() {\nvec4 color = texture2D(u_colorTexture, v_uv);\nvec4 rgbw = u_coefficients * vec4(color.a > 0.0 ? color.rgb / color.a : vec3(0.0), 1.0);\nfloat a = color.a;\ngl_FragColor = vec4(a * rgbw.rgb, a);\n}" }, pp: { "pp.vert": "precision mediump float;\nattribute vec2 a_position;\nvarying vec2 v_uv;\nvoid main() {\ngl_Position = vec4(a_position, 0.0, 1.0);\nv_uv = (a_position + 1.0) / 2.0;\n}" } }, raster: { bitmap: { "bitmap.frag": "precision mediump float;\nvarying highp vec2 v_texcoord;\nuniform sampler2D u_texture;\nuniform highp vec2 u_coordScale;\nuniform lowp float u_opacity;\n#include <filtering/bicubic.glsl>\nvoid main() {\n#ifdef BICUBIC\nvec4 color = sampleBicubicBSpline(u_texture, v_texcoord, u_coordScale);\n#else\nvec4 color = texture2D(u_texture, v_texcoord);\n#endif\ngl_FragColor = vec4(color.rgb * u_opacity, color.a * u_opacity);\n}", "bitmap.vert": "precision mediump float;\nattribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\nv_texcoord = a_pos;\ngl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\n}" }, common: { "common.glsl": "uniform sampler2D u_image;\nuniform int u_bandCount;\nuniform bool u_flipY;\nuniform float u_opacity;\nuniform int u_resampling;\nuniform vec2 u_srcImageSize;\n#ifdef APPLY_PROJECTION\n#include <raster/common/projection.glsl>\n#endif\n#ifdef BICUBIC\n#include <filtering/bicubic.glsl>\n#endif\n#ifdef BILINEAR\n#include <filtering/bilinear.glsl>\n#endif\nvec2 getPixelLocation(vec2 coords) {\nvec2 targetLocation = u_flipY ? vec2(coords.s, 1.0 - coords.t) : coords;\n#ifdef APPLY_PROJECTION\ntargetLocation = projectPixelLocation(targetLocation);\n#endif\nreturn targetLocation;\n}\nbool isOutside(vec2 coords){\nif (coords.t>1.00001 ||coords.t<-0.00001 || coords.s>1.00001 ||coords.s<-0.00001) {\nreturn true;\n} else {\nreturn false;\n}\n}\nvec4 getPixel(vec2 pixelLocation) {\n#ifdef BICUBIC\nvec4 color = sampleBicubicBSpline(u_image, pixelLocation, u_srcImageSize);\n#elif defined(BILINEAR)\nvec4 color = sampleBilinear(u_image, pixelLocation, u_srcImageSize);\n#else\nvec4 color = texture2D(u_image, pixelLocation);\n#endif\nreturn color;\n}", "common.vert": "precision mediump float;\nattribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nuniform highp float u_scale;\nuniform highp vec2 u_offset;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\nv_texcoord = a_pos * u_scale + u_offset;\ngl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\n}", "contrastBrightness.glsl": "uniform float u_contrastOffset;\nuniform float u_brightnessOffset;\nvec4 adjustContrastBrightness(vec4 currentPixel, bool isFloat) {\nvec4 pixelValue = isFloat ? currentPixel * 255.0 : currentPixel;\nfloat maxI = 255.0;\nfloat mid = 128.0;\nfloat c = u_contrastOffset;\nfloat b = u_brightnessOffset;\nvec4 v;\nif (c > 0.0 && c < 100.0) {\nv = (200.0 * pixelValue - 100.0 * maxI + 2.0 * maxI * b) / (2.0 * (100.0 - c)) + mid;\n} else if (c <= 0.0 && c > -100.0) {\nv = (200.0 * pixelValue - 100.0 * maxI + 2.0 * maxI * b) * (100.0 + c) / 20000.0 + mid;\n} else if (c == 100.0) {\nv = (200.0 * pixelValue - 100.0 * maxI + (maxI + 1.0) * (100.0 - c) + 2.0 * maxI * b);\nv = (sign(v) + 1.0) / 2.0;\n} else if (c == -100.0) {\nv = vec4(mid, mid, mid, currentPixel.a);\n}\nreturn vec4(v.r / 255.0, v.g / 255.0, v.b / 255.0, currentPixel.a);\n}", "getSurfaceValues.glsl": "#include <raster/common/mirror.glsl>\nvoid getSurfaceValues(sampler2D imageTexture, vec2 texCoord, vec2 srcImageSize, inout float values[10]) {\nvec2 onePixel = 1.0 / srcImageSize;\nvec4 va = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(-1.0, -1.0)));\nvec4 vb = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(0.0, -1.0)));\nvec4 vc = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(1.0, -1.0)));\nvec4 vd = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(-1.0, 0.0)));\nvec4 ve = texture2D(imageTexture, mirror(texCoord));\nvec4 vf = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(1.0, 0.0)));\nvec4 vg = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(-1.0, 1.0)));\nvec4 vh = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(0.0, 1.0)));\nvec4 vi = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(1.0, 1.0)));\nfloat alpha = va.a * vb.a * vc.a * vd.a * ve.a * vf.a * vg.a * vh.a * vi.a;\nvalues[0] = va.r;\nvalues[1] = vb.r;\nvalues[2] = vc.r;\nvalues[3] = vd.r;\nvalues[4] = ve.r;\nvalues[5] = vf.r;\nvalues[6] = vg.r;\nvalues[7] = vh.r;\nvalues[8] = vi.r;\nvalues[9] = alpha;\n}", "inverse.glsl": "float invertValue(float value) {\nfloat s = sign(value);\nreturn (s * s) / (value + abs(s) - 1.0);\n}", "mirror.glsl": "vec2 mirror(vec2 pos) {\nvec2 pos1 = abs(pos);\nreturn step(pos1, vec2(1.0, 1.0)) * pos1 + step(1.0, pos1) * (2.0 - pos1);\n}", "projection.glsl": "uniform sampler2D u_transformGrid;\nuniform vec2 u_transformSpacing;\nuniform vec2 u_transformGridSize;\nuniform vec2 u_targetImageSize;\nvec2 projectPixelLocation(vec2 coords) {\n#ifdef LOOKUP_PROJECTION\nvec4 pv = texture2D(u_transformGrid, coords);\nreturn vec2(pv.r, pv.g);\n#endif\nvec2 index_image = floor(coords * u_targetImageSize);\nvec2 oneTransformPixel = vec2(0.25 / u_transformGridSize.s, 1.0 / u_transformGridSize.t);\nvec2 index_transform = floor(index_image / u_transformSpacing) / u_transformGridSize;\nvec2 pos = fract((index_image + vec2(0.5, 0.5)) / u_transformSpacing);\nvec2 srcLocation;\nvec2 transform_location = index_transform + oneTransformPixel * 0.5;\nif (pos.s <= pos.t) {\nvec4 ll_abc = texture2D(u_transformGrid, vec2(transform_location.s, transform_location.t));\nvec4 ll_def = texture2D(u_transformGrid, vec2(transform_location.s + oneTransformPixel.s, transform_location.t));\nsrcLocation.s = dot(ll_abc.rgb, vec3(pos, 1.0));\nsrcLocation.t = dot(ll_def.rgb, vec3(pos, 1.0));\n} else {\nvec4 ur_abc = texture2D(u_transformGrid, vec2(transform_location.s + 2.0 * oneTransformPixel.s, transform_location.t));\nvec4 ur_def = texture2D(u_transformGrid, vec2(transform_location.s + 3.0 * oneTransformPixel.s, transform_location.t));\nsrcLocation.s = dot(ur_abc.rgb, vec3(pos, 1.0));\nsrcLocation.t = dot(ur_def.rgb, vec3(pos, 1.0));\n}\nreturn srcLocation;\n}" }, flow: { "getFadeOpacity.glsl": "uniform float u_decayRate;\nuniform float u_fadeToZero;\nfloat getFadeOpacity(float x) {\nfloat cutOff = mix(0.0, exp(-u_decayRate), u_fadeToZero);\nreturn (exp(-u_decayRate * x) - cutOff) / (1.0 - cutOff);\n}", "getFragmentColor.glsl": "vec4 getFragmentColor(vec4 color, float dist, float size, float featheringSize) {\nfloat featheringStart = clamp(0.5 - featheringSize / size, 0.0, 0.5);\nif (dist > featheringStart) {\ncolor *= 1.0 - (dist - featheringStart) / (0.5 - featheringStart);\n}\nreturn color;\n}", imagery: { "imagery.frag": "precision highp float;\nvarying vec2 v_texcoord;\nuniform sampler2D u_texture;\nuniform float u_Min;\nuniform float u_Max;\nuniform float u_featheringSize;\n#include <raster/flow/vv.glsl>\nfloat getIntensity(float v) {\nreturn u_Min + v * (u_Max - u_Min);\n}\nvoid main(void) {\nvec4 sampled = texture2D(u_texture, v_texcoord);\nfloat intensity = getIntensity(sampled.r);\ngl_FragColor = getColor(intensity);\ngl_FragColor.a *= getOpacity(sampled.r);\ngl_FragColor.a *= sampled.a;\ngl_FragColor.rgb *= gl_FragColor.a;\n}", "imagery.vert": "attribute vec2 a_position;\nattribute vec2 a_texcoord;\nuniform mat3 u_dvsMat3;\nvarying vec2 v_texcoord;\nvoid main(void) {\nvec2 xy = (u_dvsMat3 * vec3(a_position, 1.0)).xy;\ngl_Position = vec4(xy, 0.0, 1.0);\nv_texcoord = a_texcoord;\n}" }, particles: { "particles.frag": "precision highp float;\nvarying vec4 v_color;\nvarying vec2 v_texcoord;\nvarying float v_size;\nuniform float u_featheringSize;\n#include <raster/flow/getFragmentColor.glsl>\nvoid main(void) {\ngl_FragColor = getFragmentColor(v_color, length(v_texcoord - 0.5), v_size, u_featheringSize);\n}", "particles.vert": "attribute vec4 a_xyts0;\nattribute vec4 a_xyts1;\nattribute vec4 a_typeIdDurationSeed;\nattribute vec4 a_extrudeInfo;\nuniform mat3 u_dvsMat3;\nuniform mat3 u_displayViewMat3;\nuniform float u_time;\nuniform float u_trailLength;\nuniform float u_flowSpeed;\nvarying vec4 v_color;\nvarying vec2 v_texcoord;\nvarying float v_size;\nuniform float u_featheringSize;\nuniform float u_introFade;\n#include <raster/flow/vv.glsl>\n#include <raster/flow/getFadeOpacity.glsl>\nvoid main(void) {\nvec2 position0 = a_xyts0.xy;\nfloat t0 = a_xyts0.z;\nfloat speed0 = a_xyts0.w;\nvec2 position1 = a_xyts1.xy;\nfloat t1 = a_xyts1.z;\nfloat speed1 = a_xyts1.w;\nfloat type = a_typeIdDurationSeed.x;\nfloat id = a_typeIdDurationSeed.y;\nfloat duration = a_typeIdDurationSeed.z;\nfloat seed = a_typeIdDurationSeed.w;\nvec2 e0 = a_extrudeInfo.xy;\nvec2 e1 = a_extrudeInfo.zw;\nfloat animationPeriod = duration + u_trailLength;\nfloat scaledTime = u_time * u_flowSpeed;\nfloat randomizedTime = scaledTime + seed * animationPeriod;\nfloat t = mod(randomizedTime, animationPeriod);\nfloat fUnclamped = (t - t0) / (t1 - t0);\nfloat f = clamp(fUnclamped, 0.0, 1.0);\nfloat clampedTime = mix(t0, t1, f);\nfloat speed = mix(speed0, speed1, f);\nvec2 extrude;\nvec2 position;\nfloat fadeOpacity;\nfloat introOpacity;\nif (type == 2.0) {\nif (fUnclamped < 0.0 || (fUnclamped > 1.0 && t1 != duration)) {\ngl_Position = vec4(0.0, 0.0, -2.0, 1.0);\nreturn;\n}\nvec2 ortho = mix(e0, e1, f);\nvec2 parallel;\nparallel = normalize(position1 - position0) * 0.5;\nif (id == 1.0) {\nextrude = ortho;\nv_texcoord = vec2(0.5, 0.0);\n} else if (id == 2.0) {\nextrude = -ortho;\nv_texcoord = vec2(0.5, 1.0);\n} else if (id == 3.0) {\nextrude = ortho + parallel;\nv_texcoord = vec2(1.0, 0.0);\n} else if (id == 4.0) {\nextrude = -ortho + parallel;\nv_texcoord = vec2(1.0, 1.0);\n}\nfadeOpacity = getFadeOpacity((t - clampedTime) / u_trailLength);\nintroOpacity = 1.0 - exp(-clampedTime);\nv_size = getSize(speed);\nv_color = getColor(speed);\nv_color.a *= getOpacity(speed);\nposition = mix(position0, position1, f);\n} else {\nif (fUnclamped < 0.0) {\ngl_Position = vec4(0.0, 0.0, -2.0, 1.0);\nreturn;\n}\nif (id == 1.0) {\nextrude = e0;\nv_texcoord = vec2(0.5, 0.0);\nfadeOpacity = getFadeOpacity((t - t0) / u_trailLength);\nintroOpacity = 1.0 - exp(-t0);\nv_size = getSize(speed0);\nv_color = getColor(speed0);\nv_color.a *= getOpacity(speed0);\nposition = position0;\n} else if (id == 2.0) {\nextrude = -e0;\nv_texcoord = vec2(0.5, 1.0);\nfadeOpacity = getFadeOpacity((t - t0) / u_trailLength);\nintroOpacity = 1.0 - exp(-t0);\nv_size = getSize(speed0);\nv_color = getColor(speed0);\nv_color.a *= getOpacity(speed0);\nposition = position0;\n} else if (id == 3.0) {\nextrude = mix(e0, e1, f);\nv_texcoord = vec2(0.5, 0.0);\nfadeOpacity = getFadeOpacity((t - clampedTime) / u_trailLength);\nintroOpacity = 1.0 - exp(-clampedTime);\nv_size = getSize(speed);\nv_color = getColor(speed);\nv_color.a *= getOpacity(speed);\nposition = mix(position0, position1, f);\n} else if (id == 4.0) {\nextrude = -mix(e0, e1, f);\nv_texcoord = vec2(0.5, 1.0);\nfadeOpacity = getFadeOpacity((t - clampedTime) / u_trailLength);\nintroOpacity = 1.0 - exp(-clampedTime);\nv_size = getSize(speed);\nv_color = getColor(speed);\nv_color.a *= getOpacity(speed);\nposition = mix(position0, position1, f);\n}\n}\nvec2 xy = (u_dvsMat3 * vec3(position, 1.0) + u_displayViewMat3 * vec3(extrude * v_size, 0.0)).xy;\ngl_Position = vec4(xy, 0.0, 1.0);\nv_color.a *= fadeOpacity;\nv_color.a *= mix(1.0, introOpacity, u_introFade);\nv_color.rgb *= v_color.a;\n}" }, streamlines: { "streamlines.frag": "precision highp float;\nvarying float v_side;\nvarying float v_time;\nvarying float v_totalTime;\nvarying float v_timeSeed;\nvarying vec4 v_color;\nvarying float v_size;\nuniform float u_time;\nuniform float u_trailLength;\nuniform float u_flowSpeed;\nuniform float u_featheringSize;\nuniform float u_introFade;\n#include <raster/flow/getFragmentColor.glsl>\n#include <raster/flow/getFadeOpacity.glsl>\nvoid main(void) {\nfloat t = mod(v_timeSeed * (v_totalTime + u_trailLength) + u_time * u_flowSpeed, v_totalTime + u_trailLength) - v_time;\nvec4 color = v_color * step(0.0, t) * getFadeOpacity(t / u_trailLength);\ncolor *= mix(1.0, 1.0 - exp(-v_time), u_introFade);\ngl_FragColor = getFragmentColor(color, length((v_side + 1.0) / 2.0 - 0.5), v_size, u_featheringSize);\n}", "streamlines.vert": "attribute vec3 a_positionAndSide;\nattribute vec3 a_timeInfo;\nattribute vec2 a_extrude;\nattribute float a_speed;\nuniform mat3 u_dvsMat3;\nuniform mat3 u_displayViewMat3;\nvarying float v_time;\nvarying float v_totalTime;\nvarying float v_timeSeed;\nvarying vec4 v_color;\nvarying float v_side;\nvarying float v_size;\nuniform float u_featheringSize;\n#include <raster/flow/vv.glsl>\nvoid main(void) {\nvec4 lineColor = getColor(a_speed);\nfloat lineOpacity = getOpacity(a_speed);\nfloat lineSize = getSize(a_speed);\nvec2 position = a_positionAndSide.xy;\nv_side = a_positionAndSide.z;\nvec2 xy = (u_dvsMat3 * vec3(position, 1.0) + u_displayViewMat3 * vec3(a_extrude * lineSize, 0.0)).xy;\ngl_Position = vec4(xy, 0.0, 1.0);\nv_time = a_timeInfo.x;\nv_totalTime = a_timeInfo.y;\nv_timeSeed = a_timeInfo.z;\nv_color = lineColor;\nv_color.a *= lineOpacity;\nv_color.rgb *= v_color.a;\nv_size = lineSize;\n}" }, "vv.glsl": "#define MAX_STOPS 8\n#ifdef VV_COLOR\nuniform float u_color_stops[MAX_STOPS];\nuniform vec4 u_color_values[MAX_STOPS];\nuniform int u_color_count;\n#else\nuniform vec4 u_color;\n#endif\n#ifdef VV_OPACITY\nuniform float u_opacity_stops[MAX_STOPS];\nuniform float u_opacity_values[MAX_STOPS];\nuniform int u_opacity_count;\n#else\nuniform float u_opacity;\n#endif\n#ifdef VV_SIZE\nuniform float u_size_stops[MAX_STOPS];\nuniform float u_size_values[MAX_STOPS];\nuniform int u_size_count;\n#else\nuniform float u_size;\n#endif\nuniform float u_featheringOffset;\nvec4 getColor(float x) {\n#ifdef VV_COLOR\nvec4 color = u_color_values[0];\n{\nfor (int i = 1; i < MAX_STOPS; i++) {\nif (i >= u_color_count) {\nbreak;\n}\nfloat x1 = u_color_stops[i - 1];\nif (x < x1) {\nbreak;\n}\nfloat x2 = u_color_stops[i];\nvec4 y2 = u_color_values[i];\nif (x < x2) {\nvec4 y1 = u_color_values[i - 1];\ncolor = y1 + (y2 - y1) * (x - x1) / (x2 - x1);\n} else {\ncolor = y2;\n}\n}\n}\n#else\nvec4 color = u_color;\n#endif\nreturn color;\n}\nfloat getOpacity(float x) {\n#ifdef VV_OPACITY\nfloat opacity = u_opacity_values[0];\n{\nfor (int i = 1; i < MAX_STOPS; i++) {\nif (i >= u_opacity_count) {\nbreak;\n}\nfloat x1 = u_opacity_stops[i - 1];\nif (x < x1) {\nbreak;\n}\nfloat x2 = u_opacity_stops[i];\nfloat y2 = u_opacity_values[i];\nif (x < x2) {\nfloat y1 = u_opacity_values[i - 1];\nopacity = y1 + (y2 - y1) * (x - x1) / (x2 - x1);\n} else {\nopacity = y2;\n}\n}\n}\n#else\nfloat opacity = u_opacity;\n#endif\nreturn opacity;\n}\nfloat getSize(float x) {\n#ifdef VV_SIZE\nfloat size = u_size_values[0];\n{\nfor (int i = 1; i < MAX_STOPS; i++) {\nif (i >= u_size_count) {\nbreak;\n}\nfloat x1 = u_size_stops[i - 1];\nif (x < x1) {\nbreak;\n}\nfloat x2 = u_size_stops[i];\nfloat y2 = u_size_values[i];\nif (x < x2) {\nfloat y1 = u_size_values[i - 1];\nsize = y1 + (y2 - y1) * (x - x1) / (x2 - x1);\n} else {\nsize = y2;\n}\n}\n}\n#else\nfloat size = u_size;\n#endif\nreturn size + 2.0 * u_featheringSize * u_featheringOffset;\n}" }, hillshade: { "hillshade.frag": "precision mediump float;\nvarying highp vec2 v_texcoord;\n#include <raster/common/common.glsl>\nuniform int u_hillshadeType;\nuniform float u_sinZcosAs[6];\nuniform float u_sinZsinAs[6];\nuniform float u_cosZs[6];\nuniform float u_weights[6];\nuniform vec2 u_factor;\nuniform float u_minValue;\nuniform float u_maxValue;\n#include <raster/lut/colorize.glsl>\n#include <raster/common/getSurfaceValues.glsl>\nvec3 rgb2hsv(vec3 c) {\nvec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\nvec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\nvec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\nfloat d = q.x - min(q.w, q.y);\nfloat e = 1.0e-10;\nreturn vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), min(d / (q.x + e), 1.0), q.x);\n}\nvec3 hsv2rgb(vec3 c) {\nvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\nreturn c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\nvec4 overlay(float val, float minValue, float maxValue, float hillshade) {\nval = clamp((val - minValue) / (maxValue - minValue), 0.0, 1.0);\nvec4 rgb = colorize(vec4(val, val, val, 1.0), 255.0);\nvec3 hsv = rgb2hsv(rgb.xyz);\nhsv.z = hillshade;\nreturn vec4(hsv2rgb(hsv), 1.0) * rgb.a;\n}\nvoid main() {\nvec2 pixelLocation = getPixelLocation(v_texcoord);\nif (isOutside(pixelLocation)) {\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\nreturn;\n}\nvec4 currentPixel = getPixel(pixelLocation);\nif (currentPixel.a == 0.0) {\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\nreturn;\n}\nfloat pv[10];\ngetSurfaceValues(u_image, pixelLocation, u_srcImageSize, pv);\nfloat alpha = pv[9];\nfloat dzx = (pv[2] + 2.0 * pv[5] + pv[8] - pv[0] - 2.0 * pv[3] - pv[6]) * u_factor.s;\nfloat dzy = (pv[6] + 2.0 * pv[7] + pv[8] - pv[0] - 2.0 * pv[1] - pv[2]) * u_factor.t;\nfloat dzd = sqrt(1.0 + dzx * dzx + dzy * dzy);\nfloat hillshade = 0.0;\nif (u_hillshadeType == 0){\nfloat cosDelta = u_sinZsinAs[0] * dzy - u_sinZcosAs[0] * dzx;\nfloat z = (u_cosZs[0] + cosDelta) / dzd;\nif (z < 0.0)  z = 0.0;\nhillshade = z;\n} else {\nfor (int k = 0; k < 6; k++) {\nfloat cosDelta = u_sinZsinAs[k] * dzy - u_sinZcosAs[k] * dzx;\nfloat z = (u_cosZs[k] + cosDelta) / dzd;\nif (z < 0.0) z = 0.0;\nhillshade = hillshade + z * u_weights[k];\nif (k == 5) break;\n}\n}\n#ifdef APPLY_COLORMAP\ngl_FragColor = overlay(pv[4], u_minValue, u_maxValue, hillshade) * alpha * u_opacity;\n#else\ngl_FragColor = vec4(hillshade, hillshade, hillshade, 1.0) * alpha * u_opacity;\n#endif\n}" }, lut: { "colorize.glsl": "uniform sampler2D u_colormap;\nuniform float u_colormapOffset;\nuniform float u_colormapMaxIndex;\nvec4 colorize(vec4 currentPixel, float scaleFactor) {\nfloat clrIndex = clamp(currentPixel.r * scaleFactor - u_colormapOffset, 0.0, u_colormapMaxIndex);\nvec2 clrPosition = vec2((clrIndex + 0.5) / (u_colormapMaxIndex + 1.0), 0.0);\nvec4 color = texture2D(u_colormap, clrPosition);\nvec4 result = vec4(color.rgb, color.a * currentPixel.a);\nreturn result;\n}", "lut.frag": "precision mediump float;\nvarying highp vec2 v_texcoord;\n#include <raster/common/common.glsl>\n#include <raster/lut/colorize.glsl>\nvoid main() {\nvec2 pixelLocation = getPixelLocation(v_texcoord);\nif (isOutside(pixelLocation)) {\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\nreturn;\n}\nvec4 currentPixel = getPixel(pixelLocation);\nvec4 result = colorize(currentPixel, 1.0);\ngl_FragColor = vec4(result.xyz, 1.0) * result.a * u_opacity;\n}" }, magdir: { "magdir.frag": "precision mediump float;\nvarying vec4 v_color;\nuniform lowp float u_opacity;\nvoid main() {\ngl_FragColor = v_color * u_opacity;\n}", "magdir.vert": "precision mediump float;\nattribute vec2 a_pos;\nattribute vec2 a_offset;\nattribute vec2 a_vv;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nuniform vec2 u_symbolSize;\nuniform vec2 u_symbolPercentRange;\nuniform vec2 u_dataRange;\nuniform float u_rotation;\nuniform vec4 u_colors[12];\nvarying vec4 v_color;\nvoid main()\n{\nfloat angle = a_offset.y + u_rotation;\n#ifndef ROTATION_GEOGRAPHIC\nangle = 3.14159265359 * 2.0 - angle - 3.14159265359 / 2.0;\n#endif\nvec2 offset = vec2(cos(angle), sin(angle)) * a_offset.x;\n#ifdef DATA_RANGE\nfloat valuePercentage = clamp((a_vv.y - u_dataRange.x) / (u_dataRange.y - u_dataRange.x), 0.0, 1.0);\nfloat sizeRatio = u_symbolPercentRange.x + valuePercentage * (u_symbolPercentRange.y - u_symbolPercentRange.x);\nfloat sizePercentage = clamp(sizeRatio, u_symbolPercentRange.x, u_symbolPercentRange.y);\n#else\nfloat sizePercentage = (u_symbolPercentRange.x + u_symbolPercentRange.y) / 2.0;\n#endif\nvec2 pos = a_pos + offset * sizePercentage * u_symbolSize;\nv_color = u_colors[int(a_vv.x)];\ngl_Position = vec4(u_dvsMat3 * vec3(pos * u_coordScale, 1.0), 1.0);\n}" }, reproject: { "reproject.frag": "precision mediump float;\nvarying vec2 v_texcoord;\n#include <raster/common/common.glsl>\nvoid main() {\nvec2 pixelLocation = getPixelLocation(v_texcoord);\nif (isOutside(pixelLocation)) {\ngl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\nreturn;\n}\nvec4 currentPixel = getPixel(pixelLocation);\ngl_FragColor = vec4(currentPixel.rgb, 1.0) * currentPixel.a * u_opacity;\n}", "reproject.vert": "precision mediump float;\nattribute vec2 a_position;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\nv_texcoord = a_position;\ngl_Position = vec4(2.0 * (a_position - 0.5), 0.0, 1.0);\n}" }, rfx: { aspect: { "aspect.frag": "precision mediump float;\nuniform sampler2D u_image;\nvarying vec2 v_texcoord;\nuniform vec2 u_cellSize;\nuniform vec2 u_srcImageSize;\n#include <raster/common/getSurfaceValues.glsl>\nconst float pi = 3.14159265359;\nvoid main() {\nfloat pv[10];\ngetSurfaceValues(u_image, v_texcoord, u_srcImageSize, pv);\nfloat alpha = pv[9];\nfloat dzx = (pv[2] + 2.0 * pv[5] + pv[8] - pv[0] - 2.0 * pv[3] - pv[6]) / (8.0 * u_cellSize[0]);\nfloat dzy = -(pv[6] + 2.0 * pv[7] + pv[8] - pv[0] - 2.0 * pv[1] - pv[2]) / (8.0 * u_cellSize[1]);\nalpha *= sign(abs(dzx) + abs(dzy));\nfloat aspect_rad = (dzx == 0.0) ? (step(0.0, dzy) * 0.5 * pi + step(dzy, 0.0) * 1.5 * pi) : mod((2.5 * pi + atan(dzy, -dzx)), 2.0 * pi);\nfloat aspect = aspect_rad * 180.0 / pi;\ngl_FragColor = vec4(aspect, aspect, aspect, 1.0) * alpha;\n}" }, bandarithmetic: { "bandarithmetic.frag": "precision mediump float;\nuniform sampler2D u_image;\nvarying vec2 v_texcoord;\nuniform mediump mat3 u_bandIndexMat3;\nuniform float u_adjustments[3];\n#include <raster/common/inverse.glsl>\nvoid main() {\nvec4 pv = texture2D(u_image, v_texcoord);\nvec3 pv2 = u_bandIndexMat3 * pv.rgb;\nfloat nir = pv2.r;\nfloat red = pv2.g;\nfloat index;\n#ifdef NDXI\nindex = (nir - red) * invertValue(nir + red);\n#elif defined(SR)\nindex = nir * invertValue(red);\n#elif defined(CI)\nindex = nir * invertValue(red) - 1.0;\n#elif defined(SAVI)\nindex = (nir - red) * invertValue(nir + red + u_adjustments[0]) * (1.0 + u_adjustments[0]);\n#elif defined(TSAVI)\nfloat s = u_adjustments[0];\nfloat a = u_adjustments[1];\nfloat x = u_adjustments[2];\nfloat y = -a * s + x * (1.0 + s * s);\nindex = (s * (nir - s * red - a)) * invertValue(a * nir + red + y);\n#elif defined(MAVI)\nindex = 0.5 * (2.0 * (nir + 1.0) - sqrt(pow((2.0 * nir + 1.0), 2.0) - 8.0 * (nir - red)));\n#elif defined(GEMI)\nfloat eta = (2.0 * (nir * nir - red * red) + 1.5 * nir + 0.5 * red) * invertValue(nir + red + 0.5);\nindex = eta * (1.0 - 0.25 * eta) - (red - 0.125) * invertValue(1.0 - red);\n#elif defined(PVI)\nfloat a = u_adjustments[0];\nfloat b = u_adjustments[1];\nfloat y = sqrt(1.0 + a * a);\nindex = (nir - a * red - b) * invertValue(y);\n#elif defined(VARI)\nindex = (pv2.g - pv2.r) * invertValue(pv2.g + pv2.r - pv2.b);\n#elif defined(MTVI2)\nfloat green = pv2.b;\nfloat v = pow(sqrt((2.0 * nir + 1.0), 2.0) - 6.0 * nir - 5.0 * sqrt(red) - 0.5);\nindex = 1.5 * (1.2 * (nir - green) - 2.5 * (red - green)) * v;\n#elif defined(RTVICORE)\nfloat green = pv2.b;\nindex = 100.0 * (nir - red) - 10.0 * (nir - green);\n#elif defined(EVI)\nfloat blue = pv2.b;\nfloat denom = nir + 6.0 * red - 7.5 * blue + 1.0;\nindex =  (2.5 * (nir - red)) * invertValue(denom);\n#elif defined(WNDWI)\nfloat g = pv2.r;\nfloat n = pv2.g;\nfloat s = pv2.s;\nfloat a = u_adjustments[0];\nfloat denom = g + a * n + (1.0 - a) * s;\nindex = (g - a * n - (1 - a) * s) * invertValue(denom);\n#elif defined(BAI)\nindex = invertValue(pow((0.1 - red), 2.0) + pow((0.06 - nir), 2.0));\n#else\ngl_FragColor = pv;\nreturn;\n#endif\ngl_FragColor = vec4(index, index, index, pv.a);\n}" }, compositeband: { "compositeband.frag": "precision mediump float;\nuniform sampler2D u_image;\nuniform sampler2D u_image1;\nuniform sampler2D u_image2;\nvarying vec2 v_texcoord;\nvoid main() {\nvec4 p0 = texture2D(u_image, v_texcoord);\nvec4 p1 = texture2D(u_image1, v_texcoord);\nvec4 p2 = texture2D(u_image2, v_texcoord);\ngl_FragColor = vec4(p0.r, p1.r, p2.r, p0.a * p1.a * p2.a);\n}" }, convolution: { "convolution.frag": "precision mediump float;\nuniform sampler2D u_image;\nvarying vec2 v_texcoord;\nuniform vec2 u_srcImageSize;\n#define KERNEL_SIZE_ROWS ROWS\n#define KERNEL_SIZE_COLS COLS\nuniform vec2 u_clampRange;\nuniform float u_kernel[25];\n#include <raster/common/mirror.glsl>\nvoid main() {\nvec3 rgb = vec3(0.0, 0.0, 0.0);\nvec2 resolution = 1.0 / u_srcImageSize;\nfloat rowOffset = -float(floor(float(KERNEL_SIZE_ROWS) / 2.0));\nfloat colOffset = -float(floor(float(KERNEL_SIZE_COLS) / 2.0));\nfloat alpha = 1.0;\nfor (int row = 0; row < KERNEL_SIZE_ROWS; row++) {\nfloat pos_row = rowOffset + float(row);\nfor (int col = 0; col < KERNEL_SIZE_COLS; col++) {\nvec2 pos = v_texcoord + vec2(colOffset + float(col), pos_row) * resolution;\nvec4 pv = texture2D(u_image, mirror(pos));\nrgb += pv.rgb * u_kernel[row * KERNEL_SIZE_COLS + col];\nalpha *= pv.a;\n}\n}\nrgb = clamp(rgb, u_clampRange.s, u_clampRange.t);\ngl_FragColor = vec4(rgb * alpha, alpha);\n}" }, curvature: { "curvature.frag": "precision mediump float;\nuniform sampler2D u_image;\nvarying vec2 v_texcoord;\nuniform float u_zlFactor;\nuniform vec2 u_srcImageSize;\n#include <raster/common/getSurfaceValues.glsl>\nvoid main() {\nfloat pv[10];\ngetSurfaceValues(u_image, v_texcoord, u_srcImageSize, pv);\nfloat alpha = pv[9];\nfloat d = ((pv[3] + pv[5]) * 0.5 - pv[4]);\nfloat e = ((pv[1] + pv[7]) * 0.5 - pv[4]);\nfloat curvature = 0.0;\n#ifdef STANDARD\ncurvature = -u_zlFactor * (d + e);\ngl_FragColor = vec4(curvature, curvature, curvature, alpha);\n#else\nfloat f = (-pv[0] + pv[2] + pv[6] - pv[8]) / 4.0;\nfloat g = (-pv[3] + pv[5]) / 2.0;\nfloat h = (pv[1] - pv[7]) / 2.0;\nfloat g2 = g * g;\nfloat h2 = h * h;\n#ifdef PROFILE\ncurvature = (u_zlFactor * (d * g2 + e * h2 + f * g * h)) / (g2 + h2);\n#else\ncurvature = (-u_zlFactor * (d * h2 + e * g2 - f * g * h)) / (g2 + h2);\n#endif\n#endif\ngl_FragColor = vec4(curvature, curvature, curvature, alpha);\n}" }, extractband: { "extractband.frag": "precision mediump float;\nuniform sampler2D u_image;\nvarying vec2 v_texcoord;\nuniform mediump mat3 u_bandIndexMat3;\nvoid main() {\nvec4 pv = texture2D(u_image, v_texcoord);\nvec3 pv2 = u_bandIndexMat3 * pv.rgb;\ngl_FragColor = vec4(pv2, pv.a);\n}" }, local: { "local.frag": "precision mediump float;\nuniform sampler2D u_image;\nuniform sampler2D u_image1;\n#ifdef ONE_CONSTANT\nuniform float u_image1Const;\n#ifdef TWO_CONSTANT\nuniform float u_image2Const;\n#endif\nuniform mat3 u_imageSwap;\n#endif\nvarying vec2 v_texcoord;\nuniform vec2 u_domainRange;\n#include <raster/common/inverse.glsl>\nvoid main() {\nvec4 pv0 = texture2D(u_image, v_texcoord);\nfloat a = pv0.r;\n#ifdef TWO_IMAGES\n#ifdef ONE_CONSTANT\nfloat b = u_image1Const;\nvec3 abc = u_imageSwap * vec3(a, b, 0);\na = abc.s;\nb = abc.t;\n#else\nvec4 pv1 = texture2D(u_image1, v_texcoord);\nfloat b = pv1.r;\n#endif\n#elif defined(CONDITIONAL)\n#ifdef TWO_CONSTANT\nfloat b = u_image1Const;\nfloat c = u_image2Const;\nvec3 abc = u_imageSwap * vec3(a, b, c);\na = abc.s;\nb = abc.t;\nc = abc.p;\n#elif defined(ONE_CONSTANT)\nvec4 pv1 = texture2D(u_image1, v_texcoord);\nfloat b = pv1.r;\nfloat c = u_image1Const;\nvec3 abc = u_imageSwap * vec3(a, b, c);\na = abc.s;\nb = abc.t;\nc = abc.p;\n#else\nvec4 pv1 = texture2D(u_image1, v_texcoord);\nvec4 pv2 = texture2D(u_image2, v_texcoord);\nfloat b = pv1.r;\nfloat c = pv2.r;\n#endif\n#endif\nfloat result = a;\nfloat alpha = pv0.a;\n#ifdef PLUS\nresult = a + b;\n#elif defined(MINUS)\nresult = a - b;\n#elif defined(TIMES)\nresult = a * b;\n#elif defined(DIVIDE)\nresult = a * invertValue(b);\nalpha *= float(abs(sign(b)));\n#elif defined(FLOATDIVIDE)\nresult = a * invertValue(b);\nalpha *= float(abs(sign(b)));\n#elif defined(FLOORDIVIDE)\nresult = floor(a * invertValue(b));\nalpha *= float(abs(sign(b)));\n#elif defined(SQUARE)\nresult = a * a;\n#elif defined(SQRT)\nresult = sqrt(a);\n#elif defined(POWER)\nresult = pow(a, b);\n#elif defined(LN)\nresult = a <= 0.0 ? 0.0: log(a);\nalpha *= float(a > 0.0);\n#elif defined(LOG_1_0)\nresult = a <= 0.0 ? 0.0: log2(a) * invertValue(log2(10.0));\nalpha *= float(a > 0.0);\n#elif defined(LOG_2)\nresult = a <= 0.0 ? 0.0: log2(a);\nalpha *= float(a > 0.0);\n#elif defined(EXP)\nresult = exp(a);\n#elif defined(EXP_1_0)\nresult = pow(10.0, a);\n#elif defined(EXP_2)\nresult = pow(2.0, a);\n#elif defined(ROUNDDOWN)\nresult = floor(a);\n#elif defined(ROUNDUP)\nresult = ceil(a);\n#elif defined(INT)\nresult = float(sign(a)) * floor(abs(a));\n#elif defined(MOD)\nresult = mod(a, b);\n#elif defined(NEGATE)\nresult = -a;\n#elif defined(ABS)\nresult = abs(a);\n#elif defined(ACOS)\nresult = abs(a) > 1.0 ? 0.0: acos(a);\nalpha *= step(abs(a), 1.00001);\n#elif defined(ACOSH)\nresult = acosh(a);\n#elif defined(POLYFILLACOSH)\nresult = log(a + sqrt(a * a - 1.0));\n#elif defined(ASIN)\nresult = abs(a) > 1.0 ? 0.0: asin(a);\nalpha *= step(abs(a), 1.00001);\n#elif defined(ASINH)\nresult = asinh(a);\n#elif defined(POLYFILLASINH)\nresult = log(a + sqrt(a * a + 1.0));\n#elif defined(ATAN)\nresult = atan(a);\n#elif defined(ATANH)\nresult = abs(a) > 1.0 ? 0.0: atanh(a);\nalpha *= step(abs(a), 1.0);\n#elif defined(POLYFILLATANH)\nresult = a == 1.0 ? 0.0 : 0.5 * log((1.0 + a)/(1.0 -a));\n#elif defined(ATAN_2)\nresult = atan(a, b);\n#elif defined(COS)\nresult = cos(a);\n#elif defined(COSH)\nresult = cosh(a);\n#elif defined(POLYFILLCOSH)\nfloat halfexp = exp(a) / 2.0;\nresult = halfexp + 1.0 / halfexp;\n#elif defined(SIN)\nresult = sin(a);\n#elif defined(SINH)\nresult = sinh(a);\n#elif defined(POLYFILLSINH)\nfloat halfexp = exp(a) / 2.0;\nresult = halfexp - 1.0 / halfexp;\n#elif defined(TAN)\nresult = tan(a);\n#elif defined(TANH)\nresult = tanh(a);\n#elif defined(POLYFILLTANH)\nfloat expx = exp(a);\nresult = (expx - 1.0 / expx) / (expx + 1.0 / expx);\n#elif defined(BITWISEAND)\nresult = a & b;\n#elif defined(BITWISEOR)\nresult = a | b;\n#elif defined(BITWISELEFTSHIFT)\nresult = a << b;\n#elif defined(BITWISERIGHTSHIFT)\nresult = a >> b;\n#elif defined(BITWISENOT)\nresult = ~a;\n#elif defined(BITWISEXOR)\nresult = a ^ b;\n#elif defined(BOOLEANAND)\nresult = float((a != 0.0) && (b != 0.0));\n#elif defined(BOOLEANNOT)\nresult = float(a == 0.0);\n#elif defined(BOOLEANOR)\nresult = float((a != 0.0) || (b != 0.0));\n#elif defined(BOOLEANXOR)\nresult = float((a != 0.0) ^^ (b != 0.0));\n#elif defined(GREATERTHAN)\nresult = float(a > b);\n#elif defined(GREATERTHANEQUAL)\nresult = float(a >= b);\n#elif defined(LESSTHAN)\nresult = float(a < b);\n#elif defined(LESSTHANEQUAL)\nresult = float(a <= b);\n#elif defined(EQUALTO)\nresult = float(a == b);\n#elif defined(NOTEQUAL)\nresult = float(a != b);\n#elif defined(ISNULL)\nresult = float(alpha == 0.0);\nalpha = 1.0;\n#elif defined(SETNULL)\nfloat maskValue = float(a == 0.0);\nresult = maskValue * b;\nalpha *= maskValue;\n#elif defined(CONDITIONAL)\nfloat weight = float(abs(sign(a)));\nresult = weight * b + (1.0 - weight) * c;\n#endif\nbool isInvalid = result < u_domainRange.s || result > u_domainRange.t;\nresult = isInvalid ? 0.0 : result;\nalpha *= float(!isInvalid);\n#ifdef ROUND_OUTPUT\nresult = floor(result + 0.5);\n#endif\ngl_FragColor = vec4(result, result, result, alpha);\n}" }, mask: { "mask.frag": "precision mediump float;\nuniform sampler2D u_image;\nvarying vec2 v_texcoord;\n#define LEN_INCLUDED_RANGES 6\n#define LEN_NODATA_VALUES 6\nuniform highp float u_includedRanges[6];\nuniform highp float u_noDataValues[6];\nfloat maskFactor(float bandValue, float fromValue, float to) {\nfloat factor = 1.0;\nfor (int i = 0; i < LEN_NODATA_VALUES; i++) {\nfactor *= float(u_noDataValues[i] != bandValue);\n}\nfactor *= step(fromValue, bandValue) * step(bandValue, to);\nreturn factor;\n}\nvoid main() {\nvec4 pv = texture2D(u_image, v_texcoord);\nfloat redFactor = maskFactor(pv.r, u_includedRanges[0], u_includedRanges[1]);\n#ifdef MULTI_BAND\nfloat greenFactor = maskFactor(pv.g, u_includedRanges[2], u_includedRanges[3]);\nfloat blueFactor = maskFactor(pv.b, u_includedRanges[4], u_includedRanges[5]);\nfloat maskFactor = redFactor * greenFactor * blueFactor;\ngl_FragColor = pv * maskFactor;\n#else\ngl_FragColor = pv * redFactor;\n#endif\n}" }, ndvi: { "ndvi.frag": "precision mediump float;\nuniform sampler2D u_image;\nvarying vec2 v_texcoord;\nuniform mediump mat3 u_bandIndexMat3;\n#include <raster/common/inverse.glsl>\nvoid main() {\nvec4 pv = texture2D(u_image, v_texcoord);\nvec3 pv2 = u_bandIndexMat3 * pv.rgb;\nfloat nir = pv2.r;\nfloat red = pv2.g;\nfloat index = (nir - red) * invertValue(nir + red);\n#ifdef SCALED\nindex = floor((index + 1.0) * 100.0 + 0.5);\n#endif\ngl_FragColor = vec4(index, index, index, pv.a);\n}" }, remap: { "remap.frag": "precision mediump float;\nuniform sampler2D u_image;\nvarying vec2 v_texcoord;\n#define LEN_REMAP_RANGES 18\n#define LEN_NODATA_RANGES 12\nuniform highp float u_rangeMaps[18];\nuniform highp float u_noDataRanges[12];\nuniform highp float u_unmatchMask;\nuniform vec2 u_clampRange;\nvoid main() {\nvec4 pv = texture2D(u_image, v_texcoord);\nfloat factor = 1.0;\nfloat bandValue = pv.r;\nfor (int i = 0; i < LEN_NODATA_RANGES; i+=2) {\nfloat inside = 1.0 - step(u_noDataRanges[i], bandValue) * step(bandValue, u_noDataRanges[i+1]);\nfactor *= inside;\n}\nfloat mapValue = 0.0;\nfloat includeMask = 0.0;\nfor (int i = 0; i < LEN_REMAP_RANGES; i+=3) {\nfloat stepMask = step(u_rangeMaps[i], bandValue) * step(bandValue, u_rangeMaps[i+1]);\nincludeMask = (1.0 - stepMask) * includeMask + stepMask;\nmapValue = (1.0 - stepMask) * mapValue + stepMask * u_rangeMaps[i+2];\n}\nbandValue = factor * (mapValue + (1.0 - includeMask) * u_unmatchMask * pv.r);\nfloat bandMask = factor * max(u_unmatchMask, includeMask);\nbandValue = clamp(bandValue, u_clampRange.s, u_clampRange.t);\ngl_FragColor = vec4(bandValue, bandValue, bandValue, bandMask * pv.a);\n}" }, slope: { "slope.frag": "precision mediump float;\nuniform sampler2D u_image;\nvarying vec2 v_texcoord;\nuniform vec2 u_cellSize;\nuniform float u_zFactor;\nuniform vec2 u_srcImageSize;\nuniform float u_pixelSizePower;\nuniform float u_pixelSizeFactor;\n#include <raster/common/getSurfaceValues.glsl>\nvoid main() {\nfloat pv[10];\ngetSurfaceValues(u_image, v_texcoord, u_srcImageSize, pv);\nfloat alpha = pv[9];\nfloat xf = (u_zFactor + pow(u_cellSize[0], u_pixelSizePower) * u_pixelSizeFactor) / (8.0 * u_cellSize[0]);\nfloat yf = (u_zFactor + pow(u_cellSize[1], u_pixelSizePower) * u_pixelSizeFactor) / (8.0 * u_cellSize[1]);\nfloat dzx = (pv[2] + 2.0 * pv[5] + pv[8] - pv[0] - 2.0 * pv[3] - pv[6]) * xf;\nfloat dzy = -(pv[6] + 2.0 * pv[7] + pv[8] - pv[0] - 2.0 * pv[1] - pv[2]) * yf;\nfloat rise2run = sqrt(dzx * dzx + dzy * dzy);\n#ifdef PERCENT_RISE\nfloat percentRise = rise2run * 100.0;\ngl_FragColor = vec4(percentRise, percentRise, percentRise, alpha);\n#else\nfloat degree = atan(rise2run) * 57.2957795;\ngl_FragColor = vec4(degree, degree, degree, alpha);\n#endif\n}" }, stretch: { "stretch.frag": "precision mediump float;\nuniform sampler2D u_image;\nvarying highp vec2 v_texcoord;\nuniform float u_minCutOff[3];\nuniform float u_maxCutOff[3];\nuniform float u_minOutput;\nuniform float u_maxOutput;\nuniform float u_factor[3];\nuniform float u_gamma[3];\nuniform float u_gammaCorrection[3];\nfloat stretchOneValue(float val, float minCutOff, float maxCutOff, float minOutput, float maxOutput, float factor, float gamma, float gammaCorrection) {\nval = clamp(val, minCutOff, maxCutOff);\nfloat stretchedVal;\n#ifdef USE_GAMMA\nfloat tempf = 1.0;\nfloat outRange = maxOutput - minOutput;\nfloat relativeVal = (val - minCutOff) / (maxCutOff - minCutOff);\ntempf -= step(1.0, gamma) * sign(gamma - 1.0) * pow(1.0 / outRange, relativeVal * gammaCorrection);\nstretchedVal = tempf * outRange * pow(relativeVal, 1.0 / gamma) + minOutput;\nstretchedVal = clamp(stretchedVal, minOutput, maxOutput);\n#else\nstretchedVal = minOutput + (val - minCutOff) * factor;\n#endif\n#ifdef ROUND_OUTPUT\nstretchedVal = floor(stretchedVal + 0.5);\n#endif\nreturn stretchedVal;\n}\nvoid main() {\nvec4 currentPixel = texture2D(u_image, v_texcoord);\nfloat redVal = stretchOneValue(currentPixel.r, u_minCutOff[0], u_maxCutOff[0], u_minOutput, u_maxOutput, u_factor[0], u_gamma[0], u_gammaCorrection[0]);\n#ifdef MULTI_BAND\nfloat greenVal = stretchOneValue(currentPixel.g, u_minCutOff[1], u_maxCutOff[1], u_minOutput, u_maxOutput, u_factor[1], u_gamma[1], u_gammaCorrection[1]);\nfloat blueVal = stretchOneValue(currentPixel.b, u_minCutOff[2], u_maxCutOff[2], u_minOutput, u_maxOutput, u_factor[2], u_gamma[2], u_gammaCorrection[2]);\ngl_FragColor = vec4(redVal, greenVal, blueVal, currentPixel.a);\n#else\ngl_FragColor = vec4(redVal, redVal, redVal, currentPixel.a);\n#endif\n}" }, vs: { "vs.vert": "precision mediump float;\nattribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\nv_texcoord = a_pos;\ngl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\n}" } }, scalar: { "scalar.frag": "precision mediump float;\nuniform lowp float u_opacity;\nvarying vec2 v_pos;\nconst vec4 outlineColor = vec4(0.2, 0.2, 0.2, 1.0);\nconst float outlineSize = 0.02;\nconst float innerRadius = 0.25;\nconst float outerRadius = 0.42;\nconst float innerSquareLength = 0.15;\nvoid main() {\nmediump float dist = length(v_pos);\nmediump float fillalpha1 = smoothstep(outerRadius, outerRadius + outlineSize, dist);\nfillalpha1 *= (1.0-smoothstep(outerRadius + outlineSize, outerRadius + 0.1 + outlineSize, dist));\n#ifdef INNER_CIRCLE\nmediump float fillalpha2 = smoothstep(innerRadius, innerRadius + outlineSize, dist);\nfillalpha2 *= (1.0-smoothstep(innerRadius + outlineSize, innerRadius + 0.1 + outlineSize, dist));\n#else\nmediump float fillalpha2 = (abs(v_pos.x) < innerSquareLength ? 1.0 : 0.0) * (abs(v_pos.y) < innerSquareLength ? 1.0 : 0.0);\n#endif\ngl_FragColor = (fillalpha2 + fillalpha1) * outlineColor * u_opacity;\n}", "scalar.vert": "precision mediump float;\nattribute vec2 a_pos;\nattribute vec2 a_offset;\nattribute vec2 a_vv;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nuniform vec2 u_symbolSize;\nuniform vec2 u_symbolPercentRange;\nuniform vec2 u_dataRange;\nvarying vec2 v_pos;\nvoid main()\n{\n#ifdef DATA_RANGE\nfloat valuePercentage = clamp((a_vv.y - u_dataRange.x) / (u_dataRange.y - u_dataRange.x), 0.0, 1.0);\nfloat sizeRatio = u_symbolPercentRange.x + valuePercentage * (u_symbolPercentRange.y - u_symbolPercentRange.x);\nfloat sizePercentage = clamp(sizeRatio, u_symbolPercentRange.x, u_symbolPercentRange.y);\n#else\nfloat sizePercentage = (u_symbolPercentRange.x + u_symbolPercentRange.y) / 2.0;\n#endif\nvec2 size = u_symbolSize * sizePercentage;\nvec2 pos = a_pos + a_offset * size;\nv_pos = a_offset;\ngl_Position = vec4(u_dvsMat3 * vec3(pos * u_coordScale, 1.0), 1.0);\n}" }, stretch: { "stretch.frag": "precision mediump float;\nvarying highp vec2 v_texcoord;\n#include <raster/common/common.glsl>\nuniform float u_minCutOff[3];\nuniform float u_maxCutOff[3];\nuniform float u_minOutput;\nuniform float u_maxOutput;\nuniform float u_factor[3];\nuniform bool u_useGamma;\nuniform float u_gamma[3];\nuniform float u_gammaCorrection[3];\n#include <raster/lut/colorize.glsl>\nfloat stretchOneValue(float val, float minCutOff, float maxCutOff, float minOutput, float maxOutput, float factor, bool useGamma, float gamma, float gammaCorrection) {\nif (val >= maxCutOff) {\nreturn maxOutput;\n} else if (val <= minCutOff) {\nreturn minOutput;\n}\nfloat stretchedVal;\nif (useGamma) {\nfloat tempf = 1.0;\nfloat outRange = maxOutput - minOutput;\nfloat relativeVal = (val - minCutOff) / (maxCutOff - minCutOff);\nif (gamma > 1.0) {\ntempf -= pow(1.0 / outRange, relativeVal * gammaCorrection);\n}\nstretchedVal = (tempf * outRange * pow(relativeVal, 1.0 / gamma) + minOutput) / 255.0;\n} else {\nstretchedVal = minOutput + (val - minCutOff) * factor;\n}\nreturn stretchedVal;\n}\nvoid main() {\nvec2 pixelLocation = getPixelLocation(v_texcoord);\nif (isOutside(pixelLocation)) {\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\nreturn;\n}\nvec4 currentPixel = getPixel(pixelLocation);\n#ifdef NOOP\ngl_FragColor = vec4(currentPixel.rgb, 1.0) * currentPixel.a * u_opacity;\nreturn;\n#endif\nif (u_bandCount == 1) {\nfloat grayVal = stretchOneValue(currentPixel.r, u_minCutOff[0], u_maxCutOff[0], u_minOutput, u_maxOutput, u_factor[0], u_useGamma, u_gamma[0], u_gammaCorrection[0]);\n#ifdef APPLY_COLORMAP\nvec4 result = colorize(vec4(grayVal, grayVal, grayVal, 1.0), u_useGamma ? 255.0 : 1.0);\ngl_FragColor = vec4(result.xyz, 1.0) * result.a * currentPixel.a * u_opacity;\n#else\ngl_FragColor = vec4(grayVal, grayVal, grayVal, 1.0) * currentPixel.a * u_opacity;\n#endif\n} else {\nfloat redVal = stretchOneValue(currentPixel.r, u_minCutOff[0], u_maxCutOff[0], u_minOutput, u_maxOutput, u_factor[0], u_useGamma, u_gamma[0], u_gammaCorrection[0]);\nfloat greenVal = stretchOneValue(currentPixel.g, u_minCutOff[1], u_maxCutOff[1], u_minOutput, u_maxOutput, u_factor[1], u_useGamma, u_gamma[1], u_gammaCorrection[1]);\nfloat blueVal = stretchOneValue(currentPixel.b, u_minCutOff[2], u_maxCutOff[2], u_minOutput, u_maxOutput, u_factor[2], u_useGamma, u_gamma[2], u_gammaCorrection[2]);\ngl_FragColor = vec4(redVal, greenVal, blueVal, 1.0) * currentPixel.a * u_opacity;\n}\n}" } }, stencil: { "stencil.frag": "void main() {\ngl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\n}", "stencil.vert": "attribute vec2 a_pos;\nuniform mat3 u_worldExtent;\nvoid main() {\ngl_Position = vec4(u_worldExtent * vec3(a_pos, 1.0), 1.0);\n}" }, tileInfo: { "tileInfo.frag": "uniform mediump sampler2D u_texture;\nvarying mediump vec2 v_tex;\nvoid main(void) {\nlowp vec4 color = texture2D(u_texture, v_tex);\ngl_FragColor = 0.75 * color;\n}", "tileInfo.vert": "attribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform mediump float u_depth;\nuniform mediump vec2 u_coord_ratio;\nuniform mediump vec2 u_delta;\nuniform mediump vec2 u_dimensions;\nvarying mediump vec2 v_tex;\nvoid main() {\nmediump vec2 offset = u_coord_ratio * vec2(u_delta + a_pos * u_dimensions);\nvec3 v_pos = u_dvsMat3 * vec3(offset, 1.0);\ngl_Position = vec4(v_pos.xy, 0.0, 1.0);\nv_tex = a_pos;\n}" }, util: { "atan2.glsl": "float atan2(in float y, in float x) {\nfloat t0, t1, t2, t3, t4;\nt3 = abs(x);\nt1 = abs(y);\nt0 = max(t3, t1);\nt1 = min(t3, t1);\nt3 = 1.0 / t0;\nt3 = t1 * t3;\nt4 = t3 * t3;\nt0 =         - 0.013480470;\nt0 = t0 * t4 + 0.057477314;\nt0 = t0 * t4 - 0.121239071;\nt0 = t0 * t4 + 0.195635925;\nt0 = t0 * t4 - 0.332994597;\nt0 = t0 * t4 + 0.999995630;\nt3 = t0 * t3;\nt3 = (abs(y) > abs(x)) ? 1.570796327 - t3 : t3;\nt3 = x < 0.0 ?  3.141592654 - t3 : t3;\nt3 = y < 0.0 ? -t3 : t3;\nreturn t3;\n}", "encoding.glsl": "const vec4 rgba2float_factors = vec4(\n255.0 / (256.0),\n255.0 / (256.0 * 256.0),\n255.0 / (256.0 * 256.0 * 256.0),\n255.0 / (256.0 * 256.0 * 256.0 * 256.0)\n);\nfloat rgba2float(vec4 rgba) {\nreturn dot(rgba, rgba2float_factors);\n}" } };

// node_modules/@arcgis/core/views/2d/engine/webgl/shaders/sources/resolver.js
function o3(e9) {
  let o5 = e7;
  return e9.split("/").forEach((r6) => {
    o5 && (o5 = o5[r6]);
  }), o5;
}
var t8 = new e4(o3);
function n9(r6) {
  return t8.resolveIncludes(r6);
}

// node_modules/@arcgis/core/views/2d/engine/webgl/shaders/BackgroundPrograms.js
var e8 = { shaders: { vertexShader: n9("background/background.vert"), fragmentShader: n9("background/background.frag") }, attributes: /* @__PURE__ */ new Map([["a_pos", 0]]) };

// node_modules/@arcgis/core/views/2d/engine/webgl/techniques/Technique.js
var t9 = class {
  static getStorageSpec(t12) {
    return null;
  }
  static createOrUpdateRendererSchema(t12, e9) {
    return null != t12 && "default" === t12.type ? t12 : { type: "default" };
  }
  static getVariation(t12) {
    return {};
  }
  static getVariationHash(t12) {
    return 0;
  }
};
t9.type = "default", t9.programSpec = null;

// node_modules/@arcgis/core/views/2d/engine/webgl/techniques/dotDensity/TechniqueDotDensity.js
var a3 = class extends t9 {
  static getStorageSpec({ attributes: e9 }) {
    return { visualVariables: false, attributes: e9 ?? null };
  }
  static _createRendererSchema() {
    return { type: "dot-density", colors: new Float32Array(32), dotValue: -1, dotSize: -1, dotScale: -1, dotBlending: false, backgroundColor: new Float32Array(4), activeDots: new Float32Array(8), seed: -1 };
  }
  static createOrUpdateRendererSchema(o5, r6) {
    const { attributes: a5, dotValue: n12, referenceScale: i12, dotSize: l9, dotBlendingEnabled: d3, seed: s8, backgroundColor: c10 } = r6, u10 = null != o5 && "dot-density" === o5.type ? o5 : this._createRendererSchema();
    u10.dotValue = n12, u10.dotSize = l9, u10.dotScale = i12, u10.dotBlending = d3, u10.seed = s8;
    const { colors: m4, activeDots: g3, backgroundColor: p4 } = u10;
    for (let y5 = 0; y5 < l2; y5++) {
      const t12 = y5 >= a5.length ? null : a5[y5].color;
      u4(m4, t12, 4 * y5);
    }
    for (let e9 = 0; e9 < 8; e9++)
      g3[e9] = e9 < r6.attributes.length ? 1 : 0;
    return u4(p4, c10), u10;
  }
  static getVariation(e9) {
    return { ddDotBlending: e9.dotBlending };
  }
  static getVariationHash(e9) {
    return e9.dotBlending ? 1 : 0;
  }
};
a3.type = "dot-density", a3.programSpec = { shader: "materials/fill", vertexLayout: { geometry: [{ location: 0, name: "a_pos", count: 2, type: C.SHORT }, { location: 1, name: "a_id", count: 3, type: C.UNSIGNED_BYTE }, { location: 2, name: "a_bitset", count: 1, type: C.UNSIGNED_BYTE }, { location: 3, name: "a_inverseArea", count: 1, type: C.FLOAT }] } };

// node_modules/@arcgis/core/views/2d/engine/webgl/techniques/heatmap/TechniqueHeatmap.js
var i5 = class extends t9 {
  static getStorageSpec({ field: e9, valueExpression: t12 }) {
    return { visualVariables: false, attributes: e9 || t12 ? [{ field: e9, valueExpression: t12 }] : null };
  }
  static _createRendererSchema() {
    return { type: "heatmap", radius: -1, referenceScale: -1, isFieldActive: 0, minDensity: -1, densityRange: -1, kernel: null, gradient: null, gradientHash: "invalid" };
  }
  static createOrUpdateRendererSchema(a5, r6) {
    const { radius: i12, minDensity: n12, maxDensity: s8, referenceScale: o5, field: c10, valueExpression: l9, colorStops: m4 } = r6, p4 = s8 - n12, d3 = c10 || l9 ? 1 : 0, u10 = m4.map(({ color: e9, ratio: t12 }) => `${t12}:${e9.toString()}`).join();
    let h4, y5 = true;
    return null != a5 && "heatmap" === a5.type ? (h4 = a5, y5 = u10 !== a5.gradientHash) : h4 = this._createRendererSchema(), h4.radius = u2(i12), h4.minDensity = n12, h4.densityRange = p4, h4.referenceScale = o5, h4.isFieldActive = d3, y5 && (h4.gradient = u3(m4), h4.gradientHash = u10), h4;
  }
};
i5.type = "heatmap", i5.programSpec = { shader: "materials/icon/heatmapAccumulate", vertexLayout: { geometry: [{ location: 0, name: "a_pos", count: 2, type: C.SHORT }, { location: 1, name: "a_vertexOffset", count: 2, type: C.SHORT }, { location: 4, name: "a_id", count: 4, type: C.UNSIGNED_BYTE }] } };

// node_modules/@arcgis/core/views/2d/engine/webgl/techniques/pieChart/TechniquePieChart.js
var i6 = class extends t9 {
  static getStorageSpec({ attributes: e9 }) {
    return { visualVariables: true, attributes: e9 ?? null };
  }
  static _createRendererSchema() {
    return { type: "pie-chart", colors: new Float32Array(4 * n2), defaultColor: new Float32Array(4), othersColor: new Float32Array(4), outlineColor: new Float32Array(4), holePercentage: 0, sectorThreshold: 0, outlineWidth: 1, numberOfFields: 10 };
  }
  static createOrUpdateRendererSchema(a5, n12) {
    const { attributes: i12, defaultColor: l9, holePercentage: s8, othersCategory: c10, outline: u10 } = n12, m4 = null != a5 && "pie-chart" === a5.type ? a5 : this._createRendererSchema();
    for (let t12 = 0; t12 < n2; t12++) {
      const r6 = t12 >= i12.length ? new h([0, 0, 0, 0]) : i12[t12].color;
      u4(m4.colors, r6, 4 * t12);
    }
    return u4(m4.defaultColor, l9), u4(m4.othersColor, c10 == null ? void 0 : c10.color), u4(m4.outlineColor, u10 == null ? void 0 : u10.color), m4.outlineWidth = u2((u10 == null ? void 0 : u10.width) || 0), m4.holePercentage = s8, m4.sectorThreshold = (c10 == null ? void 0 : c10.threshold) || 0, m4.numberOfFields = i12.length, m4;
  }
  static getVariation(e9) {
    return { numberOfFields: e9.numberOfFields };
  }
  static getVariationHash(e9) {
    return e9.numberOfFields;
  }
};
i6.type = "pie-chart", i6.programSpec = { shader: "materials/pie", vertexLayout: { geometry: [{ location: 0, name: "a_pos", count: 2, type: C.SHORT }, { location: 1, name: "a_vertexOffset", count: 2, type: C.SHORT }, { location: 2, name: "a_texCoords", count: 2, type: C.UNSIGNED_SHORT }, { location: 3, name: "a_bitSetAndDistRatio", count: 2, type: C.UNSIGNED_SHORT }, { location: 4, name: "a_id", count: 4, type: C.UNSIGNED_BYTE }, { location: 5, name: "a_color", count: 4, type: C.UNSIGNED_BYTE, normalized: true }, { location: 6, name: "a_outlineColor", count: 4, type: C.UNSIGNED_BYTE, normalized: true }, { location: 7, name: "a_sizeAndOutlineWidth", count: 4, type: C.UNSIGNED_BYTE }, { location: 8, name: "a_zoomRange", count: 2, type: C.UNSIGNED_SHORT }] }, hittestAttributes: ["a_vertexOffset", "a_texCoords"] };

// node_modules/@arcgis/core/views/2d/engine/webgl/brushes/WGLGeometryBrush.js
var v = class extends t6 {
  constructor() {
    super(...arguments), this._computeDesc = /* @__PURE__ */ new Map();
  }
  prepareState({ context: t12 }, e9) {
    e9 && e9.includes("hittest") ? t12.setBlendFunctionSeparate(R.ONE, R.ONE, R.ONE, R.ONE) : t12.setBlendFunctionSeparate(R.ONE, R.ONE_MINUS_SRC_ALPHA, R.ONE, R.ONE_MINUS_SRC_ALPHA), t12.setBlendingEnabled(true), t12.setColorMask(true, true, true, true), t12.setStencilWriteMask(0), t12.setStencilTestEnabled(true);
  }
  draw(t12, e9, i12) {
    const s8 = this.getGeometryType();
    e9.commit(t12);
    const o5 = e9.getGeometry(s8);
    null != o5 && (t12.timeline.begin(this.name), t12.attributeView.bindTextures(t12.context), t12.context.setStencilFunction(I.EQUAL, e9.stencilRef, 255), o5.forEachCommand((s9) => {
      const o6 = U2.load(s9.materialKey).symbologyType;
      this.supportsSymbology(o6) && this.drawGeometry(t12, e9, s9, i12);
    }));
  }
  _setSharedUniforms(n12, u10, m4) {
    const { displayLevel: l9, pixelRatio: v3, state: f3, passOptions: p4 } = u10;
    null != p4 && "hittest" === p4.type && (n12.setUniform2fv("u_hittestPos", p4.position), n12.setUniform1f("u_hittestDist", p4.distance)), n12.setUniform1f("u_pixelRatio", v3), n12.setUniformMatrix3fv("u_tileMat3", m4.transforms.tileMat3), n12.setUniformMatrix3fv("u_viewMat3", f3.viewMat3), n12.setUniformMatrix3fv("u_dvsMat3", m4.transforms.dvs), n12.setUniformMatrix3fv("u_displayViewMat3", f3.displayViewMat3), n12.setUniform1f("u_currentZoom", Math.round(l9 * me)), n12.setUniform1i("u_attributeTextureSize", u10.attributeView.size), n12.setUniform1i("u_attributeData0", E2), n12.setUniform1i("u_attributeData1", F2), n12.setUniform1i("u_attributeData2", G2), n12.setUniform1i("u_attributeData3", H), n12.setUniform1i("u_attributeData4", I2), n12.setUniform1i("u_attributeData5", J);
  }
  _setSizeVVUniforms(t12, e9, i12, s8) {
    if (t12.vvSizeMinMaxValue && e9.setUniform4fv("u_vvSizeMinMaxValue", i12.vvSizeMinMaxValue), t12.vvSizeScaleStops && e9.setUniform1f("u_vvSizeScaleStopsValue", i12.vvSizeScaleStopsValue), t12.vvSizeFieldStops) {
      const t13 = i12.getSizeVVFieldStops(s8.key.level);
      null != t13 && (e9.setUniform1fv("u_vvSizeFieldStopsValues", t13.values), e9.setUniform1fv("u_vvSizeFieldStopsSizes", t13.sizes));
    }
    t12.vvSizeUnitValue && e9.setUniform1f("u_vvSizeUnitValueWorldToPixelsRatio", i12.vvSizeUnitValueToPixelsRatio);
  }
  _setColorAndOpacityVVUniforms(t12, e9, i12) {
    t12.vvColor && (e9.setUniform1fv("u_vvColorValues", i12.vvColorValues), e9.setUniform4fv("u_vvColors", i12.vvColors)), t12.vvOpacity && (e9.setUniform1fv("u_vvOpacityValues", i12.vvOpacityValues), e9.setUniform1fv("u_vvOpacities", i12.vvOpacities));
  }
  _setRotationVVUniforms(t12, e9, i12) {
    t12.vvRotation && e9.setUniform1f("u_vvRotationType", "geographic" === i12.vvMaterialParameters.vvRotationType ? 0 : 1);
  }
  _getTriangleDesc(t12, e9, i12 = ["a_pos"]) {
    const s8 = e9.bufferLayouts.geometry, o5 = i12.map((t13) => s8.findIndex((e10) => e10.name === t13)), a5 = `${t12}-${o5.join("-")}`;
    let r6 = this._computeDesc.get(a5);
    if (!r6) {
      const t13 = e9.strides, i13 = e9.strides.geometry, n12 = new Map(e9.attributes), u10 = s8.map((t14) => ({ ...t14 })), m4 = Math.max(...e9.attributes.values()), l9 = { geometry: u10 };
      let v3 = 0;
      for (const e10 of o5) {
        const t14 = s8[e10];
        l9.geometry.push({ count: t14.count, name: t14.name + "1", divisor: t14.divisor, normalized: t14.normalized, offset: i13 + t14.offset, stride: i13, type: t14.type }), l9.geometry.push({ count: t14.count, name: t14.name + "2", divisor: t14.divisor, normalized: t14.normalized, offset: 2 * i13 + t14.offset, stride: i13, type: t14.type }), n12.set(t14.name + "1", m4 + ++v3), n12.set(t14.name + "2", m4 + ++v3);
      }
      r6 = { bufferLayouts: l9, attributes: n12, strides: t13 }, this._computeDesc.set(a5, r6);
    }
    return r6;
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/techniques/utils.js
function s4(r6, t12) {
  if (r6.type !== t12)
    throw new s2("material-view-model:unexpected-renderer-schema", `expected to find renderer schema of type "${t12}" but found type "${r6.type}"`);
}
function c6(e9) {
  switch (e9 == null ? void 0 : e9.type) {
    case "dot-density":
      return a3;
    case "heatmap":
      return i5;
    case "pie-chart":
      return i6;
    default:
      return t9;
  }
}
function p(e9) {
  const { geometryType: s8, symbologyType: c10 } = U2.load(e9);
  switch (s8) {
    case E3.FILL:
      if (c10 === S.DOT_DENSITY)
        return a3;
      break;
    case E3.MARKER:
      switch (c10) {
        case S.HEATMAP:
          return i5;
        case S.PIE_CHART:
          return i6;
      }
  }
  return t9;
}

// node_modules/@arcgis/core/views/2d/engine/webgl/brushes/WGLGeometryBrushMarker.js
var l5 = { shader: "materials/icon", vertexLayout: { geometry: [{ location: 0, name: "a_pos", count: 2, type: C.SHORT }, { location: 1, name: "a_vertexOffset", count: 2, type: C.SHORT }, { location: 2, name: "a_texCoords", count: 2, type: C.UNSIGNED_SHORT }, { location: 3, name: "a_bitSetAndDistRatio", count: 2, type: C.UNSIGNED_SHORT }, { location: 4, name: "a_id", count: 4, type: C.UNSIGNED_BYTE }, { location: 5, name: "a_color", count: 4, type: C.UNSIGNED_BYTE, normalized: true }, { location: 6, name: "a_outlineColor", count: 4, type: C.UNSIGNED_BYTE, normalized: true }, { location: 7, name: "a_sizeAndOutlineWidth", count: 4, type: C.UNSIGNED_BYTE }, { location: 8, name: "a_zoomRange", count: 2, type: C.UNSIGNED_SHORT }] }, hittestAttributes: ["a_vertexOffset", "a_texCoords"] };
var m2 = class extends v {
  dispose() {
  }
  getGeometryType() {
    return E3.MARKER;
  }
  supportsSymbology(t12) {
    return t12 !== S.HEATMAP && t12 !== S.PIE_CHART;
  }
  drawGeometry(t12, e9, a5, i12) {
    const { context: m4, painter: u10, rendererInfo: d3, state: c10, passOptions: p4, requestRender: y5, allowDelayedRender: _5 } = t12, E5 = N3.load(a5.materialKey), f3 = p(E5.data), S2 = null != p4 && "hittest" === p4.type, { shader: N5, vertexLayout: T4, hittestAttributes: g3 } = f3.programSpec ?? l5;
    let x4 = E.TRIANGLES, R2 = ee2(E5.data, T4);
    S2 && (R2 = this._getTriangleDesc(a5.materialKey, R2, g3), x4 = E.POINTS);
    const { attributes: h4, bufferLayouts: U3 } = R2, A = u10.materialManager.getMaterialProgram(t12, E5, N5, h4, i12);
    if (_5 && null != y5 && !A.compiled)
      return void y5();
    m4.useProgram(A), E5.textureBinding && u10.textureManager.bindTextures(m4, A, E5, true), this._setSharedUniforms(A, t12, e9);
    const O5 = E5.vvRotation ? c10.displayViewMat3 : c10.displayMat3;
    A.setUniformMatrix3fv("u_displayMat3", O5), this._setSizeVVUniforms(E5, A, d3, e9), this._setColorAndOpacityVVUniforms(E5, A, d3), this._setRotationVVUniforms(E5, A, d3);
    const G4 = a5.target.getVAO(m4, U3, h4, S2);
    let I3 = a5.indexCount, M2 = a5.indexFrom * Uint32Array.BYTES_PER_ELEMENT;
    S2 && (I3 /= 3, M2 /= 3), m4.bindVAO(G4), this._drawMarkers(t12, e9, A, x4, I3, M2, S2), m4.bindVAO(null);
  }
  _drawMarkers(t12, e9, o5, a5, r6, n12, s8) {
    t12.context.drawElements(a5, r6, C.UNSIGNED_INT, n12);
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/effects/Effect.js
var t10 = class {
  constructor() {
    this.name = this.constructor.name;
  }
  createOptions(t12, r6) {
    return null;
  }
};

// node_modules/@arcgis/core/views/webgl/heatmapTextureUtils.js
function n10(n12, i12) {
  const { textureFloat: f3, colorBufferFloat: s8 } = n12.capabilities, u10 = f3 == null ? void 0 : f3.textureFloat, m4 = f3 == null ? void 0 : f3.textureFloatLinear, _5 = f3 == null ? void 0 : f3.textureHalfFloat, p4 = f3 == null ? void 0 : f3.textureHalfFloatLinear, d3 = f3 == null ? void 0 : f3.HALF_FLOAT, x4 = s8 == null ? void 0 : s8.textureFloat, b2 = s8 == null ? void 0 : s8.textureHalfFloat, c10 = s8 == null ? void 0 : s8.floatBlend, h4 = u(n12.driverTest).floatBufferBlend.result;
  if (!u10 && !_5)
    throw new s2("heatmap:missing-texture-float", "HeatmapRenderer requires WebGL2 or the WebGL1 extension OES_texture_float or OES_texture_half_float.");
  if (!x4 && !b2)
    throw new s2("heatmap:missing-color-buffer-float", "HeatmapRenderer requires the WebGL extension EXT_color_buffer_float or EXT_color_buffer_half_float or WEBGL_color_buffer_float.");
  if (!(c10 && h4 || b2))
    throw new s2("heatmap:missing-float-blend", "HeatmapRenderer requires the WebGL extension EXT_float_blend or EXT_color_buffer_half_float." + (h4 ? "" : " This device claims support for EXT_float_blend, but does not actually support it."));
  const E5 = u10 && x4 && c10 && h4, F3 = _5 && b2, R2 = m4, L2 = p4, T4 = !!(s8 == null ? void 0 : s8.R32F), w5 = !!(s8 == null ? void 0 : s8.R16F);
  if (E5 && (R2 || !L2))
    return R2 || i12.warnOnce("Missing WebGL extension OES_texture_float_linear. Heatmap quality may be reduced."), { dataType: U.FLOAT, samplingMode: R2 ? L.LINEAR : L.NEAREST, pixelFormat: T4 ? G.RED : G.RGBA, internalFormat: T4 ? P.R32F : G.RGBA };
  if (F3)
    return L2 || i12.warnOnce("Missing WebGL extension OES_texture_half_float_linear. Heatmap quality may be reduced."), { dataType: d3, samplingMode: L2 ? L.LINEAR : L.NEAREST, pixelFormat: w5 ? G.RED : G.RGBA, internalFormat: w5 ? P.R16F : G.RGBA };
  throw new s2("heatmap:missing-hardware-support", "HeatmapRenderer requires WebGL extensions that allow it to render and blend to float or half float textures.");
}

// node_modules/@arcgis/core/views/2d/engine/webgl/brushes/WGLBrushHeatmap.js
var T3 = s.getLogger("esri.views.2d.engine.webgl.brushes.WGLBrushHeatmap");
function v2(e9) {
  return "heatmap" === e9.type;
}
function B2(e9, t12) {
  const { referenceScale: r6, radius: i12 } = e9;
  return i12 * (0 !== r6 ? r6 / t12.scale : 1);
}
var E4 = class extends m2 {
  constructor() {
    super(...arguments), this.brushEffect = new G3();
  }
  supportsSymbology(e9) {
    return e9 === S.HEATMAP;
  }
  dispose() {
    super.dispose(), this.brushEffect.dispose(), this.brushEffect = null;
  }
  prepareState() {
  }
  drawGeometry(e9, t12, r6, i12) {
    const { defines: s8 } = this.brushEffect.loadQualityProfile(e9.context);
    super.drawGeometry(e9, t12, r6, i12 ? [...i12, ...s8] : s8);
  }
  _drawMarkers(e9, t12, r6, i12, s8, a5, n12) {
    const { context: f3, rendererInfo: c10, state: h4 } = e9, { rendererSchema: m4 } = c10;
    s4(m4, "heatmap");
    const { isFieldActive: p4 } = m4;
    r6.setUniform1f("u_radius", B2(m4, h4)), n12 || (r6.setUniform1f("u_isFieldActive", p4), f3.setStencilFunction(I.GEQUAL, t12.stencilRef, 255)), f3.drawElements(i12, s8, C.UNSIGNED_INT, a5);
  }
};
var O4 = { vsPath: "heatmap/heatmapResolve", fsPath: "heatmap/heatmapResolve", attributes: /* @__PURE__ */ new Map([["a_position", 0]]) };
var x2 = 0.25;
var y2 = 1 / (2 * x2);
function P3(e9) {
  return e9 < y2 ? 1 : x2;
}
var G3 = class extends t10 {
  constructor() {
    super(...arguments), this.name = this.constructor.name;
  }
  createOptions({ passOptions: e9 }) {
    return e9;
  }
  dispose() {
    this._prevFBO = null, null != this._accumulateFramebuffer && this._accumulateFramebuffer.detachDepthStencilBuffer(), this._accumulateOutputStencilBuffer = t(this._accumulateOutputStencilBuffer), this._accumulateFramebuffer = t(this._accumulateFramebuffer), this._resolveGradientTexture = t(this._resolveGradientTexture), this._tileQuad = t(this._tileQuad);
  }
  bind(e9) {
    const { context: t12, rendererInfo: r6, passOptions: i12, state: s8 } = e9, { rendererSchema: a5 } = r6;
    !(null != i12 && "hittest" === i12.type) && v2(a5) && (this._prevFBO = t12.getBoundFramebufferObject(), this._prevViewport = t12.getViewport(), s4(a5, "heatmap"), this._loadResources(e9), this._updateResources(t12, a5, s8), t12.bindFramebuffer(this._accumulateFramebuffer), t12.setViewport(0, 0, this._accumulateFramebuffer.width, this._accumulateFramebuffer.height), t12.setStencilTestEnabled(true), t12.setBlendingEnabled(true), t12.setBlendFunction(R.ONE, R.ONE), t12.setClearColor(0, 0, 0, 0), t12.clear(_.COLOR_BUFFER_BIT));
  }
  unbind() {
    this._prevFBO = null, this._prevViewport = null;
  }
  draw(e9) {
    const { context: t12, painter: r6, rendererInfo: i12, passOptions: s8 } = e9, { rendererSchema: a5 } = i12;
    if (null != s8 && "hittest" === s8.type || !v2(a5))
      return;
    const { defines: u10 } = this.loadQualityProfile(t12), n12 = r6.materialManager.getProgram(O4, u10);
    t12.useProgram(n12), t12.bindFramebuffer(this._prevFBO), t12.setViewport(0, 0, this._prevViewport.width, this._prevViewport.height), t12.setBlendFunction(R.ONE, R.ONE_MINUS_SRC_ALPHA), t12.setStencilTestEnabled(false);
    const { radius: o5, minDensity: l9, densityRange: c10 } = a5;
    t12.bindTexture(this._accumulateFramebuffer.colorTexture, 8), t12.bindTexture(this._resolveGradientTexture, 9), n12.setUniform1i("u_texture", 8), n12.setUniform1i("u_gradient", 9), n12.setUniform2f("u_densityMinAndInvRange", l9, 1 / c10), n12.setUniform1f("u_densityNormalization", 3 / (o5 * o5 * Math.PI)), this._tileQuad.draw();
  }
  _loadResources({ context: e9, painter: t12 }) {
    const { dataType: r6, samplingMode: s8, pixelFormat: a5, internalFormat: u10, requiresSharedStencilBuffer: n12 } = this.loadQualityProfile(e9), { width: o5, height: l9 } = this._prevViewport, f3 = o5 * x2, c10 = l9 * x2;
    let p4 = new e3(f3, c10);
    p4.pixelFormat = a5, p4.internalFormat = u10, p4.dataType = r6, p4.samplingMode = s8, p4.wrapMode = D.CLAMP_TO_EDGE, n12 || (this._accumulateOutputStencilBuffer ?? (this._accumulateOutputStencilBuffer = new n6(e9, new i2(B.DEPTH_STENCIL, f3, c10)))), this._accumulateFramebuffer ?? (this._accumulateFramebuffer = new x(e9, p4, n12 ? t12.getSharedStencilBuffer() : this._accumulateOutputStencilBuffer)), p4 = new e3(), p4.wrapMode = D.CLAMP_TO_EDGE, this._resolveGradientTexture ?? (this._resolveGradientTexture = new T2(e9, p4)), this._tileQuad ?? (this._tileQuad = new n7(e9, [0, 0, 1, 0, 0, 1, 1, 1]));
  }
  _updateResources(e9, t12, r6) {
    const { gradientHash: i12, gradient: s8 } = t12;
    this._prevGradientHash !== i12 && (this._resolveGradientTexture.resize(s8.length / 4, 1), this._resolveGradientTexture.setData(s8), this._prevGradientHash = i12);
    const { requiresSharedStencilBuffer: a5 } = this.loadQualityProfile(e9), u10 = a5 ? 1 : P3(B2(t12, r6)), { width: n12, height: o5 } = this._prevViewport, l9 = n12 * u10, f3 = o5 * u10, { width: h4, height: m4 } = this._accumulateFramebuffer;
    if (h4 !== l9 || m4 !== f3) {
      const e10 = this._accumulateFramebuffer.depthStencilAttachment;
      if (a5 && null != e10) {
        const { width: t13, height: r7 } = e10.descriptor;
        t13 === l9 && r7 === f3 || (T3.errorOnce("Attempted to resize shared stencil buffer! Detaching instead."), this._accumulateFramebuffer.detachDepthStencilBuffer());
      }
      this._accumulateFramebuffer.resize(l9, f3);
    }
    a5 || e9.blitFramebuffer(this._prevFBO, this._accumulateFramebuffer, 0, 0, this._prevFBO.width, this._prevFBO.height, 0, 0, this._accumulateFramebuffer.width, this._accumulateFramebuffer.height, _.STENCIL_BUFFER_BIT, L.NEAREST);
  }
  loadQualityProfile(e9) {
    if (null == this._qualityProfile) {
      const t12 = n10(e9, T3), r6 = e9.type === n5.WEBGL1;
      this._qualityProfile = { ...t12, requiresSharedStencilBuffer: r6, defines: t12.dataType !== U.FLOAT ? ["heatmapPrecisionHalfFloat"] : [] };
    }
    return this._qualityProfile;
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/DefaultVertexAttributeLayouts.js
var r4 = { geometry: [new t4("a_pos", 2, C.BYTE, 0, 2)] };
var t11 = { geometry: [new t4("a_pos", 2, C.BYTE, 0, 4), new t4("a_tex", 2, C.BYTE, 2, 4)] };
var m3 = { geometry: [new t4("a_pos", 2, C.UNSIGNED_SHORT, 0, 4)] };

// node_modules/@arcgis/core/views/2d/engine/webgl/shaders/TileInfoPrograms.js
var r5 = { shaders: { vertexShader: n9("tileInfo/tileInfo.vert"), fragmentShader: n9("tileInfo/tileInfo.frag") }, attributes: /* @__PURE__ */ new Map([["a_pos", 0]]) };

// node_modules/@arcgis/core/views/webgl/capabilities/isWebGL2Context.js
function n11(n12) {
  return window.WebGL2RenderingContext && n12 instanceof window.WebGL2RenderingContext;
}

// node_modules/@arcgis/core/views/2d/engine/webgl/brushes/BrushClip.js
var l6 = () => ee2("clip", { geometry: [{ location: 0, name: "a_pos", count: 2, type: C.SHORT }] });
var p2 = class extends t6 {
  constructor() {
    super(...arguments), this._color = r3(0, 1, 0, 1);
  }
  dispose() {
    this._program && this._program.dispose();
  }
  prepareState({ context: e9 }) {
    e9.setStencilTestEnabled(true), e9.setBlendingEnabled(false), e9.setFaceCullingEnabled(false), e9.setColorMask(false, false, false, false), e9.setStencilOp(O.KEEP, O.KEEP, O.REPLACE), e9.setStencilWriteMask(255), e9.setStencilFunction(I.ALWAYS, 0, 255);
  }
  draw(e9, r6) {
    const { context: t12, state: o5, requestRender: a5, allowDelayedRender: p4 } = e9, c10 = l6(), d3 = r6.getVAO(t12, o5, c10.attributes, c10.bufferLayouts);
    null != d3.indexBuffer && (this._program || (this._program = e5(t12, e8)), !p4 || null == a5 || this._program.compiled ? (t12.useProgram(this._program), this._program.setUniform2fv("u_coord_range", [1, 1]), this._program.setUniform4fv("u_color", this._color), this._program.setUniformMatrix3fv("u_dvsMat3", o5.displayMat3), t12.bindVAO(d3), t12.drawElements(E.TRIANGLES, d3.indexBuffer.size, C.UNSIGNED_INT, 0), t12.bindVAO()) : a5());
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/brushes/BrushOverlay.js
var i7 = () => ee2("overlay", { geometry: [{ location: 0, name: "a_pos", count: 2, type: C.FLOAT }], tex: [{ location: 1, name: "a_uv", count: 2, type: C.UNSIGNED_SHORT }] });
var u7 = class extends t6 {
  constructor() {
    super(...arguments), this._desc = { vsPath: "overlay/overlay", fsPath: "overlay/overlay", attributes: /* @__PURE__ */ new Map([["a_pos", 0], ["a_uv", 1]]) };
  }
  dispose() {
  }
  prepareState({ context: e9 }) {
    e9.setBlendingEnabled(true), e9.setColorMask(true, true, true, true), e9.setBlendFunctionSeparate(R.ONE, R.ONE_MINUS_SRC_ALPHA, R.ONE, R.ONE_MINUS_SRC_ALPHA), e9.setStencilWriteMask(0), e9.setStencilTestEnabled(true), e9.setStencilFunction(I.GREATER, 255, 255);
  }
  draw(t12, r6) {
    const { context: s8, painter: n12, requestRender: a5, allowDelayedRender: u10 } = t12;
    if (!r6.isReady)
      return;
    const { computedOpacity: c10, dvsMat3: l9, isWrapAround: d3, perspectiveTransform: m4, texture: p4 } = r6;
    t12.timeline.begin(this.name);
    const f3 = n12.materialManager.getProgram(this._desc);
    if (u10 && null != a5 && !f3.compiled)
      return void a5();
    const _5 = i7(), v3 = r6.getVAO(s8, _5.bufferLayouts, _5.attributes);
    if (!v3)
      return;
    s8.bindVAO(v3), s8.useProgram(f3), s8.bindTexture(p4, D2), f3.setUniformMatrix3fv("u_dvsMat3", l9), f3.setUniform1i("u_texture", D2), f3.setUniform1f("u_opacity", c10), f3.setUniform2fv("u_perspective", m4);
    const y5 = d3 ? 10 : 4;
    s8.drawArrays(E.TRIANGLE_STRIP, 0, y5), s8.bindVAO(), t12.timeline.end(this.name);
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/brushes/WGLGeometryBrushFill.js
function u8(e9) {
  const t12 = { geometry: [{ location: 0, name: "a_pos", count: 2, type: C.SHORT }, { location: 1, name: "a_id", count: 3, type: C.UNSIGNED_BYTE }, { location: 2, name: "a_bitset", count: 1, type: C.UNSIGNED_BYTE }, { location: 3, name: "a_color", count: 4, type: C.UNSIGNED_BYTE, normalized: true }, { location: 4, name: "a_aux1", count: 4, type: C.UNSIGNED_SHORT }, { location: 5, name: "a_aux2", count: 4, type: C.SHORT }, { location: 6, name: "a_aux3", count: 4, type: C.UNSIGNED_BYTE }, { location: 7, name: "a_zoomRange", count: 2, type: C.UNSIGNED_SHORT }] };
  switch (e9.symbologyType) {
    case S.SIMPLE:
    case S.OUTLINE_FILL_SIMPLE:
      t12.geometry.splice(7, 1), t12.geometry.splice(4, 1);
  }
  return { shader: "materials/fill", vertexLayout: t12 };
}
var c7 = class extends v {
  dispose() {
  }
  getGeometryType() {
    return E3.FILL;
  }
  supportsSymbology(e9) {
    return e9 !== S.DOT_DENSITY;
  }
  drawGeometry(o5, r6, i12, m4) {
    const { context: c10, painter: f3, rendererInfo: p4, requiredLevel: y5, passOptions: _5, requestRender: d3, allowDelayedRender: E5 } = o5, g3 = w2.load(i12.materialKey), N5 = p(g3.data), S2 = null != _5 && "hittest" === _5.type, T4 = f3.materialManager, { shader: I3, vertexLayout: U3, hittestAttributes: x4 } = N5.programSpec ?? u8(g3);
    let h4 = E.TRIANGLES, L2 = ee2(g3.data, U3);
    S2 && (L2 = this._getTriangleDesc(i12.materialKey, L2, x4), h4 = E.POINTS);
    const { attributes: O5, bufferLayouts: G4 } = L2, D3 = T4.getMaterialProgram(o5, g3, I3, O5, m4);
    if (E5 && null != d3 && !D3.compiled)
      return void d3();
    c10.useProgram(D3), this._setSharedUniforms(D3, o5, r6);
    const { row: b2, col: R2 } = r6.key, M2 = R2 * c2, w5 = b2 * c2;
    if (D3.setUniform2f("u_tileOffset", M2 % m, w5 % m), D3.setUniform2f("u_maxIntNumOfCrossing", Math.floor(M2 / m), Math.floor(w5 / m)), g3.textureBinding) {
      f3.textureManager.bindTextures(c10, D3, g3);
      const e9 = 1 / 2 ** (y5 - r6.key.level);
      D3.setUniform1f("u_zoomFactor", e9);
    }
    const j = 1 / o5.pixelRatio;
    D3.setUniform1f("u_blur", j), D3.setUniform1f("u_antialiasing", j), this._setSizeVVUniforms(g3, D3, p4, r6), this._setColorAndOpacityVVUniforms(g3, D3, p4);
    const B3 = i12.target.getVAO(c10, G4, O5, S2);
    let A = i12.indexCount, F3 = i12.indexFrom * Uint32Array.BYTES_PER_ELEMENT;
    S2 && (A /= 3, F3 /= 3), c10.bindVAO(B3), this._drawFills(o5, r6, D3, h4, A, F3);
  }
  _drawFills(e9, t12, o5, r6, a5, i12) {
    e9.context.drawElements(r6, a5, C.UNSIGNED_INT, i12);
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/brushes/WGLBrushDotDensity.js
var g = class extends c7 {
  constructor() {
    super(...arguments), this._dotTextureSize = 0, this._dotTextures = null, this._dotSamplers = new Int32Array([N2, O2]), this._dotVAO = null, this._dotDesc = { vsPath: "dot/dot", fsPath: "dot/dot", attributes: /* @__PURE__ */ new Map([["a_pos", 0]]) };
  }
  dispose() {
    super.dispose(), this._disposeTextures(), this._dotFBO = t(this._dotFBO), this._dotVAO = t(this._dotVAO);
  }
  getGeometryType() {
    return E3.FILL;
  }
  supportsSymbology(e9) {
    return e9 === S.DOT_DENSITY;
  }
  _drawFills(e9, t12, o5, r6, s8, i12) {
    const { passOptions: n12 } = e9;
    if (null != n12 && "hittest" === n12.type)
      super._drawFills(e9, t12, o5, r6, s8, i12);
    else {
      const r7 = this._drawDotLocations(e9, t12, o5, s8, i12);
      this._drawDotDensity(e9, t12, r7);
    }
  }
  _drawDotDensity(e9, t12, o5) {
    const { context: r6, painter: s8, rendererInfo: i12, requestRender: n12, allowDelayedRender: d3 } = e9, l9 = s8.materialManager.getProgram(this._dotDesc);
    if (d3 && null != n12 && !l9.compiled)
      return void n12();
    const { rendererSchema: m4 } = i12;
    s4(m4, "dot-density");
    const c10 = this._createDotDensityMesh(r6, this._dotDesc.attributes, { geometry: [{ name: "a_pos", count: 2, type: C.SHORT, divisor: 0, normalized: false, offset: 0, stride: 4 }] });
    r6.setStencilTestEnabled(true), r6.useProgram(l9), l9.setUniform1f("u_tileZoomFactor", 1), l9.setUniform1i("u_texture", this._dotSamplers[0]), l9.setUniform1f("u_dotSize", Math.max(m4.dotSize, 1)), l9.setUniform1f("u_pixelRatio", window.devicePixelRatio), this._setSharedUniforms(l9, e9, t12), r6.bindTexture(o5, this._dotSamplers[0]), r6.bindVAO(c10), r6.drawArrays(E.POINTS, 0, 262144);
  }
  _drawDotLocations(e9, t12, o5, r6, i12) {
    const { context: n12, rendererInfo: d3, requiredLevel: l9 } = e9, m4 = n12.getViewport(), { rendererSchema: c10 } = d3;
    s4(c10, "dot-density");
    const { dotScale: f3, colors: h4, activeDots: p4, backgroundColor: T4, dotValue: x4 } = c10;
    n12.setViewport(0, 0, 512, 512);
    const w5 = n12.getBoundFramebufferObject(), D3 = this._createFBO(n12);
    n12.bindFramebuffer(D3), n12.setClearColor(0, 0, 0, 0), n12.clear(n12.gl.COLOR_BUFFER_BIT | n12.gl.STENCIL_BUFFER_BIT), n12.setStencilTestEnabled(false);
    const y5 = 1 / 2 ** (l9 - t12.key.level), b2 = c2, g3 = b2 * window.devicePixelRatio * b2 * window.devicePixelRatio, O5 = 1 / y5 * (1 / y5), S2 = f3 ? e9.state.scale / f3 : 1;
    return o5.setUniform1f("u_tileZoomFactor", y5), o5.setUniform1f("u_tileDotsOverArea", g3 / (c2 * window.devicePixelRatio * c2 * window.devicePixelRatio)), o5.setUniformMatrix4fv("u_dotColors", h4), o5.setUniform4fv("u_isActive", p4), o5.setUniform4fv("u_dotBackgroundColor", T4), o5.setUniform1f("u_dotValue", Math.max(1, x4 * S2 * O5)), this._bindDotDensityTextures(n12, o5, d3, b2), n12.drawElements(E.TRIANGLES, r6, C.UNSIGNED_INT, i12), n12.setViewport(m4.x, m4.y, m4.width, m4.height), n12.bindFramebuffer(w5), D3.colorTexture;
  }
  _createFBO(e9) {
    if (null == this._dotFBO) {
      const t12 = 512, o5 = 512, r6 = new e3(t12, o5);
      r6.samplingMode = L.NEAREST, r6.wrapMode = D.CLAMP_TO_EDGE;
      const s8 = new n6(e9, new i2(B.DEPTH_STENCIL, t12, o5));
      this._dotFBO = new x(e9, r6, s8);
    }
    return this._dotFBO;
  }
  _disposeTextures() {
    if (this._dotTextures) {
      for (let e9 = 0; e9 < this._dotTextures.length; e9++)
        this._dotTextures[e9].dispose();
      this._dotTextures = null;
    }
  }
  _bindDotDensityTextures(e9, t12, o5, r6) {
    const { rendererSchema: s8 } = o5;
    s4(s8, "dot-density");
    const i12 = this._createDotDensityTextures(e9, r6, s8.seed);
    t12.setUniform1iv("u_dotTextures", this._dotSamplers);
    for (let n12 = 0; n12 < i12.length; n12++)
      e9.bindTexture(i12[n12], this._dotSamplers[n12]);
  }
  _createDotDensityMesh(e9, t12, o5) {
    if (null == this._dotVAO) {
      const r6 = 2, s8 = new Int16Array(262144 * r6);
      for (let e10 = 0; e10 < 512; e10++)
        for (let t13 = 0; t13 < 512; t13++)
          s8[r6 * (t13 + 512 * e10)] = t13, s8[r6 * (t13 + 512 * e10) + 1] = e10;
      const i12 = c4.createVertex(e9, F.STATIC_DRAW, s8);
      this._dotVAO = new u5(e9, t12, o5, { geometry: i12 }, null);
    }
    return this._dotVAO;
  }
  _createDotDensityTextures(e9, o5, r6) {
    if (this._dotTextureSize === o5 && this._seed === r6 || (this._disposeTextures(), this._dotTextureSize = o5, this._seed = r6), null === this._dotTextures) {
      const s8 = new t2(r6);
      this._dotTextures = [this._allocDotDensityTexture(e9, o5, s8), this._allocDotDensityTexture(e9, o5, s8)];
    }
    return this._dotTextures;
  }
  _allocDotDensityTexture(e9, t12, o5) {
    const r6 = new Float32Array(t12 * t12 * 4);
    for (let i12 = 0; i12 < r6.length; i12++)
      r6[i12] = o5.getFloat();
    const s8 = new e3();
    return s8.dataType = U.FLOAT, s8.samplingMode = L.NEAREST, s8.width = t12, s8.height = t12, new T2(e9, s8, r6);
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/brushes/WGLBrushInfo.js
var h3 = 300;
var b = 32;
var p3 = class extends t6 {
  constructor() {
    super(...arguments), this._color = r3(1, 0, 0, 1);
  }
  dispose() {
    var _a, _b, _c, _d;
    (_a = this._outlineProgram) == null ? void 0 : _a.dispose(), this._outlineProgram = null, (_b = this._tileInfoProgram) == null ? void 0 : _b.dispose(), this._tileInfoProgram = null, (_c = this._outlineVertexArrayObject) == null ? void 0 : _c.dispose(), this._outlineVertexArrayObject = null, (_d = this._tileInfoVertexArrayObject) == null ? void 0 : _d.dispose(), this._tileInfoVertexArrayObject = null, this._canvas = null;
  }
  prepareState({ context: t12 }) {
    t12.setBlendingEnabled(true), t12.setBlendFunctionSeparate(R.ONE, R.ONE_MINUS_SRC_ALPHA, R.ONE, R.ONE_MINUS_SRC_ALPHA), t12.setColorMask(true, true, true, true), t12.setStencilWriteMask(0), t12.setStencilTestEnabled(false);
  }
  draw(t12, e9) {
    const { context: r6, requestRender: i12, allowDelayedRender: s8 } = t12;
    if (!e9.isReady)
      return;
    if (this._loadWGLResources(r6), s8 && null != i12 && (!this._outlineProgram.compiled || !this._tileInfoProgram.compiled))
      return void i12();
    r6.bindVAO(this._outlineVertexArrayObject), r6.useProgram(this._outlineProgram), this._outlineProgram.setUniformMatrix3fv("u_dvsMat3", e9.transforms.dvs), this._outlineProgram.setUniform2f("u_coord_range", e9.rangeX, e9.rangeY), this._outlineProgram.setUniform1f("u_depth", 0), this._outlineProgram.setUniform4fv("u_color", this._color), r6.drawArrays(E.LINE_STRIP, 0, 4);
    const o5 = this._getTexture(r6, e9);
    o5 ? (r6.bindVAO(this._tileInfoVertexArrayObject), r6.useProgram(this._tileInfoProgram), r6.bindTexture(o5, 0), this._tileInfoProgram.setUniformMatrix3fv("u_dvsMat3", e9.transforms.dvs), this._tileInfoProgram.setUniform1f("u_depth", 0), this._tileInfoProgram.setUniform2f("u_coord_ratio", e9.rangeX / e9.width, e9.rangeY / e9.height), this._tileInfoProgram.setUniform2f("u_delta", 8, 8), this._tileInfoProgram.setUniform2f("u_dimensions", o5.descriptor.width, o5.descriptor.height), r6.drawArrays(E.TRIANGLE_STRIP, 0, 4), r6.bindVAO()) : r6.bindVAO();
  }
  _loadWGLResources(t12) {
    if (this._outlineProgram && this._tileInfoProgram)
      return;
    const r6 = e5(t12, e8), n12 = e5(t12, r5), a5 = new Int8Array([0, 0, 1, 0, 1, 1, 0, 1]), u10 = c4.createVertex(t12, F.STATIC_DRAW, a5), m4 = new u5(t12, e8.attributes, r4, { geometry: u10 }), _5 = new Int8Array([0, 0, 1, 0, 0, 1, 1, 1]), c10 = c4.createVertex(t12, F.STATIC_DRAW, _5), d3 = new u5(t12, r5.attributes, r4, { geometry: c10 });
    this._outlineProgram = r6, this._tileInfoProgram = n12, this._outlineVertexArrayObject = m4, this._tileInfoVertexArrayObject = d3;
  }
  _getTexture(t12, e9) {
    if (e9.texture && e9.triangleCountReportedInDebug === e9.triangleCount)
      return e9.texture;
    e9.triangleCountReportedInDebug = e9.triangleCount, this._canvas || (this._canvas = document.createElement("canvas"), this._canvas.setAttribute("id", "tileCanvas2d"), this._canvas.setAttribute("width", `${h3}`), this._canvas.setAttribute("height", `${b}`), this._canvas.setAttribute("style", "display:none"));
    const r6 = e9.triangleCount;
    let i12 = e9.key.id;
    e9.triangleCount > 0 && (i12 += `, ${r6}`);
    const s8 = this._canvas, o5 = s8.getContext("2d");
    o5.font = "24px sans-serif", o5.textAlign = "left", o5.textBaseline = "top", o5.clearRect(0, 0, h3, b), r6 > 1e5 ? (o5.fillStyle = "red", o5.fillRect(0, 0, h3, b), o5.fillStyle = "black") : (o5.clearRect(0, 0, h3, b), o5.fillStyle = "blue"), o5.fillText(i12, 0, 0);
    const n12 = new e3();
    return n12.wrapMode = D.CLAMP_TO_EDGE, n12.samplingMode = L.NEAREST, n12.isImmutable = n11(t12.gl), e9.texture = new T2(t12, n12, s8), e9.texture;
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/brushes/WGLBrushPieChart.js
var s5 = class extends m2 {
  supportsSymbology(r6) {
    return r6 === S.PIE_CHART;
  }
  _drawMarkers(o5, r6, s8, n12, l9, f3, u10) {
    const { context: i12 } = o5, { rendererInfo: m4 } = o5, { rendererSchema: a5 } = m4;
    s4(a5, "pie-chart"), s8.setUniform4fv("u_colors", a5.colors), s8.setUniform4fv("u_defaultColor", a5.defaultColor), s8.setUniform4fv("u_othersColor", a5.othersColor), s8.setUniform4fv("u_outlineColor", a5.outlineColor), s8.setUniform1f("u_donutRatio", a5.holePercentage), s8.setUniform1f("u_sectorThreshold", a5.sectorThreshold), s8.setUniform1f("u_outlineWidth", a5.outlineWidth), i12.drawElements(n12, l9, C.UNSIGNED_INT, f3);
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/brushes/WGLBrushStencil.js
var c8 = class extends t6 {
  constructor() {
    super(...arguments), this._color = r3(1, 0, 0, 1), this._initialized = false;
  }
  dispose() {
    this._solidProgram && (this._solidProgram.dispose(), this._solidProgram = null), this._solidVertexArrayObject && (this._solidVertexArrayObject.dispose(), this._solidVertexArrayObject = null);
  }
  prepareState({ context: e9 }) {
    e9.setDepthWriteEnabled(false), e9.setDepthTestEnabled(false), e9.setStencilTestEnabled(true), e9.setBlendingEnabled(false), e9.setColorMask(false, false, false, false), e9.setStencilOp(O.KEEP, O.KEEP, O.REPLACE), e9.setStencilWriteMask(255);
  }
  draw(e9, r6) {
    const { context: t12, requestRender: s8, allowDelayedRender: i12 } = e9;
    this._initialized || this._initialize(t12), !i12 || null == s8 || this._solidProgram.compiled ? (t12.setStencilFunctionSeparate(N.FRONT_AND_BACK, I.GREATER, r6.stencilRef, 255), t12.bindVAO(this._solidVertexArrayObject), t12.useProgram(this._solidProgram), this._solidProgram.setUniformMatrix3fv("u_dvsMat3", r6.transforms.dvs), this._solidProgram.setUniform2fv("u_coord_range", [r6.rangeX, r6.rangeY]), this._solidProgram.setUniform1f("u_depth", 0), this._solidProgram.setUniform4fv("u_color", this._color), t12.drawArrays(E.TRIANGLE_STRIP, 0, 4), t12.bindVAO()) : s8();
  }
  _initialize(e9) {
    if (this._initialized)
      return true;
    const t12 = e5(e9, e8);
    if (!t12)
      return false;
    const o5 = new Int8Array([0, 0, 1, 0, 0, 1, 1, 1]), a5 = c4.createVertex(e9, F.STATIC_DRAW, o5), l9 = new u5(e9, e8.attributes, r4, { geometry: a5 });
    return this._solidProgram = t12, this._solidVertexArrayObject = l9, this._initialized = true, true;
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/brushes/WGLBrushVTLBackground.js
var _3 = class extends t6 {
  constructor() {
    super(...arguments), this._color = r3(1, 0, 0, 1), this._patternMatrix = e2(), this._programOptions = { id: false, pattern: false };
  }
  dispose() {
    this._vao && (this._vao.dispose(), this._vao = null);
  }
  drawMany(e9, r6) {
    const { context: n12, painter: c10, styleLayerUID: u10, requestRender: p4, allowDelayedRender: _5 } = e9;
    this._loadWGLResources(e9);
    const d3 = e9.displayLevel, h4 = e9.styleLayer, g3 = h4.backgroundMaterial, v3 = c10.vectorTilesMaterialManager, y5 = h4.getPaintValue("background-color", d3), b2 = h4.getPaintValue("background-opacity", d3), x4 = h4.getPaintValue("background-pattern", d3), M2 = void 0 !== x4, j = y5[3] * b2, U3 = 1 | window.devicePixelRatio, w5 = e9.spriteMosaic;
    let L2, A;
    const P4 = U3 > te ? 2 : 1, I3 = e9.drawPhase === T.HITTEST, R2 = this._programOptions;
    R2.id = I3, R2.pattern = M2;
    const k = v3.getMaterialProgram(n12, g3, R2);
    if (!_5 || null == p4 || k.compiled) {
      if (n12.bindVAO(this._vao), n12.useProgram(k), M2) {
        const t12 = w5.getMosaicItemPosition(x4, true);
        if (null != t12) {
          const { tl: e10, br: r7, page: i12 } = t12;
          L2 = r7[0] - e10[0], A = r7[1] - e10[1];
          const s8 = w5.getPageSize(i12);
          null != s8 && (w5.bind(n12, L.LINEAR, i12, ee), k.setUniform4f("u_tlbr", e10[0], e10[1], r7[0], r7[1]), k.setUniform2fv("u_mosaicSize", s8), k.setUniform1i("u_texture", ee));
        }
        k.setUniform1f("u_opacity", b2);
      } else
        this._color[0] = j * y5[0], this._color[1] = j * y5[1], this._color[2] = j * y5[2], this._color[3] = j, k.setUniform4fv("u_color", this._color);
      if (k.setUniform1f("u_depth", h4.z || 0), I3) {
        const t12 = M(u10 + 1);
        k.setUniform4fv("u_id", t12);
      }
      for (const e10 of r6) {
        if (k.setUniform1f("u_coord_range", e10.rangeX), k.setUniformMatrix3fv("u_dvsMat3", e10.transforms.dvs), M2) {
          const r7 = Math.max(2 ** (Math.round(d3) - e10.key.level), 1), o5 = P4 * e10.width * r7, i12 = o5 / c(L2), s8 = o5 / c(A);
          this._patternMatrix[0] = i12, this._patternMatrix[4] = s8, k.setUniformMatrix3fv("u_pattern_matrix", this._patternMatrix);
        }
        n12.setStencilFunction(I.EQUAL, 0, 255), n12.drawArrays(E.TRIANGLE_STRIP, 0, 4);
      }
    } else
      p4();
  }
  _loadWGLResources(t12) {
    if (this._vao)
      return;
    const { context: e9, styleLayer: r6 } = t12, o5 = r6.backgroundMaterial, i12 = new Int8Array([0, 0, 1, 0, 0, 1, 1, 1]), s8 = c4.createVertex(e9, F.STATIC_DRAW, i12), a5 = new u5(e9, o5.getAttributeLocations(), o5.getLayoutInfo(), { geometry: s8 });
    this._vao = a5;
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/brushes/WGLBrushVTLCircle.js
var o4 = class extends t6 {
  constructor() {
    super(...arguments), this._programOptions = { id: false };
  }
  dispose() {
  }
  drawMany(i12, o5) {
    const { context: l9, displayLevel: c10, requiredLevel: u10, state: d3, drawPhase: f3, painter: m4, spriteMosaic: p4, styleLayerUID: y5, requestRender: v3, allowDelayedRender: g3 } = i12;
    if (!o5.some((e9) => {
      var _a;
      return ((_a = e9.layerData.get(y5)) == null ? void 0 : _a.circleIndexCount) ?? false;
    }))
      return;
    const E5 = i12.styleLayer, M2 = E5.circleMaterial, T4 = m4.vectorTilesMaterialManager, I3 = 1.2, U3 = E5.getPaintValue("circle-translate", c10), _5 = E5.getPaintValue("circle-translate-anchor", c10), x4 = f3 === T.HITTEST, R2 = this._programOptions;
    R2.id = x4;
    const h4 = T4.getMaterialProgram(l9, M2, R2);
    if (g3 && null != v3 && !h4.compiled)
      return void v3();
    l9.useProgram(h4), h4.setUniformMatrix3fv("u_displayMat3", _5 === r2.VIEWPORT ? d3.displayMat3 : d3.displayViewMat3), h4.setUniform2fv("u_circleTranslation", U3), h4.setUniform1f("u_depth", E5.z), h4.setUniform1f("u_antialiasingWidth", I3);
    let D3 = -1;
    if (x4) {
      const e9 = M(y5 + 1);
      h4.setUniform4fv("u_id", e9);
    }
    for (const e9 of o5) {
      if (!e9.layerData.has(y5))
        continue;
      e9.key.level !== D3 && (D3 = e9.key.level, M2.setDataUniforms(h4, c10, E5, D3, p4));
      const t12 = e9.layerData.get(y5);
      if (!t12.circleIndexCount)
        continue;
      t12.prepareForRendering(l9);
      const r6 = t12.vao;
      null != r6 && (l9.bindVAO(r6), h4.setUniformMatrix3fv("u_dvsMat3", e9.transforms.dvs), u10 !== e9.key.level ? l9.setStencilFunction(I.EQUAL, e9.stencilRef, 255) : l9.setStencilFunction(I.GREATER, 255, 255), l9.drawElements(E.TRIANGLES, t12.circleIndexCount, C.UNSIGNED_INT, Uint32Array.BYTES_PER_ELEMENT * t12.circleIndexStart), e9.triangleCount += t12.circleIndexCount / 3);
    }
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/brushes/WGLBrushVTLFill.js
var u9 = 1 / 65536;
var d2 = class extends t6 {
  constructor() {
    super(...arguments), this._fillProgramOptions = { id: false, pattern: false }, this._outlineProgramOptions = { id: false };
  }
  dispose() {
  }
  drawMany(t12, e9) {
    const { displayLevel: i12, drawPhase: r6, renderPass: l9, spriteMosaic: o5, styleLayerUID: s8 } = t12;
    let f3 = false;
    for (const n12 of e9)
      if (n12.layerData.has(s8)) {
        const t13 = n12.layerData.get(s8);
        if (t13.fillIndexCount > 0 || t13.outlineIndexCount > 0) {
          f3 = true;
          break;
        }
      }
    if (!f3)
      return;
    const u10 = t12.styleLayer, d3 = u10.getPaintProperty("fill-pattern"), c10 = void 0 !== d3, m4 = c10 && d3.isDataDriven;
    let p4;
    if (c10 && !m4) {
      const t13 = d3.getValue(i12);
      p4 = o5.getMosaicItemPosition(t13, true);
    }
    const y5 = !c10 && u10.getPaintValue("fill-antialias", i12);
    let g3 = true, _5 = 1;
    if (!c10) {
      const t13 = u10.getPaintProperty("fill-color"), e10 = u10.getPaintProperty("fill-opacity");
      if (!(t13 == null ? void 0 : t13.isDataDriven) && !(e10 == null ? void 0 : e10.isDataDriven)) {
        const t14 = u10.getPaintValue("fill-color", i12);
        _5 = u10.getPaintValue("fill-opacity", i12) * t14[3], _5 >= 1 && (g3 = false);
      }
    }
    if (g3 && "opaque" === l9)
      return;
    let E5;
    r6 === T.HITTEST && (E5 = M(s8 + 1));
    const v3 = u10.getPaintValue("fill-translate", i12), M2 = u10.getPaintValue("fill-translate-anchor", i12);
    (g3 || "translucent" !== l9) && this._drawFill(t12, s8, u10, e9, v3, M2, c10, p4, m4, E5);
    const P4 = !u10.hasDataDrivenOutlineColor && u10.outlineUsesFillColor && _5 < 1;
    y5 && "opaque" !== l9 && !P4 && this._drawOutline(t12, s8, u10, e9, v3, M2, E5);
  }
  _drawFill(a5, r6, d3, c10, m4, p4, y5, g3, _5, E5) {
    if (y5 && !_5 && null == g3)
      return;
    const { context: v3, displayLevel: M2, state: P4, drawPhase: I3, painter: T4, pixelRatio: U3, spriteMosaic: x4, requestRender: D3, allowDelayedRender: h4 } = a5, S2 = d3.fillMaterial, R2 = T4.vectorTilesMaterialManager, w5 = U3 > te ? 2 : 1, N5 = I3 === T.HITTEST, L2 = this._fillProgramOptions;
    L2.id = N5, L2.pattern = y5;
    const A = R2.getMaterialProgram(v3, S2, L2);
    if (h4 && null != D3 && !A.compiled)
      return void D3();
    if (v3.useProgram(A), null != g3) {
      const { page: t12 } = g3, i12 = x4.getPageSize(t12);
      null != i12 && (x4.bind(v3, L.LINEAR, t12, ee), A.setUniform2fv("u_mosaicSize", i12), A.setUniform1i("u_texture", ee));
    }
    A.setUniformMatrix3fv("u_displayMat3", p4 === r2.VIEWPORT ? P4.displayMat3 : P4.displayViewMat3), A.setUniform2fv("u_fillTranslation", m4), A.setUniform1f("u_depth", d3.z + u9), N5 && A.setUniform4fv("u_id", E5);
    let V = -1;
    for (const t12 of c10) {
      if (!t12.layerData.has(r6))
        continue;
      t12.key.level !== V && (V = t12.key.level, S2.setDataUniforms(A, M2, d3, V, x4));
      const i12 = t12.layerData.get(r6);
      if (!i12.fillIndexCount)
        continue;
      i12.prepareForRendering(v3);
      const n12 = i12.fillVAO;
      if (null != n12) {
        if (v3.bindVAO(n12), A.setUniformMatrix3fv("u_dvsMat3", t12.transforms.dvs), v3.setStencilFunction(I.EQUAL, t12.stencilRef, 255), y5) {
          const e9 = Math.max(2 ** (Math.round(M2) - t12.key.level), 1), i13 = t12.rangeX / (w5 * t12.width * e9);
          A.setUniform1f("u_patternFactor", i13);
        }
        if (_5) {
          const t13 = i12.patternMap;
          if (!t13)
            continue;
          for (const [i13, n13] of t13) {
            const t14 = x4.getPageSize(i13);
            null != t14 && (x4.bind(v3, L.LINEAR, i13, ee), A.setUniform2fv("u_mosaicSize", t14), A.setUniform1i("u_texture", ee), v3.drawElements(E.TRIANGLES, n13[1], C.UNSIGNED_INT, Uint32Array.BYTES_PER_ELEMENT * n13[0]));
          }
        } else
          v3.drawElements(E.TRIANGLES, i12.fillIndexCount, C.UNSIGNED_INT, Uint32Array.BYTES_PER_ELEMENT * i12.fillIndexStart);
        t12.triangleCount += i12.fillIndexCount / 3;
      }
    }
  }
  _drawOutline(e9, i12, a5, r6, l9, d3, c10) {
    const { context: m4, displayLevel: p4, state: y5, drawPhase: g3, painter: _5, pixelRatio: E5, spriteMosaic: v3, requestRender: M2, allowDelayedRender: P4 } = e9, I3 = a5.outlineMaterial, T4 = _5.vectorTilesMaterialManager, U3 = 0.75 / E5, x4 = g3 === T.HITTEST, D3 = this._outlineProgramOptions;
    D3.id = x4;
    const h4 = T4.getMaterialProgram(m4, I3, D3);
    if (P4 && null != M2 && !h4.compiled)
      return void M2();
    m4.useProgram(h4), h4.setUniformMatrix3fv("u_displayMat3", d3 === r2.VIEWPORT ? y5.displayMat3 : y5.displayViewMat3), h4.setUniform2fv("u_fillTranslation", l9), h4.setUniform1f("u_depth", a5.z + u9), h4.setUniform1f("u_outline_width", U3), x4 && h4.setUniform4fv("u_id", c10);
    let S2 = -1;
    for (const t12 of r6) {
      if (!t12.layerData.has(i12))
        continue;
      t12.key.level !== S2 && (S2 = t12.key.level, I3.setDataUniforms(h4, p4, a5, S2, v3));
      const e10 = t12.layerData.get(i12);
      if (e10.prepareForRendering(m4), !e10.outlineIndexCount)
        continue;
      const n12 = e10.outlineVAO;
      null != n12 && (m4.bindVAO(n12), h4.setUniformMatrix3fv("u_dvsMat3", t12.transforms.dvs), m4.setStencilFunction(I.EQUAL, t12.stencilRef, 255), m4.drawElements(E.TRIANGLES, e10.outlineIndexCount, C.UNSIGNED_INT, Uint32Array.BYTES_PER_ELEMENT * e10.outlineIndexStart), t12.triangleCount += e10.outlineIndexCount / 3);
    }
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/brushes/WGLBrushVTLLine.js
var f2 = class extends t6 {
  constructor() {
    super(...arguments), this._programOptions = { id: false, pattern: false, sdf: false };
  }
  dispose() {
  }
  drawMany(a5, f3) {
    const { context: u10, displayLevel: m4, state: d3, drawPhase: c10, painter: p4, pixelRatio: g3, spriteMosaic: y5, styleLayerUID: E5, requestRender: v3, allowDelayedRender: M2 } = a5;
    if (!f3.some((e9) => {
      var _a;
      return ((_a = e9.layerData.get(E5)) == null ? void 0 : _a.lineIndexCount) ?? false;
    }))
      return;
    const _5 = a5.styleLayer, U3 = _5.lineMaterial, I3 = p4.vectorTilesMaterialManager, P4 = _5.getPaintValue("line-translate", m4), T4 = _5.getPaintValue("line-translate-anchor", m4), x4 = _5.getPaintProperty("line-pattern"), D3 = void 0 !== x4, S2 = D3 && x4.isDataDriven;
    let L2, N5;
    if (D3 && !S2) {
      const e9 = x4.getValue(m4);
      L2 = y5.getMosaicItemPosition(e9);
    }
    let R2 = false;
    if (!D3) {
      const e9 = _5.getPaintProperty("line-dasharray");
      if (N5 = void 0 !== e9, R2 = N5 && e9.isDataDriven, N5 && !R2) {
        const t12 = e9.getValue(m4), i12 = _5.getDashKey(t12, _5.getLayoutValue("line-cap", m4));
        L2 = y5.getMosaicItemPosition(i12);
      }
    }
    const V = 1 / g3, h4 = c10 === T.HITTEST, w5 = this._programOptions;
    w5.id = h4, w5.pattern = D3, w5.sdf = N5;
    const A = I3.getMaterialProgram(u10, U3, w5);
    if (M2 && null != v3 && !A.compiled)
      return void v3();
    if (u10.useProgram(A), A.setUniformMatrix3fv("u_displayViewMat3", d3.displayViewMat3), A.setUniformMatrix3fv("u_displayMat3", T4 === r2.VIEWPORT ? d3.displayMat3 : d3.displayViewMat3), A.setUniform2fv("u_lineTranslation", P4), A.setUniform1f("u_depth", _5.z), A.setUniform1f("u_antialiasing", V), h4) {
      const e9 = M(E5 + 1);
      A.setUniform4fv("u_id", e9);
    }
    if (L2 && null != L2) {
      const { page: e9 } = L2, i12 = y5.getPageSize(e9);
      null != i12 && (y5.bind(u10, L.LINEAR, e9, ee), A.setUniform2fv("u_mosaicSize", i12), A.setUniform1i("u_texture", ee));
    }
    let j = -1;
    for (const e9 of f3) {
      if (!e9.layerData.has(E5))
        continue;
      e9.key.level !== j && (j = e9.key.level, U3.setDataUniforms(A, m4, _5, j, y5));
      const i12 = 2 ** (m4 - j) / g3;
      A.setUniform1f("u_zoomFactor", i12);
      const n12 = e9.layerData.get(E5);
      if (!n12.lineIndexCount)
        continue;
      n12.prepareForRendering(u10);
      const a6 = n12.vao;
      if (null != a6) {
        if (u10.bindVAO(a6), A.setUniformMatrix3fv("u_dvsMat3", e9.transforms.dvs), u10.setStencilFunction(I.EQUAL, e9.stencilRef, 255), S2 || R2) {
          const e10 = n12.patternMap;
          if (!e10)
            continue;
          for (const [i13, n13] of e10) {
            const e11 = y5.getPageSize(i13);
            null != e11 && (y5.bind(u10, L.LINEAR, i13, ee), A.setUniform2fv("u_mosaicSize", e11), A.setUniform1i("u_texture", ee), u10.drawElements(E.TRIANGLES, n13[1], C.UNSIGNED_INT, Uint32Array.BYTES_PER_ELEMENT * n13[0]));
          }
        } else
          u10.drawElements(E.TRIANGLES, n12.lineIndexCount, C.UNSIGNED_INT, Uint32Array.BYTES_PER_ELEMENT * n12.lineIndexStart);
        e9.triangleCount += n12.lineIndexCount / 3;
      }
    }
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/brushes/WGLBrushVTLSymbol.js
var y3 = 1 / 65536;
var _4 = class extends t6 {
  constructor() {
    super(...arguments), this._iconProgramOptions = { id: false, sdf: false }, this._sdfProgramOptions = { id: false }, this._spritesTextureSize = n3();
  }
  dispose() {
  }
  drawMany(e9, t12) {
    const { drawPhase: i12, styleLayerUID: a5 } = e9, r6 = e9.styleLayer;
    let n12;
    i12 === T.HITTEST && (n12 = M(a5 + 1)), this._drawIcons(e9, r6, t12, n12), this._drawText(e9, r6, t12, n12);
  }
  _drawIcons(e9, t12, o5, u10) {
    const { context: p4, displayLevel: c10, drawPhase: m4, painter: d3, spriteMosaic: g3, state: y5, styleLayerUID: _5, requestRender: h4, allowDelayedRender: M2 } = e9, P4 = t12.iconMaterial, T4 = d3.vectorTilesMaterialManager;
    let U3, E5 = false;
    for (const i12 of o5)
      if (i12.layerData.has(_5) && (U3 = i12.layerData.get(_5), U3.iconPerPageElementsMap.size > 0)) {
        E5 = true;
        break;
      }
    if (!E5)
      return;
    const v3 = t12.getPaintValue("icon-translate", c10), x4 = t12.getPaintValue("icon-translate-anchor", c10);
    let D3 = t12.getLayoutValue("icon-rotation-alignment", c10);
    D3 === l3.AUTO && (D3 = t12.getLayoutValue("symbol-placement", c10) === n4.POINT ? l3.VIEWPORT : l3.MAP);
    const I3 = D3 === l3.MAP, R2 = t12.getLayoutValue("icon-keep-upright", c10) && I3, S2 = U3.isIconSDF, V = m4 === T.HITTEST, w5 = this._iconProgramOptions;
    w5.id = V, w5.sdf = S2;
    const A = T4.getMaterialProgram(p4, P4, w5);
    if (M2 && null != h4 && !A.compiled)
      return void h4();
    p4.useProgram(A), A.setUniformMatrix3fv("u_displayViewMat3", D3 === l3.MAP ? y5.displayViewMat3 : y5.displayMat3), A.setUniformMatrix3fv("u_displayMat3", x4 === r2.VIEWPORT ? y5.displayMat3 : y5.displayViewMat3), A.setUniform2fv("u_iconTranslation", v3), A.setUniform1f("u_depth", t12.z), A.setUniform1f("u_mapRotation", c3(y5.rotation)), A.setUniform1f("u_keepUpright", R2 ? 1 : 0), A.setUniform1f("u_level", 10 * c10), A.setUniform1i("u_texture", ee), A.setUniform1f("u_fadeDuration", e / 1e3), V && A.setUniform4fv("u_id", u10);
    let L2 = -1;
    for (const i12 of o5) {
      if (!i12.layerData.has(_5))
        continue;
      if (i12.key.level !== L2 && (L2 = i12.key.level, P4.setDataUniforms(A, c10, t12, L2, g3)), U3 = i12.layerData.get(_5), 0 === U3.iconPerPageElementsMap.size)
        continue;
      U3.prepareForRendering(p4), U3.updateOpacityInfo();
      const a5 = U3.iconVAO;
      if (null != a5) {
        p4.bindVAO(a5), A.setUniformMatrix3fv("u_dvsMat3", i12.transforms.dvs), A.setUniform1f("u_time", (performance.now() - U3.lastOpacityUpdate) / 1e3);
        for (const [t13, a6] of U3.iconPerPageElementsMap)
          this._renderIconRange(e9, A, a6, t13, i12);
      }
    }
  }
  _renderIconRange(e9, t12, i12, a5, r6) {
    const { context: n12, spriteMosaic: o5 } = e9;
    this._spritesTextureSize[0] = o5.getWidth(a5) / 4, this._spritesTextureSize[1] = o5.getHeight(a5) / 4, t12.setUniform2fv("u_mosaicSize", this._spritesTextureSize), o5.bind(n12, L.LINEAR, a5, ee), n12.setStencilTestEnabled(true), n12.setStencilFunction(I.GREATER, 255, 255), n12.setStencilWriteMask(0), n12.drawElements(E.TRIANGLES, i12[1], C.UNSIGNED_INT, Uint32Array.BYTES_PER_ELEMENT * i12[0]), r6.triangleCount += i12[1] / 3;
  }
  _drawText(e9, s8, u10, p4) {
    const { context: c10, displayLevel: d3, drawPhase: g3, glyphMosaic: _5, painter: h4, pixelRatio: M2, spriteMosaic: P4, state: T4, styleLayerUID: U3, requestRender: E5, allowDelayedRender: v3 } = e9, x4 = s8.textMaterial, D3 = h4.vectorTilesMaterialManager;
    let I3, R2 = false;
    for (const t12 of u10)
      if (t12.layerData.has(U3) && (I3 = t12.layerData.get(U3), I3.glyphPerPageElementsMap.size > 0)) {
        R2 = true;
        break;
      }
    if (!R2)
      return;
    const S2 = s8.getPaintProperty("text-opacity");
    if (S2 && !S2.isDataDriven && 0 === S2.getValue(d3))
      return;
    const V = s8.getPaintProperty("text-color"), w5 = !V || V.isDataDriven || V.getValue(d3)[3] > 0, A = s8.getPaintProperty("text-halo-width"), L2 = s8.getPaintProperty("text-halo-color"), O5 = (!A || A.isDataDriven || A.getValue(d3) > 0) && (!L2 || L2.isDataDriven || L2.getValue(d3)[3] > 0);
    if (!w5 && !O5)
      return;
    const N5 = 24 / 8;
    let z = s8.getLayoutValue("text-rotation-alignment", d3);
    z === l3.AUTO && (z = s8.getLayoutValue("symbol-placement", d3) === n4.POINT ? l3.VIEWPORT : l3.MAP);
    const k = z === l3.MAP, b2 = s8.getLayoutValue("text-keep-upright", d3) && k, G4 = g3 === T.HITTEST, j = 0.8 * N5 / M2;
    this._glyphTextureSize || (this._glyphTextureSize = t5(_5.width / 4, _5.height / 4));
    const W = s8.getPaintValue("text-translate", d3), F3 = s8.getPaintValue("text-translate-anchor", d3), B3 = this._sdfProgramOptions;
    B3.id = G4;
    const H2 = D3.getMaterialProgram(c10, x4, B3);
    if (v3 && null != E5 && !H2.compiled)
      return void E5();
    c10.useProgram(H2), H2.setUniformMatrix3fv("u_displayViewMat3", z === l3.MAP ? T4.displayViewMat3 : T4.displayMat3), H2.setUniformMatrix3fv("u_displayMat3", F3 === r2.VIEWPORT ? T4.displayMat3 : T4.displayViewMat3), H2.setUniform2fv("u_textTranslation", W), H2.setUniform1f("u_depth", s8.z + y3), H2.setUniform2fv("u_mosaicSize", this._glyphTextureSize), H2.setUniform1f("u_mapRotation", c3(T4.rotation)), H2.setUniform1f("u_keepUpright", b2 ? 1 : 0), H2.setUniform1f("u_level", 10 * d3), H2.setUniform1i("u_texture", re), H2.setUniform1f("u_antialiasingWidth", j), H2.setUniform1f("u_fadeDuration", e / 1e3), G4 && H2.setUniform4fv("u_id", p4);
    let C3 = -1;
    for (const t12 of u10) {
      if (!t12.layerData.has(U3))
        continue;
      if (t12.key.level !== C3 && (C3 = t12.key.level, x4.setDataUniforms(H2, d3, s8, C3, P4)), I3 = t12.layerData.get(U3), 0 === I3.glyphPerPageElementsMap.size)
        continue;
      I3.prepareForRendering(c10), I3.updateOpacityInfo();
      const e10 = I3.textVAO;
      if (null == e10)
        continue;
      c10.bindVAO(e10), H2.setUniformMatrix3fv("u_dvsMat3", t12.transforms.dvs), c10.setStencilTestEnabled(true), c10.setStencilFunction(I.GREATER, 255, 255), c10.setStencilWriteMask(0);
      const i12 = (performance.now() - I3.lastOpacityUpdate) / 1e3;
      H2.setUniform1f("u_time", i12), I3.glyphPerPageElementsMap.forEach((e11, i13) => {
        this._renderGlyphRange(c10, e11, i13, _5, H2, O5, w5, t12);
      });
    }
  }
  _renderGlyphRange(e9, t12, i12, a5, r6, n12, s8, l9) {
    a5.bind(e9, L.LINEAR, i12, re), n12 && (r6.setUniform1f("u_halo", 1), e9.drawElements(E.TRIANGLES, t12[1], C.UNSIGNED_INT, Uint32Array.BYTES_PER_ELEMENT * t12[0]), l9.triangleCount += t12[1] / 3), s8 && (r6.setUniform1f("u_halo", 0), e9.drawElements(E.TRIANGLES, t12[1], C.UNSIGNED_INT, Uint32Array.BYTES_PER_ELEMENT * t12[0]), l9.triangleCount += t12[1] / 3);
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/brushes/WGLGeometryBrushLabel.js
var i8 = (e9) => ee2(e9.data, { geometry: [{ location: 0, name: "a_pos", count: 2, type: C.SHORT }, { location: 1, name: "a_id", count: 4, type: C.UNSIGNED_BYTE }, { location: 2, name: "a_color", count: 4, type: C.UNSIGNED_BYTE, normalized: true }, { location: 3, name: "a_haloColor", count: 4, type: C.UNSIGNED_BYTE, normalized: true }, { location: 4, name: "a_texAndSize", count: 4, type: C.UNSIGNED_BYTE }, { location: 5, name: "a_refSymbolAndPlacementOffset", count: 4, type: C.UNSIGNED_BYTE }, { location: 6, name: "a_glyphData", count: 4, type: C.UNSIGNED_BYTE }, { location: 7, name: "a_vertexOffset", count: 2, type: C.SHORT }, { location: 8, name: "a_texCoords", count: 2, type: C.UNSIGNED_SHORT }] });
var l7 = class extends v {
  dispose() {
  }
  getGeometryType() {
    return E3.LABEL;
  }
  supportsSymbology(e9) {
    return true;
  }
  drawGeometry(e9, t12, a5, l9) {
    const { context: m4, painter: u10, state: d3, rendererInfo: f3, requestRender: c10, allowDelayedRender: _5 } = e9, p4 = Z.load(a5.materialKey), E5 = p4.mapAligned ? 1 : 0;
    if (!E5 && Math.abs(t12.key.level - Math.round(100 * e9.displayLevel) / 100) >= 1)
      return;
    const { bufferLayouts: y5, attributes: N5 } = i8(p4), U3 = u10.materialManager.getMaterialProgram(e9, p4, "materials/label", N5, l9);
    if (_5 && null != c10 && !U3.compiled)
      return void c10();
    e9.context.setStencilFunction(I.EQUAL, 0, 255), m4.useProgram(U3), this._setSharedUniforms(U3, e9, t12), u10.textureManager.bindTextures(m4, U3, p4);
    const S2 = 1 === E5 ? d3.displayViewMat3 : d3.displayMat3;
    this._setSizeVVUniforms(p4, U3, f3, t12), U3.setUniform1f("u_mapRotation", Math.floor(d3.rotation / 360 * 254)), U3.setUniform1f("u_mapAligned", E5), U3.setUniformMatrix3fv("u_displayMat3", S2), U3.setUniform1f("u_opacity", 1), U3.setUniform2fv("u_screenSize", e9.state.size);
    const T4 = a5.target.getVAO(m4, y5, N5), g3 = a5.indexFrom * Uint32Array.BYTES_PER_ELEMENT;
    m4.bindVAO(T4), U3.setUniform1f("u_isHaloPass", 0), U3.setUniform1f("u_isBackgroundPass", 1), m4.drawElements(E.TRIANGLES, a5.indexCount, C.UNSIGNED_INT, g3), U3.setUniform1f("u_isHaloPass", 1), U3.setUniform1f("u_isBackgroundPass", 0), m4.drawElements(E.TRIANGLES, a5.indexCount, C.UNSIGNED_INT, g3), U3.setUniform1f("u_isHaloPass", 0), U3.setUniform1f("u_isBackgroundPass", 0), m4.drawElements(E.TRIANGLES, a5.indexCount, C.UNSIGNED_INT, g3), m4.setStencilTestEnabled(true), m4.setBlendingEnabled(true);
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/brushes/WGLGeometryBrushLine.js
var i9 = (e9) => ee2(e9.data, { geometry: [{ location: 0, name: "a_pos", count: 2, type: C.SHORT }, { location: 1, name: "a_id", count: 4, type: C.UNSIGNED_BYTE }, { location: 2, name: "a_color", count: 4, type: C.UNSIGNED_BYTE, normalized: true }, { location: 3, name: "a_offsetAndNormal", count: 4, type: C.BYTE }, { location: 4, name: "a_accumulatedDistanceAndHalfWidth", count: 2, type: C.UNSIGNED_SHORT }, { location: 5, name: "a_tlbr", count: 4, type: C.UNSIGNED_SHORT }, { location: 6, name: "a_segmentDirection", count: 4, type: C.BYTE }, { location: 7, name: "a_aux", count: 2, type: C.UNSIGNED_SHORT }, { location: 8, name: "a_zoomRange", count: 2, type: C.UNSIGNED_SHORT }] });
var s6 = class extends v {
  dispose() {
  }
  getGeometryType() {
    return E3.LINE;
  }
  supportsSymbology(e9) {
    return true;
  }
  drawGeometry(e9, t12, o5, s8) {
    const { context: l9, painter: m4, rendererInfo: c10, displayLevel: u10, passOptions: d3, requestRender: p4, allowDelayedRender: y5 } = e9, _5 = C2.load(o5.materialKey), f3 = null != d3 && "hittest" === d3.type;
    let E5 = i9(_5), N5 = E.TRIANGLES;
    f3 && (E5 = this._getTriangleDesc(o5.materialKey, E5), N5 = E.POINTS);
    const { attributes: g3, bufferLayouts: S2 } = E5, T4 = m4.materialManager.getMaterialProgram(e9, _5, "materials/line", g3, s8);
    if (y5 && null != p4 && !T4.compiled)
      return void p4();
    const U3 = 1 / e9.pixelRatio, G4 = 0;
    l9.useProgram(T4), this._setSharedUniforms(T4, e9, t12), _5.textureBinding && m4.textureManager.bindTextures(l9, T4, _5);
    const I3 = 2 ** (u10 - t12.key.level);
    T4.setUniform1f("u_zoomFactor", I3), T4.setUniform1f("u_blur", G4 + U3), T4.setUniform1f("u_antialiasing", U3), this._setSizeVVUniforms(_5, T4, c10, t12), this._setColorAndOpacityVVUniforms(_5, T4, c10), l9.setFaceCullingEnabled(false);
    const D3 = o5.target.getVAO(l9, S2, g3, f3);
    let R2 = o5.indexCount, x4 = o5.indexFrom * Uint32Array.BYTES_PER_ELEMENT;
    f3 && (R2 /= 3, x4 /= 3), l9.bindVAO(D3), l9.drawElements(N5, R2, C.UNSIGNED_INT, x4);
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/brushes/WGLGeometryBrushText.js
var s7 = (t12) => ee2(t12.data, { geometry: [{ location: 0, name: "a_pos", count: 2, type: C.SHORT }, { location: 1, name: "a_id", count: 4, type: C.UNSIGNED_BYTE }, { location: 2, name: "a_color", count: 4, type: C.UNSIGNED_BYTE, normalized: true }, { location: 3, name: "a_haloColor", count: 4, type: C.UNSIGNED_BYTE, normalized: true }, { location: 4, name: "a_texFontSize", count: 4, type: C.UNSIGNED_BYTE }, { location: 5, name: "a_aux", count: 4, type: C.BYTE }, { location: 6, name: "a_zoomRange", count: 2, type: C.UNSIGNED_SHORT }, { location: 7, name: "a_vertexOffset", count: 2, type: C.SHORT }, { location: 8, name: "a_texCoords", count: 2, type: C.UNSIGNED_SHORT }] });
var i10 = class extends v {
  dispose() {
  }
  getGeometryType() {
    return E3.TEXT;
  }
  supportsSymbology(t12) {
    return true;
  }
  drawGeometry(t12, e9, o5, i12) {
    const { context: m4, painter: l9, rendererInfo: u10, state: d3, passOptions: f3, requestRender: _5, allowDelayedRender: p4 } = t12, c10 = P2.load(o5.materialKey), y5 = null != f3 && "hittest" === f3.type, { bufferLayouts: E5, attributes: N5 } = s7(c10), U3 = l9.materialManager.getMaterialProgram(t12, c10, "materials/text", N5, i12);
    if (p4 && null != _5 && !U3.compiled)
      return void _5();
    m4.useProgram(U3);
    let S2 = E.TRIANGLES;
    y5 && (S2 = E.POINTS), this._setSharedUniforms(U3, t12, e9), l9.textureManager.bindTextures(m4, U3, c10), U3.setUniformMatrix3fv("u_displayMat3", d3.displayMat3), U3.setUniformMatrix3fv("u_displayViewMat3", d3.displayViewMat3), this._setSizeVVUniforms(c10, U3, u10, e9), this._setColorAndOpacityVVUniforms(c10, U3, u10), this._setRotationVVUniforms(c10, U3, u10);
    const T4 = o5.target.getVAO(m4, E5, N5), x4 = o5.indexFrom * Uint32Array.BYTES_PER_ELEMENT;
    m4.bindVAO(T4), U3.setUniform1f("u_isHaloPass", 0), U3.setUniform1f("u_isBackgroundPass", 1), m4.drawElements(S2, o5.indexCount, C.UNSIGNED_INT, x4), U3.setUniform1f("u_isHaloPass", 1), U3.setUniform1f("u_isBackgroundPass", 0), m4.drawElements(E.TRIANGLES, o5.indexCount, C.UNSIGNED_INT, x4), U3.setUniform1f("u_isHaloPass", 0), U3.setUniform1f("u_isBackgroundPass", 0), m4.drawElements(S2, o5.indexCount, C.UNSIGNED_INT, x4);
  }
};

// node_modules/@arcgis/core/views/2d/engine/brushes.js
var w4 = { marker: m2, line: s6, fill: c7, text: i10, label: l7, clip: p2, stencil: c8, bitmap: d, overlay: u7, tileInfo: p3, vtlBackground: _3, vtlFill: d2, vtlLine: f2, vtlCircle: o4, vtlSymbol: _4, dotDensity: g, heatmap: E4, pieChart: s5 };

// node_modules/@arcgis/core/views/2d/engine/webgl/Mesh2D.js
var y4 = (t12) => {
  switch (t12.BYTES_PER_ELEMENT) {
    case 1:
      return C.UNSIGNED_BYTE;
    case 2:
      return C.UNSIGNED_SHORT;
    case 4:
      return C.UNSIGNED_INT;
    default:
      throw new s2("Cannot get DataType of array");
  }
};
var l8 = (e9, t12, r6, n12) => {
  let s8 = 0;
  for (let o5 = 1; o5 < r6; o5++) {
    const r7 = e9[2 * (t12 + o5 - 1)], n13 = e9[2 * (t12 + o5 - 1) + 1];
    s8 += (e9[2 * (t12 + o5)] - r7) * (e9[2 * (t12 + o5) + 1] + n13);
  }
  return n12 ? s8 > 0 : s8 < 0;
};
var x3 = ({ coords: e9, lengths: t12 }, n12) => {
  const s8 = [];
  for (let o5 = 0, i12 = 0; o5 < t12.length; i12 += t12[o5], o5 += 1) {
    const c10 = i12, a5 = [];
    for (; o5 < t12.length - 1 && l8(e9, i12 + t12[o5], t12[o5 + 1], n12); o5 += 1, i12 += t12[o5])
      a5.push(i12 + t12[o5] - c10);
    const f3 = e9.slice(2 * c10, 2 * (i12 + t12[o5])), h4 = i(f3, a5, 2);
    for (const e10 of h4)
      s8.push(e10 + c10);
  }
  return s8;
};
var g2 = class _g {
  constructor(e9, t12, r6, n12 = false) {
    this._cache = {}, this.vertices = e9, this.indices = t12, this.primitiveType = r6, this.isMapSpace = n12;
  }
  static fromRect({ x: e9, y: t12, width: r6, height: n12 }) {
    const s8 = e9, o5 = t12, i12 = s8 + r6, c10 = o5 + n12;
    return _g.fromScreenExtent({ xmin: s8, ymin: o5, xmax: i12, ymax: c10 });
  }
  static fromPath(e9) {
    const t12 = Q(new t3(), e9.path, false, false), r6 = t12.coords, n12 = new Uint32Array(x3(t12, true)), s8 = new Uint32Array(r6.length / 2);
    for (let o5 = 0; o5 < s8.length; o5++)
      s8[o5] = w(Math.floor(r6[2 * o5]), Math.floor(r6[2 * o5 + 1]));
    return new _g({ geometry: s8 }, n12, E.TRIANGLES);
  }
  static fromGeometry(r6, n12) {
    var _a;
    const s8 = (_a = n12.geometry) == null ? void 0 : _a.type;
    switch (s8) {
      case "polygon":
        return _g.fromPolygon(r6, n12.geometry);
      case "extent":
        return _g.fromMapExtent(r6, n12.geometry);
      default:
        return s.getLogger("esri.views.2d.engine.webgl.Mesh2D").error(new s2("mapview-bad-type", `Unable to create a mesh from type ${s8}`, n12)), _g.fromRect({ x: 0, y: 0, width: 1, height: 1 });
    }
  }
  static fromPolygon(e9, t12) {
    const r6 = K(new t3(), t12, false, false), o5 = r6.coords, f3 = new Uint32Array(x3(r6, false)), m4 = new Uint32Array(o5.length / 2), u10 = n(), y5 = n();
    for (let s8 = 0; s8 < m4.length; s8++)
      r(u10, o5[2 * s8], o5[2 * s8 + 1]), e9.toScreen(y5, u10), m4[s8] = w(Math.floor(y5[0]), Math.floor(y5[1]));
    return new _g({ geometry: m4 }, f3, E.TRIANGLES, true);
  }
  static fromScreenExtent({ xmin: e9, xmax: t12, ymin: r6, ymax: n12 }) {
    const s8 = { geometry: new Uint32Array([w(e9, r6), w(t12, r6), w(e9, n12), w(e9, n12), w(t12, r6), w(t12, n12)]) }, o5 = new Uint32Array([0, 1, 2, 3, 4, 5]);
    return new _g(s8, o5, E.TRIANGLES);
  }
  static fromMapExtent(e9, t12) {
    const [r6, n12] = e9.toScreen([0, 0], [t12.xmin, t12.ymin]), [s8, o5] = e9.toScreen([0, 0], [t12.xmax, t12.ymax]), i12 = { geometry: new Uint32Array([w(r6, n12), w(s8, n12), w(r6, o5), w(r6, o5), w(s8, n12), w(s8, o5)]) }, c10 = new Uint32Array([0, 1, 2, 3, 4, 5]);
    return new _g(i12, c10, E.TRIANGLES);
  }
  destroy() {
    null != this._cache.indexBuffer && this._cache.indexBuffer.dispose();
    for (const e9 in this._cache.vertexBuffers)
      null != this._cache.vertexBuffers[e9] && this._cache.vertexBuffers[e9].dispose();
  }
  get elementType() {
    return y4(this.indices);
  }
  getIndexBuffer(e9, t12 = F.STATIC_DRAW) {
    return this._cache.indexBuffer || (this._cache.indexBuffer = c4.createIndex(e9, t12, this.indices)), this._cache.indexBuffer;
  }
  getVertexBuffers(e9, t12 = F.STATIC_DRAW) {
    return this._cache.vertexBuffers || (this._cache.vertexBuffers = Object.keys(this.vertices).reduce((r6, n12) => ({ ...r6, [n12]: c4.createVertex(e9, t12, this.vertices[n12]) }), {})), this._cache.vertexBuffers;
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/ClippingInfo.js
var a4 = (t12) => parseFloat(t12) / 100;
var c9 = class _c extends i3 {
  constructor(t12, e9) {
    super(), this._clip = e9, this._cache = {}, this.stage = t12, this._handle = l(() => e9.version, () => this._invalidate()), this.ready();
  }
  static fromClipArea(t12, e9) {
    return new _c(t12, e9);
  }
  _destroyGL() {
    null != this._cache.mesh && (this._cache.mesh.destroy(), this._cache.mesh = null), null != this._cache.vao && (this._cache.vao.dispose(), this._cache.vao = null);
  }
  destroy() {
    this._destroyGL(), this._handle.remove();
  }
  getVAO(t12, e9, r6, s8) {
    const [i12, o5] = e9.size;
    if ("geometry" !== this._clip.type && this._lastWidth === i12 && this._lastHeight === o5 || (this._lastWidth = i12, this._lastHeight = o5, this._destroyGL()), null == this._cache.vao) {
      const i13 = this._createMesh(e9, this._clip), o6 = i13.getIndexBuffer(t12), a5 = i13.getVertexBuffers(t12);
      this._cache.mesh = i13, this._cache.vao = new u5(t12, r6, s8, a5, o6);
    }
    return this._cache.vao;
  }
  _createTransforms() {
    return { dvs: e2() };
  }
  _invalidate() {
    this._destroyGL(), this.requestRender();
  }
  _createScreenRect(t12, e9) {
    const [r6, s8] = t12.size, i12 = "string" == typeof e9.left ? a4(e9.left) * r6 : e9.left, o5 = "string" == typeof e9.right ? a4(e9.right) * r6 : e9.right, h4 = "string" == typeof e9.top ? a4(e9.top) * s8 : e9.top, c10 = "string" == typeof e9.bottom ? a4(e9.bottom) * s8 : e9.bottom, n12 = i12, l9 = h4;
    return { x: n12, y: l9, width: Math.max(r6 - o5 - n12, 0), height: Math.max(s8 - c10 - l9, 0) };
  }
  _createMesh(r6, s8) {
    switch (s8.type) {
      case "rect":
        return g2.fromRect(this._createScreenRect(r6, s8));
      case "path":
        return g2.fromPath(s8);
      case "geometry":
        return g2.fromGeometry(r6, s8);
      default:
        return s.getLogger("esri.views.2d.engine.webgl.ClippingInfo").error(new s2("mapview-bad-type", "Unable to create ClippingInfo mesh from clip of type: ${clip.type}")), g2.fromRect({ x: 0, y: 0, width: 1, height: 1 });
    }
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/WGLContainer.js
var i11 = class extends h2 {
  constructor() {
    super(...arguments), this.name = this.constructor.name;
  }
  set clips(e9) {
    this._clips = e9, this.children.forEach((r6) => r6.clips = e9), this._updateClippingInfo();
  }
  beforeRender(e9) {
    super.beforeRender(e9), this.updateTransforms(e9.state);
  }
  _createTransforms() {
    return { dvs: e2() };
  }
  doRender(e9) {
    const r6 = this.createRenderParams(e9), { painter: s8, globalOpacity: t12, profiler: i12, drawPhase: a5 } = r6, o5 = a5 === T.LABEL || a5 === T.HIGHLIGHT ? 1 : t12 * this.computedOpacity;
    i12.recordContainerStart(this.name), s8.beforeRenderLayer(r6, this._clippingInfos ? 255 : 0, o5), this.renderChildren(r6), s8.compositeLayer(r6, o5), i12.recordContainerEnd();
  }
  renderChildren(e9) {
    null == this._renderPasses && (this._renderPasses = this.prepareRenderPasses(e9.painter));
    for (const s8 of this._renderPasses)
      try {
        s8.render(e9);
      } catch (r6) {
      }
  }
  createRenderParams(e9) {
    return e9.requireFBO = this.requiresDedicatedFBO, e9;
  }
  prepareRenderPasses(e9) {
    return [e9.registerRenderPass({ name: "clip", brushes: [w4.clip], target: () => this._clippingInfos, drawPhase: T.MAP | T.LABEL | T.LABEL_ALPHA | T.DEBUG | T.HIGHLIGHT })];
  }
  updateTransforms(e9) {
    for (const r6 of this.children)
      r6.setTransform(e9);
  }
  onAttach() {
    super.onAttach(), this._updateClippingInfo();
  }
  onDetach() {
    super.onDetach(), this._updateClippingInfo();
  }
  _updateClippingInfo() {
    null != this._clippingInfos && (this._clippingInfos.forEach((e10) => e10.destroy()), this._clippingInfos = null);
    const e9 = this.stage;
    if (!e9)
      return;
    const r6 = this._clips;
    null != r6 && r6.length && (this._clippingInfos = r6.items.map((r7) => c9.fromClipArea(e9, r7))), this.requestRender();
  }
};

export {
  n7 as n,
  t6 as t,
  n9 as n2,
  t9 as t2,
  c6 as c,
  t10 as t3,
  t11 as t4,
  m3 as m,
  n11 as n3,
  p3 as p,
  c8 as c2,
  w4 as w,
  i11 as i
};
//# sourceMappingURL=chunk-TBMS67KR.js.map
