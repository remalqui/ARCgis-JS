import {
  s3 as s
} from "./chunk-W2N7YT6I.js";

// node_modules/@arcgis/core/core/Version.js
var r = class {
  constructor(t, r2, o = "") {
    this.major = t, this.minor = r2, this._context = o;
  }
  lessThan(t, r2) {
    return this.major < t || t === this.major && this.minor < r2;
  }
  since(t, r2) {
    return !this.lessThan(t, r2);
  }
  validate(r2) {
    if (this.major !== r2.major) {
      const o = this._context && this._context + ":", s2 = this._context && this._context + " ";
      throw new s(o + "unsupported-version", `Required major ${s2}version is '${this.major}', but got '\${version.major}.\${version.minor}'`, { version: r2 });
    }
  }
  clone() {
    return new r(this.major, this.minor, this._context);
  }
  static parse(o, s2 = "") {
    const [e, i] = o.split("."), n = /^\s*\d+\s*$/;
    if (!e || !e.match || !n.test(e)) {
      throw new s((s2 && s2 + ":") + "invalid-version", "Expected major version to be a number, but got '${version}'", { version: o });
    }
    if (!i || !i.match || !n.test(i)) {
      throw new s((s2 && s2 + ":") + "invalid-version", "Expected minor version to be a number, but got '${version}'", { version: o });
    }
    const a = parseInt(e, 10), h = parseInt(i, 10);
    return new r(a, h, s2);
  }
};

export {
  r
};
//# sourceMappingURL=chunk-6ETVGJDF.js.map
