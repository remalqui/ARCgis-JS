import {
  s2 as s
} from "./chunk-W2N7YT6I.js";

// node_modules/@arcgis/core/geometry/support/buffer/math/common.js
var e = s.getLogger("esri.views.3d.support.buffer.math");

// node_modules/@arcgis/core/chunks/vec32.js
function t(e2, t2, f2) {
  r(e2.typedBuffer, t2.typedBuffer, f2, e2.typedBufferStride, t2.typedBufferStride);
}
function r(t2, r2, f2, n2 = 3, o2 = n2) {
  if (t2.length / n2 !== Math.ceil(r2.length / o2))
    return e.error("source and destination buffers need to have the same number of elements"), t2;
  const u2 = t2.length / n2, i2 = f2[0], s3 = f2[1], a2 = f2[2], d2 = f2[4], c = f2[5], l = f2[6], p = f2[8], y = f2[9], h = f2[10], m = f2[12], B = f2[13], g = f2[14];
  let S = 0, M = 0;
  for (let e2 = 0; e2 < u2; e2++) {
    const e3 = r2[S], f3 = r2[S + 1], u3 = r2[S + 2];
    t2[M] = i2 * e3 + d2 * f3 + p * u3 + m, t2[M + 1] = s3 * e3 + c * f3 + y * u3 + B, t2[M + 2] = a2 * e3 + l * f3 + h * u3 + g, S += o2, M += n2;
  }
  return t2;
}
function f(e2, t2, r2) {
  n(e2.typedBuffer, t2.typedBuffer, r2, e2.typedBufferStride, t2.typedBufferStride);
}
function n(t2, r2, f2, n2 = 3, o2 = n2) {
  if (t2.length / n2 !== Math.ceil(r2.length / o2))
    return void e.error("source and destination buffers need to have the same number of elements");
  const u2 = t2.length / n2, i2 = f2[0], s3 = f2[1], a2 = f2[2], d2 = f2[3], c = f2[4], l = f2[5], p = f2[6], y = f2[7], h = f2[8];
  let m = 0, B = 0;
  for (let e2 = 0; e2 < u2; e2++) {
    const e3 = r2[m], f3 = r2[m + 1], u3 = r2[m + 2];
    t2[B] = i2 * e3 + d2 * f3 + p * u3, t2[B + 1] = s3 * e3 + c * f3 + y * u3, t2[B + 2] = a2 * e3 + l * f3 + h * u3, m += o2, B += n2;
  }
}
function o(e2, t2, r2) {
  u(e2.typedBuffer, t2, r2, e2.typedBufferStride);
}
function u(e2, t2, r2, f2 = 3) {
  const n2 = Math.min(e2.length / f2, t2.count), o2 = t2.typedBuffer, u2 = t2.typedBufferStride;
  let i2 = 0, s3 = 0;
  for (let a2 = 0; a2 < n2; a2++)
    e2[s3] = r2 * o2[i2], e2[s3 + 1] = r2 * o2[i2 + 1], e2[s3 + 2] = r2 * o2[i2 + 2], i2 += u2, s3 += f2;
}
function i(e2, t2) {
  s2(e2.typedBuffer, t2.typedBuffer, e2.typedBufferStride, t2.typedBufferStride);
}
function s2(e2, t2, r2 = 3, f2 = r2) {
  const n2 = Math.min(e2.length / r2, t2.length / f2);
  let o2 = 0, u2 = 0;
  for (let i2 = 0; i2 < n2; i2++) {
    const n3 = t2[o2], i3 = t2[o2 + 1], s3 = t2[o2 + 2], a2 = n3 * n3 + i3 * i3 + s3 * s3;
    if (a2 > 0) {
      const t3 = 1 / Math.sqrt(a2);
      e2[u2] = t3 * n3, e2[u2 + 1] = t3 * i3, e2[u2 + 2] = t3 * s3;
    }
    o2 += f2, u2 += r2;
  }
}
function a(e2, t2, r2) {
  const f2 = Math.min(e2.count, t2.count), n2 = e2.typedBuffer, o2 = e2.typedBufferStride, u2 = t2.typedBuffer, i2 = t2.typedBufferStride;
  let s3 = 0, a2 = 0;
  for (let d2 = 0; d2 < f2; d2++)
    n2[a2] = u2[s3] >> r2, n2[a2 + 1] = u2[s3 + 1] >> r2, n2[a2 + 2] = u2[s3 + 2] >> r2, s3 += i2, a2 += o2;
}
var d = Object.freeze(Object.defineProperty({ __proto__: null, normalize: s2, normalizeView: i, scale: u, scaleView: o, shiftRight: a, transformMat3: n, transformMat3View: f, transformMat4: r, transformMat4View: t }, Symbol.toStringTag, { value: "Module" }));

export {
  e,
  t,
  r,
  f,
  n,
  o,
  u,
  i,
  s2 as s
};
//# sourceMappingURL=chunk-GXWNOUDM.js.map
