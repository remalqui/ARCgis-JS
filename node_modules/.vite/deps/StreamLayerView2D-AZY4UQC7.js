import {
  W
} from "./chunk-X3DVWI3B.js";
import "./chunk-UM5ZV5XB.js";
import "./chunk-SJ7ZVWCS.js";
import "./chunk-W7FXZ6Y5.js";
import "./chunk-LT4GV2NG.js";
import "./chunk-M7TZTH7O.js";
import "./chunk-Y2JGNMOW.js";
import "./chunk-TOXOPWS2.js";
import {
  e as e2
} from "./chunk-HSAM6HYE.js";
import "./chunk-7YWQQHOF.js";
import "./chunk-KPMUAI6T.js";
import "./chunk-TBMS67KR.js";
import "./chunk-FZIEP3HG.js";
import "./chunk-N5CR6S5Y.js";
import "./chunk-WON6TZX6.js";
import "./chunk-PEYWLFGJ.js";
import "./chunk-NE5U5H4D.js";
import "./chunk-6YPETR6R.js";
import "./chunk-AER5JAFS.js";
import "./chunk-7HZ72XIE.js";
import {
  d as d2
} from "./chunk-PLCQTNGD.js";
import "./chunk-YM46NRFF.js";
import "./chunk-3Y3ICAIL.js";
import "./chunk-TNXVIMSN.js";
import "./chunk-ZMKH5ZRU.js";
import "./chunk-4NLQ63FV.js";
import "./chunk-Y7HVH6RU.js";
import "./chunk-HZHMZHPT.js";
import "./chunk-UIVGJZCT.js";
import "./chunk-MVR2W3C6.js";
import "./chunk-HPXPYN62.js";
import "./chunk-PM77FW2O.js";
import {
  d
} from "./chunk-RNXN3MSP.js";
import "./chunk-A6DRT2G4.js";
import "./chunk-C7U2SKSO.js";
import "./chunk-NVZXNBIH.js";
import "./chunk-GTENSI4J.js";
import "./chunk-CN3PB7HS.js";
import "./chunk-NLX3GR5V.js";
import "./chunk-ZL3HOHNK.js";
import "./chunk-PX3Q44FM.js";
import "./chunk-XYJMHUDA.js";
import "./chunk-CSLWFQJE.js";
import "./chunk-XP6ESZGI.js";
import "./chunk-3VTULECI.js";
import "./chunk-A4HFWKMU.js";
import "./chunk-TDXHXKUI.js";
import "./chunk-PR2OEILG.js";
import "./chunk-PJP6JTP7.js";
import "./chunk-IVABPLLZ.js";
import "./chunk-TBHRKIAA.js";
import "./chunk-34QQ6GDH.js";
import "./chunk-KTII3LWY.js";
import "./chunk-JSMUQBPG.js";
import "./chunk-QAWS7Y22.js";
import "./chunk-OCIERVFA.js";
import "./chunk-QOWAKGE4.js";
import "./chunk-UX5D32RO.js";
import "./chunk-FHYNSVC4.js";
import "./chunk-FF5LS3YE.js";
import "./chunk-BCDDCNQ2.js";
import "./chunk-NYLF7BL2.js";
import "./chunk-YC4PIRSZ.js";
import "./chunk-32JSK7KN.js";
import "./chunk-YIJWIXDP.js";
import "./chunk-KKGVORR5.js";
import "./chunk-WTKN55TU.js";
import "./chunk-TDPKDZC3.js";
import "./chunk-M5UHI5WR.js";
import "./chunk-RR2V4HRU.js";
import "./chunk-WZAASLQW.js";
import "./chunk-SCOBW7KR.js";
import "./chunk-AHAGGZUI.js";
import "./chunk-TQGXXOXA.js";
import "./chunk-RADYXGQH.js";
import "./chunk-KKBQS7Z3.js";
import "./chunk-D5NSNTGJ.js";
import "./chunk-OMDLZQUU.js";
import "./chunk-AF36K5Y6.js";
import "./chunk-5K6FTFN4.js";
import "./chunk-QNFDBY7V.js";
import "./chunk-EL72ISXP.js";
import "./chunk-5KLICR5E.js";
import "./chunk-PNA6D76Z.js";
import "./chunk-R2HXL6HT.js";
import "./chunk-2PAQQUAG.js";
import "./chunk-QXPTMFGZ.js";
import "./chunk-4SARN32Z.js";
import "./chunk-QA4FMJA6.js";
import "./chunk-VFQINJTY.js";
import "./chunk-4J6R7QH6.js";
import "./chunk-HB3KZNZ3.js";
import "./chunk-VZAEQ6CY.js";
import "./chunk-SS33L3LC.js";
import "./chunk-X4Y5OF5X.js";
import "./chunk-MUO4EIZP.js";
import "./chunk-42RWGG3D.js";
import "./chunk-LNMNRMVX.js";
import "./chunk-OO4A3EBQ.js";
import "./chunk-ZBWBCN2I.js";
import "./chunk-KTEJJM3A.js";
import "./chunk-KTSEQWMB.js";
import "./chunk-EIE3W25Z.js";
import "./chunk-7KM4XBUC.js";
import "./chunk-OZXJDVTE.js";
import "./chunk-KIEN3CY2.js";
import "./chunk-4CZO65BK.js";
import "./chunk-7E3Q7HTF.js";
import "./chunk-FXDEKQIL.js";
import "./chunk-GJ5WE5D3.js";
import "./chunk-KKGH4SRQ.js";
import "./chunk-Y2CLYMXQ.js";
import "./chunk-4RFFPIT2.js";
import "./chunk-KSQTM6XI.js";
import "./chunk-7KX64CAH.js";
import "./chunk-J4R3XNTP.js";
import "./chunk-Y6FRAP2R.js";
import "./chunk-BVNZ3ETW.js";
import "./chunk-FJQ7HIY7.js";
import "./chunk-T4XWQYGC.js";
import "./chunk-4H5JODOT.js";
import "./chunk-TCASQSKO.js";
import "./chunk-5HAVROZG.js";
import "./chunk-MOPR7RFH.js";
import "./chunk-KW3ZNPTA.js";
import "./chunk-TJB4CGOM.js";
import "./chunk-4NOOGA4U.js";
import "./chunk-CWQ6Q3PH.js";
import {
  l
} from "./chunk-XN5VV437.js";
import "./chunk-ODFH3BSN.js";
import "./chunk-74O2T7JC.js";
import "./chunk-WBSPL6CJ.js";
import "./chunk-N5ULYWRU.js";
import "./chunk-LQVUN6IS.js";
import "./chunk-JZM5YUHA.js";
import "./chunk-MOIETNWJ.js";
import "./chunk-3GSONYPC.js";
import "./chunk-SFV6XLDZ.js";
import "./chunk-3PLRSFLA.js";
import "./chunk-VBD33VNW.js";
import "./chunk-7A5C2EQ3.js";
import {
  y3 as y
} from "./chunk-OYBXMT5R.js";
import {
  a2 as a,
  n
} from "./chunk-CIDWM2UN.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";
import "./chunk-SHJI4PR4.js";
import "./chunk-2YSHZRCT.js";
import "./chunk-HKVL2MJK.js";
import "./chunk-MH2LNFJK.js";
import "./chunk-O3CHVGVF.js";
import "./chunk-HNHXEGH2.js";
import "./chunk-DWOEYHKS.js";
import {
  s3 as s
} from "./chunk-W2N7YT6I.js";
import "./chunk-I5JT24BO.js";
import "./chunk-I4U7MQNO.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/views/layers/StreamLayerView.js
var o = (o2) => {
  let i = class extends o2 {
    resume() {
      this._isUserPaused = false, this.suspended || this._doResume();
    }
    pause() {
      this._isUserPaused = true, this.suspended || this._doPause();
    }
    constructor(...s2) {
      super(...s2), this._isUserPaused = false, this.filter = null;
    }
    get connectionStatus() {
      return this._isUserPaused ? "paused" : this._streamConnectionStatus;
    }
    _onSuspendedChange(s2) {
      s2 ? this._doPause() : this._isUserPaused || this._doResume();
    }
  };
  return e([y()], i.prototype, "_isUserPaused", void 0), e([y({ readOnly: true })], i.prototype, "connectionStatus", null), e([y({ type: d2 })], i.prototype, "filter", void 0), i = e([a("esri.layers.mixins.StreamLayerView")], i), i;
};

// node_modules/@arcgis/core/views/2d/layers/StreamLayerView2D.js
function c(e3, t) {
  if (null == e3 && null == t)
    return null;
  const r = {};
  return null != t && (r.geometry = t.toJSON()), null != e3 && (r.where = e3), r;
}
var u = class extends o(W) {
  constructor() {
    super(...arguments), this.pipelineConnectionStatus = "disconnected", this.pipelineErrorString = null, this._enabledEventTypes = /* @__PURE__ */ new Set();
  }
  initialize() {
    this.addHandles([l(() => this.layer.customParameters, (e3) => this._proxy.updateCustomParameters(e3)), this.layer.on("send-message-to-socket", (e3) => this._proxy.sendMessageToSocket(e3)), this.layer.on("send-message-to-client", (e3) => this._proxy.sendMessageToClient(e3)), l(() => this.layer.purgeOptions, () => this._update()), l(() => this.suspended, this._onSuspendedChange.bind(this))], "constructor");
  }
  get connectionError() {
    return this.pipelineErrorString ? new s("stream-controller", this.pipelineErrorString) : null;
  }
  on(e3, t) {
    if (Array.isArray(e3))
      return n(e3.map((e4) => this.on(e4, t)));
    const s2 = ["data-received", "message-received"].includes(e3);
    s2 && (this._enabledEventTypes.add(e3), this._proxy.enableEvent(e3, true));
    const i = super.on(e3, t), o2 = this;
    return { remove() {
      i.remove(), s2 && (o2._proxy.closed || o2.hasEventListener(e3) || o2._proxy.enableEvent(e3, false));
    } };
  }
  queryLatestObservations(e3, r) {
    var _a, _b, _c;
    if (!(((_a = this.layer.timeInfo) == null ? void 0 : _a.endField) || ((_b = this.layer.timeInfo) == null ? void 0 : _b.startField) || ((_c = this.layer.timeInfo) == null ? void 0 : _c.trackIdField)))
      throw new s("streamlayer-no-timeField", "queryLatestObservation can only be used with services that define a TrackIdField");
    return this._proxy.queryLatestObservations(this._cleanUpQuery(e3), r).then((e4) => {
      const t = d.fromJSON(e4);
      return t.features.forEach((e5) => {
        e5.layer = this.layer, e5.sourceLayer = this.layer;
      }), t;
    });
  }
  detach() {
    super.detach(), this.pipelineConnectionStatus = "disconnected";
  }
  get _streamConnectionStatus() {
    return this.pipelineConnectionStatus;
  }
  _doPause() {
    var _a;
    (_a = this._proxy) == null ? void 0 : _a.pauseStream();
  }
  _doResume() {
    var _a;
    (_a = this._proxy) == null ? void 0 : _a.resumeStream();
  }
  _createClientOptions() {
    return { ...super._createClientOptions(), setProperty: (e3) => {
      this.set(e3.propertyName, e3.value);
    } };
  }
  _createTileRendererHash(e3) {
    const t = `${JSON.stringify(this.layer.purgeOptions)}.${JSON.stringify(c(this.layer.definitionExpression, this.layer.geometryDefinition))})`;
    return super._createTileRendererHash(e3) + t;
  }
  async _createServiceOptions() {
    const e3 = this.layer, { objectIdField: t } = e3, r = e3.fields.map((e4) => e4.toJSON()), s2 = e2(e3.geometryType), i = e3.timeInfo && e3.timeInfo.toJSON() || null, o2 = e3.spatialReference ? e3.spatialReference.toJSON() : null;
    return { type: "stream", isPaused: this._isUserPaused, fields: r, geometryType: s2, objectIdField: t, timeInfo: i, source: this.layer.parsedUrl, serviceFilter: c(this.layer.definitionExpression, this.layer.geometryDefinition), purgeOptions: this.layer.purgeOptions.toJSON(), enabledEventTypes: Array.from(this._enabledEventTypes.values()), spatialReference: o2, maxReconnectionAttempts: this.layer.maxReconnectionAttempts, maxReconnectionInterval: this.layer.maxReconnectionInterval, updateInterval: this.layer.updateInterval, customParameters: e3.customParameters };
  }
};
e([y()], u.prototype, "pipelineConnectionStatus", void 0), e([y()], u.prototype, "pipelineErrorString", void 0), e([y({ readOnly: true })], u.prototype, "connectionError", null), e([y({ readOnly: true })], u.prototype, "_streamConnectionStatus", null), u = e([a("esri.views.2d.layers.StreamLayerView2D")], u);
var y2 = u;
export {
  y2 as default
};
//# sourceMappingURL=StreamLayerView2D-AZY4UQC7.js.map
