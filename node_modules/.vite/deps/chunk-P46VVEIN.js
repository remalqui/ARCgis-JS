import {
  f as f2
} from "./chunk-JDYLSHC3.js";
import {
  h
} from "./chunk-7E3Q7HTF.js";
import {
  _
} from "./chunk-UKJF25H6.js";
import {
  x
} from "./chunk-D5MIJ6WT.js";
import {
  j as j2
} from "./chunk-7KX64CAH.js";
import {
  p
} from "./chunk-Y6FRAP2R.js";
import {
  o2 as o,
  r
} from "./chunk-SFV6XLDZ.js";
import {
  y3 as y
} from "./chunk-OYBXMT5R.js";
import {
  a2 as a
} from "./chunk-CIDWM2UN.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";
import {
  j
} from "./chunk-HKVL2MJK.js";
import {
  n
} from "./chunk-MH2LNFJK.js";
import {
  K,
  N,
  W
} from "./chunk-O3CHVGVF.js";
import {
  d,
  f,
  s as s4
} from "./chunk-HNHXEGH2.js";
import {
  l
} from "./chunk-DWOEYHKS.js";
import {
  s,
  s2,
  s3
} from "./chunk-W2N7YT6I.js";

// node_modules/@arcgis/core/layers/mixins/PortalLayer.js
var j3 = (j4) => {
  let _2 = class extends j4 {
    constructor() {
      super(...arguments), this.resourceReferences = { portalItem: null, paths: [] }, this.userHasEditingPrivileges = true, this.userHasFullEditingPrivileges = false, this.userHasUpdateItemPrivileges = false;
    }
    destroy() {
      this.portalItem = l(this.portalItem), this.resourceReferences.portalItem = null, this.resourceReferences.paths.length = 0;
    }
    set portalItem(t) {
      t !== this._get("portalItem") && (this.removeOrigin("portal-item"), this._set("portalItem", t));
    }
    readPortalItem(t, e2, r2) {
      if (e2.itemId)
        return new x({ id: e2.itemId, portal: r2 && r2.portal });
    }
    writePortalItem(t, e2) {
      t && t.id && (e2.itemId = t.id);
    }
    async loadFromPortal(t, e2) {
      if (this.portalItem && this.portalItem.id)
        try {
          const { load: r2 } = await import("./layersLoader-5ABLOPJP.js");
          return s4(e2), await r2({ instance: this, supportedTypes: t.supportedTypes, validateItem: t.validateItem, supportsData: t.supportsData, layerModuleTypeMap: t.layerModuleTypeMap }, e2);
        } catch (r2) {
          throw d(r2) || s2.getLogger(this).warn(`Failed to load layer (${this.title}, ${this.id}) portal item (${this.portalItem.id})
  ${r2}`), r2;
        }
    }
    async finishLoadEditablePortalLayer(t) {
      this._set("userHasEditingPrivileges", await this._fetchUserHasEditingPrivileges(t).catch((t2) => (f(t2), true)));
    }
    async _setUserPrivileges(t, r2) {
      if (!s.userPrivilegesApplied)
        return this.finishLoadEditablePortalLayer(r2);
      if (this.url)
        try {
          const { features: { edit: e2, fullEdit: s5 }, content: { updateItem: i } } = await this._fetchUserPrivileges(t, r2);
          this._set("userHasEditingPrivileges", e2), this._set("userHasFullEditingPrivileges", s5), this._set("userHasUpdateItemPrivileges", i);
        } catch (s5) {
          f(s5);
        }
    }
    async _fetchUserPrivileges(t, e2) {
      var _a;
      let s5 = this.portalItem;
      if (!t || !s5 || !s5.loaded || s5.sourceUrl)
        return this._fetchFallbackUserPrivileges(e2);
      const i = t === s5.id;
      if (i && s5.portal.user)
        return f2(s5);
      let o2, a2;
      if (i)
        o2 = s5.portal.url;
      else
        try {
          o2 = await h(this.url, e2);
        } catch (m) {
          f(m);
        }
      if (!o2 || !N(o2, s5.portal.url))
        return this._fetchFallbackUserPrivileges(e2);
      try {
        const t2 = null != e2 ? e2.signal : null;
        a2 = await ((_a = n) == null ? void 0 : _a.getCredential(`${o2}/sharing`, { prompt: false, signal: t2 }));
      } catch (m) {
        f(m);
      }
      const l2 = true, n2 = false, p2 = false;
      if (!a2)
        return { features: { edit: l2, fullEdit: n2 }, content: { updateItem: p2 } };
      try {
        if (i ? await s5.reload() : (s5 = new x({ id: t, portal: { url: o2 } }), await s5.load(e2)), s5.portal.user)
          return f2(s5);
      } catch (m) {
        f(m);
      }
      return { features: { edit: l2, fullEdit: n2 }, content: { updateItem: p2 } };
    }
    async _fetchFallbackUserPrivileges(t) {
      let e2 = true;
      try {
        e2 = await this._fetchUserHasEditingPrivileges(t);
      } catch (r2) {
        f(r2);
      }
      return { features: { edit: e2, fullEdit: false }, content: { updateItem: false } };
    }
    async _fetchUserHasEditingPrivileges(t) {
      var _a;
      const e2 = this.url ? (_a = n) == null ? void 0 : _a.findCredential(this.url) : null;
      if (!e2)
        return true;
      const s5 = E.credential === e2 ? E.user : await this._fetchEditingUser(t);
      return E.credential = e2, E.user = s5, null == s5 || null == s5.privileges || s5.privileges.includes("features:user:edit");
    }
    async _fetchEditingUser(t) {
      var _a, _b;
      const e2 = (_b = (_a = this.portalItem) == null ? void 0 : _a.portal) == null ? void 0 : _b.user;
      if (e2)
        return e2;
      const o2 = n.findServerInfo(this.url ?? "");
      if (!(o2 == null ? void 0 : o2.owningSystemUrl))
        return null;
      const a2 = `${o2.owningSystemUrl}/sharing/rest`, l2 = j2.getDefault();
      if (l2 && l2.loaded && K(l2.restUrl) === K(a2))
        return l2.user;
      const n2 = `${a2}/community/self`, p2 = null != t ? t.signal : null, u = await _(j(n2, { authMode: "no-prompt", query: { f: "json" }, signal: p2 }));
      return u.ok ? p.fromJSON(u.value.data) : null;
    }
    read(t, e2) {
      e2 && (e2.layer = this), super.read(t, e2);
    }
    write(t, e2) {
      const r2 = e2 && e2.portal, s5 = this.portalItem && this.portalItem.id && (this.portalItem.portal || j2.getDefault());
      return r2 && s5 && !W(s5.restUrl, r2.restUrl) ? (e2.messages && e2.messages.push(new s3("layer:cross-portal", `The layer '${this.title} (${this.id})' cannot be persisted because it refers to an item on a different portal than the one being saved to. To save, set layer.portalItem to null or save to the same portal as the item associated with the layer`, { layer: this })), null) : super.write(t, { ...e2, layer: this });
    }
  };
  return e([y({ type: x })], _2.prototype, "portalItem", null), e([o("web-document", "portalItem", ["itemId"])], _2.prototype, "readPortalItem", null), e([r("web-document", "portalItem", { itemId: { type: String } })], _2.prototype, "writePortalItem", null), e([y({ clonable: false })], _2.prototype, "resourceReferences", void 0), e([y({ type: Boolean, readOnly: true })], _2.prototype, "userHasEditingPrivileges", void 0), e([y({ type: Boolean, readOnly: true })], _2.prototype, "userHasFullEditingPrivileges", void 0), e([y({ type: Boolean, readOnly: true })], _2.prototype, "userHasUpdateItemPrivileges", void 0), _2 = e([a("esri.layers.mixins.PortalLayer")], _2), _2;
};
var E = { credential: null, user: null };

export {
  j3 as j
};
//# sourceMappingURL=chunk-P46VVEIN.js.map
