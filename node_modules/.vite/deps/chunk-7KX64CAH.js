import {
  _
} from "./chunk-J4R3XNTP.js";
import {
  p
} from "./chunk-Y6FRAP2R.js";
import {
  c as c2
} from "./chunk-JZM5YUHA.js";
import {
  c as c3
} from "./chunk-MOIETNWJ.js";
import {
  M
} from "./chunk-3GSONYPC.js";
import {
  o2
} from "./chunk-SFV6XLDZ.js";
import {
  u2 as u
} from "./chunk-7A5C2EQ3.js";
import {
  m,
  y3 as y
} from "./chunk-OYBXMT5R.js";
import {
  a2
} from "./chunk-CIDWM2UN.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";
import {
  d
} from "./chunk-2YSHZRCT.js";
import {
  j,
  r
} from "./chunk-HKVL2MJK.js";
import {
  n
} from "./chunk-MH2LNFJK.js";
import {
  a,
  c,
  f,
  s as s3
} from "./chunk-HNHXEGH2.js";
import {
  l,
  o
} from "./chunk-DWOEYHKS.js";
import {
  s,
  s3 as s2
} from "./chunk-W2N7YT6I.js";

// node_modules/@arcgis/core/portal/portalDefault.js
var t;
function n2(e3) {
  return t && !t.destroyed || (t = e3()), t;
}

// node_modules/@arcgis/core/portal/PortalQueryResult.js
var e2 = class extends m {
  constructor(r2) {
    super(r2), this.nextQueryParams = null, this.queryParams = null, this.results = null, this.total = null;
  }
};
e([y()], e2.prototype, "nextQueryParams", void 0), e([y()], e2.prototype, "queryParams", void 0), e([y()], e2.prototype, "results", void 0), e([y()], e2.prototype, "total", void 0), e2 = e([a2("esri.portal.PortalQueryResult")], e2);
var p2 = e2;

// node_modules/@arcgis/core/portal/Portal.js
var D;
var U;
var b = { PortalGroup: () => import("./PortalGroup-ZBWZY3WJ.js"), PortalItem: () => import("./PortalItem-GP5TZQYP.js"), PortalUser: () => import("./PortalUser-DZQX35CC.js") };
var Q = D = class extends u(_) {
  constructor(e3) {
    super(e3), this._esriIdCredentialCreateHandle = null, this.access = null, this.allSSL = false, this.authMode = "auto", this.authorizedCrossOriginDomains = null, this.basemapGalleryGroupQuery = null, this.basemapGalleryGroupQuery3D = null, this.bingKey = null, this.canListApps = false, this.canListData = false, this.canListPreProvisionedItems = false, this.canProvisionDirectPurchase = false, this.canSearchPublic = true, this.canShareBingPublic = false, this.canSharePublic = false, this.canSignInArcGIS = false, this.canSignInIDP = false, this.colorSetsGroupQuery = null, this.commentsEnabled = false, this.created = null, this.culture = null, this.customBaseUrl = null, this.defaultBasemap = null, this.defaultDevBasemap = null, this.defaultExtent = null, this.defaultVectorBasemap = null, this.description = null, this.devBasemapGalleryGroupQuery = null, this.eueiEnabled = null, this.featuredGroups = null, this.featuredItemsGroupQuery = null, this.galleryTemplatesGroupQuery = null, this.livingAtlasGroupQuery = null, this.hasCategorySchema = false, this.helperServices = null, this.homePageFeaturedContent = null, this.homePageFeaturedContentCount = null, this.httpPort = null, this.httpsPort = null, this.id = null, this.ipCntryCode = null, this.isPortal = false, this.isReadOnly = false, this.layerTemplatesGroupQuery = null, this.maxTokenExpirationMinutes = null, this.modified = null, this.name = null, this.portalHostname = null, this.portalMode = null, this.portalProperties = null, this.region = null, this.rotatorPanels = null, this.showHomePageDescription = false, this.sourceJSON = null, this.supportsHostedServices = false, this.symbolSetsGroupQuery = null, this.templatesGroupQuery = null, this.units = null, this.url = s.portalUrl, this.urlKey = null, this.user = null, this.use3dBasemaps = true, this.useStandardizedQuery = false, this.useVectorBasemaps = false, this.vectorBasemapGalleryGroupQuery = null;
  }
  normalizeCtorArgs(e3) {
    return "string" == typeof e3 ? { url: e3 } : e3;
  }
  destroy() {
    C.unregister(this), this.defaultBasemap = l(this.defaultBasemap), this.defaultDevBasemap = l(this.defaultDevBasemap), this.defaultVectorBasemap = l(this.defaultVectorBasemap), this._esriIdCredentialCreateHandle = o(this._esriIdCredentialCreateHandle);
  }
  readAuthorizedCrossOriginDomains(e3) {
    if (e3)
      for (const r2 of e3)
        s.request.trustedServers.includes(r2) || s.request.trustedServers.push(r2);
    return e3;
  }
  readDefaultBasemap(e3) {
    return this._readBasemap(e3);
  }
  readDefaultDevBasemap(e3) {
    return this._readBasemap(e3);
  }
  readDefaultVectorBasemap(e3) {
    return this._readBasemap(e3);
  }
  get extraQuery() {
    const e3 = !(this.user && this.user.orgId) || this.canSearchPublic;
    return this.id && !e3 ? ` AND orgid:${this.id}` : null;
  }
  get isOrganization() {
    return !!this.access;
  }
  get itemPageUrl() {
    return this.url ? `${this.url}/home/item.html` : null;
  }
  get restUrl() {
    let e3 = this.url;
    if (e3) {
      const t2 = e3.indexOf("/sharing");
      e3 = t2 > 0 ? e3.substring(0, t2) : this.url.replace(/\/+$/, ""), e3 += "/sharing/rest";
    }
    return e3;
  }
  get thumbnailUrl() {
    const e3 = this.restUrl, t2 = this.thumbnail;
    return e3 && t2 ? this._normalizeSSL(e3 + "/portals/self/resources/" + t2) : null;
  }
  readUrlKey(e3) {
    return e3 ? e3.toLowerCase() : e3;
  }
  readUser(e3) {
    let t2 = null;
    return e3 && (t2 = p.fromJSON(e3), t2.portal = this), t2;
  }
  load(e3) {
    const t2 = import("./Basemap-2GEGSMS3.js").then(({ default: t3 }) => {
      s3(e3), U = t3;
    }).then(() => this.sourceJSON ? this.sourceJSON : this.fetchSelf(this.authMode, false, e3)).then((e4) => {
      var _a;
      if (n) {
        const e5 = n;
        this.credential = e5.findCredential(this.restUrl), this.credential || this.authMode !== D.AUTH_MODE_AUTO || ((_a = this._esriIdCredentialCreateHandle) == null ? void 0 : _a.remove(), this._esriIdCredentialCreateHandle = e5.on("credential-create", q(new WeakRef(this))), C.register(this, this._esriIdCredentialCreateHandle, this));
      }
      this.sourceJSON = e4, this.read(e4);
    });
    return this.addResolvingPromise(t2), Promise.resolve(this);
  }
  async createElevationLayers() {
    await this.load();
    const e3 = this._getHelperService("defaultElevationLayers"), t2 = (await import("./ElevationLayer-2H6GKVCD.js")).default;
    return e3 ? e3.map((e4) => new t2({ id: e4.id, url: e4.url })) : [];
  }
  async fetchBasemaps(e3, t2) {
    const r2 = await this._fetchBasemaps(e3, t2);
    if (true === (t2 == null ? void 0 : t2.include3d) && false !== this.use3dBasemaps) {
      const o3 = await this._fetchBasemaps3D(e3, t2);
      r2.unshift(...o3);
    }
    return r2;
  }
  fetchCategorySchema(e3) {
    return this.hasCategorySchema ? this.request(this.restUrl + "/portals/self/categorySchema", e3).then((e4) => e4.categorySchema) : a(e3) ? Promise.reject(c()) : Promise.resolve([]);
  }
  fetchFeaturedGroups(e3) {
    const t2 = this.featuredGroups, r2 = new c3();
    if (r2.num = 100, r2.sortField = "title", t2 && t2.length) {
      const o3 = [];
      for (const e4 of t2)
        o3.push(`(title:"${e4.title}" AND owner:${e4.owner})`);
      return r2.query = o3.join(" OR "), this.queryGroups(r2, e3).then((e4) => e4.results);
    }
    return a(e3) ? Promise.reject(c()) : Promise.resolve([]);
  }
  fetchRegions(e3) {
    var _a;
    const t2 = ((_a = this.user) == null ? void 0 : _a.culture) || this.culture || c2();
    return this.request(this.restUrl + "/portals/regions", { ...e3, query: { culture: t2 } });
  }
  fetchSettings(e3) {
    var _a;
    const t2 = ((_a = this.user) == null ? void 0 : _a.culture) || this.culture || c2();
    return this.request(this.restUrl + "/portals/self/settings", { ...e3, query: { culture: t2 } });
  }
  static getDefault() {
    return n2(() => new D());
  }
  queryGroups(e3, t2) {
    return this.queryPortal("/community/groups", e3, "PortalGroup", t2);
  }
  queryItems(e3, t2) {
    return this.queryPortal("/search", e3, "PortalItem", t2);
  }
  queryUsers(e3, t2) {
    return e3.sortField || (e3.sortField = "username"), this.queryPortal("/community/users", e3, "PortalUser", t2);
  }
  fetchSelf(e3 = this.authMode, t2 = false, r2) {
    const o3 = this.restUrl + "/portals/self", s4 = { authMode: e3, query: { culture: c2().toLowerCase() }, ...r2 };
    return "auto" === s4.authMode && (s4.authMode = "no-prompt"), t2 && (s4.query.default = true), this.request(o3, s4);
  }
  queryPortal(e3, t2, r2, o3) {
    const s4 = d(c3, t2), i = (t3) => this.request(this.restUrl + e3, { ...s4.toRequestOptions(this), ...o3 }).then((e4) => {
      const r3 = s4.clone();
      return r3.start = e4.nextStart, new p2({ nextQueryParams: r3, queryParams: s4, total: e4.total, results: D._resultsToTypedArray(t3, { portal: this }, e4, o3) });
    }).then((e4) => Promise.all(e4.results.map((t4) => "function" == typeof t4.when ? t4.when() : e4)).then(() => e4, (t4) => (f(t4), e4)));
    return r2 && b[r2] ? b[r2]().then(({ default: e4 }) => (s3(o3), i(e4))) : i();
  }
  signIn() {
    if (this.authMode === D.AUTH_MODE_ANONYMOUS)
      return Promise.reject(new s2("portal:invalid-auth-mode", `Current "authMode"' is "${this.authMode}"`));
    if ("failed" === this.loadStatus)
      return Promise.reject(this.loadError);
    const e3 = (e4) => Promise.resolve().then(() => "not-loaded" === this.loadStatus ? (e4 || (this.authMode = "immediate"), this.load().then(() => null)) : "loading" === this.loadStatus ? this.load().then(() => this.credential ? null : (this.credential = e4, this.fetchSelf("immediate"))) : this.user && this.credential === e4 ? null : (this.credential = e4, this.fetchSelf("immediate"))).then((e5) => {
      e5 && (this.sourceJSON = e5, this.read(e5));
    });
    return n ? n.getCredential(this.restUrl).then((t2) => e3(t2)) : e3(this.credential);
  }
  normalizeUrl(e3) {
    const t2 = this.credential && this.credential.token;
    return this._normalizeSSL(t2 ? e3 + (e3.includes("?") ? "&" : "?") + "token=" + t2 : e3);
  }
  requestToTypedArray(e3, t2, r2) {
    return this.request(e3, t2).then((e4) => {
      const t3 = D._resultsToTypedArray(r2, { portal: this }, e4);
      return Promise.all(t3.map((t4) => "function" == typeof t4.when ? t4.when() : e4)).then(() => t3, () => t3);
    });
  }
  request(e3, t2 = {}) {
    const r2 = { f: "json", ...t2.query }, { authMode: s4 = this.authMode === D.AUTH_MODE_ANONYMOUS ? "anonymous" : "auto", body: i = null, cacheBust: a3 = false, method: l2 = "auto", responseType: u2 = "json", signal: n3 } = t2, p3 = { authMode: s4, body: i, cacheBust: a3, method: l2, query: r2, responseType: u2, timeout: 0, signal: n3 };
    return j(this._normalizeSSL(e3), p3).then((e4) => e4.data);
  }
  toJSON() {
    throw new s2("internal:not-yet-implemented", "Portal.toJSON is not yet implemented");
  }
  static fromJSON(e3) {
    if (!e3)
      return null;
    if (e3.declaredClass)
      throw new Error("JSON object is already hydrated");
    return new D({ sourceJSON: e3 });
  }
  _getHelperService(e3) {
    const t2 = this.helperServices && this.helperServices[e3];
    if (!t2)
      throw new s2("portal:service-not-found", `The \`helperServices\` do not include an entry named "${e3}"`);
    return t2;
  }
  async _fetchBasemaps(e3, r2) {
    const o3 = new c3();
    o3.query = e3 || (s.apiKey && r(this.url) ? this.devBasemapGalleryGroupQuery : this.useVectorBasemaps ? this.vectorBasemapGalleryGroupQuery : this.basemapGalleryGroupQuery), o3.disableExtraQuery = true;
    const s4 = await this.queryGroups(o3, r2);
    if (!s4.total)
      return [];
    const i = s4.results[0];
    o3.num = 100, o3.query = 'type:"Web Map" -type:"Web Application"', o3.sortField = i.sortField || "name", o3.sortOrder = i.sortOrder || "desc";
    const a3 = await i.queryItems(o3, r2);
    if (!a3.total)
      return [];
    return a3.results.filter((e4) => "Web Map" === e4.type).map((e4) => new U({ portalItem: e4 }));
  }
  async _fetchBasemaps3D(e3, t2) {
    const r2 = e3 || this.basemapGalleryGroupQuery3D;
    if (!r2)
      return [];
    const o3 = new c3({ query: r2, disableExtraQuery: true }), s4 = await this.queryGroups(o3, t2);
    if (!s4.total)
      return [];
    const i = s4.results[0];
    o3.num = 100, o3.query = 'type:"Web Scene"', o3.sortField = i.sortField || "name", o3.sortOrder = i.sortOrder || "desc";
    const a3 = await i.queryItems(o3, t2);
    if (!a3.total)
      return [];
    return a3.results.filter((e4) => "Web Scene" === e4.type).map((e4) => new U({ portalItem: e4 }));
  }
  _normalizeSSL(e3) {
    return e3.replace(/^http:/i, "https:").replace(":7080", ":7443");
  }
  _readBasemap(e3) {
    if (e3) {
      const t2 = U.fromJSON(e3);
      return t2.portalItem = { portal: this }, t2;
    }
    return null;
  }
  static _resultsToTypedArray(e3, t2, r2, o3) {
    let s4 = [];
    if (r2) {
      const i = null != o3 ? o3.signal : null;
      s4 = r2.listings || r2.notifications || r2.userInvitations || r2.tags || r2.items || r2.groups || r2.comments || r2.provisions || r2.results || r2.relatedItems || r2, (e3 || t2) && (s4 = s4.map((r3) => {
        const o4 = Object.assign(e3 ? e3.fromJSON(r3) : r3, t2);
        return "function" == typeof o4.load && o4.load(i), o4;
      }));
    } else
      s4 = [];
    return s4;
  }
};
Q.AUTH_MODE_ANONYMOUS = "anonymous", Q.AUTH_MODE_AUTO = "auto", Q.AUTH_MODE_IMMEDIATE = "immediate", e([y()], Q.prototype, "access", void 0), e([y()], Q.prototype, "allSSL", void 0), e([y()], Q.prototype, "authMode", void 0), e([y()], Q.prototype, "authorizedCrossOriginDomains", void 0), e([o2("authorizedCrossOriginDomains")], Q.prototype, "readAuthorizedCrossOriginDomains", null), e([y()], Q.prototype, "basemapGalleryGroupQuery", void 0), e([y({ json: { name: "3DBasemapGalleryGroupQuery" } })], Q.prototype, "basemapGalleryGroupQuery3D", void 0), e([y()], Q.prototype, "bingKey", void 0), e([y()], Q.prototype, "canListApps", void 0), e([y()], Q.prototype, "canListData", void 0), e([y()], Q.prototype, "canListPreProvisionedItems", void 0), e([y()], Q.prototype, "canProvisionDirectPurchase", void 0), e([y()], Q.prototype, "canSearchPublic", void 0), e([y()], Q.prototype, "canShareBingPublic", void 0), e([y()], Q.prototype, "canSharePublic", void 0), e([y()], Q.prototype, "canSignInArcGIS", void 0), e([y()], Q.prototype, "canSignInIDP", void 0), e([y()], Q.prototype, "colorSetsGroupQuery", void 0), e([y()], Q.prototype, "commentsEnabled", void 0), e([y({ type: Date })], Q.prototype, "created", void 0), e([y()], Q.prototype, "credential", void 0), e([y()], Q.prototype, "culture", void 0), e([y()], Q.prototype, "currentVersion", void 0), e([y()], Q.prototype, "customBaseUrl", void 0), e([y()], Q.prototype, "defaultBasemap", void 0), e([o2("defaultBasemap")], Q.prototype, "readDefaultBasemap", null), e([y()], Q.prototype, "defaultDevBasemap", void 0), e([o2("defaultDevBasemap")], Q.prototype, "readDefaultDevBasemap", null), e([y({ type: M })], Q.prototype, "defaultExtent", void 0), e([y()], Q.prototype, "defaultVectorBasemap", void 0), e([o2("defaultVectorBasemap")], Q.prototype, "readDefaultVectorBasemap", null), e([y()], Q.prototype, "description", void 0), e([y()], Q.prototype, "devBasemapGalleryGroupQuery", void 0), e([y()], Q.prototype, "eueiEnabled", void 0), e([y({ readOnly: true })], Q.prototype, "extraQuery", null), e([y()], Q.prototype, "featuredGroups", void 0), e([y()], Q.prototype, "featuredItemsGroupQuery", void 0), e([y()], Q.prototype, "galleryTemplatesGroupQuery", void 0), e([y()], Q.prototype, "livingAtlasGroupQuery", void 0), e([y()], Q.prototype, "hasCategorySchema", void 0), e([y()], Q.prototype, "helpBase", void 0), e([y()], Q.prototype, "helperServices", void 0), e([y()], Q.prototype, "helpMap", void 0), e([y()], Q.prototype, "homePageFeaturedContent", void 0), e([y()], Q.prototype, "homePageFeaturedContentCount", void 0), e([y()], Q.prototype, "httpPort", void 0), e([y()], Q.prototype, "httpsPort", void 0), e([y()], Q.prototype, "id", void 0), e([y()], Q.prototype, "ipCntryCode", void 0), e([y({ readOnly: true })], Q.prototype, "isOrganization", null), e([y()], Q.prototype, "isPortal", void 0), e([y()], Q.prototype, "isReadOnly", void 0), e([y({ readOnly: true })], Q.prototype, "itemPageUrl", null), e([y()], Q.prototype, "layerTemplatesGroupQuery", void 0), e([y()], Q.prototype, "maxTokenExpirationMinutes", void 0), e([y({ type: Date })], Q.prototype, "modified", void 0), e([y()], Q.prototype, "name", void 0), e([y()], Q.prototype, "portalHostname", void 0), e([y()], Q.prototype, "portalMode", void 0), e([y()], Q.prototype, "portalProperties", void 0), e([y()], Q.prototype, "region", void 0), e([y({ readOnly: true })], Q.prototype, "restUrl", null), e([y()], Q.prototype, "rotatorPanels", void 0), e([y()], Q.prototype, "showHomePageDescription", void 0), e([y()], Q.prototype, "sourceJSON", void 0), e([y()], Q.prototype, "staticImagesUrl", void 0), e([y({ json: { name: "2DStylesGroupQuery" } })], Q.prototype, "stylesGroupQuery2d", void 0), e([y({ json: { name: "stylesGroupQuery" } })], Q.prototype, "stylesGroupQuery3d", void 0), e([y()], Q.prototype, "supportsHostedServices", void 0), e([y()], Q.prototype, "symbolSetsGroupQuery", void 0), e([y()], Q.prototype, "templatesGroupQuery", void 0), e([y()], Q.prototype, "thumbnail", void 0), e([y({ readOnly: true })], Q.prototype, "thumbnailUrl", null), e([y()], Q.prototype, "units", void 0), e([y()], Q.prototype, "url", void 0), e([y()], Q.prototype, "urlKey", void 0), e([o2("urlKey")], Q.prototype, "readUrlKey", null), e([y()], Q.prototype, "user", void 0), e([o2("user")], Q.prototype, "readUser", null), e([y()], Q.prototype, "use3dBasemaps", void 0), e([y()], Q.prototype, "useStandardizedQuery", void 0), e([y()], Q.prototype, "useVectorBasemaps", void 0), e([y()], Q.prototype, "vectorBasemapGalleryGroupQuery", void 0), Q = D = e([a2("esri.portal.Portal")], Q);
var j2 = Q;
var C = new FinalizationRegistry((e3) => {
  e3.remove();
});
function q(e3) {
  const t2 = n;
  return () => {
    const r2 = e3.deref();
    r2 && t2.findCredential(r2.restUrl) && r2.signIn().catch(() => {
    });
  };
}

export {
  j2 as j
};
//# sourceMappingURL=chunk-7KX64CAH.js.map
