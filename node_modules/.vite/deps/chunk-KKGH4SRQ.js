import {
  l,
  o,
  r
} from "./chunk-Y2CLYMXQ.js";
import {
  i
} from "./chunk-MOPR7RFH.js";
import {
  s
} from "./chunk-2YSHZRCT.js";

// node_modules/@arcgis/core/Color.js
function a(t) {
  return i(s(t), 0, 255);
}
function e(t, r2, s2) {
  return t = Number(t), isNaN(t) ? s2 : t < r2 ? r2 : t > s2 ? s2 : t;
}
var o2 = class _o {
  static blendColors(t, r2, s2, i2 = new _o()) {
    return i2.r = Math.round(t.r + (r2.r - t.r) * s2), i2.g = Math.round(t.g + (r2.g - t.g) * s2), i2.b = Math.round(t.b + (r2.b - t.b) * s2), i2.a = t.a + (r2.a - t.a) * s2, i2._sanitize();
  }
  static fromRgb(r2, s2) {
    const i2 = r2.toLowerCase().match(/^(rgba?|hsla?)\(([\s\.\-,%0-9]+)\)/);
    if (i2) {
      const r3 = i2[2].split(/\s*,\s*/), n = i2[1];
      if ("rgb" === n && 3 === r3.length || "rgba" === n && 4 === r3.length) {
        const t = r3[0];
        if ("%" === t.charAt(t.length - 1)) {
          const t2 = r3.map((t3) => 2.56 * parseFloat(t3));
          return 4 === r3.length && (t2[3] = parseFloat(r3[3])), _o.fromArray(t2, s2);
        }
        return _o.fromArray(r3.map((t2) => parseFloat(t2)), s2);
      }
      if ("hsl" === n && 3 === r3.length || "hsla" === n && 4 === r3.length)
        return _o.fromArray(o(parseFloat(r3[0]), parseFloat(r3[1]) / 100, parseFloat(r3[2]) / 100, parseFloat(r3[3])), s2);
    }
    return null;
  }
  static fromHex(t, r2 = new _o()) {
    if (4 !== t.length && 7 !== t.length || "#" !== t[0])
      return null;
    const s2 = 4 === t.length ? 4 : 8, i2 = (1 << s2) - 1;
    let n = Number("0x" + t.substr(1));
    return isNaN(n) ? null : (["b", "g", "r"].forEach((t2) => {
      const a2 = n & i2;
      n >>= s2, r2[t2] = 4 === s2 ? 17 * a2 : a2;
    }), r2.a = 1, r2);
  }
  static fromArray(t, r2 = new _o()) {
    return r2._set(Number(t[0]), Number(t[1]), Number(t[2]), Number(t[3])), isNaN(r2.a) && (r2.a = 1), r2._sanitize();
  }
  static fromString(t, i2) {
    const n = r(t) ? l(t) : null;
    return n && _o.fromArray(n, i2) || _o.fromRgb(t, i2) || _o.fromHex(t, i2);
  }
  static fromJSON(t) {
    return t && new _o([t[0], t[1], t[2], t[3] / 255]);
  }
  static toUnitRGB(t) {
    return null != t ? [t.r / 255, t.g / 255, t.b / 255] : null;
  }
  static toUnitRGBA(t) {
    return null != t ? [t.r / 255, t.g / 255, t.b / 255, null != t.a ? t.a : 1] : null;
  }
  constructor(t) {
    this.r = 255, this.g = 255, this.b = 255, this.a = 1, t && this.setColor(t);
  }
  get isBright() {
    return 0.299 * this.r + 0.587 * this.g + 0.114 * this.b >= 127;
  }
  setColor(t) {
    return "string" == typeof t ? _o.fromString(t, this) : Array.isArray(t) ? _o.fromArray(t, this) : (this._set(t.r ?? 0, t.g ?? 0, t.b ?? 0, t.a ?? 1), t instanceof _o || this._sanitize()), this;
  }
  toRgb() {
    return [this.r, this.g, this.b];
  }
  toRgba() {
    return [this.r, this.g, this.b, this.a];
  }
  toHex() {
    const t = this.r.toString(16), r2 = this.g.toString(16), s2 = this.b.toString(16);
    return `#${t.length < 2 ? "0" + t : t}${r2.length < 2 ? "0" + r2 : r2}${s2.length < 2 ? "0" + s2 : s2}`;
  }
  toCss(t = false) {
    const r2 = this.r + ", " + this.g + ", " + this.b;
    return t ? `rgba(${r2}, ${this.a})` : `rgb(${r2})`;
  }
  toString() {
    return this.toCss(true);
  }
  toJSON() {
    return this.toArray();
  }
  toArray(t = _o.AlphaMode.ALWAYS) {
    const r2 = a(this.r), s2 = a(this.g), i2 = a(this.b);
    return t === _o.AlphaMode.ALWAYS || 1 !== this.a ? [r2, s2, i2, a(255 * this.a)] : [r2, s2, i2];
  }
  clone() {
    return new _o(this.toRgba());
  }
  hash() {
    return this.r << 24 | this.g << 16 | this.b << 8 | 255 * this.a;
  }
  equals(t) {
    return null != t && t.r === this.r && t.g === this.g && t.b === this.b && t.a === this.a;
  }
  _sanitize() {
    return this.r = Math.round(e(this.r, 0, 255)), this.g = Math.round(e(this.g, 0, 255)), this.b = Math.round(e(this.b, 0, 255)), this.a = e(this.a, 0, 1), this;
  }
  _set(t, r2, s2, i2) {
    this.r = t, this.g = r2, this.b = s2, this.a = i2;
  }
};
o2.prototype.declaredClass = "esri.Color", function(t) {
  var r2;
  (r2 = t.AlphaMode || (t.AlphaMode = {}))[r2.ALWAYS = 0] = "ALWAYS", r2[r2.UNLESS_OPAQUE = 1] = "UNLESS_OPAQUE";
}(o2 || (o2 = {}));
var h = o2;

export {
  h
};
//# sourceMappingURL=chunk-KKGH4SRQ.js.map
