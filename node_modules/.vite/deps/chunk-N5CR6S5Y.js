import {
  c
} from "./chunk-NE5U5H4D.js";
import {
  H,
  V
} from "./chunk-BCDDCNQ2.js";
import {
  n
} from "./chunk-OMDLZQUU.js";
import {
  t
} from "./chunk-OZXJDVTE.js";
import {
  h
} from "./chunk-I4U7MQNO.js";

// node_modules/@arcgis/core/chunks/builtins.js
var r;
var t2 = { exports: {} };
t2.exports, void 0 !== (r = ["precision", "highp", "mediump", "lowp", "attribute", "const", "uniform", "varying", "break", "continue", "do", "for", "while", "if", "else", "in", "out", "inout", "float", "int", "void", "bool", "true", "false", "discard", "return", "mat2", "mat3", "mat4", "vec2", "vec3", "vec4", "ivec2", "ivec3", "ivec4", "bvec2", "bvec3", "bvec4", "sampler1D", "sampler2D", "sampler3D", "samplerCube", "sampler1DShadow", "sampler2DShadow", "struct", "asm", "class", "union", "enum", "typedef", "template", "this", "packed", "goto", "switch", "default", "inline", "noinline", "volatile", "public", "static", "extern", "external", "interface", "long", "short", "double", "half", "fixed", "unsigned", "input", "output", "hvec2", "hvec3", "hvec4", "dvec2", "dvec3", "dvec4", "fvec2", "fvec3", "fvec4", "sampler2DRect", "sampler3DRect", "sampler2DRectShadow", "sizeof", "cast", "namespace", "using"]) && (t2.exports = r);
var o = t(t2.exports);
var l;
var a = { exports: {} };
a.exports, l = a, function(e5) {
  var r2 = ["<<=", ">>=", "++", "--", "<<", ">>", "<=", ">=", "==", "!=", "&&", "||", "+=", "-=", "*=", "/=", "%=", "&=", "^^", "^=", "|=", "(", ")", "[", "]", ".", "!", "~", "*", "/", "%", "+", "-", "<", ">", "&", "^", "|", "?", ":", "=", ",", ";", "{", "}"];
  void 0 !== r2 && (l.exports = r2);
}();
var g = t(a.exports);
var i = { exports: {} };
i.exports, function(e5) {
  !function(r2) {
    var t3 = function() {
      return ["abs", "acos", "all", "any", "asin", "atan", "ceil", "clamp", "cos", "cross", "dFdx", "dFdy", "degrees", "distance", "dot", "equal", "exp", "exp2", "faceforward", "floor", "fract", "gl_BackColor", "gl_BackLightModelProduct", "gl_BackLightProduct", "gl_BackMaterial", "gl_BackSecondaryColor", "gl_ClipPlane", "gl_ClipVertex", "gl_Color", "gl_DepthRange", "gl_DepthRangeParameters", "gl_EyePlaneQ", "gl_EyePlaneR", "gl_EyePlaneS", "gl_EyePlaneT", "gl_Fog", "gl_FogCoord", "gl_FogFragCoord", "gl_FogParameters", "gl_FragColor", "gl_FragCoord", "gl_FragData", "gl_FragDepth", "gl_FragDepthEXT", "gl_FrontColor", "gl_FrontFacing", "gl_FrontLightModelProduct", "gl_FrontLightProduct", "gl_FrontMaterial", "gl_FrontSecondaryColor", "gl_LightModel", "gl_LightModelParameters", "gl_LightModelProducts", "gl_LightProducts", "gl_LightSource", "gl_LightSourceParameters", "gl_MaterialParameters", "gl_MaxClipPlanes", "gl_MaxCombinedTextureImageUnits", "gl_MaxDrawBuffers", "gl_MaxFragmentUniformComponents", "gl_MaxLights", "gl_MaxTextureCoords", "gl_MaxTextureImageUnits", "gl_MaxTextureUnits", "gl_MaxVaryingFloats", "gl_MaxVertexAttribs", "gl_MaxVertexTextureImageUnits", "gl_MaxVertexUniformComponents", "gl_ModelViewMatrix", "gl_ModelViewMatrixInverse", "gl_ModelViewMatrixInverseTranspose", "gl_ModelViewMatrixTranspose", "gl_ModelViewProjectionMatrix", "gl_ModelViewProjectionMatrixInverse", "gl_ModelViewProjectionMatrixInverseTranspose", "gl_ModelViewProjectionMatrixTranspose", "gl_MultiTexCoord0", "gl_MultiTexCoord1", "gl_MultiTexCoord2", "gl_MultiTexCoord3", "gl_MultiTexCoord4", "gl_MultiTexCoord5", "gl_MultiTexCoord6", "gl_MultiTexCoord7", "gl_Normal", "gl_NormalMatrix", "gl_NormalScale", "gl_ObjectPlaneQ", "gl_ObjectPlaneR", "gl_ObjectPlaneS", "gl_ObjectPlaneT", "gl_Point", "gl_PointCoord", "gl_PointParameters", "gl_PointSize", "gl_Position", "gl_ProjectionMatrix", "gl_ProjectionMatrixInverse", "gl_ProjectionMatrixInverseTranspose", "gl_ProjectionMatrixTranspose", "gl_SecondaryColor", "gl_TexCoord", "gl_TextureEnvColor", "gl_TextureMatrix", "gl_TextureMatrixInverse", "gl_TextureMatrixInverseTranspose", "gl_TextureMatrixTranspose", "gl_Vertex", "greaterThan", "greaterThanEqual", "inversesqrt", "length", "lessThan", "lessThanEqual", "log", "log2", "matrixCompMult", "max", "min", "mix", "mod", "normalize", "not", "notEqual", "pow", "radians", "reflect", "refract", "sign", "sin", "smoothstep", "sqrt", "step", "tan", "texture2D", "texture2DLod", "texture2DProj", "texture2DProjLod", "textureCube", "textureCubeLod", "texture2DLodEXT", "texture2DProjLodEXT", "textureCubeLodEXT", "texture2DGradEXT", "texture2DProjGradEXT", "textureCubeGradEXT", "textureSize", "texelFetch"];
    }();
    void 0 !== t3 && (e5.exports = t3);
  }();
}(i);
var n2 = t(i.exports);

// node_modules/@arcgis/core/views/webgl/reservedWordsGLSL3.js
var e = ["layout", "centroid", "smooth", "case", "mat2x2", "mat2x3", "mat2x4", "mat3x2", "mat3x3", "mat3x4", "mat4x2", "mat4x3", "mat4x4", "uint", "uvec2", "uvec3", "uvec4", "samplerCubeShadow", "sampler2DArray", "sampler2DArrayShadow", "isampler2D", "isampler3D", "isamplerCube", "isampler2DArray", "usampler2D", "usampler3D", "usamplerCube", "usampler2DArray", "coherent", "restrict", "readonly", "writeonly", "resource", "atomic_uint", "noperspective", "patch", "sample", "subroutine", "common", "partition", "active", "filter", "image1D", "image2D", "image3D", "imageCube", "iimage1D", "iimage2D", "iimage3D", "iimageCube", "uimage1D", "uimage2D", "uimage3D", "uimageCube", "image1DArray", "image2DArray", "iimage1DArray", "iimage2DArray", "uimage1DArray", "uimage2DArray", "image1DShadow", "image2DShadow", "image1DArrayShadow", "image2DArrayShadow", "imageBuffer", "iimageBuffer", "uimageBuffer", "sampler1DArray", "sampler1DArrayShadow", "isampler1D", "isampler1DArray", "usampler1D", "usampler1DArray", "isampler2DRect", "usampler2DRect", "samplerBuffer", "isamplerBuffer", "usamplerBuffer", "sampler2DMS", "isampler2DMS", "usampler2DMS", "sampler2DMSArray", "isampler2DMSArray", "usampler2DMSArray", "trunc", "round", "roundEven", "isnan", "isinf", "floatBitsToInt", "floatBitsToUint", "intBitsToFloat", "uintBitsToFloat", "packSnorm2x16", "unpackSnorm2x16", "packUnorm2x16", "unpackUnorm2x16", "packHalf2x16", "unpackHalf2x16", "outerProduct", "transpose", "determinant", "inverse", "texture", "textureSize", "textureProj", "textureLod", "textureOffset", "texelFetch", "texelFetchOffset", "textureProjOffset", "textureLodOffset", "textureProjLod", "textureProjLodOffset", "textureGrad", "textureGradOffset", "textureProjGrad", "textureProjGradOffset"];

// node_modules/@arcgis/core/views/webgl/testUtils.js
var e2 = { enableCache: false };

// node_modules/@arcgis/core/views/webgl/ShaderTranspiler.js
var i2 = 999;
var s = 9999;
var c2 = 0;
var u = 1;
var p = 2;
var d = 3;
var f = 4;
var l2 = 5;
var h2 = 6;
var y = 7;
var w = 8;
var g2 = 9;
var m = 10;
var k = 11;
var b = ["block-comment", "line-comment", "preprocessor", "operator", "integer", "float", "ident", "builtin", "keyword", "whitespace", "eof", "integer"];
function E() {
  var t3, e5, a3, E2 = 0, _3 = 0, v2 = i2, j2 = [], A2 = [], x2 = 1, D2 = 0, R2 = 0, T2 = false, G2 = false, S2 = "";
  return function(t4) {
    return A2 = [], null !== t4 ? F2(t4.replace ? t4.replace(/\r\n/g, "\n") : t4) : L2();
  };
  function X2(t4) {
    t4.length && A2.push({ type: b[v2], data: t4, position: R2, line: x2, column: D2 });
  }
  function F2(e6) {
    var r2;
    for (E2 = 0, a3 = (S2 += e6).length; t3 = S2[E2], E2 < a3; ) {
      switch (r2 = E2, v2) {
        case c2:
          E2 = V2();
          break;
        case u:
          E2 = P();
          break;
        case p:
          E2 = M();
          break;
        case d:
          E2 = O();
          break;
        case f:
          E2 = $();
          break;
        case k:
          E2 = W();
          break;
        case l2:
          E2 = z();
          break;
        case s:
          E2 = I();
          break;
        case g2:
          E2 = H3();
          break;
        case i2:
          E2 = C2();
      }
      if (r2 !== E2)
        if ("\n" === S2[r2])
          D2 = 0, ++x2;
        else
          ++D2;
    }
    return _3 += E2, S2 = S2.slice(E2), A2;
  }
  function L2(t4) {
    return j2.length && X2(j2.join("")), v2 = m, X2("(eof)"), A2;
  }
  function C2() {
    return j2 = j2.length ? [] : j2, "/" === e5 && "*" === t3 ? (R2 = _3 + E2 - 1, v2 = c2, e5 = t3, E2 + 1) : "/" === e5 && "/" === t3 ? (R2 = _3 + E2 - 1, v2 = u, e5 = t3, E2 + 1) : "#" === t3 ? (v2 = p, R2 = _3 + E2, E2) : /\s/.test(t3) ? (v2 = g2, R2 = _3 + E2, E2) : (T2 = /\d/.test(t3), G2 = /[^\w_]/.test(t3), R2 = _3 + E2, v2 = T2 ? f : G2 ? d : s, E2);
  }
  function H3() {
    return /[^\s]/g.test(t3) ? (X2(j2.join("")), v2 = i2, E2) : (j2.push(t3), e5 = t3, E2 + 1);
  }
  function M() {
    return "\r" !== t3 && "\n" !== t3 || "\\" === e5 ? (j2.push(t3), e5 = t3, E2 + 1) : (X2(j2.join("")), v2 = i2, E2);
  }
  function P() {
    return M();
  }
  function V2() {
    return "/" === t3 && "*" === e5 ? (j2.push(t3), X2(j2.join("")), v2 = i2, E2 + 1) : (j2.push(t3), e5 = t3, E2 + 1);
  }
  function O() {
    if ("." === e5 && /\d/.test(t3))
      return v2 = l2, E2;
    if ("/" === e5 && "*" === t3)
      return v2 = c2, E2;
    if ("/" === e5 && "/" === t3)
      return v2 = u, E2;
    if ("." === t3 && j2.length) {
      for (; N(j2); )
        ;
      return v2 = l2, E2;
    }
    if (";" === t3 || ")" === t3 || "(" === t3) {
      if (j2.length)
        for (; N(j2); )
          ;
      return X2(t3), v2 = i2, E2 + 1;
    }
    var a4 = 2 === j2.length && "=" !== t3;
    if (/[\w_\d\s]/.test(t3) || a4) {
      for (; N(j2); )
        ;
      return v2 = i2, E2;
    }
    return j2.push(t3), e5 = t3, E2 + 1;
  }
  function N(t4) {
    for (var e6, a4, n3 = 0; ; ) {
      if (e6 = g.indexOf(t4.slice(0, t4.length + n3).join("")), a4 = g[e6], -1 === e6) {
        if (n3-- + t4.length > 0)
          continue;
        a4 = t4.slice(0, 1).join("");
      }
      return X2(a4), R2 += a4.length, (j2 = j2.slice(a4.length)).length;
    }
  }
  function W() {
    return /[^a-fA-F0-9]/.test(t3) ? (X2(j2.join("")), v2 = i2, E2) : (j2.push(t3), e5 = t3, E2 + 1);
  }
  function $() {
    return "." === t3 || /[eE]/.test(t3) ? (j2.push(t3), v2 = l2, e5 = t3, E2 + 1) : "x" === t3 && 1 === j2.length && "0" === j2[0] ? (v2 = k, j2.push(t3), e5 = t3, E2 + 1) : /[^\d]/.test(t3) ? (X2(j2.join("")), v2 = i2, E2) : (j2.push(t3), e5 = t3, E2 + 1);
  }
  function z() {
    return "f" === t3 && (j2.push(t3), e5 = t3, E2 += 1), /[eE]/.test(t3) || "-" === t3 && /[eE]/.test(e5) ? (j2.push(t3), e5 = t3, E2 + 1) : /[^\d]/.test(t3) ? (X2(j2.join("")), v2 = i2, E2) : (j2.push(t3), e5 = t3, E2 + 1);
  }
  function I() {
    if (/[^\d\w_]/.test(t3)) {
      var a4 = j2.join("");
      return v2 = o.indexOf(a4) > -1 ? w : n2.indexOf(a4) > -1 ? y : h2, X2(j2.join("")), v2 = i2, E2;
    }
    return j2.push(t3), e5 = t3, E2 + 1;
  }
}
function _(t3) {
  var e5 = E(), a3 = [];
  return a3 = (a3 = a3.concat(e5(t3))).concat(e5(null));
}
function v(t3) {
  return _(t3);
}
function j(t3) {
  return t3.map((t4) => "eof" !== t4.type ? t4.data : "").join("");
}
var A = ["GL_OES_standard_derivatives", "GL_EXT_frag_depth", "GL_EXT_draw_buffers", "GL_EXT_shader_texture_lod"];
function x(t3, e5 = "100", a3 = "300 es") {
  const r2 = /^\s*\#version\s+([0-9]+(\s+[a-zA-Z]+)?)\s*/;
  for (const n3 of t3)
    if ("preprocessor" === n3.type) {
      const t4 = r2.exec(n3.data);
      if (t4) {
        const r3 = t4[1].replaceAll(/\s\s+/g, " ");
        if (r3 === a3)
          return r3;
        if (r3 === e5)
          return n3.data = "#version " + a3, e5;
        throw new Error("unknown glsl version: " + r3);
      }
    }
  return t3.splice(0, 0, { type: "preprocessor", data: "#version " + a3 }, { type: "whitespace", data: "\n" }), null;
}
function D(t3, e5) {
  for (let a3 = e5 - 1; a3 >= 0; a3--) {
    const e6 = t3[a3];
    if ("whitespace" !== e6.type && "block-comment" !== e6.type) {
      if ("keyword" !== e6.type)
        break;
      if ("attribute" === e6.data || "in" === e6.data)
        return true;
    }
  }
  return false;
}
function R(t3, e5, a3, r2) {
  r2 = r2 || a3;
  for (const n3 of t3)
    if ("ident" === n3.type && n3.data === a3) {
      r2 in e5 ? e5[r2]++ : e5[r2] = 0;
      return R(t3, e5, r2 + "_" + e5[r2], r2);
    }
  return a3;
}
function T(t3, e5, a3 = "afterVersion") {
  function r2(t4, e6) {
    for (let a4 = e6; a4 < t4.length; a4++) {
      const e7 = t4[a4];
      if ("operator" === e7.type && ";" === e7.data)
        return a4;
    }
    return null;
  }
  function n3(t4) {
    let e6 = -1, n4 = 0, o3 = -1;
    for (let i4 = 0; i4 < t4.length; i4++) {
      const s4 = t4[i4];
      if ("preprocessor" === s4.type && (/\#(if|ifdef|ifndef)\s+.+/.test(s4.data) ? ++n4 : /\#endif\s*.*/.test(s4.data) && --n4), "afterVersion" !== a3 && "afterPrecision" !== a3 || "preprocessor" === s4.type && /^#version/.test(s4.data) && (o3 = Math.max(o3, i4)), "afterPrecision" === a3 && "keyword" === s4.type && "precision" === s4.data) {
        const e7 = r2(t4, i4);
        if (null === e7)
          throw new Error("precision statement not followed by any semicolons!");
        o3 = Math.max(o3, e7);
      }
      e6 < o3 && 0 === n4 && (e6 = i4);
    }
    return e6 + 1;
  }
  const o2 = { data: "\n", type: "whitespace" }, i3 = (e6) => e6 < t3.length && /[^\r\n]$/.test(t3[e6].data);
  let s3 = n3(t3);
  i3(s3 - 1) && t3.splice(s3++, 0, o2);
  for (const c4 of e5)
    t3.splice(s3++, 0, c4);
  i3(s3 - 1) && i3(s3) && t3.splice(s3, 0, o2);
}
function G(t3, e5, a3, r2 = "lowp") {
  T(t3, [{ type: "keyword", data: "out" }, { type: "whitespace", data: " " }, { type: "keyword", data: r2 }, { type: "whitespace", data: " " }, { type: "keyword", data: a3 }, { type: "whitespace", data: " " }, { type: "ident", data: e5 }, { type: "operator", data: ";" }], "afterPrecision");
}
function S(t3, e5, a3, r2, n3 = "lowp") {
  T(t3, [{ type: "keyword", data: "layout" }, { type: "operator", data: "(" }, { type: "keyword", data: "location" }, { type: "whitespace", data: " " }, { type: "operator", data: "=" }, { type: "whitespace", data: " " }, { type: "integer", data: r2.toString() }, { type: "operator", data: ")" }, { type: "whitespace", data: " " }, { type: "keyword", data: "out" }, { type: "whitespace", data: " " }, { type: "keyword", data: n3 }, { type: "whitespace", data: " " }, { type: "keyword", data: a3 }, { type: "whitespace", data: " " }, { type: "ident", data: e5 }, { type: "operator", data: ";" }], "afterPrecision");
}
function X(t3, e5) {
  let a3, r2, n3 = -1;
  for (let o2 = e5; o2 < t3.length; o2++) {
    const e6 = t3[o2];
    if ("operator" === e6.type && ("[" === e6.data && (a3 = o2), "]" === e6.data)) {
      r2 = o2;
      break;
    }
    "integer" === e6.type && (n3 = parseInt(e6.data, 10));
  }
  return a3 && r2 && t3.splice(a3, r2 - a3 + 1), n3;
}
function F(a3, r2) {
  if (a3.startsWith("#version 300"))
    return a3;
  const n3 = C(a3);
  if (null != n3)
    return n3;
  const o2 = v(a3);
  if ("300 es" === x(o2, "100", "300 es"))
    return a3;
  let i3 = null, s3 = null;
  const c4 = {}, u2 = {};
  for (let p2 = 0; p2 < o2.length; ++p2) {
    const a4 = o2[p2];
    switch (a4.type) {
      case "keyword":
        r2 === H.VERTEX_SHADER && "attribute" === a4.data ? a4.data = "in" : "varying" === a4.data && (a4.data = r2 === H.VERTEX_SHADER ? "out" : "in");
        break;
      case "builtin":
        if (/^texture(2D|Cube)(Proj)?(Lod|Grad)?(EXT)?$/.test(a4.data.trim()) && (a4.data = a4.data.replaceAll(/(2D|Cube|EXT)/g, "")), r2 === H.FRAGMENT_SHADER && "gl_FragColor" === a4.data && (i3 || (i3 = R(o2, c4, "fragColor"), G(o2, i3, "vec4")), a4.data = i3), r2 === H.FRAGMENT_SHADER && "gl_FragData" === a4.data) {
          const t3 = X(o2, p2 + 1), e5 = R(o2, c4, "fragData");
          S(o2, e5, "vec4", t3, "mediump"), a4.data = e5;
        } else
          r2 === H.FRAGMENT_SHADER && "gl_FragDepthEXT" === a4.data && (s3 || (s3 = R(o2, c4, "gl_FragDepth")), a4.data = s3);
        break;
      case "ident":
        if (e.includes(a4.data)) {
          if (r2 === H.VERTEX_SHADER && D(o2, p2))
            throw new Error("attribute in vertex shader uses a name that is a reserved word in glsl 300 es");
          a4.data in u2 || (u2[a4.data] = R(o2, c4, a4.data)), a4.data = u2[a4.data];
        }
    }
  }
  for (let t3 = o2.length - 1; t3 >= 0; --t3) {
    const e5 = o2[t3];
    if ("preprocessor" === e5.type) {
      const a4 = e5.data.match(/\#extension\s+(.*)\:/);
      if (a4 && a4[1] && A.includes(a4[1].trim())) {
        const e6 = o2[t3 + 1];
        o2.splice(t3, e6 && "whitespace" === e6.type ? 2 : 1);
      }
      const r3 = e5.data.match(/\#ifdef\s+(.*)/);
      r3 && r3[1] && A.includes(r3[1].trim()) && (e5.data = "#if 1");
      const n4 = e5.data.match(/\#ifndef\s+(.*)/);
      n4 && n4[1] && A.includes(n4[1].trim()) && (e5.data = "#if 0");
    }
  }
  return H2(a3, j(o2));
}
var L = /* @__PURE__ */ new Map();
function C(t3) {
  return e2.enableCache ? L.get(t3) : null;
}
function H2(t3, e5) {
  return e2.enableCache && L.set(t3, e5), e5;
}

// node_modules/@arcgis/core/views/webgl/Program.js
var s2 = 4294967295;
var m2 = class {
  constructor(t3, m3, h4, f3, c4 = /* @__PURE__ */ new Map()) {
    this._context = t3, this._locations = f3, this._uniformBlockBindings = c4, this._refCount = 1, this._compiled = false, this._nameToUniformLocation = {}, this._nameToUniform1 = {}, this._nameToUniform1v = /* @__PURE__ */ new Map(), this._nameToUniform2 = /* @__PURE__ */ new Map(), this._nameToUniform3 = /* @__PURE__ */ new Map(), this._nameToUniform4 = /* @__PURE__ */ new Map(), this._nameToUniformMatrix3 = /* @__PURE__ */ new Map(), this._nameToUniformMatrix4 = /* @__PURE__ */ new Map(), t3 || console.error("RenderingContext isn't initialized!"), 0 === m3.length && console.error("Shaders source should not be empty!"), this._context.type === n.WEBGL2 && (m3 = F(m3, H.VERTEX_SHADER), h4 = F(h4, H.FRAGMENT_SHADER)), this._vShader = a2(this._context, H.VERTEX_SHADER, m3), this._fShader = a2(this._context, H.FRAGMENT_SHADER, h4), this._vShader && this._fShader || console.error("Error loading shaders!"), this._context.instanceCounter.increment(V.Shader, this), c() && (this.vertexShader = m3, this.fragmentShader = h4);
    const _3 = this._context.gl, l3 = _3.createProgram();
    if (_3.attachShader(l3, this._vShader), _3.attachShader(l3, this._fShader), this._locations.forEach((t4, o2) => _3.bindAttribLocation(l3, t4, o2)), _3.linkProgram(l3), c() && !_3.getProgramParameter(l3, _3.LINK_STATUS) && console.error(`Could not link shader
validated: ${_3.getProgramParameter(l3, _3.VALIDATE_STATUS)}, gl error ${_3.getError()}, vertex: ${_3.getShaderParameter(this._vShader, _3.COMPILE_STATUS)}, fragment: ${_3.getShaderParameter(this._fShader, _3.COMPILE_STATUS)}, info log: ${_3.getProgramInfoLog(l3)}, vertex source: ${this.vertexShader}, fragment source: ${this.fragmentShader}`), this._context.type === n.WEBGL2) {
      const t4 = _3;
      for (const [o2, i3] of this._uniformBlockBindings) {
        const e5 = t4.getUniformBlockIndex(l3, o2);
        e5 < s2 && t4.uniformBlockBinding(l3, e5, i3);
      }
    }
    this._glName = l3, this._context.instanceCounter.increment(V.Program, this);
  }
  get glName() {
    return this._glName;
  }
  get hasGLName() {
    return null != this._glName;
  }
  get compiled() {
    if (this._compiled)
      return true;
    const t3 = this._context.gl.getExtension("KHR_parallel_shader_compile");
    return null == t3 || null == this.glName ? (this._compiled = true, true) : (this._compiled = !!this._context.gl.getProgramParameter(this.glName, t3.COMPLETION_STATUS_KHR), this._compiled);
  }
  dispose() {
    if (--this._refCount > 0)
      return;
    const t3 = this._context.gl;
    this._vShader && (t3.deleteShader(this._vShader), this._vShader = null, this._context.instanceCounter.decrement(V.Shader, this)), this._fShader && (t3.deleteShader(this._fShader), this._fShader = null), this._glName && (t3.deleteProgram(this._glName), this._glName = null, this._context.instanceCounter.decrement(V.Program, this));
  }
  ref() {
    ++this._refCount;
  }
  _getUniformLocation(t3) {
    return void 0 === this._nameToUniformLocation[t3] && null != this.glName && (++_2.numUniforms, this._nameToUniformLocation[t3] = this._context.gl.getUniformLocation(this.glName, t3)), this._nameToUniformLocation[t3];
  }
  hasUniform(t3) {
    return null !== this._getUniformLocation(t3);
  }
  setUniform1i(t3, o2) {
    const i3 = this._nameToUniform1[t3];
    void 0 !== i3 && o2 === i3 || (this._context.gl.uniform1i(this._getUniformLocation(t3), o2), this._nameToUniform1[t3] = o2);
  }
  setUniform1iv(t3, o2) {
    c3(this._nameToUniform1v, t3, o2) && this._context.gl.uniform1iv(this._getUniformLocation(t3), o2);
  }
  setUniform2iv(t3, o2) {
    c3(this._nameToUniform2, t3, o2) && this._context.gl.uniform2iv(this._getUniformLocation(t3), o2);
  }
  setUniform3iv(t3, o2) {
    c3(this._nameToUniform3, t3, o2) && this._context.gl.uniform3iv(this._getUniformLocation(t3), o2);
  }
  setUniform4iv(t3, o2) {
    c3(this._nameToUniform4, t3, o2) && this._context.gl.uniform4iv(this._getUniformLocation(t3), o2);
  }
  setUniform1f(t3, o2) {
    const i3 = this._nameToUniform1[t3];
    void 0 !== i3 && o2 === i3 || (this._context.gl.uniform1f(this._getUniformLocation(t3), o2), this._nameToUniform1[t3] = o2);
  }
  setUniform1fv(t3, o2) {
    c3(this._nameToUniform1v, t3, o2) && this._context.gl.uniform1fv(this._getUniformLocation(t3), o2);
  }
  setUniform2f(t3, o2, i3) {
    const e5 = this._nameToUniform2.get(t3);
    void 0 === e5 ? (this._context.gl.uniform2f(this._getUniformLocation(t3), o2, i3), this._nameToUniform2.set(t3, [o2, i3])) : o2 === e5[0] && i3 === e5[1] || (this._context.gl.uniform2f(this._getUniformLocation(t3), o2, i3), e5[0] = o2, e5[1] = i3);
  }
  setUniform2fv(t3, o2) {
    c3(this._nameToUniform2, t3, o2) && this._context.gl.uniform2fv(this._getUniformLocation(t3), o2);
  }
  setUniform3f(t3, o2, i3, e5) {
    const n3 = this._nameToUniform3.get(t3);
    void 0 === n3 ? (this._context.gl.uniform3f(this._getUniformLocation(t3), o2, i3, e5), this._nameToUniform3.set(t3, [o2, i3, e5])) : o2 === n3[0] && i3 === n3[1] && e5 === n3[2] || (this._context.gl.uniform3f(this._getUniformLocation(t3), o2, i3, e5), n3[0] = o2, n3[1] = i3, n3[2] = e5);
  }
  setUniform3fv(t3, o2) {
    c3(this._nameToUniform3, t3, o2) && this._context.gl.uniform3fv(this._getUniformLocation(t3), o2);
  }
  setUniform4f(t3, o2, i3, e5, n3) {
    const r2 = this._nameToUniform4.get(t3);
    void 0 === r2 ? (this._context.gl.uniform4f(this._getUniformLocation(t3), o2, i3, e5, n3), this._nameToUniform4.set(t3, [o2, i3, e5, n3])) : void 0 !== r2 && o2 === r2[0] && i3 === r2[1] && e5 === r2[2] && n3 === r2[3] || (this._context.gl.uniform4f(this._getUniformLocation(t3), o2, i3, e5, n3), r2[0] = o2, r2[1] = i3, r2[2] = e5, r2[3] = n3);
  }
  setUniform4fv(t3, o2) {
    c3(this._nameToUniform4, t3, o2) && this._context.gl.uniform4fv(this._getUniformLocation(t3), o2);
  }
  setUniformMatrix3fv(t3, o2, i3 = false) {
    c3(this._nameToUniformMatrix3, t3, o2) && this._context.gl.uniformMatrix3fv(this._getUniformLocation(t3), i3, o2);
  }
  setUniformMatrix4fv(t3, o2, i3 = false) {
    c3(this._nameToUniformMatrix4, t3, o2) && this._context.gl.uniformMatrix4fv(this._getUniformLocation(t3), i3, o2);
  }
  stop() {
  }
};
function a2(t3, i3, n3) {
  const r2 = t3.gl, s3 = r2.createShader(i3);
  return r2.shaderSource(s3, n3), r2.compileShader(s3), c() && !r2.getShaderParameter(s3, r2.COMPILE_STATUS) && (console.error("Compile error in ".concat(i3 === H.VERTEX_SHADER ? "vertex" : "fragment", " shader")), console.error(r2.getShaderInfoLog(s3)), console.error(h3(n3))), _2.enabled && (_2.compiledLOC += n3.match(/\n/g).length + 1), s3;
}
function h3(t3) {
  let o2 = 2;
  return t3.replaceAll("\n", () => "\n" + f2(o2++) + ":");
}
function f2(t3) {
  return t3 >= 1e3 ? t3.toString() : ("  " + t3).slice(-3);
}
function c3(o2, i3, e5) {
  const n3 = o2.get(i3);
  return n3 ? h(n3, e5) : (o2.set(i3, Array.from(e5)), true);
}
var _2 = { compiledLOC: 0, numUniforms: 0, enabled: false };

// node_modules/@arcgis/core/views/webgl/ShaderCompiler.js
var e3 = class {
  constructor(e5) {
    this._readFile = e5;
  }
  resolveIncludes(e5) {
    return this._resolve(e5);
  }
  _resolve(e5, t3 = /* @__PURE__ */ new Map()) {
    if (t3.has(e5))
      return t3.get(e5);
    const r2 = this._read(e5);
    if (!r2)
      throw new Error(`cannot find shader file ${e5}`);
    const s3 = /^[^\S\n]*#include\s+<(\S+)>[^\S\n]?/gm;
    let n3 = s3.exec(r2);
    const l3 = [];
    for (; null != n3; )
      l3.push({ path: n3[1], start: n3.index, length: n3[0].length }), n3 = s3.exec(r2);
    let a3 = 0, h4 = "";
    return l3.forEach((e6) => {
      h4 += r2.slice(a3, e6.start), h4 += t3.has(e6.path) ? "" : this._resolve(e6.path, t3), a3 = e6.start + e6.length;
    }), h4 += r2.slice(a3), t3.set(e5, h4), h4;
  }
  _read(e5) {
    return this._readFile(e5);
  }
};

// node_modules/@arcgis/core/views/webgl/ProgramTemplate.js
function e4(e5, t3, a3 = "") {
  return new m2(e5, a3 + t3.shaders.vertexShader, a3 + t3.shaders.fragmentShader, t3.attributes);
}

export {
  m2 as m,
  e3 as e,
  e4 as e2
};
//# sourceMappingURL=chunk-N5CR6S5Y.js.map
