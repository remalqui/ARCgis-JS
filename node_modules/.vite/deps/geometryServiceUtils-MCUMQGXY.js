import {
  o
} from "./chunk-6VJWKAPY.js";
import {
  f,
  i
} from "./chunk-YBMFRTPB.js";
import {
  j as j2
} from "./chunk-7KX64CAH.js";
import "./chunk-J4R3XNTP.js";
import "./chunk-Y6FRAP2R.js";
import {
  v
} from "./chunk-T4XWQYGC.js";
import "./chunk-TCASQSKO.js";
import "./chunk-5HAVROZG.js";
import "./chunk-MOPR7RFH.js";
import "./chunk-KW3ZNPTA.js";
import "./chunk-TJB4CGOM.js";
import "./chunk-N5ULYWRU.js";
import "./chunk-JZM5YUHA.js";
import "./chunk-MOIETNWJ.js";
import "./chunk-3GSONYPC.js";
import "./chunk-SFV6XLDZ.js";
import "./chunk-3PLRSFLA.js";
import "./chunk-VBD33VNW.js";
import {
  l
} from "./chunk-7A5C2EQ3.js";
import {
  y3 as y
} from "./chunk-OYBXMT5R.js";
import {
  a2 as a
} from "./chunk-CIDWM2UN.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";
import "./chunk-SHJI4PR4.js";
import {
  d
} from "./chunk-2YSHZRCT.js";
import {
  j
} from "./chunk-HKVL2MJK.js";
import "./chunk-MH2LNFJK.js";
import "./chunk-O3CHVGVF.js";
import "./chunk-HNHXEGH2.js";
import "./chunk-DWOEYHKS.js";
import {
  s,
  s3 as s2
} from "./chunk-W2N7YT6I.js";
import "./chunk-I5JT24BO.js";
import "./chunk-I4U7MQNO.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/rest/support/ProjectParameters.js
var i2 = class extends l {
  constructor(r) {
    super(r), this.geometries = [], this.outSpatialReference = null, this.transformation = null, this.transformForward = null;
  }
  toJSON() {
    const r = this.geometries.map((r2) => r2.toJSON()), t = this.geometries[0], o2 = {};
    return o2.outSR = this.outSpatialReference.wkid || JSON.stringify(this.outSpatialReference.toJSON()), o2.inSR = t.spatialReference.wkid || JSON.stringify(t.spatialReference.toJSON()), o2.geometries = JSON.stringify({ geometryType: v(t), geometries: r }), this.transformation && (o2.transformation = this.transformation.wkid || JSON.stringify(this.transformation)), null != this.transformForward && (o2.transformForward = this.transformForward), o2;
  }
};
e([y()], i2.prototype, "geometries", void 0), e([y({ json: { read: { source: "outSR" } } })], i2.prototype, "outSpatialReference", void 0), e([y()], i2.prototype, "transformation", void 0), e([y()], i2.prototype, "transformForward", void 0), i2 = e([a("esri.rest.support.ProjectParameters")], i2);
var a2 = i2;

// node_modules/@arcgis/core/rest/geometryService/project.js
var i3 = d(a2);
async function n(o2, m, n3) {
  m = i3(m);
  const u = f(o2), c = { ...u.query, f: "json", ...m.toJSON() }, j3 = m.outSpatialReference, a4 = v(m.geometries[0]), f2 = i(c, n3);
  return j(u.path + "/project", f2).then(({ data: { geometries: r } }) => o(r, a4, j3));
}

// node_modules/@arcgis/core/portal/support/geometryServiceUtils.js
async function n2(o2 = null, i4) {
  var _a, _b;
  if (s.geometryServiceUrl)
    return s.geometryServiceUrl;
  if (!o2)
    throw new s2("internal:geometry-service-url-not-configured");
  let n3;
  n3 = "portal" in o2 ? o2.portal || j2.getDefault() : o2, await n3.load({ signal: i4 });
  const a4 = (_b = (_a = n3.helperServices) == null ? void 0 : _a.geometry) == null ? void 0 : _b.url;
  if (!a4)
    throw new s2("internal:geometry-service-url-not-configured");
  return a4;
}
async function a3(r, t, a4 = null, l2) {
  const c = await n2(a4, l2), s3 = new a2();
  s3.geometries = [r], s3.outSpatialReference = t;
  const m = await n(c, s3, { signal: l2 });
  if (m && Array.isArray(m) && 1 === m.length)
    return m[0];
  throw new s2("internal:geometry-service-projection-failed");
}
export {
  n2 as getGeometryServiceURL,
  a3 as projectGeometry
};
//# sourceMappingURL=geometryServiceUtils-MCUMQGXY.js.map
