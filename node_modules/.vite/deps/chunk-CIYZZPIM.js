import {
  B,
  E,
  G,
  H,
  J,
  L,
  O,
  Oe,
  Re,
  U,
  V,
  Y,
  ce,
  fe,
  me,
  oe,
  q,
  s,
  se,
  t as t2,
  w,
  z
} from "./chunk-RFI4CCAC.js";
import {
  c
} from "./chunk-YAWND7HF.js";
import {
  e,
  t
} from "./chunk-FJYIB7HF.js";
import {
  p2 as p
} from "./chunk-SFV6XLDZ.js";

// node_modules/@arcgis/core/arcade/deepClone.js
function m(a) {
  u = a;
}
var u;
function p2(m2) {
  return null === m2 ? null : B(m2) ? m2.clone() : w(m2) ? m2 : G(m2) ? m2.clone() : q(m2) ? m2.toArray().map((a) => p2(a)) : z(m2) ? m2.map((a) => p2(a)) : E(m2) ? u.createFromArcadeFeature(m2) : U(m2) || V(m2) ? m2 : H(m2) || "esri.arcade.Attachment" === (m2 == null ? void 0 : m2.declaredClass) ? m2.deepClone() : ("esri.arcade.Portal" === (m2 == null ? void 0 : m2.declaredClass) || m2 instanceof s || O(m2), m2);
}

// node_modules/@arcgis/core/arcade/Dictionary.js
function T(t3, s2, i = false, e2 = false) {
  if (null == t3)
    return null;
  if (J(t3))
    return fe(t3);
  if (Y(t3))
    return me(t3);
  if (L(t3))
    return oe(t3);
  if (B(t3))
    return ce(t3, s2);
  if (z(t3)) {
    const n2 = [];
    for (const r of t3)
      n2.push(T(r, s2, i, e2));
    return n2;
  }
  if (e2 && G(t3))
    return t3;
  const n = new A();
  n.immutable = false;
  for (const r of Object.keys(t3)) {
    const o = t3[r];
    void 0 !== o && n.setField(r, T(o, s2, i, e2));
  }
  return n.immutable = i, n;
}
var A = class _A {
  constructor(t3) {
    this.declaredClass = "esri.arcade.Dictionary", this.attributes = null, this.plain = false, this.immutable = true, this.attributes = t3 instanceof _A ? t3.attributes : t3 ?? {};
  }
  field(t3) {
    const s2 = t3.toLowerCase(), n = this.attributes[t3];
    if (void 0 !== n)
      return n;
    for (const i in this.attributes)
      if (i.toLowerCase() === s2)
        return this.attributes[i];
    throw new t(null, e.FieldNotFound, null, { key: t3 });
  }
  setField(s2, n) {
    if (this.immutable)
      throw new t(null, e.Immutable, null);
    if (O(n))
      throw new t(null, e.NoFunctionInDictionary, null);
    const o = s2.toLowerCase();
    n instanceof Date && (n = c.dateJSToArcadeDate(n));
    if (void 0 === this.attributes[s2]) {
      for (const t3 in this.attributes)
        if (t3.toLowerCase() === o)
          return void (this.attributes[t3] = n);
      this.attributes[s2] = n;
    } else
      this.attributes[s2] = n;
  }
  hasField(t3) {
    const s2 = t3.toLowerCase();
    if (void 0 !== this.attributes[t3])
      return true;
    for (const i in this.attributes)
      if (i.toLowerCase() === s2)
        return true;
    return false;
  }
  keys() {
    let t3 = [];
    for (const s2 in this.attributes)
      t3.push(s2);
    return t3 = t3.sort(), t3;
  }
  castToText(s2 = false) {
    let i = "";
    for (const e2 in this.attributes) {
      "" !== i && (i += ",");
      const r = this.attributes[e2];
      null == r ? i += JSON.stringify(e2) + ":null" : Y(r) || J(r) || L(r) ? i += JSON.stringify(e2) + ":" + JSON.stringify(r) : r instanceof p ? i += JSON.stringify(e2) + ":" + se(r) : r instanceof t2 || r instanceof Array ? i += JSON.stringify(e2) + ":" + se(r, null, s2) : r instanceof c ? i += s2 ? JSON.stringify(e2) + ":" + JSON.stringify(r.getTime()) : JSON.stringify(e2) + ":" + r.stringify() : null !== r && "object" == typeof r && void 0 !== r.castToText && (i += JSON.stringify(e2) + ":" + r.castToText(s2));
    }
    return "{" + i + "}";
  }
  static convertObjectToArcadeDictionary(t3, s2, i = true, e2 = false) {
    const n = new _A();
    n.immutable = false;
    for (const r in t3) {
      const o = t3[r];
      void 0 !== o && n.setField(r.toString(), T(o, s2, i, e2));
    }
    return n.immutable = i, n;
  }
  static convertJsonToArcade(t3, s2, i = false) {
    return T(t3, s2, i);
  }
  castAsJson(t3 = null) {
    const s2 = {};
    for (let i in this.attributes) {
      const e2 = this.attributes[i];
      void 0 !== e2 && ((t3 == null ? void 0 : t3.keyTranslate) && (i = t3.keyTranslate(i)), s2[i] = Re(e2, t3));
    }
    return s2;
  }
  async castDictionaryValueAsJsonAsync(t3, s2, i, e2 = null, n) {
    const r = await Oe(i, e2, n);
    return t3[s2] = r, r;
  }
  async castAsJsonAsync(s2 = null, i = null) {
    const e2 = {}, n = [];
    for (let r in this.attributes) {
      const o = this.attributes[r];
      (i == null ? void 0 : i.keyTranslate) && (r = i.keyTranslate(r)), void 0 !== o && (w(o) || o instanceof p || o instanceof c ? e2[r] = Re(o, i) : n.push(this.castDictionaryValueAsJsonAsync(e2, r, o, s2, i)));
    }
    return n.length > 0 && await Promise.all(n), e2;
  }
  deepClone() {
    const t3 = new _A();
    t3.immutable = false;
    for (const i of this.keys())
      t3.setField(i, p2(this.field(i)));
    return t3;
  }
};

export {
  m,
  p2 as p,
  A
};
//# sourceMappingURL=chunk-CIYZZPIM.js.map
