import {
  Be
} from "./chunk-3SADEOML.js";
import "./chunk-V3KDZQUR.js";
import "./chunk-XSL4XKVS.js";
import "./chunk-PLCQTNGD.js";
import "./chunk-UMKNA5PR.js";
import "./chunk-YM46NRFF.js";
import "./chunk-QRIMDBVP.js";
import "./chunk-DIRCMTXV.js";
import "./chunk-7XRP3RPT.js";
import "./chunk-2YTFL6AC.js";
import "./chunk-CGPOGDO6.js";
import "./chunk-ZCZT2HZV.js";
import "./chunk-62M25QKF.js";
import "./chunk-W52WZL2F.js";
import "./chunk-7MOGRCW6.js";
import "./chunk-3Y3ICAIL.js";
import "./chunk-TNXVIMSN.js";
import "./chunk-XFLBB3FK.js";
import "./chunk-77BBQQ7Y.js";
import "./chunk-FGWFWDIM.js";
import "./chunk-UCGDNB2P.js";
import "./chunk-E4GDJ764.js";
import "./chunk-Z2T56FN3.js";
import "./chunk-ZMKH5ZRU.js";
import {
  j
} from "./chunk-P46VVEIN.js";
import "./chunk-X34I34RW.js";
import {
  a as a3
} from "./chunk-5NBE4HDI.js";
import "./chunk-4NLQ63FV.js";
import "./chunk-Y7HVH6RU.js";
import {
  t
} from "./chunk-2HDAD5Q3.js";
import {
  c as c2
} from "./chunk-PPU6QR6F.js";
import {
  O
} from "./chunk-PCVJI7J2.js";
import "./chunk-HZHMZHPT.js";
import "./chunk-NU5WEWCI.js";
import "./chunk-UIVGJZCT.js";
import "./chunk-MVR2W3C6.js";
import "./chunk-7MFOV26D.js";
import "./chunk-RNXN3MSP.js";
import "./chunk-DIXAOEHS.js";
import "./chunk-4NWXO2LT.js";
import "./chunk-6ETVGJDF.js";
import "./chunk-34QQ6GDH.js";
import "./chunk-KTII3LWY.js";
import "./chunk-RL6GG46M.js";
import "./chunk-MLNTHYHD.js";
import "./chunk-I3XMP33U.js";
import "./chunk-JDYLSHC3.js";
import {
  n
} from "./chunk-MIHFHM6P.js";
import "./chunk-QAWS7Y22.js";
import "./chunk-UX5D32RO.js";
import "./chunk-FHYNSVC4.js";
import {
  h as h2
} from "./chunk-NYLF7BL2.js";
import "./chunk-YC4PIRSZ.js";
import "./chunk-MSLDEOHR.js";
import "./chunk-32JSK7KN.js";
import "./chunk-YIJWIXDP.js";
import "./chunk-EISDT6B4.js";
import "./chunk-LREUW66K.js";
import {
  b
} from "./chunk-PM3CFO6N.js";
import "./chunk-6VJWKAPY.js";
import "./chunk-UQOM5GR4.js";
import "./chunk-YBMFRTPB.js";
import {
  y as y2
} from "./chunk-RR2V4HRU.js";
import "./chunk-WZAASLQW.js";
import "./chunk-SCOBW7KR.js";
import "./chunk-AHAGGZUI.js";
import {
  i,
  p
} from "./chunk-4U2D3HFL.js";
import "./chunk-5WXPQVZD.js";
import "./chunk-AF36K5Y6.js";
import "./chunk-5K6FTFN4.js";
import "./chunk-CNCZBOLJ.js";
import "./chunk-QXPTMFGZ.js";
import {
  h
} from "./chunk-4SARN32Z.js";
import "./chunk-QA4FMJA6.js";
import {
  S2,
  m as m2,
  m3,
  y as y3
} from "./chunk-VFQINJTY.js";
import "./chunk-4J6R7QH6.js";
import "./chunk-HB3KZNZ3.js";
import "./chunk-MUO4EIZP.js";
import "./chunk-42RWGG3D.js";
import "./chunk-G5WJIWPP.js";
import "./chunk-LNMNRMVX.js";
import "./chunk-OO4A3EBQ.js";
import "./chunk-ZBWBCN2I.js";
import "./chunk-KTEJJM3A.js";
import {
  $,
  Cn,
  Y,
  nn,
  tn
} from "./chunk-SO6DBMQG.js";
import "./chunk-KTSEQWMB.js";
import "./chunk-QXGO5RRL.js";
import "./chunk-EIE3W25Z.js";
import "./chunk-7KM4XBUC.js";
import "./chunk-OZXJDVTE.js";
import "./chunk-CGK6BJQA.js";
import {
  b as b2
} from "./chunk-XU2Q4SCK.js";
import "./chunk-KIEN3CY2.js";
import "./chunk-4CZO65BK.js";
import "./chunk-7E3Q7HTF.js";
import "./chunk-FXDEKQIL.js";
import "./chunk-GJ5WE5D3.js";
import "./chunk-KKGH4SRQ.js";
import "./chunk-Y2CLYMXQ.js";
import {
  V
} from "./chunk-4RFFPIT2.js";
import "./chunk-UKJF25H6.js";
import "./chunk-KSQTM6XI.js";
import "./chunk-D5MIJ6WT.js";
import "./chunk-7KX64CAH.js";
import "./chunk-J4R3XNTP.js";
import "./chunk-Y6FRAP2R.js";
import "./chunk-BVNZ3ETW.js";
import "./chunk-FJQ7HIY7.js";
import "./chunk-T4XWQYGC.js";
import "./chunk-4H5JODOT.js";
import "./chunk-TCASQSKO.js";
import {
  C,
  H,
  J,
  c,
  m
} from "./chunk-5HAVROZG.js";
import "./chunk-MOPR7RFH.js";
import "./chunk-KW3ZNPTA.js";
import "./chunk-TJB4CGOM.js";
import "./chunk-4NOOGA4U.js";
import "./chunk-CWQ6Q3PH.js";
import "./chunk-XN5VV437.js";
import "./chunk-ODFH3BSN.js";
import "./chunk-74O2T7JC.js";
import "./chunk-WBSPL6CJ.js";
import "./chunk-N5ULYWRU.js";
import "./chunk-LQVUN6IS.js";
import "./chunk-JZM5YUHA.js";
import "./chunk-MOIETNWJ.js";
import {
  M
} from "./chunk-3GSONYPC.js";
import {
  S2 as S,
  f,
  o2,
  r
} from "./chunk-SFV6XLDZ.js";
import "./chunk-3PLRSFLA.js";
import "./chunk-VBD33VNW.js";
import "./chunk-7A5C2EQ3.js";
import {
  y3 as y
} from "./chunk-OYBXMT5R.js";
import {
  a2,
  s2
} from "./chunk-CIDWM2UN.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";
import "./chunk-SHJI4PR4.js";
import "./chunk-2YSHZRCT.js";
import "./chunk-HKVL2MJK.js";
import "./chunk-MH2LNFJK.js";
import "./chunk-O3CHVGVF.js";
import "./chunk-HNHXEGH2.js";
import "./chunk-DWOEYHKS.js";
import {
  s3 as s
} from "./chunk-W2N7YT6I.js";
import {
  a,
  o
} from "./chunk-I5JT24BO.js";
import "./chunk-I4U7MQNO.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/layers/GraphicsLayer.js
var n2 = class extends a3(t(b2)) {
  constructor(r2) {
    super(r2), this.elevationInfo = null, this.graphics = new i(), this.screenSizePerspectiveEnabled = true, this.type = "graphics", this.internal = false;
  }
  destroy() {
    this.removeAll(), this.graphics.destroy();
  }
  add(r2) {
    return this.graphics.add(r2), this;
  }
  addMany(r2) {
    return this.graphics.addMany(r2), this;
  }
  removeAll() {
    return this.graphics.removeAll(), this;
  }
  remove(r2) {
    this.graphics.remove(r2);
  }
  removeMany(r2) {
    this.graphics.removeMany(r2);
  }
  on(r2, e2) {
    return super.on(r2, e2);
  }
  graphicChanged(r2) {
    this.emit("graphic-update", r2);
  }
};
e([y({ type: h2 })], n2.prototype, "elevationInfo", void 0), e([y(p(i, "graphics"))], n2.prototype, "graphics", void 0), e([y({ type: ["show", "hide"] })], n2.prototype, "listMode", void 0), e([y()], n2.prototype, "screenSizePerspectiveEnabled", void 0), e([y({ readOnly: true })], n2.prototype, "type", void 0), e([y({ constructOnly: true })], n2.prototype, "internal", void 0), n2 = e([a2("esri.layers.GraphicsLayer")], n2);
var h3 = n2;

// node_modules/@arcgis/core/layers/MapNotesLayer.js
function B(e2) {
  return "markup" === e2.featureCollectionType || e2.layers.some((e3) => null != e3.layerDefinition.visibilityField || !k(e3));
}
function k({ layerDefinition: e2, featureSet: t2 }) {
  const r2 = e2.geometryType ?? t2.geometryType;
  return $2.find((t3) => {
    var _a, _b, _c;
    return r2 === t3.geometryTypeJSON && ((_c = (_b = (_a = e2.drawingInfo) == null ? void 0 : _a.renderer) == null ? void 0 : _b.symbol) == null ? void 0 : _c.type) === t3.identifyingSymbol.type;
  });
}
function z() {
  return new M({ xmin: -180, ymin: -90, xmax: 180, ymax: 90 });
}
var U = new y2({ name: "OBJECTID", alias: "OBJECTID", type: "oid", nullable: false, editable: false });
var W = new y2({ name: "title", alias: "Title", type: "string", nullable: true, editable: true });
var A = class extends h3 {
  constructor(e2) {
    super(e2), this.visibilityMode = "inherited";
  }
  initialize() {
    for (const e2 of this.graphics)
      e2.sourceLayer = this.layer;
    this.graphics.on("after-add", (e2) => {
      e2.item.sourceLayer = this.layer;
    }), this.graphics.on("after-remove", (e2) => {
      e2.item.sourceLayer = null;
    });
  }
  get fullExtent() {
    var _a;
    const e2 = (_a = this.layer) == null ? void 0 : _a.spatialReference, t2 = this.fullBounds;
    return e2 ? null == t2 ? tn(z(), e2).geometry : c(t2, e2) : null;
  }
  get fullBounds() {
    var _a;
    const e2 = (_a = this.layer) == null ? void 0 : _a.spatialReference;
    if (!e2)
      return null;
    const t2 = C();
    return this.graphics.forEach((r2) => {
      const o3 = null != r2.geometry ? tn(r2.geometry, e2).geometry : null;
      null != o3 && m(t2, "point" === o3.type ? o3 : o3.extent, t2);
    }), H(t2, J) ? null : t2;
  }
  get sublayers() {
    return this.graphics;
  }
};
e([y({ readOnly: true })], A.prototype, "fullExtent", null), e([y({ readOnly: true })], A.prototype, "fullBounds", null), e([y({ readOnly: true })], A.prototype, "sublayers", null), e([y()], A.prototype, "layer", void 0), e([y()], A.prototype, "layerId", void 0), e([y({ readOnly: true })], A.prototype, "visibilityMode", void 0), A = e([a2("esri.layers.MapNotesLayer.MapNotesSublayer")], A);
var $2 = [{ geometryType: "polygon", geometryTypeJSON: "esriGeometryPolygon", id: "polygonLayer", layerId: 0, title: "Polygons", identifyingSymbol: new S2().toJSON() }, { geometryType: "polyline", geometryTypeJSON: "esriGeometryPolyline", id: "polylineLayer", layerId: 1, title: "Polylines", identifyingSymbol: new m2().toJSON() }, { geometryType: "multipoint", geometryTypeJSON: "esriGeometryMultipoint", id: "multipointLayer", layerId: 2, title: "Multipoints", identifyingSymbol: new y3().toJSON() }, { geometryType: "point", geometryTypeJSON: "esriGeometryPoint", id: "pointLayer", layerId: 3, title: "Points", identifyingSymbol: new y3().toJSON() }, { geometryType: "point", geometryTypeJSON: "esriGeometryPoint", id: "textLayer", layerId: 4, title: "Text", identifyingSymbol: new m3().toJSON() }];
var q = class extends a3(t(c2(j(O(b2))))) {
  constructor(e2) {
    super(e2), this.capabilities = { operations: { supportsMapNotesEditing: true } }, this.featureCollections = null, this.featureCollectionJSON = null, this.featureCollectionType = "notes", this.legendEnabled = false, this.listMode = "hide-children", this.minScale = 0, this.maxScale = 0, this.spatialReference = f.WGS84, this.sublayers = new V($2.map((e3) => new A({ id: e3.id, layerId: e3.layerId, title: e3.title, layer: this }))), this.title = "Map Notes", this.type = "map-notes", this.visibilityMode = "inherited";
  }
  readCapabilities(e2, t2, r2) {
    return { operations: { supportsMapNotesEditing: !B(t2) && "portal-item" !== (r2 == null ? void 0 : r2.origin) } };
  }
  readFeatureCollections(e2, t2, o3) {
    if (!B(t2))
      return null;
    const i2 = t2.layers.map((e3) => {
      const t3 = new Be();
      return t3.read(e3, o3), t3;
    });
    return new V({ items: i2 });
  }
  readLegacyfeatureCollectionJSON(e2, t2) {
    return B(t2) ? a(t2.featureCollection) : null;
  }
  get fullExtent() {
    var _a;
    const e2 = this.spatialReference, t2 = C();
    if (null != this.sublayers)
      this.sublayers.forEach(({ fullBounds: e3 }) => null != e3 ? m(t2, e3, t2) : t2, t2);
    else if ((_a = this.featureCollectionJSON) == null ? void 0 : _a.layers.some((e3) => e3.layerDefinition.extent)) {
      this.featureCollectionJSON.layers.forEach((r2) => {
        const o3 = tn(r2.layerDefinition.extent, e2).geometry;
        null != o3 && m(t2, o3, t2);
      });
    }
    return H(t2, J) ? tn(z(), e2).geometry : c(t2, e2);
  }
  readMinScale(e2, t2) {
    for (const r2 of t2.layers)
      if (null != r2.layerDefinition.minScale)
        return r2.layerDefinition.minScale;
    return 0;
  }
  readMaxScale(e2, t2) {
    for (const r2 of t2.layers)
      if (null != r2.layerDefinition.maxScale)
        return r2.layerDefinition.maxScale;
    return 0;
  }
  get multipointLayer() {
    return this._findSublayer("multipointLayer");
  }
  get pointLayer() {
    return this._findSublayer("pointLayer");
  }
  get polygonLayer() {
    return this._findSublayer("polygonLayer");
  }
  get polylineLayer() {
    return this._findSublayer("polylineLayer");
  }
  readSpatialReference(e2, t2) {
    return t2.layers.length ? f.fromJSON(t2.layers[0].layerDefinition.spatialReference) : f.WGS84;
  }
  readSublayers(e2, o3, i2) {
    if (B(o3))
      return null;
    const l = [];
    let a4 = o3.layers.reduce((e3, t2) => Math.max(e3, t2.layerDefinition.id ?? -1), -1) + 1;
    for (const r2 of o3.layers) {
      const { layerDefinition: e3, featureSet: o4 } = r2, i3 = e3.id ?? a4++, n3 = k(r2);
      if (null != n3) {
        const r3 = new A({ id: n3.id, title: e3.name, layerId: i3, layer: this, graphics: o4.features.map(({ geometry: e4, symbol: r4, attributes: o5, popupInfo: i4 }) => h.fromJSON({ attributes: o5, geometry: e4, symbol: r4, popupTemplate: i4 })) });
        l.push(r3);
      }
    }
    return new V(l);
  }
  writeSublayers(e2, t2, r2, i2) {
    var _a;
    const { minScale: l, maxScale: n3 } = this;
    if (null == e2)
      return;
    const s3 = e2.some((e3) => e3.graphics.length > 0);
    if (!this.capabilities.operations.supportsMapNotesEditing)
      return void (s3 && ((_a = i2 == null ? void 0 : i2.messages) == null ? void 0 : _a.push(new s("map-notes-layer:editing-not-supported", "New map notes cannot be added to this layer"))));
    const p2 = [];
    let y4 = this.spatialReference.toJSON();
    e:
      for (const o3 of e2)
        for (const e3 of o3.graphics)
          if (null != e3.geometry) {
            y4 = e3.geometry.spatialReference.toJSON();
            break e;
          }
    for (const o3 of $2) {
      const t3 = e2.find((e3) => o3.id === e3.id);
      this._writeMapNoteSublayer(p2, t3, o3, l, n3, y4, i2);
    }
    o("featureCollection.layers", p2, t2);
  }
  get textLayer() {
    return this._findSublayer("textLayer");
  }
  load(e2) {
    return this.addResolvingPromise(this.loadFromPortal({ supportedTypes: ["Feature Collection"] }, e2)), Promise.resolve(this);
  }
  read(e2, t2) {
    "featureCollection" in e2 && (e2 = a(e2), Object.assign(e2, e2.featureCollection)), super.read(e2, t2);
  }
  async beforeSave() {
    if (null == this.sublayers)
      return;
    let e2 = null;
    const t2 = [];
    for (const o3 of this.sublayers)
      for (const r3 of o3.graphics)
        if (null != r3.geometry) {
          const o4 = r3.geometry;
          e2 ? S(o4.spatialReference, e2) || (Cn(o4.spatialReference, e2) || Y() || await $(), r3.geometry = nn(o4, e2)) : e2 = o4.spatialReference, t2.push(r3);
        }
    const r2 = await b(t2.map((e3) => e3.geometry));
    t2.forEach((e3, t3) => e3.geometry = r2[t3]);
  }
  _findSublayer(e2) {
    var _a;
    return null == this.sublayers ? null : ((_a = this.sublayers) == null ? void 0 : _a.find((t2) => t2.id === e2)) ?? null;
  }
  _writeMapNoteSublayer(e2, t2, r2, o3, l, a4, n3) {
    const s3 = [];
    if (null != t2) {
      for (const e3 of t2.graphics)
        this._writeMapNote(s3, e3, r2.geometryType, n3);
      this._normalizeObjectIds(s3, U), e2.push({ layerDefinition: { name: t2.title, drawingInfo: { renderer: { type: "simple", symbol: a(r2.identifyingSymbol) } }, id: t2.layerId, geometryType: r2.geometryTypeJSON, minScale: o3, maxScale: l, objectIdField: "OBJECTID", fields: [U.toJSON(), W.toJSON()], spatialReference: a4 }, featureSet: { features: s3, geometryType: r2.geometryTypeJSON } });
    }
  }
  _writeMapNote(e2, t2, r2, o3) {
    var _a, _b;
    if (null == t2)
      return;
    const { geometry: i2, symbol: l, popupTemplate: a4 } = t2;
    if (null == i2)
      return;
    if (i2.type !== r2)
      return void ((_a = o3 == null ? void 0 : o3.messages) == null ? void 0 : _a.push(new s2("map-notes-layer:invalid-geometry-type", `Geometry "${i2.type}" cannot be saved in "${r2}" layer`, { graphic: t2 })));
    if (null == l)
      return void ((_b = o3 == null ? void 0 : o3.messages) == null ? void 0 : _b.push(new s2("map-notes-layer:no-symbol", "Skipping map notes with no symbol", { graphic: t2 })));
    const s3 = { attributes: { ...t2.attributes }, geometry: i2.toJSON(), symbol: l.toJSON() };
    null != a4 && (s3.popupInfo = a4.toJSON()), e2.push(s3);
  }
  _normalizeObjectIds(e2, t2) {
    const r2 = t2.name;
    let o3 = n(r2, e2) + 1;
    const i2 = /* @__PURE__ */ new Set();
    for (const l of e2) {
      l.attributes || (l.attributes = {});
      const { attributes: e3 } = l;
      (null == e3[r2] || i2.has(e3[r2])) && (e3[r2] = o3++), i2.add(e3[r2]);
    }
  }
};
e([y({ readOnly: true })], q.prototype, "capabilities", void 0), e([o2(["portal-item", "web-map"], "capabilities", ["layers"])], q.prototype, "readCapabilities", null), e([y({ readOnly: true })], q.prototype, "featureCollections", void 0), e([o2(["web-map", "portal-item"], "featureCollections", ["layers"])], q.prototype, "readFeatureCollections", null), e([y({ readOnly: true, json: { origins: { "web-map": { write: { enabled: true, target: "featureCollection" } } } } })], q.prototype, "featureCollectionJSON", void 0), e([o2(["web-map", "portal-item"], "featureCollectionJSON", ["featureCollection"])], q.prototype, "readLegacyfeatureCollectionJSON", null), e([y({ readOnly: true, json: { read: true, write: { enabled: true, ignoreOrigin: true } } })], q.prototype, "featureCollectionType", void 0), e([y({ readOnly: true })], q.prototype, "fullExtent", null), e([y({ readOnly: true, json: { origins: { "web-map": { write: { target: "featureCollection.showLegend", overridePolicy() {
  return { enabled: null != this.featureCollectionJSON };
} } } } } })], q.prototype, "legendEnabled", void 0), e([y({ type: ["show", "hide", "hide-children"] })], q.prototype, "listMode", void 0), e([y({ type: Number, nonNullable: true, json: { write: false } })], q.prototype, "minScale", void 0), e([o2(["web-map", "portal-item"], "minScale", ["layers"])], q.prototype, "readMinScale", null), e([y({ type: Number, nonNullable: true, json: { write: false } })], q.prototype, "maxScale", void 0), e([o2(["web-map", "portal-item"], "maxScale", ["layers"])], q.prototype, "readMaxScale", null), e([y({ readOnly: true })], q.prototype, "multipointLayer", null), e([y({ value: "ArcGISFeatureLayer", type: ["ArcGISFeatureLayer"] })], q.prototype, "operationalLayerType", void 0), e([y({ readOnly: true })], q.prototype, "pointLayer", null), e([y({ readOnly: true })], q.prototype, "polygonLayer", null), e([y({ readOnly: true })], q.prototype, "polylineLayer", null), e([y({ type: f })], q.prototype, "spatialReference", void 0), e([o2(["web-map", "portal-item"], "spatialReference", ["layers"])], q.prototype, "readSpatialReference", null), e([y({ readOnly: true, json: { origins: { "web-map": { write: { ignoreOrigin: true } } } } })], q.prototype, "sublayers", void 0), e([o2("web-map", "sublayers", ["layers"])], q.prototype, "readSublayers", null), e([r("web-map", "sublayers")], q.prototype, "writeSublayers", null), e([y({ readOnly: true })], q.prototype, "textLayer", null), e([y()], q.prototype, "title", void 0), e([y({ readOnly: true, json: { read: false } })], q.prototype, "type", void 0), q = e([a2("esri.layers.MapNotesLayer")], q);
var H2 = q;
export {
  H2 as default
};
//# sourceMappingURL=MapNotesLayer-YREYOTFV.js.map
