import {
  h
} from "./chunk-KKGH4SRQ.js";
import {
  o
} from "./chunk-4H5JODOT.js";
import {
  l
} from "./chunk-7A5C2EQ3.js";
import {
  y3 as y
} from "./chunk-OYBXMT5R.js";
import {
  a2
} from "./chunk-CIDWM2UN.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";
import {
  T
} from "./chunk-2YSHZRCT.js";
import {
  a
} from "./chunk-I5JT24BO.js";

// node_modules/@arcgis/core/rest/support/ColorRamp.js
var e2 = class extends l {
  constructor(r) {
    super(r), this.type = null;
  }
};
e([y({ readOnly: true, json: { read: false, write: true } })], e2.prototype, "type", void 0), e2 = e([a2("esri.rest.support.ColorRamp")], e2);
var p = e2;

// node_modules/@arcgis/core/rest/support/AlgorithmicColorRamp.js
var m;
var c = m = class extends p {
  constructor(o2) {
    super(o2), this.algorithm = null, this.fromColor = null, this.toColor = null, this.type = "algorithmic";
  }
  clone() {
    return new m({ fromColor: a(this.fromColor), toColor: a(this.toColor), algorithm: this.algorithm });
  }
};
e([o({ esriCIELabAlgorithm: "cie-lab", esriHSVAlgorithm: "hsv", esriLabLChAlgorithm: "lab-lch" })], c.prototype, "algorithm", void 0), e([y({ type: h, json: { type: [T], write: true } })], c.prototype, "fromColor", void 0), e([y({ type: h, json: { type: [T], write: true } })], c.prototype, "toColor", void 0), e([y({ type: ["algorithmic"] })], c.prototype, "type", void 0), c = m = e([a2("esri.rest.support.AlgorithmicColorRamp")], c);
var a3 = c;

// node_modules/@arcgis/core/rest/support/MultipartColorRamp.js
var c2;
var m2 = c2 = class extends p {
  constructor(o2) {
    super(o2), this.colorRamps = null, this.type = "multipart";
  }
  clone() {
    return new c2({ colorRamps: a(this.colorRamps) });
  }
};
e([y({ type: [a3], json: { write: true } })], m2.prototype, "colorRamps", void 0), e([y({ type: ["multipart"] })], m2.prototype, "type", void 0), m2 = c2 = e([a2("esri.rest.support.MultipartColorRamp")], m2);
var a4 = m2;

// node_modules/@arcgis/core/rest/support/colorRamps.js
var m3 = { key: "type", base: p, typeMap: { algorithmic: a3, multipart: a4 } };
function p2(o2) {
  return o2 && o2.type ? "algorithmic" === o2.type ? a3.fromJSON(o2) : "multipart" === o2.type ? a4.fromJSON(o2) : null : null;
}

export {
  a4 as a,
  m3 as m,
  p2 as p
};
//# sourceMappingURL=chunk-MVR2W3C6.js.map
