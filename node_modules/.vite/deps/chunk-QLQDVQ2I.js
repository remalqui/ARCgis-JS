import {
  I,
  L,
  T
} from "./chunk-CKK5HS7D.js";
import {
  o
} from "./chunk-P34MS5MD.js";
import {
  r
} from "./chunk-EISDT6B4.js";
import {
  ct,
  rt,
  st
} from "./chunk-KKGVORR5.js";
import {
  e
} from "./chunk-WTKN55TU.js";
import {
  i
} from "./chunk-WZAASLQW.js";
import {
  f,
  g,
  p
} from "./chunk-SFV6XLDZ.js";
import {
  j
} from "./chunk-HKVL2MJK.js";
import {
  s2 as s,
  s3 as s2
} from "./chunk-W2N7YT6I.js";

// node_modules/@arcgis/core/layers/ogc/ogcFeatureUtils.js
var y = s.getLogger("esri.layers.graphics.sources.ogcfeature");
var w = "http://www.opengis.net/def/crs/";
var b = `${w}OGC/1.3/CRS84`;
async function h(n, i2, r2 = {}, a = 5) {
  const { links: s3 } = n, o2 = $(s3, "items", "application/geo+json") || $(s3, "http://www.opengis.net/def/rel/ogc/1.0/items", "application/geo+json");
  if (null == o2)
    throw new s2("ogc-feature-layer:missing-items-page", "Missing items url");
  const { data: l } = await j(o2.href, { signal: r2.signal, query: { limit: a, ...r2.customParameters, token: r2.apiKey }, headers: { accept: "application/geo+json" } });
  await T(l);
  const d = L(l, { geometryType: i2.geometryType }), g2 = i2.fields || d.fields || [], w2 = null != i2.hasZ ? i2.hasZ : d.hasZ, b2 = d.geometryType, h2 = i2.objectIdField || d.objectIdFieldName || "OBJECTID";
  let j3 = i2.timeInfo;
  const F2 = g2.find(({ name: e2 }) => e2 === h2);
  if (F2)
    F2.editable = false, F2.nullable = false;
  else {
    if (!d.objectIdFieldType)
      throw new s2("ogc-feature-layer:missing-feature-id", "Collection geojson require a feature id as a unique identifier");
    g2.unshift({ name: h2, alias: h2, type: "number" === d.objectIdFieldType ? "esriFieldTypeOID" : "esriFieldTypeString", editable: false, nullable: false });
  }
  if (h2 !== d.objectIdFieldName) {
    const e2 = g2.find(({ name: e3 }) => e3 === d.objectIdFieldName);
    e2 && (e2.type = "esriFieldTypeInteger");
  }
  g2 === d.fields && d.unknownFields.length > 0 && y.warn({ name: "ogc-feature-layer:unknown-field-types", message: "Some fields types couldn't be inferred from the features and were dropped", details: { unknownFields: d.unknownFields } });
  for (const e2 of g2) {
    if (null == e2.name && (e2.name = e2.alias), null == e2.alias && (e2.alias = e2.name), "esriFieldTypeOID" !== e2.type && "esriFieldTypeGlobalID" !== e2.type && (e2.editable = null == e2.editable || !!e2.editable, e2.nullable = null == e2.nullable || !!e2.nullable), !e2.name)
      throw new s2("ogc-feature-layer:invalid-field-name", "field name is missing", { field: e2 });
    if (!i.jsonValues.includes(e2.type))
      throw new s2("ogc-feature-layer:invalid-field-type", `invalid type for field "${e2.name}"`, { field: e2 });
  }
  if (j3) {
    const e2 = new r(g2);
    if (j3.startTimeField) {
      const t = e2.get(j3.startTimeField);
      t ? (j3.startTimeField = t.name, t.type = "esriFieldTypeDate") : j3.startTimeField = null;
    }
    if (j3.endTimeField) {
      const t = e2.get(j3.endTimeField);
      t ? (j3.endTimeField = t.name, t.type = "esriFieldTypeDate") : j3.endTimeField = null;
    }
    if (j3.trackIdField) {
      const t = e2.get(j3.trackIdField);
      t ? j3.trackIdField = t.name : (j3.trackIdField = null, y.warn({ name: "ogc-feature-layer:invalid-timeInfo-trackIdField", message: "trackIdField is missing", details: { timeInfo: j3 } }));
    }
    j3.startTimeField || j3.endTimeField || (y.warn({ name: "ogc-feature-layer:invalid-timeInfo", message: "startTimeField and endTimeField are missing", details: { timeInfo: j3 } }), j3 = null);
  }
  return { drawingInfo: b2 ? o(b2) : null, extent: M(n), geometryType: b2, fields: g2, hasZ: !!w2, objectIdField: h2, timeInfo: j3 };
}
async function j2(n, i2 = {}) {
  const { links: r2 } = n, a = $(r2, "data", "application/json") || $(r2, "http://www.opengis.net/def/rel/ogc/1.0/data", "application/json");
  if (null == a)
    throw new s2("ogc-feature-layer:missing-collections-page", "Missing collections url");
  const { apiKey: s3, customParameters: o2, signal: l } = i2, { data: c } = await j(a.href, { signal: l, headers: { accept: "application/json" }, query: { ...o2, token: s3 } });
  return c;
}
async function F(n, i2 = {}) {
  const { links: r2 } = n, a = $(r2, "conformance", "application/json") || $(r2, "http://www.opengis.net/def/rel/ogc/1.0/conformance", "application/json");
  if (null == a)
    throw new s2("ogc-feature-layer:missing-conformance-page", "Missing conformance url");
  const { apiKey: s3, customParameters: o2, signal: l } = i2, { data: c } = await j(a.href, { signal: l, headers: { accept: "application/json" }, query: { ...o2, token: s3 } });
  return c;
}
async function I2(t, n = {}) {
  const { apiKey: i2, customParameters: r2, signal: a } = n, { data: s3 } = await j(t, { signal: a, headers: { accept: "application/json" }, query: { ...r2, token: i2 } });
  return s3;
}
async function T2(t, n = {}) {
  const i2 = "application/vnd.oai.openapi+json;version=3.0", r2 = $(t.links, "service-desc", i2);
  if (null == r2)
    return y.warn("ogc-feature-layer:missing-openapi-page", "The OGC API-Features server does not have an OpenAPI page."), null;
  const { apiKey: a, customParameters: s3, signal: o2 } = n, { data: l } = await j(r2.href, { signal: o2, headers: { accept: i2 }, query: { ...s3, token: a } });
  return l;
}
function k(e2) {
  const t = /^http:\/\/www\.opengis.net\/def\/crs\/(?<authority>.*)\/(?<version>.*)\/(?<code>.*)$/i.exec(e2), n = t == null ? void 0 : t.groups;
  if (!n)
    return null;
  const { authority: i2, code: r2 } = n;
  switch (i2.toLowerCase()) {
    case "ogc":
      switch (r2.toLowerCase()) {
        case "crs27":
          return f.GCS_NAD_1927.wkid;
        case "crs83":
          return 4269;
        case "crs84":
        case "crs84h":
          return f.WGS84.wkid;
        default:
          return null;
      }
    case "esri":
    case "epsg": {
      const e3 = Number.parseInt(r2, 10);
      return Number.isNaN(e3) ? null : e3;
    }
    default:
      return null;
  }
}
async function x(e2, t, n) {
  const i2 = await S(e2, t, n);
  return ct(i2);
}
async function S(n, a, c) {
  const { collection: u, layerDefinition: m, maxRecordCount: p2, queryParameters: { apiKey: f2, customParameters: y2 }, spatialReference: w2, supportedCrs: b2 } = n, { links: h2 } = u, j3 = $(h2, "items", "application/geo+json") || $(h2, "http://www.opengis.net/def/rel/ogc/1.0/items", "application/geo+json");
  if (null == j3)
    throw new s2("ogc-feature-layer:missing-items-page", "Missing items url");
  const { geometry: F2, num: I3, start: T3, timeExtent: k2, where: x2 } = a;
  if (a.objectIds)
    throw new s2("ogc-feature-layer:query-by-objectids-not-supported", "Queries with objectids are not supported");
  const S2 = f.fromJSON(w2), v2 = a.outSpatialReference ?? S2, q2 = v2.isWGS84 ? null : N(v2, b2), M2 = C(F2, b2), G = O(k2), W = R(x2), D = I3 ?? (null != T3 && void 0 !== T3 ? 10 : p2), { data: P } = await j(j3.href, { ...c, query: { ...y2, ...M2, crs: q2, datetime: G, query: W, limit: D, startindex: T3, token: f2 }, headers: { accept: "application/geo+json" } });
  let Z = false;
  if (P.links) {
    const e2 = P.links.find((e3) => "next" === e3.rel);
    Z = !!e2;
  }
  !Z && Number.isInteger(P.numberMatched) && Number.isInteger(P.numberReturned) && (Z = P.numberReturned < P.numberMatched);
  const { fields: K, geometryType: L2, hasZ: J, objectIdField: z } = m, A = I(P, { geometryType: L2, hasZ: J, objectIdField: z });
  if (!q2 && v2.isWebMercator) {
    for (const e2 of A)
      if (null != e2.geometry && null != L2) {
        const t = st(e2.geometry, L2, J, false);
        t.spatialReference = f.WGS84, e2.geometry = rt(g(t, v2));
      }
  }
  for (const e2 of A)
    e2.objectId = e2.attributes[z];
  const E = q2 || !q2 && v2.isWebMercator ? v2.toJSON() : p, U = new e();
  return U.exceededTransferLimit = Z, U.features = A, U.fields = K, U.geometryType = L2, U.hasZ = J, U.objectIdFieldName = z, U.spatialReference = E, U;
}
function v(e2) {
  return null != e2 && "extent" === e2.type;
}
function N(e2, t) {
  const { isWebMercator: n, wkid: i2 } = e2;
  if (!i2)
    return null;
  const r2 = n ? t[3857] ?? t[102100] ?? t[102113] ?? t[900913] : t[e2.wkid];
  return r2 ? `${w}${r2}` : null;
}
function q(e2) {
  if (null == e2)
    return "";
  const { xmin: t, ymin: n, xmax: i2, ymax: r2 } = e2;
  return `${t},${n},${i2},${r2}`;
}
function O(e2) {
  if (null == e2)
    return null;
  const { start: t, end: n } = e2;
  return `${null != t ? t.toISOString() : ".."}/${null != n ? n.toISOString() : ".."}`;
}
function R(e2) {
  return null != e2 && e2 && "1=1" !== e2 ? e2 : null;
}
function C(e2, t) {
  if (!v(e2))
    return null;
  const { spatialReference: n } = e2;
  if (!n || n.isWGS84)
    return { bbox: q(e2) };
  const i2 = N(n, t);
  return null != i2 ? { bbox: q(e2), "bbox-crs": i2 } : n.isWebMercator ? { bbox: q(g(e2, f.WGS84)) } : null;
}
function M(e2) {
  var _a;
  const t = (_a = e2.extent) == null ? void 0 : _a.spatial;
  if (!t)
    return null;
  const n = t.bbox[0], i2 = 4 === n.length, r2 = n[0], a = n[1], s3 = i2 ? void 0 : n[2];
  return { xmin: r2, ymin: a, xmax: i2 ? n[2] : n[3], ymax: i2 ? n[3] : n[4], zmin: s3, zmax: i2 ? void 0 : n[5], spatialReference: f.WGS84.toJSON() };
}
function $(e2, t, n) {
  return e2.find((e3) => e3.rel === t && e3.type === n) || e2.find((e3) => e3.rel === t && !e3.type);
}

export {
  w,
  b,
  h,
  j2 as j,
  F,
  I2 as I,
  T2 as T,
  k,
  x,
  S
};
//# sourceMappingURL=chunk-QLQDVQ2I.js.map
