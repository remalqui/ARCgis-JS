import {
  t
} from "./chunk-Y2ZDD3I4.js";
import {
  Rn,
  nn
} from "./chunk-SO6DBMQG.js";
import "./chunk-KTSEQWMB.js";
import "./chunk-QXGO5RRL.js";
import {
  _
} from "./chunk-UKJF25H6.js";
import "./chunk-KSQTM6XI.js";
import "./chunk-BVNZ3ETW.js";
import "./chunk-FJQ7HIY7.js";
import "./chunk-T4XWQYGC.js";
import {
  m2 as m,
  u
} from "./chunk-TCASQSKO.js";
import {
  E,
  F,
  c,
  i,
  o
} from "./chunk-5HAVROZG.js";
import "./chunk-MOPR7RFH.js";
import "./chunk-KW3ZNPTA.js";
import "./chunk-TJB4CGOM.js";
import "./chunk-LQVUN6IS.js";
import "./chunk-3GSONYPC.js";
import {
  H,
  g,
  x2 as x
} from "./chunk-SFV6XLDZ.js";
import "./chunk-3PLRSFLA.js";
import "./chunk-VBD33VNW.js";
import "./chunk-7A5C2EQ3.js";
import "./chunk-OYBXMT5R.js";
import "./chunk-CIDWM2UN.js";
import "./chunk-PD5Q7TDW.js";
import "./chunk-SHJI4PR4.js";
import "./chunk-2YSHZRCT.js";
import "./chunk-HKVL2MJK.js";
import "./chunk-MH2LNFJK.js";
import "./chunk-O3CHVGVF.js";
import {
  f,
  j,
  p
} from "./chunk-HNHXEGH2.js";
import {
  r
} from "./chunk-DWOEYHKS.js";
import {
  s2 as s,
  s3 as s2
} from "./chunk-W2N7YT6I.js";
import "./chunk-I5JT24BO.js";
import "./chunk-I4U7MQNO.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/layers/support/ElevationSampler.js
var r2 = s.getLogger("esri.layers.support.ElevationSampler");
var l = class {
  queryElevation(e) {
    return u2(e.clone(), this);
  }
  on() {
    return d;
  }
  projectIfRequired(e, t4) {
    return p2(e, t4);
  }
};
var m2 = class extends l {
  get spatialReference() {
    return this.extent.spatialReference;
  }
  constructor(e, s3, i2) {
    super(), this.tile = e, this.noDataValue = i2;
    const o2 = e.tile.extent;
    this.extent = c(o2, s3.spatialReference), this.extent.zmin = e.zmin, this.extent.zmax = e.zmax, this._aaExtent = o2;
    const a = H(s3.spatialReference), r3 = s3.lodAt(e.tile.level).resolution * a;
    this.demResolution = { min: r3, max: r3 };
  }
  contains(e) {
    const t4 = this.projectIfRequired(e, this.spatialReference);
    return null != t4 && this.containsAt(t4.x, t4.y);
  }
  containsAt(e, t4) {
    return F(this._aaExtent, e, t4);
  }
  elevationAt(e, t4) {
    if (!this.containsAt(e, t4)) {
      const n = this.extent, s3 = `${n.xmin}, ${n.ymin}, ${n.xmax}, ${n.ymax}`;
      return r2.warn("#elevationAt()", `Point used to sample elevation (${e}, ${t4}) is outside of the sampler extent (${s3})`), this.noDataValue;
    }
    return this.tile.sample(e, t4) ?? this.noDataValue;
  }
};
var c2 = class extends l {
  get spatialReference() {
    return this.extent.spatialReference;
  }
  constructor(e, t4, s3) {
    let o2;
    super(), "number" == typeof t4 ? (this.noDataValue = t4, o2 = null) : (o2 = t4, this.noDataValue = s3), this.samplers = o2 ? e.map((e2) => new m2(e2, o2, this.noDataValue)) : e;
    const a = this.samplers[0];
    if (a) {
      this.extent = a.extent.clone();
      const { min: e2, max: t5 } = a.demResolution;
      this.demResolution = { min: e2, max: t5 };
      for (let n = 1; n < this.samplers.length; n++) {
        const e3 = this.samplers[n];
        this.extent.union(e3.extent), this.demResolution.min = Math.min(this.demResolution.min, e3.demResolution.min), this.demResolution.max = Math.max(this.demResolution.max, e3.demResolution.max);
      }
    } else
      this.extent = c(i(), o2.spatialReference), this.demResolution = { min: 0, max: 0 };
  }
  elevationAt(e, t4) {
    for (const n of this.samplers)
      if (n.containsAt(e, t4))
        return n.elevationAt(e, t4);
    return r2.warn("#elevationAt()", `Point used to sample elevation (${e}, ${t4}) is outside of the sampler`), this.noDataValue;
  }
};
function u2(e, t4) {
  const n = p2(e, t4.spatialReference);
  if (!n)
    return null;
  switch (e.type) {
    case "point":
      h(e, n, t4);
      break;
    case "polyline":
      f2(e, n, t4);
      break;
    case "multipoint":
      x2(e, n, t4);
  }
  return e;
}
function p2(e, t4) {
  if (null == e)
    return null;
  const n = e.spatialReference;
  if (n.equals(t4))
    return e;
  const s3 = g(e, t4);
  return s3 || r2.error(`Cannot project geometry spatial reference (wkid:${n.wkid}) to elevation sampler spatial reference (wkid:${t4.wkid})`), s3;
}
function h(e, t4, n) {
  e.z = n.elevationAt(t4.x, t4.y);
}
function f2(e, t4, n) {
  R.spatialReference = t4.spatialReference;
  const s3 = e.hasM && !e.hasZ;
  for (let i2 = 0; i2 < e.paths.length; i2++) {
    const o2 = e.paths[i2], a = t4.paths[i2];
    for (let e2 = 0; e2 < o2.length; e2++) {
      const t5 = o2[e2], i3 = a[e2];
      R.x = i3[0], R.y = i3[1], s3 && (t5[3] = t5[2]), t5[2] = n.elevationAt(R.x, R.y);
    }
  }
  e.hasZ = true;
}
function x2(e, t4, n) {
  R.spatialReference = t4.spatialReference;
  const s3 = e.hasM && !e.hasZ;
  for (let i2 = 0; i2 < e.points.length; i2++) {
    const o2 = e.points[i2], a = t4.points[i2];
    R.x = a[0], R.y = a[1], s3 && (o2[3] = o2[2]), o2[2] = n.elevationAt(R.x, R.y);
  }
  e.hasZ = true;
}
var R = new x();
var d = { remove() {
} };

// node_modules/@arcgis/core/layers/support/ElevationSamplerData.js
var t2 = class {
  constructor(t4, h2) {
    this.data = t4, this.safeWidth = 0.99999999 * (t4.width - 1), this.dx = (t4.width - 1) / (h2[2] - h2[0]), this.dy = (t4.width - 1) / (h2[3] - h2[1]), this.x0 = h2[0], this.y1 = h2[3];
  }
};

// node_modules/@arcgis/core/layers/support/ElevationTile.js
var t3 = class {
  constructor(t4, l3 = null) {
    if (this.tile = t4, null != l3 && null != t4) {
      const e = t4.extent;
      this._samplerData = new t2(l3, e);
    }
  }
  get zmin() {
    return null != this._samplerData ? this._samplerData.data.minValue : 0;
  }
  get zmax() {
    return null != this._samplerData ? this._samplerData.data.maxValue : 0;
  }
  sample(a, t4) {
    if (null == this._samplerData)
      return;
    const { safeWidth: e, data: r3, dx: s3, dy: n, y1: i2, x0: u3 } = this._samplerData, { width: m3, values: o2, noDataValue: h2 } = r3, p3 = l2(n * (i2 - t4), 0, e), D = l2(s3 * (a - u3), 0, e), f3 = Math.floor(p3), c3 = Math.floor(D), d2 = f3 * m3 + c3, _3 = d2 + m3, x4 = o2[d2], V = o2[_3], g3 = o2[d2 + 1], v2 = o2[_3 + 1];
    if (x4 !== h2 && V !== h2 && g3 !== h2 && v2 !== h2) {
      const a2 = D - c3, t5 = x4 + (g3 - x4) * a2;
      return t5 + (V + (v2 - V) * a2 - t5) * (p3 - f3);
    }
  }
};
function l2(a, t4, l3) {
  return a < t4 ? t4 : a > l3 ? l3 : a;
}

// node_modules/@arcgis/core/layers/support/ElevationQuery.js
var v = class {
  async queryAll(e, i2, n) {
    if (!(e = n && n.ignoreInvisibleLayers ? e.filter((e2) => e2.visible) : e.slice()).length)
      throw new s2("elevation-query:invalid-layer", "Elevation queries require at least one elevation layer to fetch tiles from");
    const l3 = w.fromGeometry(i2);
    let s3 = false;
    n && n.returnSampleInfo || (s3 = true);
    const o2 = { ...q, ...n, returnSampleInfo: true }, a = await this.query(e[e.length - 1], l3, o2), r3 = await this._queryAllContinue(e, a, o2);
    return r3.geometry = r3.geometry.export(), s3 && delete r3.sampleInfo, r3;
  }
  async query(e, i2, n) {
    if (!e)
      throw new s2("elevation-query:invalid-layer", "Elevation queries require an elevation layer to fetch tiles from");
    if (!i2 || !(i2 instanceof w) && "point" !== i2.type && "multipoint" !== i2.type && "polyline" !== i2.type)
      throw new s2("elevation-query:invalid-geometry", "Only point, polyline and multipoint geometries can be used to query elevation");
    const l3 = { ...q, ...n }, s3 = new _2(e, i2.spatialReference, l3), o2 = l3.signal;
    return await e.load({ signal: o2 }), await this._createGeometryDescriptor(s3, i2, o2), await this._selectTiles(s3, o2), await this._populateElevationTiles(s3, o2), this._sampleGeometryWithElevation(s3), this._createQueryResult(s3, o2);
  }
  async createSampler(e, i2, n) {
    if (!e)
      throw new s2("elevation-query:invalid-layer", "Elevation queries require an elevation layer to fetch tiles from");
    if (!i2 || "extent" !== i2.type)
      throw new s2("elevation-query:invalid-extent", "Invalid or undefined extent");
    const l3 = { ...q, ...n };
    return this._createSampler(e, i2, l3);
  }
  async createSamplerAll(e, i2, n) {
    if (!(e = n && n.ignoreInvisibleLayers ? e.filter((e2) => e2.visible) : e.slice()).length)
      throw new s2("elevation-query:invalid-layer", "Elevation queries require at least one elevation layer to fetch tiles from");
    if (!i2 || "extent" !== i2.type)
      throw new s2("elevation-query:invalid-extent", "Invalid or undefined extent");
    const l3 = { ...q, ...n, returnSampleInfo: true }, s3 = await this._createSampler(e[e.length - 1], i2, l3);
    return this._createSamplerAllContinue(e, i2, s3, l3);
  }
  async _createSampler(e, t4, i2, n) {
    const l3 = i2.signal;
    await e.load({ signal: l3 });
    const s3 = t4.spatialReference, o2 = e.tileInfo.spatialReference;
    s3.equals(o2) || (await Rn([{ source: s3, dest: o2 }], { signal: l3 }), t4 = nn(t4, o2));
    const a = new E2(e, t4, i2, n);
    return await this._selectTiles(a, l3), await this._populateElevationTiles(a, l3), new c2(a.elevationTiles, a.layer.tileInfo, a.options.noDataValue);
  }
  async _createSamplerAllContinue(e, t4, i2, n) {
    if (e.pop(), !e.length)
      return i2;
    const l3 = i2.samplers.map((e2) => o(e2.extent)), s3 = await this._createSampler(e[e.length - 1], t4, n, l3);
    if (0 === s3.samplers.length)
      return i2;
    const o2 = i2.samplers.concat(s3.samplers), a = new c2(o2, n.noDataValue);
    return this._createSamplerAllContinue(e, t4, a, n);
  }
  async _queryAllContinue(e, t4, n) {
    const l3 = e.pop(), s3 = t4.geometry.coordinates, o2 = t4.sampleInfo;
    r(o2);
    const a = [], r3 = [];
    for (let i2 = 0; i2 < s3.length; i2++) {
      const t5 = o2[i2];
      t5.demResolution >= 0 ? t5.source || (t5.source = l3) : e.length && (a.push(s3[i2]), r3.push(i2));
    }
    if (!e.length || 0 === a.length)
      return t4;
    const c3 = t4.geometry.clone(a), u3 = await this.query(e[e.length - 1], c3, n), h2 = u3.sampleInfo;
    if (!h2)
      throw new Error("no sampleInfo");
    return r3.forEach((e2, t5) => {
      s3[e2].z = u3.geometry.coordinates[t5].z, o2[e2].demResolution = h2[t5].demResolution;
    }), this._queryAllContinue(e, t4, n);
  }
  async _createQueryResult(e, t4) {
    const n = await e.geometry.project(e.outSpatialReference, t4);
    r(n);
    const l3 = { geometry: n.export(), noDataValue: e.options.noDataValue };
    return e.options.returnSampleInfo && (l3.sampleInfo = this._extractSampleInfo(e)), e.geometry.coordinates.forEach((e2) => {
      e2.tile = null, e2.elevationTile = null;
    }), l3;
  }
  async _createGeometryDescriptor(e, i2, n) {
    let l3;
    const s3 = e.layer.tileInfo.spatialReference;
    if (i2 instanceof w ? l3 = await i2.project(s3, n) : (await Rn([{ source: i2.spatialReference, dest: s3 }], { signal: n }), l3 = nn(i2, s3)), !l3)
      throw new s2("elevation-query:spatial-reference-mismatch", `Cannot query elevation in '${i2.spatialReference.wkid}' on an elevation service in '${s3.wkid}'`);
    e.geometry = w.fromGeometry(l3);
  }
  async _selectTiles(e, i2) {
    "geometry" === e.type && this._preselectOutsideLayerExtent(e);
    const n = e.options.demResolution;
    if ("number" == typeof n)
      this._selectTilesClosestResolution(e, n);
    else if ("finest-contiguous" === n)
      await this._selectTilesFinestContiguous(e, i2);
    else {
      if ("auto" !== n)
        throw new s2("elevation-query:invalid-dem-resolution", `Invalid dem resolution value '${n}', expected a number, "finest-contiguous" or "auto"`);
      await this._selectTilesAuto(e, i2);
    }
  }
  _preselectOutsideLayerExtent(e) {
    if (null == e.layer.fullExtent)
      return;
    const t4 = new t3(null);
    t4.sample = () => e.options.noDataValue, e.outsideExtentTile = t4;
    const i2 = e.layer.fullExtent;
    e.geometry.coordinates.forEach((e2) => {
      const n = e2.x, l3 = e2.y;
      (n < i2.xmin || n > i2.xmax || l3 < i2.ymin || l3 > i2.ymax) && (e2.elevationTile = t4);
    });
  }
  _selectTilesClosestResolution(e, t4) {
    const i2 = this._findNearestDemResolutionLODIndex(e, t4);
    e.selectTilesAtLOD(i2);
  }
  _findNearestDemResolutionLODIndex(e, t4) {
    const { tileInfo: i2, tilemapCache: n } = e.layer, l3 = t4 / H(i2.spatialReference), s3 = I(i2, n);
    let a = s3[0], r3 = 0;
    for (let o2 = 1; o2 < s3.length; o2++) {
      const e2 = s3[o2];
      Math.abs(e2.resolution - l3) < Math.abs(a.resolution - l3) && (a = e2, r3 = o2);
    }
    return r3;
  }
  async _selectTilesFinestContiguous(e, t4) {
    const { tileInfo: i2, tilemapCache: n } = e.layer, l3 = R2(i2, n, e.options.minDemResolution);
    await this._selectTilesFinestContiguousAt(e, l3, t4);
  }
  async _selectTilesFinestContiguousAt(e, i2, s3) {
    const o2 = e.layer;
    if (e.selectTilesAtLOD(i2), i2 < 0)
      return;
    const a = o2.tilemapCache, r3 = e.getTilesToFetch();
    try {
      if (a && !A(a))
        await p(Promise.all(r3.map((e2) => a.fetchAvailability(e2.level, e2.row, e2.col, { signal: s3 }))), s3);
      else if (await this._populateElevationTiles(e, s3), !e.allElevationTilesFetched())
        throw e.clearElevationTiles(), new s2("elevation-query:has-unavailable-tiles");
    } catch (c3) {
      f(c3), await this._selectTilesFinestContiguousAt(e, i2 - 1, s3);
    }
  }
  async _populateElevationTiles(e, t4) {
    const i2 = e.getTilesToFetch(), l3 = {}, o2 = e.options.cache, a = e.options.noDataValue, r3 = i2.map(async (i3) => {
      if (null == i3.id)
        return;
      const n = `${e.layer.uid}:${i3.id}:${a}`, s3 = null != o2 ? o2.get(n) : null, r4 = null != s3 ? s3 : await e.layer.fetchTile(i3.level, i3.row, i3.col, { noDataValue: a, signal: t4 });
      null != o2 && o2.put(n, r4), l3[i3.id] = new t3(i3, r4);
    });
    await p(j(r3), t4), e.populateElevationTiles(l3);
  }
  async _selectTilesAuto(t4, i2) {
    this._selectTilesAutoFinest(t4), this._reduceTilesForMaximumRequests(t4);
    const s3 = t4.layer.tilemapCache;
    if (!s3 || A(s3))
      return this._selectTilesAutoPrefetchUpsample(t4, i2);
    const o2 = t4.getTilesToFetch(), a = {}, r3 = o2.map(async (t5) => {
      const n = new t(null, 0, 0, 0, i()), o3 = await _(s3.fetchAvailabilityUpsample(t5.level, t5.row, t5.col, n, { signal: i2 }));
      false !== o3.ok ? null != t5.id && (a[t5.id] = n) : f(o3.error);
    });
    await p(Promise.all(r3), i2), t4.remapTiles(a);
  }
  _reduceTilesForMaximumRequests(e) {
    const t4 = e.layer.tileInfo;
    let i2 = 0;
    const n = {}, l3 = (e2) => {
      null != e2.id && (e2.id in n ? n[e2.id]++ : (n[e2.id] = 1, i2++));
    }, s3 = (e2) => {
      if (null == e2.id)
        return;
      const t5 = n[e2.id];
      1 === t5 ? (delete n[e2.id], i2--) : n[e2.id] = t5 - 1;
    };
    e.forEachTileToFetch(l3, s3);
    let o2 = true;
    for (; o2 && (o2 = false, e.forEachTileToFetch((n2) => {
      i2 <= e.options.maximumAutoTileRequests || (s3(n2), t4.upsampleTile(n2) && (o2 = true), l3(n2));
    }, s3), o2); )
      ;
  }
  _selectTilesAutoFinest(e) {
    const { tileInfo: t4, tilemapCache: i2 } = e.layer, n = R2(t4, i2, e.options.minDemResolution);
    e.selectTilesAtLOD(n, e.options.maximumAutoTileRequests);
  }
  async _selectTilesAutoPrefetchUpsample(e, t4) {
    const i2 = e.layer.tileInfo;
    await this._populateElevationTiles(e, t4);
    let n = false;
    e.forEachTileToFetch((e2, t5) => {
      i2.upsampleTile(e2) ? n = true : t5();
    }), n && await this._selectTilesAutoPrefetchUpsample(e, t4);
  }
  _sampleGeometryWithElevation(e) {
    e.geometry.coordinates.forEach((t4) => {
      const i2 = t4.elevationTile;
      let n = e.options.noDataValue;
      if (i2) {
        const e2 = i2.sample(t4.x, t4.y);
        null != e2 ? n = e2 : t4.elevationTile = null;
      }
      t4.z = n;
    });
  }
  _extractSampleInfo(e) {
    const t4 = e.layer.tileInfo, i2 = H(t4.spatialReference);
    return e.geometry.coordinates.map((n) => {
      let l3 = -1;
      if (n.elevationTile && n.elevationTile !== e.outsideExtentTile) {
        l3 = t4.lodAt(n.elevationTile.tile.level).resolution * i2;
      }
      return { demResolution: l3 };
    });
  }
};
var w = class _w {
  export() {
    return this._exporter(this.coordinates, this.spatialReference);
  }
  clone(e) {
    const t4 = new _w();
    return t4.geometry = this.geometry, t4.spatialReference = this.spatialReference, t4.coordinates = e || this.coordinates.map((e2) => e2.clone()), t4._exporter = this._exporter, t4;
  }
  async project(e, t4) {
    if (this.spatialReference.equals(e))
      return this.clone();
    await Rn([{ source: this.spatialReference, dest: e }], { signal: t4 });
    const i2 = new u({ spatialReference: this.spatialReference, points: this.coordinates.map((e2) => [e2.x, e2.y]) }), n = nn(i2, e);
    if (!n)
      return null;
    const l3 = this.coordinates.map((e2, t5) => {
      const i3 = e2.clone(), l4 = n.points[t5];
      return i3.x = l4[0], i3.y = l4[1], i3;
    }), s3 = this.clone(l3);
    return s3.spatialReference = e, s3;
  }
  static fromGeometry(e) {
    const t4 = new _w();
    if (t4.geometry = e, t4.spatialReference = e.spatialReference, e instanceof _w)
      t4.coordinates = e.coordinates.map((e2) => e2.clone()), t4._exporter = (t5, i2) => {
        const n = e.clone(t5);
        return n.spatialReference = i2, n;
      };
    else
      switch (e.type) {
        case "point": {
          const i2 = e, { hasZ: n, hasM: l3 } = i2;
          t4.coordinates = n && l3 ? [new g2(i2.x, i2.y, i2.z, i2.m)] : n ? [new g2(i2.x, i2.y, i2.z)] : l3 ? [new g2(i2.x, i2.y, null, i2.m)] : [new g2(i2.x, i2.y)], t4._exporter = (t5, i3) => e.hasM ? new x(t5[0].x, t5[0].y, t5[0].z, t5[0].m, i3) : new x(t5[0].x, t5[0].y, t5[0].z, i3);
          break;
        }
        case "multipoint": {
          const i2 = e, { hasZ: n, hasM: l3 } = i2;
          t4.coordinates = n && l3 ? i2.points.map((e2) => new g2(e2[0], e2[1], e2[2], e2[3])) : n ? i2.points.map((e2) => new g2(e2[0], e2[1], e2[2])) : l3 ? i2.points.map((e2) => new g2(e2[0], e2[1], null, e2[2])) : i2.points.map((e2) => new g2(e2[0], e2[1])), t4._exporter = (t5, i3) => e.hasM ? new u({ points: t5.map((e2) => [e2.x, e2.y, e2.z, e2.m]), hasZ: true, hasM: true, spatiaReference: i3 }) : new u(t5.map((e2) => [e2.x, e2.y, e2.z]), i3);
          break;
        }
        case "polyline": {
          const i2 = e, n = [], l3 = [], { hasZ: s3, hasM: o2 } = e;
          let a = 0;
          for (const e2 of i2.paths)
            if (l3.push([a, a + e2.length]), a += e2.length, s3 && o2)
              for (const t5 of e2)
                n.push(new g2(t5[0], t5[1], t5[2], t5[3]));
            else if (s3)
              for (const t5 of e2)
                n.push(new g2(t5[0], t5[1], t5[2]));
            else if (o2)
              for (const t5 of e2)
                n.push(new g2(t5[0], t5[1], null, t5[2]));
            else
              for (const t5 of e2)
                n.push(new g2(t5[0], t5[1]));
          t4.coordinates = n, t4._exporter = (t5, i3) => {
            const n2 = e.hasM ? t5.map((e2) => [e2.x, e2.y, e2.z, e2.m]) : t5.map((e2) => [e2.x, e2.y, e2.z]), s4 = l3.map((e2) => n2.slice(e2[0], e2[1]));
            return new m({ paths: s4, hasM: e.hasM, hasZ: true, spatialReference: i3 });
          };
          break;
        }
      }
    return t4;
  }
};
var g2 = class _g {
  constructor(e, t4, i2 = null, n = null, l3 = null, s3 = null) {
    this.x = e, this.y = t4, this.z = i2, this.m = n, this.tile = l3, this.elevationTile = s3;
  }
  clone() {
    return new _g(this.x, this.y, this.z, this.m);
  }
};
var x3 = class {
  constructor(e, t4) {
    this.layer = e, this.options = t4;
  }
};
var _2 = class extends x3 {
  constructor(e, t4, i2) {
    super(e, i2), this.outSpatialReference = t4, this.type = "geometry";
  }
  selectTilesAtLOD(e) {
    if (e < 0)
      this.geometry.coordinates.forEach((e2) => e2.tile = null);
    else {
      const { tileInfo: t4, tilemapCache: i2 } = this.layer, n = I(t4, i2)[e].level;
      this.geometry.coordinates.forEach((e2) => e2.tile = t4.tileAt(n, e2.x, e2.y));
    }
  }
  allElevationTilesFetched() {
    return !this.geometry.coordinates.some((e) => !e.elevationTile);
  }
  clearElevationTiles() {
    for (const e of this.geometry.coordinates)
      e.elevationTile !== this.outsideExtentTile && (e.elevationTile = null);
  }
  populateElevationTiles(e) {
    var _a;
    for (const t4 of this.geometry.coordinates)
      !t4.elevationTile && ((_a = t4.tile) == null ? void 0 : _a.id) && (t4.elevationTile = e[t4.tile.id]);
  }
  remapTiles(e) {
    var _a;
    for (const t4 of this.geometry.coordinates) {
      const i2 = (_a = t4.tile) == null ? void 0 : _a.id;
      t4.tile = i2 ? e[i2] : null;
    }
  }
  getTilesToFetch() {
    var _a;
    const e = {}, t4 = [];
    for (const i2 of this.geometry.coordinates) {
      const n = i2.tile;
      if (!n)
        continue;
      const l3 = (_a = i2.tile) == null ? void 0 : _a.id;
      i2.elevationTile || !l3 || e[l3] || (e[l3] = n, t4.push(n));
    }
    return t4;
  }
  forEachTileToFetch(e) {
    for (const t4 of this.geometry.coordinates)
      t4.tile && !t4.elevationTile && e(t4.tile, () => {
        t4.tile = null;
      });
  }
};
var E2 = class extends x3 {
  constructor(e, t4, i2, n) {
    super(e, i2), this.type = "extent", this.elevationTiles = [], this._candidateTiles = [], this._fetchedCandidates = /* @__PURE__ */ new Set(), this.extent = t4.intersection(e.fullExtent), this.maskExtents = n;
  }
  selectTilesAtLOD(e, t4) {
    const i2 = this._maximumLodForRequests(t4), n = Math.min(i2, e);
    n < 0 ? this._candidateTiles.length = 0 : this._selectCandidateTilesCoveringExtentAt(n);
  }
  _maximumLodForRequests(e) {
    const { tileInfo: t4, tilemapCache: i2 } = this.layer, n = I(t4, i2);
    if (!e)
      return n.length - 1;
    const l3 = this.extent;
    if (null == l3)
      return -1;
    for (let s3 = n.length - 1; s3 >= 0; s3--) {
      const i3 = n[s3], o2 = i3.resolution * t4.size[0], a = i3.resolution * t4.size[1];
      if (Math.ceil(l3.width / o2) * Math.ceil(l3.height / a) <= e)
        return s3;
    }
    return -1;
  }
  allElevationTilesFetched() {
    return this._candidateTiles.length === this.elevationTiles.length;
  }
  clearElevationTiles() {
    this.elevationTiles.length = 0, this._fetchedCandidates.clear();
  }
  populateElevationTiles(e) {
    for (const t4 of this._candidateTiles) {
      const i2 = t4.id && e[t4.id];
      i2 && (this._fetchedCandidates.add(t4), this.elevationTiles.push(i2));
    }
  }
  remapTiles(e) {
    this._candidateTiles = this._uniqueNonOverlappingTiles(this._candidateTiles.map((t4) => e[t4.id]));
  }
  getTilesToFetch() {
    return this._candidateTiles;
  }
  forEachTileToFetch(e, t4) {
    const i2 = this._candidateTiles;
    this._candidateTiles = [], i2.forEach((i3) => {
      if (this._fetchedCandidates.has(i3))
        return void (t4 && t4(i3));
      let n = false;
      e(i3, () => n = true), n ? t4 && t4(i3) : this._candidateTiles.push(i3);
    }), this._candidateTiles = this._uniqueNonOverlappingTiles(this._candidateTiles, t4);
  }
  _uniqueNonOverlappingTiles(e, t4) {
    const i2 = {}, n = [];
    for (const s3 of e) {
      const e2 = s3.id;
      e2 && !i2[e2] ? (i2[e2] = s3, n.push(s3)) : t4 && t4(s3);
    }
    const l3 = n.sort((e2, t5) => e2.level - t5.level);
    return l3.filter((e2, i3) => {
      for (let n2 = 0; n2 < i3; n2++) {
        const i4 = l3[n2].extent;
        if (i4 && e2.extent && E(i4, e2.extent))
          return t4 && t4(e2), false;
      }
      return true;
    });
  }
  _selectCandidateTilesCoveringExtentAt(e) {
    this._candidateTiles.length = 0;
    const t4 = this.extent;
    if (null == t4)
      return;
    const { tileInfo: i2, tilemapCache: n } = this.layer, l3 = I(i2, n)[e], s3 = i2.tileAt(l3.level, t4.xmin, t4.ymin), o2 = s3.extent;
    if (null == o2)
      return;
    const a = l3.resolution * i2.size[0], r3 = l3.resolution * i2.size[1], c3 = Math.ceil((t4.xmax - o2[0]) / a), u3 = Math.ceil((t4.ymax - o2[1]) / r3);
    for (let h2 = 0; h2 < u3; h2++)
      for (let e2 = 0; e2 < c3; e2++) {
        const t5 = new t(null, s3.level, s3.row - h2, s3.col + e2);
        i2.updateTileInfo(t5), this._tileIsMasked(t5) || this._candidateTiles.push(t5);
      }
  }
  _tileIsMasked(e) {
    return !!this.maskExtents && this.maskExtents.some((t4) => e.extent && E(t4, e.extent));
  }
};
function R2(e, t4, i2 = 0) {
  const n = I(e, t4);
  let l3 = n.length - 1;
  if (i2 > 0) {
    const t5 = i2 / H(e.spatialReference), s3 = n.findIndex((e2) => e2.resolution < t5);
    0 === s3 ? l3 = 0 : s3 > 0 && (l3 = s3 - 1);
  }
  return l3;
}
var q = { maximumAutoTileRequests: 20, noDataValue: 0, returnSampleInfo: false, demResolution: "auto", minDemResolution: 0 };
function I(e, t4) {
  const i2 = e.lods;
  if (A(t4)) {
    const { effectiveMinLOD: e2, effectiveMaxLOD: n } = t4;
    return i2.filter((t5) => t5.level >= e2 && t5.level <= n);
  }
  return i2;
}
function A(e) {
  return null != (e == null ? void 0 : e.tileInfo);
}
export {
  v as ElevationQuery,
  w as GeometryDescriptor,
  R2 as getFinestLodIndex
};
//# sourceMappingURL=ElevationQuery-4MSKZEEA.js.map
