import {
  $,
  Cn,
  E,
  O,
  P,
  Y,
  a,
  nn,
  rn,
  s as s2
} from "./chunk-SO6DBMQG.js";
import {
  j
} from "./chunk-TCASQSKO.js";
import {
  M
} from "./chunk-3GSONYPC.js";
import {
  H,
  f,
  x2 as x
} from "./chunk-SFV6XLDZ.js";
import {
  s3 as s
} from "./chunk-W2N7YT6I.js";
import {
  R
} from "./chunk-I4U7MQNO.js";

// node_modules/@arcgis/core/layers/support/rasterFunctions/rasterProjectionHelper.js
var y;
function d(e, t, n) {
  return !Cn(e, t, n);
}
function M2(e, n, i) {
  const o = d(e, n, i);
  if (o && !Y())
    throw new s("rasterprojectionhelper-project", "projection engine is not loaded");
  return o;
}
!function(e) {
  e[e.None = 0] = "None", e[e.North = 1] = "North", e[e.South = 2] = "South", e[e.Both = 3] = "Both";
}(y || (y = {}));
var w = (e, t, n, i = 0) => {
  if (1 === n[0])
    return [0, 0];
  let o = 1, r = -1, s3 = 1, a2 = -1;
  for (let g = 0; g < e.length; g += 2)
    isNaN(e[g]) || (o = o > e[g] ? e[g] : o, r = r > e[g] ? r : e[g], s3 = s3 > e[g + 1] ? e[g + 1] : s3, a2 = a2 > e[g + 1] ? a2 : e[g + 1]);
  const { cols: l, rows: c } = t, f2 = (r - o) / l / n[0], u = (a2 - s3) / c / n[1], m = 2 * i;
  let x2 = 0, h = false, p = [0, 0];
  for (let g = 0; g < l - 3; g++) {
    for (let t2 = 0; t2 < c - 3; t2++) {
      const n2 = g * c * 2 + 2 * t2, i2 = (e[n2] + e[n2 + 4] + e[n2 + 4 * c] + e[n2 + 4 * c + 4]) / 4, o2 = (e[n2 + 1] + e[n2 + 5] + e[n2 + 4 * c + 1] + e[n2 + 4 * c + 5]) / 4, r2 = Math.abs((i2 - e[n2 + 2 * c + 2]) / f2), s4 = Math.abs((o2 - e[n2 + 2 * c + 3]) / u);
      if (r2 + s4 > x2 && (x2 = r2 + s4, p = [r2, s4]), m && x2 > m) {
        h = true;
        break;
      }
    }
    if (h)
      break;
  }
  return p;
};
var R2 = { 3395: 20037508342789244e-9, 3410: 17334193943686873e-9, 3857: 20037508342788905e-9, 3975: 17367530445161372e-9, 4087: 20037508342789244e-9, 4088: 20015108787169147e-9, 6933: 17367530445161372e-9, 32662: 20037508342789244e-9, 53001: 2001508679602057e-8, 53002: 1000754339801029e-8, 53003: 2001508679602057e-8, 53004: 2001508679602057e-8, 53016: 14152803599503474e-9, 53017: 17333573624304302e-9, 53034: 2001508679602057e-8, 53079: 20015114352186374e-9, 53080: 20015114352186374e-9, 54001: 20037508342789244e-9, 54002: 10018754171394624e-9, 54003: 20037508342789244e-9, 54004: 20037508342789244e-9, 54016: 14168658027268292e-9, 54017: 1736753044516137e-8, 54034: 20037508342789244e-9, 54079: 20037508342789244e-9, 54080: 20037508342789244e-9, 54100: 20037508342789244e-9, 54101: 20037508342789244e-9 };
var S = 32;
var P2 = 4;
var b = P2;
var G = /* @__PURE__ */ new Map();
var N = /* @__PURE__ */ new Map();
var E2 = 500;
async function k() {
  Y() || await $();
}
function T(e, t, n) {
  M2(e.spatialReference, t);
  return n ? rn(t, e.spatialReference, e) : rn(e.spatialReference, t, e);
}
function C(e, t, i, o = null) {
  const r = e.spatialReference;
  if (r.equals(t))
    return e;
  M2(r, t, o);
  const s3 = i.center, a2 = new M({ xmin: s3.x - e.x / 2, xmax: s3.x + e.x / 2, ymin: s3.y - e.y / 2, ymax: s3.y + e.y / 2, spatialReference: r }), l = nn(a2, t, o), c = K(t);
  let f2;
  if (null == l || null != c && l.width >= c) {
    const i2 = H(r) / H(t);
    f2 = { x: e.x * i2, y: e.y * i2 };
  } else
    f2 = { x: l.width, y: l.height };
  return f2;
}
function v(e, t = 0.01) {
  return H(e) ? t / H(e) : 0;
}
function _(e, t, n = null, i = true) {
  const o = e.spatialReference;
  if (o.equals(t))
    return e;
  M2(o, t, n);
  const r = nn(e, t, n);
  return i && r ? (j2([e], [r], o, t), r) : r;
}
function j2(e, t, n, i) {
  const o = D(n, true), r = D(i, true), s3 = v(n, E2), a2 = v(i, E2);
  if (s3 && null != o && null != r)
    for (let l = 0; l < e.length; l++) {
      const n2 = t[l];
      if (!n2)
        continue;
      const { x: i2 } = e[l], { x: c } = n2;
      c >= r[1] - a2 && Math.abs(i2 - o[0]) < s3 ? n2.x -= r[1] - r[0] : c <= r[0] + a2 && Math.abs(i2 - o[1]) < s3 && (n2.x += r[1] - r[0]);
    }
}
function z(e) {
  const { inSR: t, outSR: n, datumTransformation: i, preferPE: o } = e;
  if (t.equals(n)) {
    const { points: t2 } = B(e, null);
    return t2;
  }
  if (t.isWebMercator && n.isWGS84 || t.isWGS84 && n.isWebMercator)
    return O2(e);
  if (M2(t, n, i) && o) {
    if (t.isGeographic)
      return W(e);
    if (null != I(t))
      return W(e);
  }
  return L(e);
}
function L(e) {
  const { points: t } = B(e, null), { inSR: n, outSR: i, datumTransformation: o } = e, r = t.map((e2) => new x(e2[0], e2[1], n)), s3 = nn(r, i, o);
  return o && j2(r, s3, n, i), s3.map((e2) => e2 ? [e2.x, e2.y] : [NaN, NaN]);
}
function W(e) {
  const { inSR: t, outSR: n, datumTransformation: a2 } = e, l = I(t), { points: c, mask: f2 } = B(e, l);
  if (!t.isGeographic) {
    const e2 = t.wkid ? E.coordsys(t.wkid) : E.fromString(t.isGeographic ? s2.PE_TYPE_GEOGCS : s2.PE_TYPE_PROJCS, t.wkt);
    P.projToGeog(e2, c.length, c);
  }
  if (null != a2 && a2.steps.length) {
    let e2;
    const t2 = 179.9955;
    if (n.isGeographic && (e2 = c.map(([e3]) => e3 > t2 ? 1 : e3 < -t2 ? -1 : 0)), a2.steps.forEach((e3) => {
      const t3 = e3.wkid ? E.geogtran(e3.wkid) : E.fromString(s2.PE_TYPE_GEOGTRAN, e3.wkt);
      a.geogToGeog(t3, c.length, c, null, e3.isInverse ? s2.PE_TRANSFORM_2_TO_1 : s2.PE_TRANSFORM_1_TO_2);
    }), e2)
      for (let n2 = 0; n2 < c.length; n2++) {
        const i = e2[n2], o = c[n2][0], r = o > t2 ? 1 : o < -t2 ? -1 : 0;
        i && r && i !== r && (c[n2][0] = i > 0 ? o + 360 : o - 360);
      }
  }
  if (!n.isGeographic) {
    const e2 = I(n, true), t2 = null != e2 && e2.isEnvelope ? [e2.bbox[1], e2.bbox[3]] : [-90, 90];
    F(c, t2);
    const s3 = n.wkid ? E.coordsys(n.wkid) : E.fromString(n.isGeographic ? s2.PE_TYPE_GEOGCS : s2.PE_TYPE_PROJCS, n.wkt);
    P.geogToProj(s3, c.length, c);
  }
  let u = c;
  if (f2 && c.length !== f2.length) {
    u = [];
    for (let e2 = 0, t2 = 0; e2 < f2.length; e2++)
      f2[e2] ? u.push(c[t2++]) : u.push([NaN, NaN]);
  }
  return u;
}
function O2(e) {
  const { cols: t, rows: n, xres: i, yres: o, usePixelCenter: r, inSR: s3, outSR: a2 } = e;
  let { xmin: l, ymax: c } = e;
  r && (l += i / 2, c -= o / 2);
  const f2 = [], u = [], x2 = Math.max(t, n);
  for (let g = 0; g < x2; g++) {
    const e2 = l + i * Math.min(t, g), r2 = c - o * Math.min(n, g), x3 = nn(new x({ x: e2, y: r2, spatialReference: s3 }), a2);
    g <= t && f2.push(x3.x), g <= n && u.push(x3.y);
  }
  const p = [];
  for (let m = 0; m < t; m++)
    for (let e2 = 0; e2 < n; e2++)
      p.push([f2[m], u[e2]]);
  return p;
}
function I(e, t = false) {
  let n = e.wkid || e.wkt;
  if (!n || e.isGeographic)
    return null;
  if (n = String(n), G.has(n)) {
    const e2 = G.get(n);
    return t ? e2 == null ? void 0 : e2.gcs : e2 == null ? void 0 : e2.pcs;
  }
  const r = e.wkid ? E.coordsys(e.wkid) : E.fromString(e.isGeographic ? s2.PE_TYPE_GEOGCS : s2.PE_TYPE_PROJCS, e.wkt), s3 = A(r, v(e, 1e-4)), a2 = A(r, 0, true);
  return G.set(n, { pcs: s3, gcs: a2 }), t ? a2 : s3;
}
function A(e, t = 0, n = false) {
  const i = O.generate(e), o = n ? e.horizonGcsGenerate() : e.horizonPcsGenerate();
  if (!i || !(o == null ? void 0 : o.length))
    return null;
  let r = false, s3 = o.find((e2) => 1 === e2.getInclusive() && 1 === e2.getKind());
  if (!s3) {
    if (s3 = o.find((e2) => 1 === e2.getInclusive() && 0 === e2.getKind()), !s3)
      return null;
    r = true;
  }
  const l = n ? 0 : (2 === i.getNorthPoleLocation() ? 1 : 0) | (2 === i.getSouthPoleLocation() ? 2 : 0), c = i.isPannableRectangle(), f2 = s3.getCoord();
  if (r)
    return { isEnvelope: r, isPannable: c, vertices: f2, coef: null, bbox: [f2[0][0] - t, f2[0][1] - t, f2[1][0] + t, f2[1][1] + t], poleLocation: l };
  let u = 0;
  const m = [];
  let [x2, h] = f2[0], [p, g] = f2[0];
  for (let a2 = 0, y2 = f2.length; a2 < y2; a2++) {
    u++, u === y2 && (u = 0);
    const [e2, t2] = f2[a2], [n2, i2] = f2[u];
    if (i2 === t2)
      m.push([e2, n2, t2, i2, 2]);
    else {
      const o2 = (n2 - e2) / (i2 - t2 || 1e-4), r2 = e2 - o2 * t2;
      t2 < i2 ? m.push([o2, r2, t2, i2, 0]) : m.push([o2, r2, i2, t2, 1]);
    }
    x2 = x2 < e2 ? x2 : e2, h = h < t2 ? h : t2, p = p > e2 ? p : e2, g = g > t2 ? g : t2;
  }
  return { isEnvelope: false, isPannable: c, vertices: f2, coef: m, bbox: [x2, h, p, g], poleLocation: l };
}
function B(e, t) {
  const n = [], { cols: i, rows: o, xres: r, yres: s3, usePixelCenter: a2 } = e;
  let { xmin: l, ymax: c } = e;
  if (a2 && (l += r / 2, c -= s3 / 2), null == t) {
    for (let e2 = 0; e2 < i; e2++)
      for (let t2 = 0; t2 < o; t2++)
        n.push([l + r * e2, c - s3 * t2]);
    return { points: n };
  }
  const f2 = new Uint8Array(i * o);
  if (t.isEnvelope) {
    const { bbox: [e2, a3, u2, m2] } = t;
    for (let x2 = 0, h = 0; x2 < i; x2++) {
      const i2 = l + r * x2, p = t.isPannable || i2 >= e2 && i2 <= u2;
      for (let e3 = 0; e3 < o; e3++, h++) {
        const t2 = c - s3 * e3;
        p && t2 >= a3 && t2 <= m2 && (n.push([i2, t2]), f2[h] = 1);
      }
    }
    return { points: n, mask: f2 };
  }
  const u = t.coef, m = [];
  for (let x2 = 0; x2 < o; x2++) {
    const e2 = c - s3 * x2, t2 = [], n2 = [];
    for (let o2 = 0; o2 < u.length; o2++) {
      const [i3, r2, s4, a3, l2] = u[o2];
      if (e2 === s4 && s4 === a3)
        t2.push(i3), t2.push(r2), n2.push(2), n2.push(2);
      else if (e2 >= s4 && e2 <= a3) {
        const o3 = i3 * e2 + r2;
        t2.push(o3), n2.push(l2);
      }
    }
    let i2 = t2;
    if (t2.length > 2) {
      let e3 = 2 === n2[0] ? 0 : n2[0], o2 = t2[0];
      i2 = [];
      for (let r2 = 1; r2 < n2.length; r2++)
        2 === n2[r2] && r2 !== n2.length - 1 || (n2[r2] !== e3 && (i2.push(0 === e3 ? Math.min(o2, t2[r2 - 1]) : Math.max(o2, t2[r2 - 1])), e3 = n2[r2], o2 = t2[r2]), r2 === n2.length - 1 && i2.push(0 === n2[r2] ? Math.min(o2, t2[r2]) : Math.max(o2, t2[r2])));
      i2.sort((e4, t3) => e4 - t3);
    } else
      t2[0] > t2[1] && (i2 = [t2[1], t2[0]]);
    m.push(i2);
  }
  for (let x2 = 0, h = 0; x2 < i; x2++) {
    const e2 = l + r * x2;
    for (let t2 = 0; t2 < o; t2++, h++) {
      const i2 = c - s3 * t2, o2 = m[t2];
      if (2 === o2.length)
        e2 >= o2[0] && e2 <= o2[1] && (n.push([e2, i2]), f2[h] = 1);
      else if (o2.length > 2) {
        let t3 = false;
        for (let n2 = 0; n2 < o2.length; n2 += 2)
          if (e2 >= o2[n2] && e2 <= o2[n2 + 1]) {
            t3 = true;
            break;
          }
        t3 && (n.push([e2, i2]), f2[h] = 1);
      }
    }
  }
  return { points: n, mask: f2 };
}
function F(e, t) {
  const [n, i] = t;
  for (let o = 0; o < e.length; o++) {
    const t2 = e[o][1];
    (t2 < n || t2 > i) && (e[o] = [NaN, NaN]);
  }
}
function Y2(e) {
  const t = K(e[0].spatialReference);
  if (e.length < 2 || null == t)
    return e[0];
  const n = v(e[0].spatialReference);
  if (1 === (e = e.filter((e2) => e2.width > n)).length)
    return e[0];
  let { xmin: i, xmax: o, ymin: r, ymax: s3 } = e[0];
  for (let a2 = 1; a2 < e.length; a2++) {
    const n2 = e[a2];
    o = n2.xmax + t * a2, r = Math.min(r, n2.ymin), s3 = Math.max(s3, n2.ymax);
  }
  return new M({ xmin: i, xmax: o, ymin: r, ymax: s3, spatialReference: e[0].spatialReference });
}
function q(t, n, i = null, o = true) {
  const r = t.spatialReference;
  if (r.equals(n))
    return t;
  const s3 = Q(t), a2 = K(r, true), l = K(n);
  if (0 === s3 || null == a2 || null == l) {
    const e = X(t, n, i, o);
    if (null == a2 && null != l && Math.abs(e.width - l) < v(n) && Y()) {
      const i2 = I(r);
      if (null != i2 && i2.poleLocation === y.None && t.width < (i2.bbox[2] - i2.bbox[0]) / 2)
        return U(t, n) || e;
    }
    return e;
  }
  const f2 = t.clone().normalize();
  if (1 === f2.length && t.xmax < a2 && t.xmax - a2 / 2 > v(r)) {
    const { xmin: e, xmax: n2 } = t;
    for (let i2 = 0; i2 <= s3; i2++) {
      const o2 = 0 === i2 ? e : -a2 / 2, l2 = i2 === s3 ? n2 - a2 * i2 : a2 / 2;
      f2[i2] = new M({ xmin: o2, xmax: l2, ymin: t.ymin, ymax: t.ymax, spatialReference: r });
    }
  }
  return Y2(f2.map((e) => X(e, n, i, o)).filter(R));
}
function J(e, t, n) {
  if ("extent" === e.type) {
    const { xmin: t2, ymin: n2, xmax: i, ymax: o, spatialReference: r } = e;
    e = new j({ rings: [[[t2, o], [i, o], [i, n2], [t2, n2], [t2, o]]], spatialReference: r });
  }
  return e.spatialReference.equals(t) ? e : (M2(e.spatialReference, t, n), nn(e, t, n));
}
function U(e, t) {
  const n = K(t);
  if (null == n)
    return null;
  let { xmin: i, ymin: o, xmax: r, ymax: s3 } = e;
  const a2 = e.spatialReference, l = new j({ spatialReference: a2, rings: [[[i, o], [r, o], [r, s3], [i, s3], [i, o]]] }), c = nn(l, t);
  if (2 !== c.rings.length || !c.rings[0].length || !c.rings[1].length)
    return null;
  const { rings: f2 } = c, u = v(a2), h = new M({ spatialReference: t });
  for (let m = 0; m < 2; m++) {
    i = r = f2[m][0][0], o = s3 = f2[m][0][1];
    for (let e2 = 0; e2 < f2[m].length; e2++)
      i = i > f2[m][e2][0] ? f2[m][e2][0] : i, r = r < f2[m][e2][0] ? f2[m][e2][0] : r, o = o > f2[m][e2][1] ? f2[m][e2][1] : o, s3 = s3 < f2[m][e2][1] ? f2[m][e2][1] : s3;
    if (0 === m)
      h.ymin = o, h.ymax = s3, h.xmin = i, h.xmax = r;
    else if (h.ymin = Math.min(h.ymin, o), h.ymax = Math.max(h.ymax, s3), Math.abs(r - n / 2) < u)
      h.xmin = i, h.xmax = h.xmax + n;
    else {
      if (!(Math.abs(i + n / 2) < u))
        return null;
      h.xmax = r + n;
    }
  }
  return h;
}
function X(e, t, n = null, i = true, o = true) {
  const r = e.spatialReference;
  if (r.equals(t) || !t)
    return e;
  M2(r, t, n);
  const s3 = nn(e, t, n);
  if (o && t.isWebMercator && s3 && (s3.ymax = Math.min(20037508342787e-6, s3.ymax), s3.ymin = Math.max(-20037508342787e-6, s3.ymin), s3.ymin >= s3.ymax))
    return null;
  if (!i || !s3)
    return s3;
  const a2 = D(r, true), l = D(t, true);
  if (null == a2 || null == l)
    return s3;
  const c = v(r, 1e-3), f2 = v(r, E2), u = v(t, 1e-3);
  if (Math.abs(s3.xmin - l[0]) < u && Math.abs(s3.xmax - l[1]) < u) {
    const i2 = Math.abs(e.xmin - a2[0]), o2 = Math.abs(a2[1] - e.xmax);
    if (i2 < c && o2 > f2) {
      s3.xmin = l[0];
      const i3 = [];
      i3.push(new x(e.xmax, e.ymin, r)), i3.push(new x(e.xmax, (e.ymin + e.ymax) / 2, r)), i3.push(new x(e.xmax, e.ymax, r));
      const o3 = i3.map((e2) => _(e2, t, n)).filter((e2) => !isNaN(e2 == null ? void 0 : e2.x)).map((e2) => e2.x);
      s3.xmax = Math.max.apply(null, o3);
    }
    if (o2 < c && i2 > f2) {
      s3.xmax = l[1];
      const i3 = [];
      i3.push(new x(e.xmin, e.ymin, r)), i3.push(new x(e.xmin, (e.ymin + e.ymax) / 2, r)), i3.push(new x(e.xmin, e.ymax, r));
      const o3 = i3.map((e2) => _(e2, t, n)).filter((e2) => !isNaN(e2 == null ? void 0 : e2.x)).map((e2) => e2.x);
      s3.xmin = Math.min.apply(null, o3);
    }
  } else {
    const e2 = v(t, 1e-3);
    Math.abs(s3.xmin - l[0]) < e2 && (s3.xmin = l[0]), Math.abs(s3.xmax - l[1]) < e2 && (s3.xmax = l[1]);
  }
  return s3;
}
function K(e, t = false) {
  if (!e)
    return null;
  const n = t ? 20037508342787e-6 : 20037508342788905e-9;
  return e.isWebMercator ? 2 * n : e.wkid && e.isGeographic ? 360 : 2 * R2[e.wkid] || null;
}
function D(e, t = false) {
  if (e.isGeographic)
    return [-180, 180];
  const n = K(e, t);
  return null != n ? [-n / 2, n / 2] : null;
}
function H2(e, t, n, i) {
  let o = (e - t) / n;
  return o - Math.floor(o) != 0 ? o = Math.floor(o) : i && (o -= 1), o;
}
function Q(e, t = false) {
  const n = K(e.spatialReference);
  if (null == n)
    return 0;
  const i = t ? 0 : -(n / 2), o = v(e.spatialReference), r = !t && Math.abs(e.xmax - n / 2) < o ? n / 2 : e.xmax, s3 = !t && Math.abs(e.xmin + n / 2) < o ? -n / 2 : e.xmin;
  return H2(r, i, n, true) - H2(s3, i, n, false);
}
function V(e) {
  const t = e.storageInfo.origin.x, n = K(e.spatialReference, true);
  if (null == n)
    return { originX: t, halfWorldWidth: null, pyramidsInfo: null };
  const i = n / 2, { nativePixelSize: o, storageInfo: r, extent: s3 } = e, { maximumPyramidLevel: a2, blockWidth: l, pyramidScalingFactor: c } = r;
  let f2 = o.x;
  const u = [], m = null != e.transform && "gcs-shift" === e.transform.type, x2 = t + (m ? 0 : i), h = m ? n - t : i - t;
  for (let p = 0; p <= a2; p++) {
    const e2 = (s3.xmax - t) / f2 / l, n2 = e2 - Math.floor(e2) == 0 ? e2 : Math.ceil(e2), i2 = h / f2 / l, o2 = i2 - Math.floor(i2) == 0 ? i2 : Math.ceil(i2), r2 = Math.floor(x2 / f2 / l), a3 = Math.round(x2 / f2) % l, m2 = (l - Math.round(h / f2) % l) % l;
    u.push({ resolutionX: f2, blockWidth: l, datsetColumnCount: n2, worldColumnCountFromOrigin: o2, leftMargin: a3, rightPadding: m2, originColumnOffset: r2 }), f2 *= c;
  }
  return { originX: t, halfWorldWidth: i, pyramidsInfo: u, hasGCSSShiftTransform: m };
}
function Z(e) {
  if (!e || e.isGeographic)
    return e;
  const t = String(e.wkid || e.wkt);
  let n;
  if (N.has(t))
    n = N.get(t);
  else {
    n = (e.wkid ? E.coordsys(e.wkid) : E.fromString(s2.PE_TYPE_PROJCS, e.wkt)).getGeogcs().getCode(), N.set(t, n);
  }
  return new f({ wkid: n });
}
function $2(e) {
  const t = e.isAdaptive && null == e.spacing;
  let n = e.spacing || [S, S], i = ee(e), o = { cols: i.size[0] + 1, rows: i.size[1] + 1 };
  const r = i.outofBoundPointCount > 0 && i.outofBoundPointCount < i.offsets.length / 2;
  let s3 = i.outofBoundPointCount === i.offsets.length / 2 || t && r ? [0, 0] : w(i.offsets, o, n, b);
  const a2 = (s3[0] + s3[1]) / 2, l = e.projectedExtent.spatialReference, c = e.srcBufferExtent.spatialReference;
  if (t && (r || a2 > b)) {
    d(l, c, e.datumTransformation) && (l.isGeographic || I(l)), n = [P2, P2], i = ee({ ...e, spacing: n }), o = { cols: i.size[0] + 1, rows: i.size[1] + 1 }, s3 = w(i.offsets, o, n, b);
  }
  if (i.error = s3, n[0] > 1 && (i.coefficients = te(i.offsets, o, r)), e.includeGCSGrid && !l.isGeographic && !l.isWebMercator)
    if (c.isGeographic)
      i.gcsGrid = { offsets: i.offsets, coefficients: i.coefficients, spacing: n };
    else {
      const t2 = I(l);
      if (null != t2 && !t2.isEnvelope) {
        const t3 = Z(l), s4 = q(e.projectedExtent, t3), { offsets: a3 } = ee({ ...e, srcBufferExtent: s4, spacing: n }), c2 = te(a3, o, r);
        i.gcsGrid = { offsets: a3, coefficients: c2, spacing: n };
      }
    }
  return i;
}
function ee(e) {
  const { projectedExtent: t, srcBufferExtent: n, pixelSize: i, datumTransformation: o, rasterTransform: r } = e, s3 = t.spatialReference, a2 = n.spatialReference, l = M2(s3, a2), { xmin: c, ymin: f2, xmax: u, ymax: m } = t, x2 = K(a2), p = null != x2 && (e.hasWrapAround || "gcs-shift" === (r == null ? void 0 : r.type)), g = e.spacing || [S, S], y2 = g[0] * i.x, d2 = g[1] * i.y, w2 = 1 === g[0], R3 = Math.ceil((u - c) / y2 - 0.1 / g[0]) + (w2 ? 0 : 1), b2 = Math.ceil((m - f2) / d2 - 0.1 / g[1]) + (w2 ? 0 : 1), G2 = z({ cols: R3, rows: b2, xmin: c, ymax: m, xres: y2, yres: d2, inSR: s3, outSR: a2, datumTransformation: o, preferPE: g[0] <= P2, usePixelCenter: w2 }), N2 = [];
  let k2, T2 = 0;
  const C2 = w2 ? -1 : NaN, { xmin: _2, xmax: j3, ymax: L2, width: W2, height: O3 } = n, A2 = v(a2, E2), B2 = null != x2 && _2 > 0 && j3 > x2 / 2;
  let F2 = false;
  if (l) {
    const e2 = I(s3);
    F2 = null != e2 && e2.poleLocation > 0;
  }
  for (let M3 = 0; M3 < R3; M3++) {
    const e2 = [];
    for (let t2 = 0; t2 < b2; t2++) {
      let n2 = G2[M3 * b2 + t2];
      if (p && n2[0] > j3 && n2[0] > x2 / 2 - A2 ? n2[0] -= x2 : p && 0 === M3 && n2[0] < 0 && B2 && !r && (n2[0] += x2), !n2 || isNaN(n2[0]) || isNaN(n2[1]))
        N2.push(C2), N2.push(C2), e2.push(null), T2++;
      else {
        if (r) {
          const e3 = r.inverseTransform(new x({ x: n2[0], y: n2[1], spatialReference: a2 }));
          n2 = [e3.x, e3.y];
        }
        e2.push(n2), M3 > 0 && p && k2[t2] && n2[0] < k2[t2][0] && (n2[0] += x2, F2 && n2[0] > j3 && n2[0] > x2 && (n2[0] -= x2)), N2.push((n2[0] - _2) / W2), N2.push((L2 - n2[1]) / O3);
      }
    }
    k2 = e2;
  }
  return { offsets: N2, error: null, coefficients: null, outofBoundPointCount: T2, spacing: g, size: w2 ? [R3, b2] : [R3 - 1, b2 - 1] };
}
function te(e, t, n) {
  const { cols: i, rows: o } = t, r = new Float32Array((i - 1) * (o - 1) * 2 * 6), s3 = new Float32Array([-0, -1, 1, -1, 1, -0, 1, -0, -0]), a2 = new Float32Array([-1, 1, 0, 0, -1, 1, 1, 0, 0]);
  for (let l = 0; l < i - 1; l++) {
    for (let t2 = 0; t2 < o - 1; t2++) {
      let n2 = l * o * 2 + 2 * t2;
      const c = e[n2], f2 = e[n2 + 1], u = e[n2 + 2], m = e[n2 + 3];
      n2 += 2 * o;
      const x2 = e[n2], h = e[n2 + 1], p = e[n2 + 2], g = e[n2 + 3];
      let y2 = 0, d2 = 12 * (t2 * (i - 1) + l);
      for (let e2 = 0; e2 < 3; e2++)
        r[d2++] = s3[y2++] * c + s3[y2++] * u + s3[y2++] * p;
      y2 = 0;
      for (let e2 = 0; e2 < 3; e2++)
        r[d2++] = s3[y2++] * f2 + s3[y2++] * m + s3[y2++] * g;
      y2 = 0;
      for (let e2 = 0; e2 < 3; e2++)
        r[d2++] = a2[y2++] * c + a2[y2++] * x2 + a2[y2++] * p;
      y2 = 0;
      for (let e2 = 0; e2 < 3; e2++)
        r[d2++] = a2[y2++] * f2 + a2[y2++] * h + a2[y2++] * g;
    }
    if (n)
      for (let e2 = 0; e2 < r.length; e2++)
        isNaN(r[e2]) && (r[e2] = -1);
  }
  return r;
}
function ne(e) {
  const t = e.clone().normalize();
  return 1 === t.length ? t[0] : Y2(t);
}
function ie(e, t, i) {
  var _a;
  const { storageInfo: o, pixelSize: r } = t;
  let s3 = 0, a2 = false;
  const { pyramidResolutions: l } = o, c = "mixed" === ((_a = o.tileInfo.format) == null ? void 0 : _a.toLowerCase()) ? Math.max(1, Math.min(3, o.tileInfo.dpi / 96)) : 1, f2 = (e.x + e.y) / 2 / c;
  if (null != l && l.length) {
    const e2 = l[l.length - 1], o2 = (e2.x + e2.y) / 2, c2 = (r.x + r.y) / 2;
    if (f2 <= c2)
      s3 = 0;
    else if (f2 >= o2)
      s3 = l.length, a2 = f2 / o2 > 8;
    else {
      let e3, t2 = c2;
      for (let n = 1; n <= l.length; n++) {
        if (e3 = (l[n - 1].x + l[n - 1].y) / 2, f2 <= e3) {
          f2 === e3 ? s3 = n : "down" === i ? (s3 = n - 1, a2 = f2 / t2 > 8) : s3 = "up" === i || f2 - t2 > e3 - f2 || f2 / t2 > 2 ? n : n - 1;
          break;
        }
        t2 = e3;
      }
    }
    const u2 = 0 === s3 ? r : l[s3 - 1];
    if (a2) {
      Math.min(u2.x, u2.y) * H(t.spatialReference) > 19567 && (a2 = false);
    }
    return { pyramidLevel: s3, pyramidResolution: new x({ x: u2.x, y: u2.y, spatialReference: t.spatialReference }), excessiveReading: a2 };
  }
  const u = Math.log(e.x / r.x) / Math.LN2, m = Math.log(e.y / r.y) / Math.LN2, x2 = t.storageInfo.maximumPyramidLevel || 0;
  s3 = "down" === i ? Math.floor(Math.min(u, m)) : "up" === i ? Math.ceil(Math.max(u, m)) : Math.round((u + m) / 2), s3 < 0 ? s3 = 0 : s3 > x2 && (a2 = s3 > x2 + 3, s3 = x2);
  const p = 2 ** s3;
  return { pyramidLevel: s3, pyramidResolution: new x({ x: p * t.nativePixelSize.x, y: p * t.nativePixelSize.y, spatialReference: t.spatialReference }), excessiveReading: a2 };
}
function oe(e, t, i) {
  var _a;
  const o = (i == null ? void 0 : i.tileSize) ?? 512, r = (i == null ? void 0 : i.alignGlobalDatasetWithAGOL) ?? true, s3 = !!(i == null ? void 0 : i.limitToSrcResolution), { extent: a2, spatialReference: l, pixelSize: c } = e, f2 = C(new x({ x: c.x, y: c.y, spatialReference: l }), t, a2);
  if (null == f2)
    return { projectedPixelSize: null, scales: null, srcResolutions: null, isCustomTilingScheme: false };
  const u = (f2.x + f2.y) / 2, m = H(t), x2 = u * m * 96 * 39.37, p = t.isGeographic ? 256 / o * 2958287637958547e-7 : 256 / o * 591657527591555e-6;
  let g = "vector-magdir" === e.dataType || "vector-uv" === e.dataType;
  const y2 = q(a2, t), d2 = Math.min(Math.ceil(Math.log(Math.min(e.width, e.height) / 32) / Math.LN2), Math.ceil(Math.log(p / 2 / x2) / Math.LN2));
  if (!g && r && (t.isGeographic || t.isWebMercator) && (g = y2.xmin * y2.xmax < 0, !g && d2 < 3)) {
    const e2 = K(t);
    if (null != e2) {
      const t2 = 2 ** d2 * u * o, n = Math.ceil(e2 / t2);
      g = 1 === n || 2 === n && e2 / 2 - y2.xmax < t2;
    }
  }
  let M3, w2 = x2;
  const R3 = 1.001, S2 = Math.min(2, Math.max(1.414, ((_a = e.storageInfo) == null ? void 0 : _a.pyramidScalingFactor) || 2));
  if (g) {
    w2 = p;
    const e2 = t.isGeographic ? 1341104507446289e-21 : 0.29858214164761665, n = e2 * (96 * m * 39.37), i2 = t.isGeographic ? 4326 : 3857;
    M3 = C(new x({ x: e2, y: e2, spatialReference: { wkid: i2 } }), l, y2), M3.x *= w2 / n, M3.y *= w2 / n;
  } else {
    M3 = { x: c.x, y: c.y };
    let e2 = 0;
    for (; w2 < p * (R3 / 2) && e2 < d2; )
      e2++, w2 *= S2, M3.x *= S2, M3.y *= S2;
    Math.max(w2, p) / Math.min(w2, p) <= R3 && (w2 = p);
  }
  const P3 = [w2], b2 = [{ x: M3.x, y: M3.y }], G2 = 70.5310735, N2 = Math.min(G2, x2) / R3;
  for (; w2 >= N2; )
    w2 /= S2, M3.x /= S2, M3.y /= S2, P3.push(w2), b2.push({ x: M3.x, y: M3.y });
  if (s3) {
    const e2 = 1e-3 * c.x;
    let t2 = b2.findIndex((t3) => t3.x >= c.x - e2 && t3.x <= c.x + e2);
    t2 > -1 ? (b2.length = t2 + 1, P3.length = t2 + 1) : (t2 = b2.findIndex((t3) => t3.x <= c.x + e2), t2 > 0 && (b2.length = t2, P3.length = t2));
  }
  return { projectedPixelSize: f2, scales: P3, srcResolutions: b2, isCustomTilingScheme: !g };
}

export {
  d,
  k,
  T,
  C,
  _,
  q,
  J,
  K,
  Q,
  V,
  $2 as $,
  ne,
  ie,
  oe
};
//# sourceMappingURL=chunk-TBLEWSLT.js.map
