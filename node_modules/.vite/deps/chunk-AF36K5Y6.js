import {
  J,
  f,
  h as h2,
  i,
  r as r2,
  s as s6,
  t as t2
} from "./chunk-5K6FTFN4.js";
import {
  a as a2
} from "./chunk-LQVUN6IS.js";
import {
  c
} from "./chunk-JZM5YUHA.js";
import {
  t
} from "./chunk-CIDWM2UN.js";
import {
  a,
  b,
  r,
  s as s5
} from "./chunk-MH2LNFJK.js";
import {
  _
} from "./chunk-O3CHVGVF.js";
import {
  T,
  d,
  h,
  s as s4
} from "./chunk-HNHXEGH2.js";
import {
  o
} from "./chunk-DWOEYHKS.js";
import {
  s,
  s2,
  s3
} from "./chunk-W2N7YT6I.js";
import {
  has
} from "./chunk-I4U7MQNO.js";

// node_modules/@arcgis/core/core/workers/loaderConfig.js
var a3 = {};
function e(s8) {
  const e2 = { async: s8.async, isDebug: s8.isDebug, locale: s8.locale, baseUrl: s8.baseUrl, has: { ...s8.has }, map: { ...s8.map }, packages: s8.packages && s8.packages.concat() || [], paths: { ...s8.paths } };
  return s8.hasOwnProperty("async") || (e2.async = true), s8.hasOwnProperty("isDebug") || (e2.isDebug = false), s8.baseUrl || (e2.baseUrl = a3.baseUrl), e2;
}

// node_modules/@arcgis/core/core/workers/WorkerFallback.js
var n = class {
  constructor() {
    const e2 = document.createDocumentFragment();
    ["addEventListener", "dispatchEvent", "removeEventListener"].forEach((s8) => {
      this[s8] = (...r3) => e2[s8](...r3);
    });
  }
};
var a4 = class {
  constructor() {
    this._dispatcher = new n(), this._workerPostMessage({ type: t2.HANDSHAKE });
  }
  terminate() {
  }
  get onmessage() {
    return this._onmessageHandler;
  }
  set onmessage(e2) {
    this._onmessageHandler && this.removeEventListener("message", this._onmessageHandler), this._onmessageHandler = e2, e2 && this.addEventListener("message", e2);
  }
  get onmessageerror() {
    return this._onmessageerrorHandler;
  }
  set onmessageerror(e2) {
    this._onmessageerrorHandler && this.removeEventListener("messageerror", this._onmessageerrorHandler), this._onmessageerrorHandler = e2, e2 && this.addEventListener("messageerror", e2);
  }
  get onerror() {
    return this._onerrorHandler;
  }
  set onerror(e2) {
    this._onerrorHandler && this.removeEventListener("error", this._onerrorHandler), this._onerrorHandler = e2, e2 && this.addEventListener("error", e2);
  }
  postMessage(s8) {
    t(() => {
      this._workerMessageHandler(new MessageEvent("message", { data: s8 }));
    });
  }
  dispatchEvent(e2) {
    return this._dispatcher.dispatchEvent(e2);
  }
  addEventListener(e2, s8, r3) {
    this._dispatcher.addEventListener(e2, s8, r3);
  }
  removeEventListener(e2, s8, r3) {
    this._dispatcher.removeEventListener(e2, s8, r3);
  }
  _workerPostMessage(s8) {
    t(() => {
      this.dispatchEvent(new MessageEvent("message", { data: s8 }));
    });
  }
  async _workerMessageHandler(e2) {
    const n2 = i(e2);
    if (n2 && n2.type === t2.OPEN) {
      const { modulePath: e3, jobId: t3 } = n2;
      let a6 = await J.loadWorker(e3);
      a6 || (a6 = await import(
        /* @vite-ignore */
        /* webpackIgnore: true */
        e3
      ));
      const o2 = J.connect(a6);
      this._workerPostMessage({ type: t2.OPENED, jobId: t3, data: o2 });
    }
  }
};

// node_modules/@arcgis/core/core/workers/workerFactory.js
var u = s2.getLogger("esri.core.workers.workerFactory");
var { HANDSHAKE: m } = t2;
var p = 'let globalId=0;const outgoing=new Map,configuration=JSON.parse("{CONFIGURATION}");self.esriConfig=configuration.esriConfig;const workerPath=self.esriConfig.workers.workerPath,HANDSHAKE=0,OPEN=1,OPENED=2,RESPONSE=3,INVOKE=4,ABORT=5;function createAbortError(){const e=new Error("Aborted");return e.name="AbortError",e}function receiveMessage(e){return e&&e.data?"string"==typeof e.data?JSON.parse(e.data):e.data:null}function invokeStaticMessage(e,o,r){const t=r&&r.signal,n=globalId++;return new Promise(((r,s)=>{if(t){if(t.aborted)return s(createAbortError());t.addEventListener("abort",(()=>{outgoing.get(n)&&(outgoing.delete(n),self.postMessage({type:ABORT,jobId:n}),s(createAbortError()))}))}outgoing.set(n,{resolve:r,reject:s}),self.postMessage({type:INVOKE,jobId:n,methodName:e,abortable:null!=t,data:o})}))}let workerRevisionChecked=!1;function checkWorkerRevision(e){if(!workerRevisionChecked&&e.kernelInfo){workerRevisionChecked=!0;const{revision:o,fullVersion:r}=configuration.kernelInfo,{revision:t,fullVersion:n,version:s}=e.kernelInfo;esriConfig.assetsPath!==esriConfig.defaultAssetsPath&&o!==t&&console.warn(`Version mismatch detected between ArcGIS Maps SDK for JavaScript modules and assets. For more information visit https://bit.ly/3QnsuSo.\\nModules version: ${r}\\nAssets version: ${n??s}\\nAssets path: ${esriConfig.assetsPath}`)}}function messageHandler(e){const o=receiveMessage(e);if(!o)return;const r=o.jobId;switch(o.type){case OPEN:let n;function t(e){const o=n.connect(e);self.postMessage({type:OPENED,jobId:r,data:o},[o])}"function"==typeof define&&define.amd?require([workerPath],(e=>{n=e.default||e,checkWorkerRevision(n),n.loadWorker(o.modulePath).then((e=>e||new Promise((e=>{require([o.modulePath],e)})))).then(t)})):"System"in self&&"function"==typeof System.import?System.import(workerPath).then((e=>(n=e.default,checkWorkerRevision(n),n.loadWorker(o.modulePath)))).then((e=>e||System.import(o.modulePath))).then(t):esriConfig.workers.useDynamicImport?import(workerPath).then((e=>{n=e.default||e,checkWorkerRevision(n),n.loadWorker(o.modulePath).then((e=>e||import(o.modulePath))).then(t)})):(self.RemoteClient||importScripts(workerPath),n=self.RemoteClient.default||self.RemoteClient,checkWorkerRevision(n),n.loadWorker(o.modulePath).then(t));break;case RESPONSE:if(outgoing.has(r)){const s=outgoing.get(r);outgoing.delete(r),o.error?s.reject(JSON.parse(o.error)):s.resolve(o.data)}}}self.dojoConfig=configuration.loaderConfig,esriConfig.workers.loaderUrl&&(self.importScripts(esriConfig.workers.loaderUrl),"function"==typeof require&&"function"==typeof require.config&&require.config(configuration.loaderConfig)),self.addEventListener("message",messageHandler),self.postMessage({type:0});';
var g;
var k;
var h3 = "Failed to create Worker. Fallback to execute module in main thread";
async function w() {
  if (!has("esri-workers") || (has("mozilla"), 0))
    return y(new a4());
  if (!g && !k)
    try {
      const e3 = p.split('"{CONFIGURATION}"').join(`'${b2()}'`);
      g = URL.createObjectURL(new Blob([e3], { type: "text/javascript" }));
    } catch (r3) {
      k = r3 || {};
    }
  let e2;
  if (g)
    try {
      e2 = new Worker(g, { name: "esri-worker-" + v++ });
    } catch (r3) {
      u.warn(h3, k), e2 = new a4();
    }
  else
    u.warn(h3, k), e2 = new a4();
  return y(e2);
}
async function y(e2) {
  return new Promise((r3) => {
    function o2(s8) {
      const n2 = i(s8);
      n2 && n2.type === m && (e2.removeEventListener("message", o2), e2.removeEventListener("error", t3), r3(e2));
    }
    function t3(r4) {
      r4.preventDefault(), e2.removeEventListener("message", o2), e2.removeEventListener("error", t3), u.warn("Failed to create Worker. Fallback to execute module in main thread", r4), (e2 = new a4()).addEventListener("message", o2), e2.addEventListener("error", t3);
    }
    e2.addEventListener("message", o2), e2.addEventListener("error", t3);
  });
}
function b2() {
  let t3;
  if (null != s.default) {
    const e2 = { ...s };
    delete e2.default, t3 = JSON.parse(JSON.stringify(e2));
  } else
    t3 = JSON.parse(JSON.stringify(s));
  t3.assetsPath = _(t3.assetsPath), t3.defaultAssetsPath = t3.defaultAssetsPath ? _(t3.defaultAssetsPath) : void 0, t3.request.interceptors = [], t3.log.interceptors = [], t3.locale = c(), t3.has = { "esri-csp-restrictions": has("esri-csp-restrictions"), "esri-2d-debug": false, "esri-2d-update-debug": has("esri-2d-update-debug"), "esri-2d-log-updating": has("esri-2d-log-updating"), "featurelayer-pbf": has("featurelayer-pbf"), "featurelayer-simplify-thresholds": has("featurelayer-simplify-thresholds"), "featurelayer-simplify-payload-size-factors": has("featurelayer-simplify-payload-size-factors"), "featurelayer-simplify-mobile-factor": has("featurelayer-simplify-mobile-factor"), "esri-atomics": has("esri-atomics"), "esri-shared-array-buffer": has("esri-shared-array-buffer"), "esri-tiles-debug": has("esri-tiles-debug"), "esri-workers-arraybuffer-transfer": has("esri-workers-arraybuffer-transfer"), "feature-polyline-generalization-factor": has("feature-polyline-generalization-factor"), "host-webworker": 1, "polylabel-placement-enabled": has("polylabel-placement-enabled") }, t3.workers.loaderUrl && (t3.workers.loaderUrl = _(t3.workers.loaderUrl)), t3.workers.workerPath ? t3.workers.workerPath = _(t3.workers.workerPath) : t3.workers.workerPath = _(a2("esri/core/workers/RemoteClient.js")), t3.workers.useDynamicImport = false;
  const i3 = s.workers.loaderConfig, a6 = e({ baseUrl: i3 == null ? void 0 : i3.baseUrl, locale: c(), has: { "csp-restrictions": 1, "dojo-test-sniff": 0, "host-webworker": 1, ...i3 == null ? void 0 : i3.has }, map: { ...i3 == null ? void 0 : i3.map }, paths: { ...i3 == null ? void 0 : i3.paths }, packages: (i3 == null ? void 0 : i3.packages) || [] }), l2 = { buildDate: b, fullVersion: s5, revision: a };
  return JSON.stringify({ esriConfig: t3, loaderConfig: a6, kernelInfo: l2 });
}
var v = 0;

// node_modules/@arcgis/core/core/workers/WorkerOwner.js
var { ABORT: b3, INVOKE: m2, OPEN: _2, OPENED: g2, RESPONSE: u2 } = t2;
var j = class _j {
  static async create(e2) {
    const t3 = await w();
    return new _j(t3, e2);
  }
  constructor(e2, t3) {
    this._outJobs = /* @__PURE__ */ new Map(), this._inJobs = /* @__PURE__ */ new Map(), this.worker = e2, this.id = t3, e2.addEventListener("message", this._onMessage.bind(this)), e2.addEventListener("error", (e3) => {
      e3.preventDefault(), s2.getLogger("esri.core.workers.WorkerOwner").error(e3);
    });
  }
  terminate() {
    this.worker.terminate();
  }
  async open(e2, t3 = {}) {
    const { signal: o2 } = t3, s8 = r2();
    return new Promise((t4, n2) => {
      const a6 = { resolve: t4, reject: n2, abortHandle: h(o2, () => {
        this._outJobs.delete(s8), this._post({ type: b3, jobId: s8 });
      }) };
      this._outJobs.set(s8, a6), this._post({ type: _2, jobId: s8, modulePath: e2 });
    });
  }
  _onMessage(e2) {
    const t3 = i(e2);
    if (t3)
      switch (t3.type) {
        case g2:
          this._onOpenedMessage(t3);
          break;
        case u2:
          this._onResponseMessage(t3);
          break;
        case b3:
          this._onAbortMessage(t3);
          break;
        case m2:
          this._onInvokeMessage(t3);
      }
  }
  _onAbortMessage(e2) {
    const t3 = this._inJobs, o2 = e2.jobId, s8 = t3.get(o2);
    s8 && (s8.controller && s8.controller.abort(), t3.delete(o2));
  }
  _onInvokeMessage(t3) {
    const { methodName: o2, jobId: s8, data: r3, abortable: i3 } = t3, l2 = i3 ? new AbortController() : null, h5 = this._inJobs, c3 = r[o2];
    let p3;
    try {
      if ("function" != typeof c3)
        throw new TypeError(`${o2} is not a function`);
      p3 = c3.call(null, r3, { signal: l2 ? l2.signal : null });
    } catch (b4) {
      return void this._post({ type: u2, jobId: s8, error: s6(b4) });
    }
    T(p3) ? (h5.set(s8, { controller: l2, promise: p3 }), p3.then((e2) => {
      h5.has(s8) && (h5.delete(s8), this._post({ type: u2, jobId: s8 }, e2));
    }, (e2) => {
      h5.has(s8) && (h5.delete(s8), e2 || (e2 = { message: "Error encountered at method" + o2 }), d(e2) || this._post({ type: u2, jobId: s8, error: s6(e2 || { message: `Error encountered at method ${o2}` }) }));
    })) : this._post({ type: u2, jobId: s8 }, p3);
  }
  _onOpenedMessage(e2) {
    const { jobId: t3, data: o2 } = e2, r3 = this._outJobs.get(t3);
    r3 && (this._outJobs.delete(t3), o(r3.abortHandle), r3.resolve(o2));
  }
  _onResponseMessage(e2) {
    const { jobId: o2, error: r3, data: n2 } = e2, a6 = this._outJobs.get(o2);
    a6 && (this._outJobs.delete(o2), o(a6.abortHandle), r3 ? a6.reject(s3.fromJSON(JSON.parse(r3))) : a6.resolve(n2));
  }
  _post(e2, t3, o2) {
    return f(this.worker, e2, t3, o2);
  }
};

// node_modules/@arcgis/core/core/workers/workers.js
var i2 = has("host-browser") ? Math.min(navigator.hardwareConcurrency - 1, has("workers-pool-size")) : 0;
var s7 = has("esri-mobile") ? Math.min(i2, 3) : i2;
s7 || (s7 = has("safari") && has("mac") ? 7 : 2);
var a5 = 0;
var l = [];
function c2() {
  d2();
}
async function u3(r3, t3) {
  const e2 = new h2();
  return await e2.open(r3, t3), e2;
}
async function f2(o2, n2 = {}) {
  if ("string" != typeof o2)
    throw new s3("workers:undefined-module", "modulePath is missing");
  let i3 = n2.strategy || "distributed";
  if (has("host-webworker") && !has("esri-workers") && (i3 = "local"), "local" === i3) {
    let r3 = await J.loadWorker(o2);
    r3 || (r3 = await import(
      /* @vite-ignore */
      /* webpackIgnore: true */
      o2
    )), s4(n2.signal);
    const i4 = n2.client || r3;
    return u3([J.connect(r3)], { ...n2, client: i4 });
  }
  if (await d2(), s4(n2.signal), "dedicated" === i3) {
    const r3 = a5++ % s7;
    return u3([await l[r3].open(o2, n2)], n2);
  }
  if (n2.maxNumWorkers && n2.maxNumWorkers > 0) {
    const r3 = Math.min(n2.maxNumWorkers, s7);
    if (r3 < s7) {
      const t3 = new Array(r3);
      for (let e2 = 0; e2 < r3; ++e2) {
        const r4 = a5++ % s7;
        t3[e2] = l[r4].open(o2, n2);
      }
      return u3(t3, n2);
    }
  }
  return u3(l.map((r3) => r3.open(o2, n2)), n2);
}
var p2;
var h4 = null;
async function d2() {
  if (h4)
    return h4;
  p2 = new AbortController();
  const r3 = [];
  for (let t3 = 0; t3 < s7; t3++) {
    const o2 = j.create(t3).then((r4) => (l[t3] = r4, r4));
    r3.push(o2);
  }
  return h4 = Promise.all(r3), h4;
}

export {
  c2 as c,
  f2 as f
};
//# sourceMappingURL=chunk-AF36K5Y6.js.map
