import {
  c2 as c,
  f
} from "./chunk-CWQ6Q3PH.js";
import {
  f as f2,
  u
} from "./chunk-74O2T7JC.js";
import {
  a
} from "./chunk-LQVUN6IS.js";
import {
  j
} from "./chunk-HKVL2MJK.js";
import {
  s2 as s,
  s3 as s2
} from "./chunk-W2N7YT6I.js";
import {
  r,
  t
} from "./chunk-I5JT24BO.js";

// node_modules/@arcgis/core/intl/substitute.js
var i = s.getLogger("esri.intl.substitute");
function s3(t2, r3, n = {}) {
  const { format: o2 = {} } = n;
  return r(t2, (t3) => u2(t3, r3, o2));
}
function u2(t2, e, n) {
  let o2, i3;
  const s6 = t2.indexOf(":");
  if (-1 === s6 ? o2 = t2.trim() : (o2 = t2.slice(0, s6).trim(), i3 = t2.slice(s6 + 1).trim()), !o2)
    return "";
  const u4 = t(o2, e);
  if (null == u4)
    return "";
  const m = (i3 ? n == null ? void 0 : n[i3] : null) ?? (n == null ? void 0 : n[o2]);
  return m ? c2(u4, m) : i3 ? a2(u4, i3) : f3(u4);
}
function c2(t2, r3) {
  switch (r3.type) {
    case "date":
      return f(t2, r3.intlOptions);
    case "number":
      return c(t2, r3.intlOptions);
    default:
      return i.warn("missing format descriptor for key {key}"), f3(t2);
  }
}
function a2(t2, r3) {
  switch (r3.toLowerCase()) {
    case "dateformat":
      return f(t2);
    case "numberformat":
      return c(t2);
    default:
      return i.warn(`inline format is unsupported since 4.12: ${r3}`), /^(dateformat|datestring)/i.test(r3) ? f(t2) : /^numberformat/i.test(r3) ? c(t2) : f3(t2);
  }
}
function f3(t2) {
  switch (typeof t2) {
    case "string":
      return t2;
    case "number":
      return c(t2);
    case "boolean":
      return "" + t2;
    default:
      return t2 instanceof Date ? f(t2) : "";
  }
}

// node_modules/@arcgis/core/intl/t9n.js
async function r2(e, r3, s6, i3) {
  const a5 = r3.exec(s6);
  if (!a5)
    throw new s2("esri-intl:invalid-bundle", `Bundle id "${s6}" is not compatible with the pattern "${r3}"`);
  const c4 = a5[1] ? `${a5[1]}/` : "", l2 = a5[2], w = f2(i3), h2 = `${c4}${l2}.json`, u4 = w ? `${c4}${l2}_${w}.json` : h2;
  let d;
  try {
    d = await o(e(u4));
  } catch (f4) {
    if (u4 === h2)
      throw new s2("intl:unknown-bundle", `Bundle "${s6}" cannot be loaded`, { error: f4 });
    try {
      d = await o(e(h2));
    } catch (f5) {
      throw new s2("intl:unknown-bundle", `Bundle "${s6}" cannot be loaded`, { error: f5 });
    }
  }
  return d;
}
async function o(t2) {
  if (null != a3.fetchBundleAsset)
    return a3.fetchBundleAsset(t2);
  const n = await j(t2, { responseType: "text" });
  return JSON.parse(n.data);
}
var s4 = class {
  constructor({ base: e = "", pattern: t2, location: n = new URL(window.location.href) }) {
    let r3;
    r3 = "string" == typeof n ? (e2) => new URL(e2, new URL(n, window.location.href)).href : n instanceof URL ? (e2) => new URL(e2, n).href : n, this.pattern = "string" == typeof t2 ? new RegExp(`^${t2}`) : t2, this.getAssetUrl = r3, e = e ? e.endsWith("/") ? e : e + "/" : "", this.matcher = new RegExp(`^${e}(?:(.*)/)?(.*)$`);
  }
  fetchMessageBundle(e, t2) {
    return r2(this.getAssetUrl, this.matcher, e, t2);
  }
};
function i2(e) {
  return new s4(e);
}
var a3 = {};

// node_modules/@arcgis/core/intl.js
u(i2({ pattern: "esri/", location: a }));

export {
  s3 as s
};
//# sourceMappingURL=chunk-4NOOGA4U.js.map
