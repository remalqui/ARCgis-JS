import {
  d
} from "./chunk-RNXN3MSP.js";
import {
  d as d2
} from "./chunk-RL6GG46M.js";
import {
  t
} from "./chunk-B5TYSRH2.js";
import "./chunk-YIJWIXDP.js";
import {
  f
} from "./chunk-YBMFRTPB.js";
import "./chunk-RR2V4HRU.js";
import "./chunk-WZAASLQW.js";
import "./chunk-4SARN32Z.js";
import "./chunk-QA4FMJA6.js";
import "./chunk-VFQINJTY.js";
import "./chunk-4J6R7QH6.js";
import "./chunk-HB3KZNZ3.js";
import "./chunk-OO4A3EBQ.js";
import "./chunk-ZBWBCN2I.js";
import "./chunk-KTEJJM3A.js";
import "./chunk-EIE3W25Z.js";
import "./chunk-7KM4XBUC.js";
import "./chunk-KIEN3CY2.js";
import "./chunk-FXDEKQIL.js";
import "./chunk-GJ5WE5D3.js";
import "./chunk-KKGH4SRQ.js";
import "./chunk-Y2CLYMXQ.js";
import "./chunk-4RFFPIT2.js";
import "./chunk-KSQTM6XI.js";
import "./chunk-7KX64CAH.js";
import "./chunk-J4R3XNTP.js";
import "./chunk-Y6FRAP2R.js";
import "./chunk-BVNZ3ETW.js";
import "./chunk-FJQ7HIY7.js";
import "./chunk-T4XWQYGC.js";
import "./chunk-4H5JODOT.js";
import "./chunk-TCASQSKO.js";
import "./chunk-5HAVROZG.js";
import "./chunk-MOPR7RFH.js";
import "./chunk-KW3ZNPTA.js";
import "./chunk-TJB4CGOM.js";
import "./chunk-CWQ6Q3PH.js";
import "./chunk-ODFH3BSN.js";
import "./chunk-WBSPL6CJ.js";
import "./chunk-N5ULYWRU.js";
import "./chunk-JZM5YUHA.js";
import "./chunk-MOIETNWJ.js";
import "./chunk-3GSONYPC.js";
import "./chunk-SFV6XLDZ.js";
import "./chunk-3PLRSFLA.js";
import "./chunk-VBD33VNW.js";
import "./chunk-7A5C2EQ3.js";
import "./chunk-OYBXMT5R.js";
import "./chunk-CIDWM2UN.js";
import "./chunk-PD5Q7TDW.js";
import "./chunk-SHJI4PR4.js";
import "./chunk-2YSHZRCT.js";
import {
  j
} from "./chunk-HKVL2MJK.js";
import "./chunk-MH2LNFJK.js";
import "./chunk-O3CHVGVF.js";
import "./chunk-HNHXEGH2.js";
import "./chunk-DWOEYHKS.js";
import "./chunk-W2N7YT6I.js";
import "./chunk-I5JT24BO.js";
import "./chunk-I4U7MQNO.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/rest/query/operations/queryRelatedRecords.js
function o(e, t2) {
  const o2 = e.toJSON();
  return o2.objectIds && (o2.objectIds = o2.objectIds.join(",")), o2.orderByFields && (o2.orderByFields = o2.orderByFields.join(",")), o2.outFields && !(t2 == null ? void 0 : t2.returnCountOnly) ? o2.outFields.includes("*") ? o2.outFields = "*" : o2.outFields = o2.outFields.join(",") : delete o2.outFields, o2.outSpatialReference && (o2.outSR = o2.outSR.wkid || JSON.stringify(o2.outSR.toJSON()), delete o2.outSpatialReference), o2.dynamicDataSource && (o2.layer = JSON.stringify({ source: o2.dynamicDataSource }), delete o2.dynamicDataSource), o2;
}
async function r(e, t2, o2) {
  const r2 = await n(e, t2, o2), s2 = r2.data, a = s2.geometryType, d3 = s2.spatialReference, c = {};
  for (const n3 of s2.relatedRecordGroups) {
    const e2 = { fields: void 0, objectIdFieldName: void 0, geometryType: a, spatialReference: d3, hasZ: !!s2.hasZ, hasM: !!s2.hasM, features: n3.relatedRecords };
    if (null != n3.objectId)
      c[n3.objectId] = e2;
    else
      for (const t3 of Object.keys(n3))
        "relatedRecords" !== t3 && (c[n3[t3]] = e2);
  }
  return { ...r2, data: c };
}
async function s(e, t2, o2) {
  const r2 = await n(e, t2, o2, { returnCountOnly: true }), s2 = r2.data, a = {};
  for (const n3 of s2.relatedRecordGroups)
    null != n3.objectId && (a[n3.objectId] = n3.count);
  return { ...r2, data: a };
}
async function n(r2, s2, n3 = {}, a) {
  const d3 = t({ ...r2.query, f: "json", ...a, ...o(s2, a) });
  return j(r2.path + "/queryRelatedRecords", { ...n3, query: { ...n3.query, ...d3 } });
}

// node_modules/@arcgis/core/rest/query/executeRelationshipQuery.js
async function n2(e, n3, u2) {
  n3 = d2.from(n3);
  const a = f(e);
  return r(a, n3, u2).then((t2) => {
    const r2 = t2.data, e2 = {};
    return Object.keys(r2).forEach((t3) => e2[t3] = d.fromJSON(r2[t3])), e2;
  });
}
async function u(r2, o2, n3) {
  o2 = d2.from(o2);
  const u2 = f(r2);
  return s(u2, o2, { ...n3 }).then((t2) => t2.data);
}
export {
  n2 as executeRelationshipQuery,
  u as executeRelationshipQueryForCount
};
//# sourceMappingURL=executeRelationshipQuery-MHEYG2DL.js.map
