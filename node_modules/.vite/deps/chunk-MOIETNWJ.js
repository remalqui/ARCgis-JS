import {
  M
} from "./chunk-3GSONYPC.js";
import {
  f,
  g
} from "./chunk-SFV6XLDZ.js";
import {
  s as s2
} from "./chunk-VBD33VNW.js";
import {
  l
} from "./chunk-7A5C2EQ3.js";
import {
  m,
  y3 as y
} from "./chunk-OYBXMT5R.js";
import {
  a2
} from "./chunk-CIDWM2UN.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";
import {
  d
} from "./chunk-2YSHZRCT.js";
import {
  u
} from "./chunk-DWOEYHKS.js";
import {
  s3 as s
} from "./chunk-W2N7YT6I.js";
import {
  a
} from "./chunk-I5JT24BO.js";

// node_modules/@arcgis/core/portal/PortalQueryParams.js
var u2;
var p = new s2({ avgRating: "avg-rating", numRatings: "num-ratings", numComments: "num-comments", numViews: "num-views" });
var m2 = u2 = class extends m {
  constructor(t) {
    super(t), this.categories = null, this.disableExtraQuery = false, this.extent = null, this.filter = null, this.num = 10, this.query = null, this.sortField = null, this.start = 1;
  }
  get sortOrder() {
    return this._get("sortOrder") || "asc";
  }
  set sortOrder(t) {
    "asc" !== t && "desc" !== t || this._set("sortOrder", t);
  }
  clone() {
    return new u2({ categories: this.categories ? a(this.categories) : null, disableExtraQuery: this.disableExtraQuery, extent: this.extent ? this.extent.clone() : null, filter: this.filter, num: this.num, query: this.query, sortField: this.sortField, sortOrder: this.sortOrder, start: this.start });
  }
  toRequestOptions(t, r) {
    let e2 = [];
    this.categories && (e2 = this.categories.map((t2) => Array.isArray(t2) ? JSON.stringify(t2) : t2));
    let s3 = "";
    if (this.extent) {
      const t2 = g(this.extent, f.WGS84);
      null != t2 && (s3 = `${t2.xmin},${t2.ymin},${t2.xmax},${t2.ymax}`);
    }
    let o = this.query;
    !this.disableExtraQuery && t.extraQuery && (o = "(" + o + ")" + t.extraQuery);
    const i = { categories: e2, bbox: s3, q: o, filter: this.filter, num: this.num, sortField: null, sortOrder: null, start: this.start };
    return this.sortField && (i.sortField = this.sortField.split(",").map((t2) => p.toJSON(t2.trim())).join(","), i.sortOrder = this.sortOrder), { query: { ...r, ...i } };
  }
};
e([y()], m2.prototype, "categories", void 0), e([y()], m2.prototype, "disableExtraQuery", void 0), e([y({ type: M })], m2.prototype, "extent", void 0), e([y()], m2.prototype, "filter", void 0), e([y()], m2.prototype, "num", void 0), e([y()], m2.prototype, "query", void 0), e([y()], m2.prototype, "sortField", void 0), e([y()], m2.prototype, "sortOrder", null), e([y()], m2.prototype, "start", void 0), m2 = u2 = e([a2("esri.portal.PortalQueryParams")], m2);
var c = m2;

// node_modules/@arcgis/core/portal/PortalGroup.js
var u3 = class extends l {
  constructor(t) {
    super(t), this.access = null, this.created = null, this.description = null, this.id = null, this.isInvitationOnly = false, this.modified = null, this.owner = null, this.portal = null, this.snippet = null, this.sortField = null, this.sortOrder = null, this.tags = null, this.title = null;
  }
  get thumbnailUrl() {
    var _a;
    const t = this.url, r = this.thumbnail;
    return t && r && this.portal ? (_a = this.portal) == null ? void 0 : _a.normalizeUrl(`${t}/info/${r}?f=json`) : null;
  }
  get url() {
    const t = this.get("portal.restUrl");
    return t ? t + "/community/groups/" + this.id : null;
  }
  fetchCategorySchema(t) {
    return u(this.portal).request(this.url + "/categorySchema", t).then((r) => {
      const e2 = r.categorySchema || [];
      return e2.some((t2) => "contentCategorySetsGroupQuery.LivingAtlas" === t2.source) ? this._fetchCategorySchemaSet("LivingAtlas", t) : e2;
    });
  }
  fetchMembers(t) {
    return u(this.portal).request(this.url + "/users", t);
  }
  getThumbnailUrl(t) {
    let r = this.thumbnailUrl;
    return r && t && (r += `&w=${t}`), r;
  }
  toJSON() {
    throw new s("internal:not-yet-implemented", "PortalGroup.toJSON is not yet implemented");
  }
  queryItems(t, r) {
    let e2 = d(c, t);
    const s3 = u(this.portal);
    return parseFloat(s3.currentVersion) > 5 ? (e2 = e2 || new c(), s3.queryPortal(`/content/groups/${this.id}/search`, e2, "PortalItem", r)) : (e2 = e2 ? e2.clone() : new c(), e2.query = "group:" + this.id + (e2.query ? " " + e2.query : ""), s3.queryItems(e2, r));
  }
  _fetchCategorySchemaSet(t, e2) {
    const s3 = u(this.portal);
    return s3.fetchSelf(s3.authMode, true, e2).then((t2) => {
      const o = t2.contentCategorySetsGroupQuery;
      if (o) {
        const t3 = new c();
        return t3.disableExtraQuery = true, t3.num = 1, t3.query = o, s3.queryGroups(t3, e2);
      }
      throw new s("portal-group:fetchCategorySchema", "contentCategorySetsGroupQuery value not found");
    }).then((o) => {
      if (o.total) {
        const r = o.results[0], s4 = new c();
        return s4.num = 1, s4.query = `typekeywords:"${t}"`, r.queryItems(s4, e2);
      }
      throw new s("portal-group:fetchCategorySchema", "contentCategorySetsGroupQuery group not found");
    }).then((t2) => {
      if (t2.total) {
        return t2.results[0].fetchData("json", e2).then((t3) => {
          const r = t3 && t3.categorySchema;
          return r && r.length ? r : [];
        });
      }
      return [];
    });
  }
};
e([y()], u3.prototype, "access", void 0), e([y({ type: Date })], u3.prototype, "created", void 0), e([y()], u3.prototype, "description", void 0), e([y()], u3.prototype, "id", void 0), e([y()], u3.prototype, "isInvitationOnly", void 0), e([y({ type: Date })], u3.prototype, "modified", void 0), e([y()], u3.prototype, "owner", void 0), e([y()], u3.prototype, "portal", void 0), e([y()], u3.prototype, "snippet", void 0), e([y()], u3.prototype, "sortField", void 0), e([y()], u3.prototype, "sortOrder", void 0), e([y()], u3.prototype, "tags", void 0), e([y()], u3.prototype, "thumbnail", void 0), e([y({ readOnly: true })], u3.prototype, "thumbnailUrl", null), e([y()], u3.prototype, "title", void 0), e([y({ readOnly: true })], u3.prototype, "url", null), u3 = e([a2("esri.portal.PortalGroup")], u3);
var p2 = u3;

export {
  c,
  p2 as p
};
//# sourceMappingURL=chunk-MOIETNWJ.js.map
