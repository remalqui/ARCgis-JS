import {
  d as d4,
  f as f3,
  h as h5
} from "./chunk-SX6DCUJ2.js";
import {
  A,
  E,
  O,
  T as T4,
  _,
  c as c2,
  g as g2,
  h as h6,
  l as l2,
  m,
  p as p2
} from "./chunk-VVEYQMEH.js";
import {
  a as a3
} from "./chunk-W7FXZ6Y5.js";
import {
  i as i5
} from "./chunk-Y2JGNMOW.js";
import {
  r as r4
} from "./chunk-HSAM6HYE.js";
import {
  r as r3
} from "./chunk-7YWQQHOF.js";
import {
  d as d3,
  f as f2
} from "./chunk-KPMUAI6T.js";
import {
  n as n3,
  t as t3
} from "./chunk-TBMS67KR.js";
import {
  i as i4
} from "./chunk-FZIEP3HG.js";
import "./chunk-N5CR6S5Y.js";
import {
  a as a2,
  g,
  i as i3,
  u as u2
} from "./chunk-ZV7C2PFY.js";
import {
  o
} from "./chunk-TW5O5V56.js";
import {
  x as x2
} from "./chunk-PEYWLFGJ.js";
import {
  T as T3,
  e2 as e4
} from "./chunk-NE5U5H4D.js";
import {
  p
} from "./chunk-6YPETR6R.js";
import {
  K,
  T as T2,
  oe,
  q
} from "./chunk-TBLEWSLT.js";
import {
  e as e2
} from "./chunk-6KMYS2SL.js";
import {
  S,
  u2 as u
} from "./chunk-F72FE4ZJ.js";
import "./chunk-AER5JAFS.js";
import "./chunk-7HZ72XIE.js";
import "./chunk-Y7HVH6RU.js";
import {
  b as b2
} from "./chunk-HZHMZHPT.js";
import "./chunk-NVZXNBIH.js";
import "./chunk-3VTULECI.js";
import "./chunk-A4HFWKMU.js";
import "./chunk-TDXHXKUI.js";
import "./chunk-PR2OEILG.js";
import "./chunk-PJP6JTP7.js";
import "./chunk-IVABPLLZ.js";
import {
  T
} from "./chunk-TBHRKIAA.js";
import {
  c
} from "./chunk-JSMUQBPG.js";
import "./chunk-FF5LS3YE.js";
import {
  D,
  G,
  I,
  L,
  P,
  R,
  U as U2
} from "./chunk-BCDDCNQ2.js";
import "./chunk-NYLF7BL2.js";
import "./chunk-32JSK7KN.js";
import "./chunk-KKGVORR5.js";
import "./chunk-WTKN55TU.js";
import "./chunk-TDPKDZC3.js";
import "./chunk-M5UHI5WR.js";
import "./chunk-SCOBW7KR.js";
import "./chunk-AHAGGZUI.js";
import {
  ut
} from "./chunk-34BWOTUS.js";
import "./chunk-RADYXGQH.js";
import {
  n as n2
} from "./chunk-KKBQS7Z3.js";
import {
  e as e3
} from "./chunk-D5NSNTGJ.js";
import {
  n
} from "./chunk-OMDLZQUU.js";
import "./chunk-JUHOAKXP.js";
import "./chunk-E2DURSMR.js";
import {
  r as r2
} from "./chunk-4YNW7QZY.js";
import {
  y as y2
} from "./chunk-E2BBTG5C.js";
import "./chunk-EL72ISXP.js";
import {
  t as t2
} from "./chunk-5KLICR5E.js";
import "./chunk-PNA6D76Z.js";
import {
  h as h3
} from "./chunk-NDQCNJMM.js";
import "./chunk-R2HXL6HT.js";
import "./chunk-2PAQQUAG.js";
import "./chunk-QXPTMFGZ.js";
import {
  h as h4
} from "./chunk-4SARN32Z.js";
import "./chunk-QA4FMJA6.js";
import "./chunk-VFQINJTY.js";
import "./chunk-4J6R7QH6.js";
import "./chunk-HB3KZNZ3.js";
import {
  f
} from "./chunk-VZAEQ6CY.js";
import {
  M as M2,
  b,
  h as h2,
  i as i2,
  r,
  s as s3
} from "./chunk-SS33L3LC.js";
import "./chunk-X4Y5OF5X.js";
import {
  j as j2
} from "./chunk-PX3FFFQ5.js";
import "./chunk-Y2ZDD3I4.js";
import "./chunk-42RWGG3D.js";
import {
  d as d2
} from "./chunk-LNMNRMVX.js";
import "./chunk-OO4A3EBQ.js";
import "./chunk-ZBWBCN2I.js";
import "./chunk-KTEJJM3A.js";
import "./chunk-SO6DBMQG.js";
import "./chunk-KTSEQWMB.js";
import "./chunk-QXGO5RRL.js";
import "./chunk-EIE3W25Z.js";
import "./chunk-7KM4XBUC.js";
import "./chunk-OZXJDVTE.js";
import "./chunk-KIEN3CY2.js";
import "./chunk-FXDEKQIL.js";
import "./chunk-GJ5WE5D3.js";
import "./chunk-KKGH4SRQ.js";
import "./chunk-Y2CLYMXQ.js";
import "./chunk-4RFFPIT2.js";
import "./chunk-KSQTM6XI.js";
import "./chunk-7KX64CAH.js";
import "./chunk-J4R3XNTP.js";
import "./chunk-Y6FRAP2R.js";
import "./chunk-BVNZ3ETW.js";
import "./chunk-FJQ7HIY7.js";
import "./chunk-T4XWQYGC.js";
import "./chunk-4H5JODOT.js";
import "./chunk-TCASQSKO.js";
import {
  i
} from "./chunk-5HAVROZG.js";
import "./chunk-MOPR7RFH.js";
import "./chunk-KW3ZNPTA.js";
import "./chunk-TJB4CGOM.js";
import "./chunk-CWQ6Q3PH.js";
import {
  U,
  h,
  l,
  w
} from "./chunk-XN5VV437.js";
import "./chunk-ODFH3BSN.js";
import "./chunk-WBSPL6CJ.js";
import "./chunk-N5ULYWRU.js";
import "./chunk-LQVUN6IS.js";
import "./chunk-JZM5YUHA.js";
import "./chunk-MOIETNWJ.js";
import {
  M
} from "./chunk-3GSONYPC.js";
import {
  x2 as x
} from "./chunk-SFV6XLDZ.js";
import "./chunk-3PLRSFLA.js";
import "./chunk-VBD33VNW.js";
import "./chunk-7A5C2EQ3.js";
import {
  y3 as y
} from "./chunk-OYBXMT5R.js";
import {
  a2 as a
} from "./chunk-CIDWM2UN.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";
import "./chunk-SHJI4PR4.js";
import "./chunk-2YSHZRCT.js";
import "./chunk-HKVL2MJK.js";
import "./chunk-MH2LNFJK.js";
import "./chunk-O3CHVGVF.js";
import {
  d,
  j,
  k
} from "./chunk-HNHXEGH2.js";
import {
  t
} from "./chunk-DWOEYHKS.js";
import {
  s2 as s,
  s3 as s2
} from "./chunk-W2N7YT6I.js";
import "./chunk-I5JT24BO.js";
import "./chunk-I4U7MQNO.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/views/2d/engine/imagery/RasterBitmap.js
var p3 = { bandCount: 3, outMin: 0, outMax: 1, minCutOff: [0, 0, 0], maxCutOff: [255, 255, 255], factor: [1 / 255, 1 / 255, 1 / 255], useGamma: false, gamma: [1, 1, 1], gammaCorrection: [1, 1, 1], colormap: null, colormapOffset: null, stretchType: "none", type: "stretch" };
var x3 = class extends i4 {
  constructor(e16 = null, t7 = null, s15 = null) {
    super(), this._textureInvalidated = true, this._colormapTextureInvalidated = true, this._rasterTexture = null, this._rasterTextureBandIds = null, this._transformGridTexture = null, this._colormapTexture = null, this._colormap = null, this._supportsBilinearTexture = true, this._processedTexture = null, this.functionTextures = [], this.projected = false, this.stencilRef = 0, this.coordScale = [1, 1], this._processed = false, this._symbolizerParameters = null, this.height = null, this.isRendereredSource = false, this.pixelRatio = 1, this.resolution = 0, this.rotation = 0, this._source = null, this.rawPixelData = null, this._suspended = false, this._bandIds = null, this._interpolation = null, this._transformGrid = null, this.width = null, this.x = 0, this.y = 0, this.source = e16, this.transformGrid = t7, this.interpolation = s15;
  }
  destroy() {
    this._disposeTextures();
  }
  get processedTexture() {
    return this._processedTexture;
  }
  set processedTexture(e16) {
    this._processedTexture !== e16 && (this._disposeTextures(true), this._processedTexture = e16);
  }
  get rasterTexture() {
    return this._rasterTexture;
  }
  set rasterTexture(e16) {
    var _a;
    this._rasterTexture !== e16 && ((_a = this._rasterTexture) == null ? void 0 : _a.dispose(), this._rasterTexture = e16);
  }
  get processed() {
    return this._processed;
  }
  set processed(t7) {
    this._processed = t7, t7 || (t(this.processedTexture), this.invalidateTexture());
  }
  get symbolizerParameters() {
    return this._symbolizerParameters || p3;
  }
  set symbolizerParameters(e16) {
    this._symbolizerParameters !== e16 && (this._symbolizerParameters = e16, this._colormapTextureInvalidated = true, this.commonUniforms = null);
  }
  get source() {
    return this._source;
  }
  set source(e16) {
    this._source !== e16 && (this._source = e16, this._rasterTexture && (this._rasterTexture.dispose(), this._rasterTexture = null, this._rasterTextureBandIds = null), this.projected = false, this.invalidateTexture());
  }
  get suspended() {
    return this._suspended;
  }
  set suspended(e16) {
    this._suspended && !e16 && this.stage && (this.ready(), this.requestRender()), this._suspended = e16;
  }
  get bandIds() {
    return this._bandIds;
  }
  set bandIds(e16) {
    this._bandIds = e16, this._isBandIdschanged(e16) && (this.projected = false, this.invalidateTexture());
  }
  get interpolation() {
    return this._interpolation || "nearest";
  }
  set interpolation(e16) {
    this._interpolation = e16, this._rasterTexture && this._rasterTexture.setSamplingMode("bilinear" === this._getTextureSamplingMethod(e16 || "nearest") ? L.LINEAR : L.NEAREST);
  }
  get transformGrid() {
    return this._transformGrid;
  }
  set transformGrid(t7) {
    this._transformGrid = t7, this._transformGridTexture = t(this._transformGridTexture);
  }
  invalidateTexture() {
    this._textureInvalidated || (this._textureInvalidated = true, this.requestRender());
  }
  _createTransforms() {
    return { dvs: e3() };
  }
  setTransform(e16) {
    const a17 = r(this.transforms.dvs), [n19, h7] = e16.toScreenNoRotation([0, 0], [this.x, this.y]), l4 = this.resolution / this.pixelRatio / e16.resolution, d5 = l4 * this.width, _2 = l4 * this.height, p6 = Math.PI * this.rotation / 180;
    M2(a17, a17, t2(n19, h7)), M2(a17, a17, t2(d5 / 2, _2 / 2)), h2(a17, a17, -p6), M2(a17, a17, t2(-d5 / 2, -_2 / 2)), b(a17, a17, t2(d5, _2)), i2(this.transforms.dvs, e16.displayViewMat3, a17);
  }
  getTextures({ forProcessing: e16 = false, useProcessedTexture: t7 = false } = {}) {
    const s15 = t7 ? this._processedTexture ?? this._rasterTexture : this._rasterTexture, r10 = [], i13 = [];
    return s15 ? t7 ? (i13.push(s15), r10.push("u_image"), this._colormapTexture && (i13.push(this._colormapTexture), r10.push("u_colormap")), { names: r10, textures: i13 }) : (this._transformGridTexture && (i13.push(this._transformGridTexture), r10.push("u_transformGrid")), i13.push(s15), r10.push("u_image"), this._colormapTexture && !e16 && (i13.push(this._colormapTexture), r10.push("u_colormap")), { names: r10, textures: i13 }) : { names: r10, textures: i13 };
  }
  onAttach() {
    this.invalidateTexture();
  }
  onDetach() {
    this.invalidateTexture();
  }
  updateTexture({ context: e16 }) {
    if (!this.stage)
      return void this._disposeTextures();
    const t7 = this._isValidSource(this.source);
    t7 && this._colormapTextureInvalidated && (this._colormapTextureInvalidated = false, this._updateColormapTexture(e16)), this._textureInvalidated && (this._textureInvalidated = false, this._createOrDestroyRasterTexture(e16), this._rasterTexture && (t7 ? this.transformGrid && !this._transformGridTexture && (this._transformGridTexture = m(e16, this.transformGrid)) : this._rasterTexture.setData(null)), this.suspended || (this.ready(), this.requestRender()));
  }
  updateProcessedTexture() {
    const { functionTextures: e16 } = this;
    0 !== e16.length && (this.processedTexture = e16.shift(), e16.forEach((e17) => e17 == null ? void 0 : e17.dispose()), e16.length = 0);
  }
  _createOrDestroyRasterTexture(e16) {
    var _a, _b, _c;
    const t7 = (_a = this.source) == null ? void 0 : _a.extractBands(this.bandIds);
    if (!this._isValidSource(t7))
      return void (this._rasterTexture && (this._rasterTexture.dispose(), this._rasterTextureBandIds = null, this._rasterTexture = null));
    const s15 = !this._isBandIdschanged(this.bandIds);
    if (this._rasterTexture) {
      if (s15)
        return;
      this._rasterTexture.dispose(), this._rasterTextureBandIds = null, this._rasterTexture = null;
    }
    this._supportsBilinearTexture = !!((_b = e16.capabilities.textureFloat) == null ? void 0 : _b.textureFloatLinear);
    const r10 = this._getTextureSamplingMethod(this.interpolation), i13 = this.isRendereredSource || !((_c = e16.capabilities.textureFloat) == null ? void 0 : _c.textureFloat);
    this._rasterTexture = c2(e16, t7, r10, i13), this.projected = false, this._processed = false, this._rasterTextureBandIds = this.bandIds ? [...this.bandIds] : null;
  }
  _isBandIdschanged(e16) {
    const t7 = this._rasterTextureBandIds;
    return !(null == t7 && null == e16 || t7 && e16 && t7.join("") === e16.join(""));
  }
  _isValidSource(e16) {
    var _a;
    return null != e16 && ((_a = e16.pixels) == null ? void 0 : _a.length) > 0;
  }
  _getTextureSamplingMethod(e16) {
    const { type: t7, colormap: s15 } = this.symbolizerParameters, r10 = "lut" === t7 || "stretch" === t7 && null != s15;
    return !this._supportsBilinearTexture || r10 || "bilinear" !== e16 && "cubic" !== e16 ? "nearest" : "bilinear";
  }
  _updateColormapTexture(e16) {
    const t7 = this._colormap, s15 = this.symbolizerParameters.colormap;
    return s15 ? t7 ? s15.length !== t7.length || s15.some((e17, s16) => e17 !== t7[s16]) ? (this._colormapTexture && (this._colormapTexture.dispose(), this._colormapTexture = null), this._colormapTexture = l2(e16, s15), void (this._colormap = s15)) : void 0 : (this._colormapTexture = l2(e16, s15), void (this._colormap = s15)) : (this._colormapTexture && (this._colormapTexture.dispose(), this._colormapTexture = null), void (this._colormap = null));
  }
  _disposeTextures(e16 = false) {
    this._transformGridTexture && (this._transformGridTexture.dispose(), this._transformGridTexture = null), !e16 && this._colormapTexture && (this._colormapTexture.dispose(), this._colormapTexture = null, this._colormap = null, this._colormapTextureInvalidated = true), !e16 && this._rasterTexture && (this._rasterTexture.dispose(), this._rasterTexture = null, this._rasterTextureBandIds = null), this._processedTexture && (this._processedTexture.dispose(), this._processedTexture = null);
  }
};
function m2(e16) {
  return null != e16.source;
}

// node_modules/@arcgis/core/views/2d/engine/imagery/colorizer/utils.js
function i6(i13) {
  const n19 = [];
  return i13 && (n19.push("applyProjection"), 1 === i13.spacing[0] && n19.push("lookupProjection")), n19;
}
function n4(i13, n19, e16) {
  var _a;
  const t7 = !((_a = e16.capabilities.textureFloat) == null ? void 0 : _a.textureFloatLinear), u4 = [];
  return "cubic" === i13 ? u4.push("bicubic") : "bilinear" === i13 && (n19 ? (u4.push("bilinear"), u4.push("nnedge")) : t7 && u4.push("bilinear")), u4;
}

// node_modules/@arcgis/core/views/2d/engine/imagery/colorizer/lut.js
var s4 = { vsPath: "raster/common", fsPath: "raster/lut", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function a4(t7, e16, o13) {
  const a17 = o13 ? [] : i6(e16.transformGrid);
  return { defines: a17, program: t7.painter.materialManager.getProgram(s4, a17) };
}
function n5(r10, s15, a17, n19, m6 = false) {
  const { names: i13, textures: c4 } = a17.getTextures({ useProcessedTexture: m6 });
  O(r10.context, s15, i13, c4), E(s15, n19, a17.commonUniforms), s15.setUniformMatrix3fv("u_dvsMat3", a17.transforms.dvs);
  const { colormap: f5, colormapOffset: u4 } = a17.symbolizerParameters, d5 = p2(f5, u4);
  E(s15, n19, d5);
}
var m3 = { createProgram: a4, bindTextureAndUniforms: n5 };

// node_modules/@arcgis/core/views/2d/engine/imagery/colorizer/shadedrelief.js
var n6 = { vsPath: "raster/common", fsPath: "raster/hillshade", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function m4(o13, e16, s15) {
  const { colormap: a17 } = e16.symbolizerParameters, m6 = [...s15 ? [] : i6(e16.transformGrid), ...n4(e16.interpolation, null != a17, o13.context)];
  null != a17 && m6.push("applyColormap");
  return { defines: m6, program: o13.painter.materialManager.getProgram(n6, m6) };
}
function i7(r10, t7, n19, m6, i13 = false) {
  const { names: l4, textures: c4 } = n19.getTextures({ useProcessedTexture: i13 });
  O(r10.context, t7, l4, c4), E(t7, m6, n19.commonUniforms), t7.setUniformMatrix3fv("u_dvsMat3", n19.transforms.dvs);
  const f5 = n19.symbolizerParameters, { colormap: u4, colormapOffset: p6 } = f5;
  if (null != u4) {
    const r11 = p2(u4, p6);
    E(t7, m6, r11);
  }
  const d5 = T4(f5);
  E(t7, m6, d5);
}
var l3 = { createProgram: m4, bindTextureAndUniforms: i7 };

// node_modules/@arcgis/core/views/2d/engine/imagery/colorizer/stretch.js
var a5 = { vsPath: "raster/common", fsPath: "raster/stretch", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function m5(e16, o13, s15) {
  const { colormap: n19 } = o13.symbolizerParameters, m6 = [...s15 ? [] : i6(o13.transformGrid), ...n4(o13.interpolation, null != n19, e16.context)];
  o13.isRendereredSource && !s15 ? m6.push("noop") : null != n19 && m6.push("applyColormap");
  return { defines: m6, program: e16.painter.materialManager.getProgram(a5, m6) };
}
function i8(r10, t7, a17, m6, i13 = false) {
  const { names: c4, textures: l4 } = a17.getTextures({ useProcessedTexture: i13 });
  O(r10.context, t7, c4, l4), E(t7, m6, a17.commonUniforms), t7.setUniformMatrix3fv("u_dvsMat3", a17.transforms.dvs);
  const u4 = a17.symbolizerParameters, { colormap: p6, colormapOffset: f5 } = u4;
  if (null != p6) {
    const r11 = p2(p6, f5);
    E(t7, m6, r11);
  }
  const d5 = A(u4);
  E(t7, m6, d5);
}
var c3 = { createProgram: m5, bindTextureAndUniforms: i8 };

// node_modules/@arcgis/core/views/2d/engine/imagery/colorizer/rasterColorizer.js
var s5 = /* @__PURE__ */ new Map();
function o2(t7) {
  return s5.get(t7);
}
s5.set("lut", m3), s5.set("hillshade", l3), s5.set("stretch", c3);

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/utils.js
var t4 = [1, 1];
var n7 = [2, 0, 0, 0, 2, 0, -1, -1, 0];
function a6(t7, n19, a17) {
  const { context: r10, rasterFunction: s15, hasBranches: i13 } = t7, { raster: o13 } = s15.parameters, f5 = i13 ? (o13 == null ? void 0 : o13.id) ?? -1 : 0, m6 = a17.functionTextures[f5] ?? a17.rasterTexture;
  O(r10, n19, ["u_image"], [m6]);
}
function r5(t7, n19, r10) {
  const { rasters: s15 } = t7.rasterFunction.parameters;
  if (!s15)
    return;
  if (s15.length < 2)
    return a6(t7, n19, r10);
  const i13 = s15.filter((e16) => "Constant" !== e16.name).map((e16) => null != e16.id && "Identity" !== e16.name ? r10.functionTextures[e16.id] : r10.rasterTexture);
  if (O(t7.context, n19, ["u_image", "u_image1", "u_image2"].slice(0, i13.length), i13), i13.length !== s15.length) {
    if (2 === s15.length) {
      const e16 = s15.findIndex((e17) => "Constant" === e17.name), t8 = 0 === e16 ? [0, 1, 0, 1, 0, 0, 0, 0, 0] : [1, 0, 0, 0, 1, 0, 0, 0, 0], { value: a17 } = s15[e16].parameters;
      n19.setUniform1f("u_image1Const", a17), n19.setUniformMatrix3fv("u_imageSwap", t8);
    } else if (3 === s15.length) {
      const e16 = [];
      if (s15.forEach((t8, n20) => "Constant" === t8.name && e16.push(n20)), 1 === e16.length) {
        const { value: t8 } = s15[e16[0]].parameters;
        n19.setUniform1f("u_image1Const", t8);
        const a17 = 0 === e16[0] ? [0, 1, 0, 0, 0, 1, 1, 0, 0] : 1 === e16[0] ? [1, 0, 0, 0, 0, 1, 0, 1, 0] : [1, 0, 0, 0, 1, 0, 0, 0, 1];
        n19.setUniformMatrix3fv("u_imageSwap", a17);
      } else if (2 === e16.length) {
        const { value: t8 } = s15[e16[0]].parameters;
        n19.setUniform1f("u_image1Const", t8);
        const { value: a17 } = s15[e16[1]].parameters;
        n19.setUniform1f("u_image2Const", a17);
        const r11 = s15.findIndex((e17) => "Constant" !== e17.name), i14 = 0 === r11 ? [1, 0, 0, 0, 1, 0, 0, 0, 1] : 1 === r11 ? [0, 1, 0, 1, 0, 0, 0, 0, 1] : [0, 0, 1, 1, 0, 0, 0, 1, 0];
        n19.setUniformMatrix3fv("u_imageSwap", i14);
      }
    }
  }
}
function s6(e16) {
  e16.setUniform2fv("u_coordScale", t4), e16.setUniformMatrix3fv("u_dvsMat3", n7);
}

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/aspectProcessor.js
var e5 = { vsPath: "raster/rfx/vs", fsPath: "raster/rfx/aspect", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function a7(t7, r10) {
  return t7.painter.materialManager.getProgram(e5, []);
}
function o3(e16, a17, o13) {
  a6(e16, a17, o13), s6(a17);
  const { width: s15, height: i13, resolution: n19 } = o13;
  a17.setUniform2fv("u_srcImageSize", [s15, i13]), a17.setUniform2fv("u_cellSize", [n19, n19]);
}
var s7 = { createProgram: a7, bindTextureAndUniforms: o3 };

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/bandArithmeticProcessor.js
var a8 = { vsPath: "raster/rfx/vs", fsPath: "raster/rfx/bandarithmetic", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function e6(t7, r10) {
  const { painter: e16, rasterFunction: n19 } = t7, { indexType: s15 } = n19.parameters;
  return e16.materialManager.getProgram(a8, [s15]);
}
function n8(a17, e16, n19) {
  a6(a17, e16, n19), s6(e16);
  const { bandIndexMat3: s15 } = a17.rasterFunction.parameters;
  e16.setUniformMatrix3fv("u_bandIndexMat3", s15);
}
var s8 = { createProgram: e6, bindTextureAndUniforms: n8 };

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/compositeBandProcessor.js
var a9 = { vsPath: "raster/rfx/vs", fsPath: "raster/rfx/compositeband", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function e7(t7, r10) {
  return t7.painter.materialManager.getProgram(a9, []);
}
function o4(a17, e16, o13) {
  r5(a17, e16, o13), s6(e16);
}
var n9 = { createProgram: e7, bindTextureAndUniforms: o4 };

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/convolutionProcessor.js
var t5 = { vsPath: "raster/rfx/vs", fsPath: "raster/rfx/convolution", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function a10(e16, r10) {
  const { painter: a17, rasterFunction: n19 } = e16, { kernelRows: o13, kernelCols: s15 } = n19.parameters, i13 = [{ name: "rows", value: o13 }, { name: "cols", value: s15 }];
  return a17.materialManager.getProgram(t5, i13);
}
function n10(t7, a17, n19) {
  a6(t7, a17, n19), s6(a17), a17.setUniform2fv("u_srcImageSize", [n19.width, n19.height]);
  const { kernel: o13, clampRange: s15 } = t7.rasterFunction.parameters;
  a17.setUniform1fv("u_kernel", o13), a17.setUniform2fv("u_clampRange", s15);
}
var o5 = { createProgram: a10, bindTextureAndUniforms: n10 };

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/curvatureProcessor.js
var e8 = { vsPath: "raster/rfx/vs", fsPath: "raster/rfx/curvature", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function a11(r10, t7) {
  const { painter: a17, rasterFunction: o13 } = r10, { curvatureType: n19 } = o13.parameters, s15 = [n19];
  return a17.materialManager.getProgram(e8, s15);
}
function o6(e16, a17, o13) {
  a6(e16, a17, o13), s6(a17);
  const { width: n19, height: s15, resolution: i13 } = o13, { zFactor: u4 } = e16.rasterFunction.parameters;
  a17.setUniform2fv("u_srcImageSize", [n19, s15]), a17.setUniform1f("u_zlFactor", 200 * u4 / i13 / i13);
}
var n11 = { createProgram: a11, bindTextureAndUniforms: o6 };

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/extractBandProcessor.js
var a12 = { vsPath: "raster/rfx/vs", fsPath: "raster/rfx/extractband", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function e9(t7, r10) {
  return t7.painter.materialManager.getProgram(a12, []);
}
function n12(a17, e16, n19) {
  a6(a17, e16, n19), s6(e16);
  const { bandIndexMat3: o13 } = a17.rasterFunction.parameters;
  e16.setUniformMatrix3fv("u_bandIndexMat3", o13);
}
var o7 = { createProgram: e9, bindTextureAndUniforms: n12 };

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/localProcessor.js
var e10 = { vsPath: "raster/rfx/vs", fsPath: "raster/rfx/local", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
var o8 = /* @__PURE__ */ new Set(["sinh", "cosh", "tanh", "asinh", "acosh", "atanh"]);
function s9(t7) {
  const { painter: n19, rasterFunction: s15 } = t7, { imageCount: r10, operationName: i13, rasters: u4, isOutputRounded: c4 } = s15.parameters;
  let m6 = i13.toLowerCase();
  t7.context.type === n.WEBGL1 && o8.has(m6) && (m6 = `polyfill${m6}`);
  const p6 = [m6];
  2 === r10 && p6.push("twoImages");
  const h7 = u4.filter((t8) => "Constant" === t8.name);
  return h7.length && (p6.push("oneConstant"), 2 === h7.length && p6.push("twoConstant")), c4 && p6.push("roundOutput"), n19.materialManager.getProgram(e10, p6);
}
function r6(a17, e16, o13) {
  r5(a17, e16, o13), s6(e16);
  const { domainRange: s15 } = a17.rasterFunction.parameters;
  e16.setUniform2fv("u_domainRange", s15);
}
var i9 = { createProgram: s9, bindTextureAndUniforms: r6 };

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/maskProcessor.js
var r7 = { vsPath: "raster/rfx/vs", fsPath: "raster/rfx/mask", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function n13(t7, a17) {
  const { painter: n19, rasterFunction: e16 } = t7, s15 = e16.parameters.bandCount > 1 ? ["multiBand"] : [];
  return n19.materialManager.getProgram(r7, s15);
}
function e11(r10, n19, e16) {
  a6(r10, n19, e16), s6(n19);
  const { includedRanges: s15, noDataValues: o13 } = r10.rasterFunction.parameters;
  n19.setUniform1fv("u_includedRanges", s15), n19.setUniform1fv("u_noDataValues", o13);
}
var s10 = { createProgram: n13, bindTextureAndUniforms: e11 };

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/ndviProcessor.js
var a13 = { vsPath: "raster/rfx/vs", fsPath: "raster/rfx/ndvi", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function e12(t7, r10) {
  const { painter: e16, rasterFunction: n19 } = t7, s15 = n19.parameters.scaled ? ["scaled"] : [];
  return e16.materialManager.getProgram(a13, s15);
}
function n14(a17, e16, n19) {
  a6(a17, e16, n19), s6(e16);
  const { bandIndexMat3: s15 } = a17.rasterFunction.parameters;
  e16.setUniformMatrix3fv("u_bandIndexMat3", s15);
}
var s11 = { createProgram: e12, bindTextureAndUniforms: n14 };

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/remapProcessor.js
var r8 = { vsPath: "raster/rfx/vs", fsPath: "raster/rfx/remap", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function e13(a17, t7) {
  return a17.painter.materialManager.getProgram(r8, []);
}
function n15(r10, e16, n19) {
  a6(r10, e16, n19), s6(e16);
  const { noDataRanges: s15, rangeMaps: o13, allowUnmatched: f5, clampRange: i13 } = r10.rasterFunction.parameters;
  e16.setUniform1fv("u_noDataRanges", s15), e16.setUniform1fv("u_rangeMaps", o13), e16.setUniform1f("u_unmatchMask", f5 ? 1 : 0), e16.setUniform2fv("u_clampRange", i13);
}
var s12 = { createProgram: e13, bindTextureAndUniforms: n15 };

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/reprojectProcessor.js
var e14 = { vsPath: "raster/common", fsPath: "raster/reproject", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function i10(t7, r10) {
  var _a, _b, _c;
  const { painter: i13 } = t7, o13 = [], { interpolation: s15, transformGrid: n19 } = r10, a17 = !!((_b = (_a = t7.rasterFunction) == null ? void 0 : _a.parameters) == null ? void 0 : _b.requireBilinear), f5 = "bilinear" === s15 ? !((_c = t7.context.capabilities.textureFloat) == null ? void 0 : _c.textureFloatLinear) : a17;
  return "cubic" === s15 ? o13.push("bicubic") : f5 && o13.push("bilinear"), n19 && (o13.push("applyProjection"), 1 === n19.spacing[0] && o13.push("lookupProjection")), i13.materialManager.getProgram(e14, o13);
}
function o9(e16, i13, o13) {
  const { names: s15, textures: n19 } = o13.getTextures({ forProcessing: true });
  O(e16.context, i13, s15, n19), i13.setUniform1f("u_scale", 1), i13.setUniform2fv("u_offset", [0, 0]), i13.setUniform2fv("u_coordScale", [1, 1]), i13.setUniformMatrix3fv("u_dvsMat3", [2, 0, 0, 0, 2, 0, -1, -1, 0]), i13.setUniform1i("u_flipY", 0), i13.setUniform1f("u_opacity", 1);
  const { width: a17, height: f5, source: c4, transformGrid: u4 } = o13;
  i13.setUniform2fv("u_srcImageSize", [c4.width, c4.height]), i13.setUniform2fv("u_targetImageSize", [a17, f5]), i13.setUniform2fv("u_transformSpacing", u4 ? u4.spacing : f), i13.setUniform2fv("u_transformGridSize", u4 ? u4.size : f);
}
var s13 = { createProgram: i10, bindTextureAndUniforms: o9 };

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/slopeProcessor.js
var t6 = { vsPath: "raster/rfx/vs", fsPath: "raster/rfx/slope", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function o10(e16, r10) {
  const { painter: o13, rasterFunction: i13 } = e16, { slopeType: s15 } = i13.parameters, a17 = "percent-rise" === s15 ? ["percentRise"] : [];
  return o13.materialManager.getProgram(t6, a17);
}
function i11(t7, o13, i13) {
  a6(t7, o13, i13), s6(o13);
  const { width: s15, height: a17, resolution: n19 } = i13, { zFactor: c4, slopeType: f5, pixelSizePower: p6, pixelSizeFactor: u4 } = t7.rasterFunction.parameters;
  o13.setUniform2fv("u_srcImageSize", [s15, a17]), o13.setUniform2fv("u_cellSize", [n19, n19]), o13.setUniform1f("u_zFactor", c4), o13.setUniform1f("u_pixelSizePower", "adjusted" === f5 ? p6 : 0), o13.setUniform1f("u_pixelSizeFactor", "adjusted" === f5 ? u4 : 0);
}
var s14 = { createProgram: o10, bindTextureAndUniforms: i11 };

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/stretchProcessor.js
var a14 = { vsPath: "raster/rfx/vs", fsPath: "raster/rfx/stretch", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function u3(t7, r10) {
  const { useGamma: u4, bandCount: e16, isOutputRounded: n19 } = t7.rasterFunction.parameters, o13 = [];
  return u4 && o13.push("useGamma"), e16 > 1 && o13.push("multiBand"), n19 && o13.push("roundOutput"), t7.painter.materialManager.getProgram(a14, o13);
}
function e15(a17, u4, e16) {
  a6(a17, u4, e16), s6(u4);
  const { width: n19, height: o13 } = e16, m6 = a17.rasterFunction.parameters;
  u4.setUniform2fv("u_srcImageSize", [n19, o13]), u4.setUniform1f("u_minOutput", m6.outMin), u4.setUniform1f("u_maxOutput", m6.outMax), u4.setUniform1fv("u_factor", m6.factor), u4.setUniform1fv("u_minCutOff", m6.minCutOff), u4.setUniform1fv("u_maxCutOff", m6.maxCutOff), u4.setUniform1fv("u_gamma", m6.gamma), u4.setUniform1fv("u_gammaCorrection", m6.gammaCorrection);
}
var n16 = { createProgram: u3, bindTextureAndUniforms: e15 };

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/rasterProcessor.js
var T5 = /* @__PURE__ */ new Map();
function g3(r10, e16, o13) {
  const t7 = new e4();
  return t7.width = e16, t7.height = o13, t7.internalFormat = r10.type === n.WEBGL2 ? P.RGBA32F : G.RGBA, t7.samplingMode = L.NEAREST, t7.dataType = U2.FLOAT, t7.isImmutable = r10.type === n.WEBGL2, t7.wrapMode = D.CLAMP_TO_EDGE, t7;
}
function A2(r10, e16, o13, t7) {
  const { context: s15, requestRender: n19, allowDelayedRender: c4 } = r10, i13 = t7.createProgram(r10, o13);
  if (c4 && null != n19 && !i13.compiled)
    return n19(), null;
  const { width: m6, height: a17 } = o13;
  return s15.bindFramebuffer(e16), s15.setViewport(0, 0, m6, a17), s15.useProgram(i13), i13;
}
function B(r10) {
  return T5.get(r10.toLowerCase());
}
function v(r10, e16, o13, t7) {
  const s15 = r10.rasterFunction.name.toLowerCase(), n19 = "reproject" === s15 ? s13 : B(s15);
  if (null == n19)
    return;
  const c4 = A2(r10, o13, t7, n19);
  if (!c4)
    return;
  n19.bindTextureAndUniforms(r10, c4, t7), e16.draw();
  const { width: i13, height: m6 } = t7, a17 = g3(r10.context, i13, m6), u4 = new T3(r10.context, a17);
  if (o13.copyToTexture(0, 0, i13, m6, 0, 0, u4), "reproject" === s15)
    t7.rasterTexture = u4, t7.projected = true;
  else {
    const e17 = r10.hasBranches ? r10.rasterFunction.id : 0;
    t7.functionTextures[e17] = u4;
  }
}
T5.set("aspect", s7), T5.set("bandarithmetic", s8), T5.set("compositeband", n9), T5.set("convolution", o5), T5.set("curvature", n11), T5.set("extractband", o7), T5.set("local", i9), T5.set("mask", s10), T5.set("ndvi", s11), T5.set("remap", s12), T5.set("slope", s14), T5.set("stretch", n16);

// node_modules/@arcgis/core/views/2d/engine/imagery/BrushRasterBitmap.js
var p4 = class extends t3 {
  constructor() {
    super(...arguments), this.name = "raster", this._quad = null, this._rendererUniformInfos = /* @__PURE__ */ new Map(), this._fbo = null;
  }
  dispose() {
    t(this._quad), t(this._fbo);
  }
  prepareState(e16) {
    const { context: t7, renderPass: r10 } = e16, s15 = "raster" === r10;
    t7.setBlendingEnabled(!s15), t7.setBlendFunctionSeparate(R.ONE, R.ONE_MINUS_SRC_ALPHA, R.ONE, R.ONE_MINUS_SRC_ALPHA), t7.setColorMask(true, true, true, true), t7.setStencilWriteMask(0), t7.setStencilTestEnabled(!s15);
  }
  draw(e16, r10) {
    if (!m2(r10) || r10.suspended)
      return;
    const { renderPass: s15 } = e16;
    if ("raster-bitmap" !== s15)
      return "raster" === s15 ? this._process(e16, r10) : void this._drawBitmap(e16, r10, true);
    this._drawBitmap(e16, r10);
  }
  _process(t7, r10) {
    const { rasterFunction: i13 } = t7, o13 = "Reproject" === i13.name;
    if (!(o13 ? !(r10.rasterTexture && r10.projected) : !r10.processed))
      return;
    const { timeline: n19, context: a17 } = t7;
    n19.begin(this.name);
    const d5 = a17.getBoundFramebufferObject(), c4 = a17.getViewport();
    o13 || (r10.processedTexture = t(r10.processedTexture)), a17.setStencilFunction(I.EQUAL, r10.stencilRef, 255), r10.updateTexture(t7), this._initQuad(a17);
    const { isStandardRasterTileSize: f5, fbo: u4 } = this._getRasterFBO(a17, r10.width, r10.height);
    v(t7, this._quad, u4, r10), f5 || u4.dispose(), a17.bindFramebuffer(d5), a17.setViewport(c4.x, c4.y, c4.width, c4.height), n19.end(this.name);
  }
  _drawBitmap(e16, t7, s15 = false) {
    const { timeline: i13, context: o13 } = e16;
    if (i13.begin(this.name), o13.setStencilFunction(I.EQUAL, t7.stencilRef, 255), t7.updateTexture(e16), s15 && !t7.processedTexture) {
      if (t7.updateProcessedTexture(), !t7.processedTexture)
        return void i13.end(this.name);
      t7.processed = true;
    }
    this._initBitmapCommonUniforms(t7);
    const a17 = t7.symbolizerParameters.type, d5 = o2(a17), { requestRender: c4, allowDelayedRender: f5 } = e16, { defines: u4, program: h7 } = d5.createProgram(e16, t7, s15);
    if (f5 && null != c4 && !h7.compiled)
      return void c4();
    o13.useProgram(h7);
    const p6 = this._getUniformInfos(a17, o13, h7, u4);
    this._quad || (this._quad = new n3(o13, [0, 0, 1, 0, 0, 1, 1, 1])), d5.bindTextureAndUniforms(e16, h7, t7, p6, s15), this._quad.draw(), i13.end(this.name);
  }
  _initBitmapCommonUniforms(e16) {
    if (!e16.commonUniforms) {
      const t7 = g2(1, [0, 0]), { transformGrid: r10, width: s15, height: i13 } = e16, o13 = _(r10, [s15, i13], [e16.source.width, e16.source.height], 1, false);
      e16.commonUniforms = { ...t7, ...o13, u_coordScale: e16.coordScale };
    }
  }
  _getRasterFBO(e16, t7, r10) {
    const s15 = t7 === c || r10 === c;
    return s15 ? (this._fbo || (this._fbo = this._createNewFBO(e16, t7, r10)), { isStandardRasterTileSize: s15, fbo: this._fbo }) : { isStandardRasterTileSize: s15, fbo: this._createNewFBO(e16, t7, r10) };
  }
  _createNewFBO(e16, t7, r10) {
    const s15 = g3(e16, t7, r10);
    return new x2(e16, s15);
  }
  _initQuad(e16) {
    this._quad || (this._quad = new n3(e16, [0, 0, 1, 0, 0, 1, 1, 1]));
  }
  _getUniformInfos(e16, t7, r10, s15) {
    const i13 = s15.length > 0 ? e16 + "-" + s15.join("-") : e16;
    if (this._rendererUniformInfos.has(i13))
      return this._rendererUniformInfos.get(i13);
    const o13 = h6(t7, r10);
    return this._rendererUniformInfos.set(i13, o13), o13;
  }
};

// node_modules/@arcgis/core/views/2d/engine/imagery/RasterTile.js
var i12 = class extends r3 {
  constructor(t7, e16, i13, a17, r10, n19, l4 = null) {
    super(t7, e16, i13, a17, r10, n19), this.bitmap = null, this.bitmap = new x3(l4, null, null), this.bitmap.coordScale = [r10, n19], this.bitmap.once("isReady", () => this.ready());
  }
  destroy() {
    super.destroy(), this.bitmap.destroy(), this.bitmap = null, this.stage = null;
  }
  set stencilRef(t7) {
    this.bitmap.stencilRef = t7;
  }
  get stencilRef() {
    return this.bitmap.stencilRef;
  }
  setTransform(t7) {
    super.setTransform(t7), this.bitmap.transforms.dvs = this.transforms.dvs;
  }
  _createTransforms() {
    return { dvs: e3(), tileMat3: e3() };
  }
  onAttach() {
    this.bitmap.stage = this.stage;
  }
  onDetach() {
    this.bitmap.stage = null;
  }
};

// node_modules/@arcgis/core/views/2d/engine/imagery/RasterTileContainer.js
var o11 = class extends i5 {
  constructor() {
    super(...arguments), this.isCustomTilingScheme = false;
  }
  createTile(e16) {
    const r10 = this._getTileBounds(e16), [s15, i13] = this._tileInfoView.tileInfo.size, n19 = this._tileInfoView.getTileResolution(e16.level);
    return new i12(e16, n19, r10[0], r10[3], s15, i13);
  }
  prepareRenderPasses(e16) {
    const r10 = e16.registerRenderPass({ name: "imagery (tile)", brushes: [p4], target: () => this.children.map((e17) => e17.bitmap), drawPhase: T.MAP });
    return [...super.prepareRenderPasses(e16), r10];
  }
  doRender(e16) {
    if (!this.visible || e16.drawPhase !== T.MAP)
      return;
    const { rasterFunctionChain: r10 } = this;
    if (!r10)
      return e16.renderPass = "raster-bitmap", void super.doRender(e16);
    const [s15, t7] = this._tileInfoView.tileInfo.size;
    if (e16.renderPass = "raster", e16.rasterFunction = { name: "Reproject", parameters: { targetImageSize: [s15, t7], requireBilinear: r10.hasSurfaceFunction }, pixelType: "f32", id: 0, isNoopProcess: false }, super.doRender(e16), r10 == null ? void 0 : r10.functions.length) {
      const { functions: s16, hasBranches: t8 } = r10;
      for (let r11 = 0; r11 < s16.length; r11++) {
        const i13 = s16[r11];
        "Constant" !== i13.name && "Identity" !== i13.name && (e16.renderPass = "raster", e16.rasterFunction = i13, e16.hasBranches = t8, super.doRender(e16));
      }
    }
    e16.rasterFunction = null, e16.renderPass = "bitmap", super.doRender(e16);
  }
  _getTileBounds(s15) {
    const t7 = this._tileInfoView.getTileBounds(i(), s15);
    if (this.isCustomTilingScheme && s15.world) {
      const { tileInfo: e16 } = this._tileInfoView, i13 = ut(e16.spatialReference);
      if (i13) {
        const r10 = e16.lodAt(s15.level);
        if (!r10)
          return t7;
        const { resolution: n19 } = r10, o13 = i13 / n19 % e16.size[0], a17 = o13 ? (e16.size[0] - o13) * n19 : 0;
        t7[0] -= a17 * s15.world, t7[2] -= a17 * s15.world;
      }
    }
    return t7;
  }
};

// node_modules/@arcgis/core/views/2d/layers/imagery/BaseImageryTileSubView2D.js
var R2 = [0, 0];
var S2 = class extends d2 {
  constructor() {
    super(...arguments), this._emptyTilePixelBlock = null, this._tileStrategy = null, this._tileInfoView = null, this._fetchQueue = null, this._blockCacheRegistryUrl = null, this._blockCacheRegistryId = null, this._srcResolutions = [], this.previousLOD = null, this._needBlockCacheUpdate = false, this._globalSymbolizerParams = null, this._symbolizerParams = null, this._abortController = null, this._isCustomTilingScheme = false, this._maxIndexedColormapSize = 0, this._rasterFunctionState = "na", this._globalUpdateRequested = false, this.attached = false, this.timeExtent = null, this.redrawOrRefetch = k(async (e16 = {}) => {
      if (!this.previousLOD || this.layerView.suspended)
        return;
      const t7 = this._rasterFunctionState;
      e16.reprocess && (await this.updatingHandles.addPromise(this.layer.updateRasterFunction()), this.updateRasterFunctionParameters());
      const i13 = this._rasterFunctionState, { type: s15 } = this;
      return e16.refetch || "raster" !== s15 && !!e16.reprocess || "cpu" === i13 || "cpu" === t7 ? this.updatingHandles.addPromise(this.doRefresh()) : this.updatingHandles.addPromise(this._redrawImage(e16.signal));
    });
  }
  get useWebGLForProcessing() {
    return this._get("useWebGLForProcessing") ?? true;
  }
  set useWebGLForProcessing(e16) {
    this._set("useWebGLForProcessing", e16);
  }
  get useProgressiveUpdate() {
    return this._get("useProgressiveUpdate") ?? true;
  }
  set useProgressiveUpdate(e16) {
    if (this._tileStrategy && this.useProgressiveUpdate !== e16) {
      this._tileStrategy.destroy(), this.container.removeAllChildren();
      const t7 = this._getCacheSize(e16);
      this._tileStrategy = new r2({ cachePolicy: "purge", acquireTile: (e17) => this.acquireTile(e17), releaseTile: (e17) => this.releaseTile(e17), cacheSize: t7, tileInfoView: this._tileInfoView }), this._set("useProgressiveUpdate", e16), this.layerView.requestUpdate();
    }
  }
  update(e16) {
    var _a;
    this._fetchQueue.pause(), this._fetchQueue.state = e16.state, this._tileStrategy.update(e16), this._fetchQueue.resume();
    const { extent: t7, resolution: i13, scale: s15 } = e16.state, r10 = this._tileInfoView.getClosestInfoForScale(s15);
    if (this.layer.raster) {
      if (!this.useProgressiveUpdate || this._needBlockCacheUpdate) {
        const e17 = this._srcResolutions[r10.level], s16 = t7.toJSON ? t7 : M.fromJSON(t7);
        g(this._blockCacheRegistryUrl, this._blockCacheRegistryId, s16, i13, e17, this.layer.raster.ioConfig.sampling);
      }
      this._needBlockCacheUpdate = false, ((_a = this.previousLOD) == null ? void 0 : _a.level) !== r10.level && (this.previousLOD = r10, null == this._symbolizerParams || this.layerView.hasTilingEffects || this._updateSymbolizerParams(), this._tileStrategy.updateCacheSize(0));
    }
  }
  moveEnd() {
    !this.layerView.hasTilingEffects && this.useProgressiveUpdate || (this._abortController && this._abortController.abort(), this._abortController = new AbortController(), 0 === this._fetchQueue.length && this._redrawImage(this._abortController.signal).then(() => {
      this._globalUpdateRequested = false, this.layerView.requestUpdate();
    }));
    const e16 = this._getCacheSize(this.useProgressiveUpdate);
    this._tileStrategy.updateCacheSize(e16), this.layerView.requestUpdate();
  }
  get updating() {
    var _a;
    return ((_a = this._fetchQueue) == null ? void 0 : _a.updating) || this._globalUpdateRequested || !(!this.updatingHandles || !this.updatingHandles.updating);
  }
  attach() {
    const e16 = n2("2d");
    this._maxIndexedColormapSize = 4 * (e16.maxTextureSize || 4096), e16.supportsTextureFloat || (this.useWebGLForProcessing = false), this._initializeTileInfo(), this._tileInfoView = new h3(this.layerView.tileInfo, this.layerView.fullExtent);
    const t7 = this._computeFetchConcurrency();
    this._fetchQueue = new y2({ tileInfoView: this._tileInfoView, concurrency: t7, process: (e17, t8) => this._fetchTile1(e17, t8) });
    const i13 = this._getCacheSize(this.useProgressiveUpdate);
    this._tileStrategy = new r2({ cachePolicy: "purge", acquireTile: (e17) => this.acquireTile(e17), releaseTile: (e17) => this.releaseTile(e17), cacheSize: i13, tileInfoView: this._tileInfoView }), this._updateBlockCacheRegistry();
  }
  detach() {
    this._tileStrategy.destroy(), this._fetchQueue.clear(), this.container.removeAllChildren(), this._fetchQueue = this._tileStrategy = this._tileInfoView = null, a2(this._blockCacheRegistryUrl, this._blockCacheRegistryId), this._blockCacheRegistryUrl = this._blockCacheRegistryId = null;
  }
  acquireTile(e16) {
    const t7 = this.container.createTile(e16);
    return this._enqueueTileFetch(t7), this.layerView.requestUpdate(), this._needBlockCacheUpdate = true, this._globalUpdateRequested = this.layerView.hasTilingEffects || !this.useProgressiveUpdate, t7;
  }
  releaseTile(e16) {
    this._fetchQueue.abort(e16.key.id), this.container.removeChild(e16), e16.once("detach", () => {
      e16.destroy(), this.layerView.requestUpdate();
    }), this.layerView.requestUpdate();
  }
  createEmptyTilePixelBlock(e16 = null) {
    const t7 = null == e16 || e16.join(",") === this._tileInfoView.tileInfo.size.join(",");
    if (t7 && null != this._emptyTilePixelBlock)
      return this._emptyTilePixelBlock;
    e16 = e16 || this._tileInfoView.tileInfo.size;
    const [i13, s15] = e16, r10 = new u({ width: i13, height: s15, pixels: [new Uint8Array(i13 * s15)], mask: new Uint8Array(i13 * s15), pixelType: "u8" });
    return t7 && (this._emptyTilePixelBlock = r10), r10;
  }
  _getBandIds() {
    if (!("rasterFunctionChain" in this.container) || !this.container.rasterFunctionChain)
      return this.layer.bandIds;
    const { bandIds: e16, raster: t7 } = this.layer, i13 = "rasterFunction" in t7 ? t7.rasterFunction.rawInputBandIds : null;
    return (e16 == null ? void 0 : e16.length) && (i13 == null ? void 0 : i13.length) && 1 !== t7.rasterInfo.bandCount ? e16.map((e17) => i13[Math.min(e17, i13.length - 1)]) : e16 || i13;
  }
  updateRasterFunctionParameters() {
  }
  _fetchTile1(e16, t7) {
    const i13 = null != t7 ? t7.signal : null, s15 = this.canUseWebGLForProcessing(), { layerView: r10 } = this, { tileInfo: a17 } = r10, o13 = !a17.isWrappable && null != K(r10.view.spatialReference), l4 = s15 && this.layer.raster.hasUniqueSourceStorageInfo, n19 = { allowPartialFill: true, datumTransformation: r10.datumTransformation, interpolation: s15 ? "nearest" : this.layer.interpolation, registryId: this._blockCacheRegistryId, requestRawData: l4, skipRasterFunction: "raster" === this.type && null != this.container.rasterFunctionChain, signal: i13, srcResolution: this._srcResolutions[e16.level], timeExtent: r10.timeExtent, tileInfo: a17, disableWrapAround: o13 };
    return this.fetchTile(e16, n19);
  }
  _getCacheSize(e16) {
    return e16 ? 40 : 0;
  }
  _initializeTileInfo() {
    const { layerView: e16 } = this, t7 = e16.view.spatialReference;
    if (this._canUseLayerLODs()) {
      const { origin: i14, lods: s16 } = this.layer.tileInfo, r11 = s16.map(({ scale: e17 }) => e17), a18 = j2.create({ spatialReference: t7, size: c, scales: r11, origin: i14 });
      return e16.set("tileInfo", a18), void (this._srcResolutions = s16.map(({ resolution: e17 }) => ({ x: e17, y: e17 })));
    }
    const i13 = e2(this.layer.rasterInfo), { scales: s15, srcResolutions: r10, isCustomTilingScheme: a17 } = oe(this.layer.rasterInfo, t7, { tileSize: c, alignGlobalDatasetWithAGOL: true, limitToSrcResolution: i13 }), o13 = j2.create({ spatialReference: t7, size: c, scales: s15 }), l4 = new x({ x: e16.fullExtent.xmin, y: e16.fullExtent.ymax, spatialReference: t7 });
    (0 === o13.origin.x || o13.origin.x > l4.x) && (o13.origin = l4), this._isCustomTilingScheme = a17, e16.set("tileInfo", o13), this._srcResolutions = r10 ?? [];
  }
  _canUseLayerLODs() {
    var _a;
    const { layer: e16, layerView: t7 } = this;
    if ("Map" !== e16.raster.tileType)
      return false;
    const { lods: i13 } = e16.tileInfo, s15 = (_a = t7.view.constraints) == null ? void 0 : _a.effectiveLODs;
    return (s15 == null ? void 0 : s15.length) === i13.length && s15.every(({ scale: e17 }, t8) => Math.abs(e17 - i13[t8].scale) < 1e-3);
  }
  _computeFetchConcurrency() {
    const { blockBoundary: e16 } = this.layer.rasterInfo.storageInfo, t7 = e16[e16.length - 1];
    return (t7.maxCol - t7.minCol + 1) * (t7.maxRow - t7.minRow + 1) > 64 ? 2 : 10;
  }
  async _enqueueTileFetch(e16, t7) {
    this.updatingHandles.addPromise(this._enqueueTileFetch1(e16, t7));
  }
  async _enqueueTileFetch1(e16, t7) {
    var _a;
    if (!this._fetchQueue.has(e16.key.id)) {
      try {
        const t8 = await this._fetchQueue.push(e16.key), a17 = this._getBandIds();
        let o13 = !this.useProgressiveUpdate || this.layerView.hasTilingEffects && !this._globalSymbolizerParams;
        if (this._globalUpdateRequested && !this.layerView.moving && 0 === this._fetchQueue.length) {
          o13 = false;
          try {
            await this._redrawImage((_a = this._abortController) == null ? void 0 : _a.signal);
          } catch (s15) {
            d(s15) && s.getLogger(this).error(s15);
          }
          this._globalUpdateRequested = false;
        }
        !this.canUseWebGLForProcessing() && "rasterVF" !== this.type || this.layerView.hasTilingEffects || null != this._symbolizerParams || this._updateSymbolizerParams();
        const l4 = this._tileInfoView.getTileCoords(R2, e16.key), n19 = this._tileInfoView.getTileResolution(e16.key);
        await this.updateTileSource(e16, { source: t8, symbolizerParams: this._symbolizerParams, globalSymbolizerParams: this._globalSymbolizerParams, suspended: o13, bandIds: a17, coords: l4, resolution: n19 }), e16.once("attach", () => this.layerView.requestUpdate()), this.container.addChild(e16);
      } catch (s15) {
        d(s15) || s.getLogger(this).error(s15);
      }
      this.layerView.requestUpdate();
    }
  }
  async _redrawImage(e16) {
    if (0 === this.container.children.length)
      return;
    await this.layer.updateRenderer(), this.layerView.hasTilingEffects ? await this._updateGlobalSymbolizerParams(e16) : (this._updateSymbolizerParams(), this._globalSymbolizerParams = null);
    const t7 = this.container.children.map(async (e17) => this.updateTileSymbolizerParameters(e17, { local: this._symbolizerParams, global: this._globalSymbolizerParams }));
    await j(t7), this.container.requestRender();
  }
  async _updateGlobalSymbolizerParams(e16) {
    const t7 = { srcResolution: this._srcResolutions[this.previousLOD.level], registryId: this._blockCacheRegistryId, signal: e16 }, i13 = await this.layer.fetchPixels(this.layerView.view.extent, this.layerView.view.width, this.layerView.view.height, t7);
    if (!i13 || !i13.pixelBlock)
      return;
    const { resolution: s15 } = this.previousLOD, r10 = this._getBandIds(), a17 = this.layer.symbolizer.generateWebGLParameters({ pixelBlock: i13.pixelBlock.extractBands(r10), isGCS: this.layerView.view.spatialReference.isGeographic, resolution: { x: s15, y: s15 }, bandIds: r10 });
    !this.canUseWebGLForProcessing() && a17 && "stretch" === a17.type && this.layer.renderer && "raster-stretch" === this.layer.renderer.type && (a17.factor = a17.factor.map((e17) => 255 * e17), a17.outMin = Math.round(255 * a17.outMin), a17.outMax = Math.round(255 * a17.outMax)), this._globalSymbolizerParams = a17;
  }
  _updateSymbolizerParams() {
    const { resolution: e16 } = this.previousLOD, t7 = this._getBandIds();
    this._symbolizerParams = this.layer.symbolizer.generateWebGLParameters({ pixelBlock: null, isGCS: this.layerView.view.spatialReference.isGeographic, resolution: { x: e16, y: e16 }, bandIds: t7 });
  }
  _updateBlockCacheRegistry(e16 = false) {
    const { layer: t7, layerView: i13 } = this, { url: s15, raster: r10 } = t7, { multidimensionalDefinition: a17 } = t7.normalizeRasterFetchOptions({ multidimensionalDefinition: t7.multidimensionalDefinition, timeExtent: i13.timeExtent }), o13 = r10.rasterInfo.multidimensionalInfo ? r10.getSliceIndex(a17) : null, l4 = i3(s15, o13);
    if (l4 !== this._blockCacheRegistryUrl) {
      if (null != this._blockCacheRegistryUrl && a2(this._blockCacheRegistryUrl, this._blockCacheRegistryId), this._blockCacheRegistryId = u2(l4, r10.rasterInfo), e16) {
        const { view: e17 } = i13, t8 = this._tileInfoView.getClosestInfoForScale(e17.scale), s16 = this._srcResolutions[t8.level];
        g(l4, this._blockCacheRegistryId, e17.extent, e17.resolution, s16, r10.ioConfig.sampling);
      }
      this._blockCacheRegistryUrl = l4;
    }
  }
  async doRefresh() {
    if (!this.attached)
      return;
    await this.layer.updateRenderer(), this.layerView.hasTilingEffects || this._updateSymbolizerParams(), this._updateBlockCacheRegistry(true), this._fetchQueue.reset();
    const e16 = [];
    this._globalUpdateRequested = this.layerView.hasTilingEffects || !this.useProgressiveUpdate, this._tileStrategy.refresh((t7) => e16.push(this._enqueueTileFetch(t7))), await j(e16);
  }
};
e([y()], S2.prototype, "_fetchQueue", void 0), e([y()], S2.prototype, "_globalUpdateRequested", void 0), e([y()], S2.prototype, "attached", void 0), e([y()], S2.prototype, "container", void 0), e([y()], S2.prototype, "layer", void 0), e([y()], S2.prototype, "layerView", void 0), e([y()], S2.prototype, "type", void 0), e([y()], S2.prototype, "useWebGLForProcessing", null), e([y()], S2.prototype, "useProgressiveUpdate", null), e([y()], S2.prototype, "timeExtent", void 0), e([y()], S2.prototype, "updating", null), S2 = e([a("esri.views.2d.layers.imagery.BaseImageryTileSubView2D")], S2);

// node_modules/@arcgis/core/views/2d/layers/imagery/ImageryTileView2D.js
var n17 = class extends S2 {
  constructor() {
    super(...arguments), this.type = "raster";
  }
  attach() {
    super.attach(), this.container = new o11(this._tileInfoView), this.container.isCustomTilingScheme = this._isCustomTilingScheme, this.updateRasterFunctionParameters();
  }
  detach() {
    super.detach(), this.container.removeAllChildren(), this.container = null;
  }
  canUseWebGLForProcessing() {
    var _a, _b;
    const { symbolizer: e16 } = this.layer, r10 = (_b = (_a = e16.lookup) == null ? void 0 : _a.colormapLut) == null ? void 0 : _b.indexedColormap, t7 = r10 && r10.length > this._maxIndexedColormapSize;
    return this.useWebGLForProcessing && e16.canRenderInWebGL && !t7 && !("majority" === this.layer.interpolation && r4(this.layer));
  }
  fetchTile(e16, r10) {
    return this.layer.fetchTile(e16.level, e16.row, e16.col, r10);
  }
  updateRasterFunctionParameters() {
    const { raster: e16, type: r10 } = this.layer, { container: t7 } = this;
    if ("Function" !== e16.datasetFormat || "wcs" === r10)
      return t7.rasterFunctionChain = null, t7.children.forEach((e17) => {
        const { bitmap: r11 } = e17;
        r11 && (r11.suspended = true, r11.processed = false, r11.projected && (r11.invalidateTexture(), r11.rasterTexture = null));
      }), void (this._rasterFunctionState = "na");
    const s15 = this._rasterFunctionState, { rasterFunction: i13, primaryRasters: o13 } = e16, n19 = i13.supportsGPU && (!o13 || o13.rasters.length <= 1), a17 = n19 ? i13.flatWebGLFunctionChain : null, { renderer: l4 } = this.layer, c4 = !n19 || !(a17 == null ? void 0 : a17.functions.length) || "raster-stretch" === (l4 == null ? void 0 : l4.type) && l4.dynamicRangeAdjustment || !this.canUseWebGLForProcessing();
    t7.rasterFunctionChain = c4 ? null : a17;
    const u4 = null == i13 ? "na" : t7.rasterFunctionChain ? "gpu" : "cpu";
    t7.children.forEach((e17) => {
      const { bitmap: r11 } = e17;
      r11 && (r11.suspended = s15 !== u4, r11.processed = false, r11.processedTexture = null);
    }), this._rasterFunctionState = u4;
  }
  async updateTileSource(e16, r10) {
    const t7 = this._getBandIds(), s15 = this._getLayerInterpolation(), i13 = this.canUseWebGLForProcessing(), { source: o13, globalSymbolizerParams: n19, suspended: a17, coords: l4, resolution: c4 } = r10, u4 = this.layerView.hasTilingEffects ? n19 : r10.symbolizerParams, { bitmap: p6 } = e16;
    if ([p6.x, p6.y] = l4, p6.resolution = c4, o13 && null != o13 && null != o13.pixelBlock) {
      const e17 = { extent: o13.extent, pixelBlock: o13.pixelBlock };
      if (p6.rawPixelData = e17, i13)
        p6.source = o13.pixelBlock, p6.isRendereredSource = false;
      else {
        const r11 = await this.layer.applyRenderer(e17, "stretch" === (n19 == null ? void 0 : n19.type) ? n19 : void 0);
        p6.source = r11, p6.isRendereredSource = true;
      }
      p6.symbolizerParameters = i13 ? u4 : null, i13 ? p6.transformGrid || (p6.transformGrid = o13.transformGrid) : p6.transformGrid = null;
    } else {
      const e17 = this.createEmptyTilePixelBlock();
      p6.source = e17, p6.symbolizerParameters = i13 ? u4 : null, p6.transformGrid = null;
    }
    p6.bandIds = i13 ? t7 : null, p6.width = this._tileInfoView.tileInfo.size[0], p6.height = this._tileInfoView.tileInfo.size[1], p6.interpolation = s15, p6.suspended = a17, p6.invalidateTexture();
  }
  async updateTileSymbolizerParameters(e16, r10) {
    const { local: t7, global: s15 } = r10, i13 = this._getBandIds(), o13 = this._getLayerInterpolation(), n19 = this.canUseWebGLForProcessing(), { bitmap: a17 } = e16, { rawPixelData: l4 } = a17;
    n19 || null == l4 ? (a17.isRendereredSource && null != l4 && (a17.source = l4.pixelBlock), a17.isRendereredSource = false) : (a17.source = await this.layer.applyRenderer(l4, "stretch" === (s15 == null ? void 0 : s15.type) ? s15 : void 0), a17.isRendereredSource = true), a17.symbolizerParameters = n19 ? this.layerView.hasTilingEffects ? s15 : t7 : null, a17.bandIds = n19 ? i13 : null, a17.interpolation = o13, a17.suspended = false;
  }
  _getLayerInterpolation() {
    const { interpolation: e16, renderer: r10 } = this.layer;
    if (!r10)
      return e16;
    const t7 = r10.type;
    return "raster-colormap" === t7 || "unique-value" === t7 || "class-breaks" === t7 ? "nearest" : "raster-stretch" === r10.type && null != r10.colorRamp ? "bilinear" === e16 || "cubic" === e16 ? "bilinear" : "nearest" : e16;
  }
};
e([y()], n17.prototype, "container", void 0), e([y()], n17.prototype, "layer", void 0), e([y()], n17.prototype, "type", void 0), n17 = e([a("esri.views.2d.layers.imagery.ImageryTileView2D")], n17);
var a15 = n17;

// node_modules/@arcgis/core/views/2d/engine/imagery/RasterVFTile.js
var r9 = class extends r3 {
  constructor(t7, s15, e16, a17, r10, o13, l4 = null) {
    super(t7, s15, e16, a17, r10, o13), this.tileData = new f3(l4), this.tileData.coordScale = [r10, o13], this.tileData.once("isReady", () => this.ready());
  }
  destroy() {
    super.destroy(), this.tileData.destroy(), this.tileData = null, this.stage = null;
  }
  set stencilRef(t7) {
    this.tileData.stencilRef = t7;
  }
  get stencilRef() {
    return this.tileData.stencilRef;
  }
  _createTransforms() {
    return { dvs: e3(), tileMat3: e3() };
  }
  setTransform(e16) {
    super.setTransform(e16);
    const i13 = this.resolution / (e16.resolution * e16.pixelRatio), a17 = this.transforms.tileMat3, [r10, o13] = this.tileData.offset, l4 = [this.x + r10 * this.resolution, this.y - o13 * this.resolution], [h7, n19] = e16.toScreenNoRotation([0, 0], l4), { symbolTileSize: f5 } = this.tileData.symbolizerParameters, m6 = Math.round((this.width - this.tileData.offset[0]) / f5) * f5, c4 = Math.round((this.height - this.tileData.offset[1]) / f5) * f5, u4 = m6 / this.rangeX * i13, D2 = c4 / this.rangeY * i13;
    s3(a17, u4, 0, 0, 0, D2, 0, h7, n19, 1), i2(this.transforms.dvs, e16.displayViewMat3, a17), this.tileData.transforms.dvs = this.transforms.dvs;
  }
  onAttach() {
    this.tileData.stage = this.stage;
  }
  onDetach() {
    this.tileData.stage = null;
  }
};

// node_modules/@arcgis/core/views/2d/engine/imagery/RasterVFTileContainer.js
var o12 = class extends i5 {
  constructor() {
    super(...arguments), this.isCustomTilingScheme = false, this.symbolTypes = ["triangle"];
  }
  createTile(s15) {
    const t7 = this._tileInfoView.getTileBounds(i(), s15), [i13, o13] = this._tileInfoView.tileInfo.size, n19 = this._tileInfoView.getTileResolution(s15.level);
    return new r9(s15, n19, t7[0], t7[3], i13, o13);
  }
  prepareRenderPasses(e16) {
    const r10 = e16.registerRenderPass({ name: "imagery (vf tile)", brushes: [d4], target: () => this.children.map((e17) => e17.tileData), drawPhase: T.MAP });
    return [...super.prepareRenderPasses(e16), r10];
  }
  doRender(e16) {
    this.visible && e16.drawPhase === T.MAP && this.symbolTypes.forEach((s15) => {
      e16.renderPass = s15, super.doRender(e16);
    });
  }
};

// node_modules/@arcgis/core/views/2d/layers/imagery/VectorFieldTileView2D.js
var a16 = class extends S2 {
  constructor() {
    super(...arguments), this._handle = null, this.type = "rasterVF";
  }
  canUseWebGLForProcessing() {
    return false;
  }
  async fetchTile(e16, t7) {
    t7 = { ...t7, interpolation: "nearest", requestProjectedLocalDirections: true };
    const i13 = await this.layer.fetchTile(e16.level, e16.row, e16.col, t7);
    return "vector-magdir" === this.layer.rasterInfo.dataType && (i13 == null ? void 0 : i13.pixelBlock) && (i13.pixelBlock = await this.layer.convertVectorFieldData(i13.pixelBlock, t7)), i13;
  }
  updateTileSource(e16, t7) {
    const i13 = t7.symbolizerParams, { tileData: r10 } = e16;
    r10.key = e16.key, r10.width = this._tileInfoView.tileInfo.size[0], r10.height = this._tileInfoView.tileInfo.size[1];
    const { symbolTileSize: s15 } = i13, { source: o13 } = t7;
    if (r10.offset = this._getTileSymbolOffset(r10.key, s15), null != o13 && null != o13.pixelBlock) {
      const e17 = { extent: o13.extent, pixelBlock: o13.pixelBlock };
      r10.rawPixelData = e17, r10.symbolizerParameters = i13, r10.source = this._sampleVectorFieldData(o13.pixelBlock, i13, r10.offset);
    } else {
      const e17 = [Math.round((this._tileInfoView.tileInfo.size[0] - r10.offset[0]) / s15), Math.round((this._tileInfoView.tileInfo.size[1] - r10.offset[1]) / s15)], t8 = this.createEmptyTilePixelBlock(e17);
      r10.source = t8, r10.symbolizerParameters = i13;
    }
    return r10.invalidateVAO(), Promise.resolve();
  }
  updateTileSymbolizerParameters(e16, t7) {
    var _a;
    const i13 = t7.local, { symbolTileSize: r10 } = i13, { tileData: s15 } = e16;
    s15.offset = this._getTileSymbolOffset(s15.key, r10);
    const o13 = s15.symbolizerParameters.symbolTileSize;
    s15.symbolizerParameters = i13;
    const l4 = (_a = s15.rawPixelData) == null ? void 0 : _a.pixelBlock;
    return null != l4 && o13 !== r10 && (s15.source = this._sampleVectorFieldData(l4, s15.symbolizerParameters, s15.offset)), Promise.resolve();
  }
  attach() {
    super.attach(), this.container = new o12(this._tileInfoView), this.container.isCustomTilingScheme = this._isCustomTilingScheme, this._updateSymbolType(this.layer.renderer), this._handle = l(() => this.layer.renderer, (e16) => this._updateSymbolType(e16));
  }
  detach() {
    var _a;
    super.detach(), this.container.removeAllChildren(), (_a = this._handle) == null ? void 0 : _a.remove(), this._handle = null, this.container = null;
  }
  _getTileSymbolOffset(e16, t7) {
    const i13 = e16.col * this._tileInfoView.tileInfo.size[0] % t7, r10 = e16.row * this._tileInfoView.tileInfo.size[1] % t7;
    return [i13 > t7 / 2 ? t7 - i13 : -i13, r10 > t7 / 2 ? t7 - r10 : -r10];
  }
  _sampleVectorFieldData(e16, t7, i13) {
    const { symbolTileSize: r10 } = t7;
    return S(e16, "vector-uv", r10, i13);
  }
  _updateSymbolType(e16) {
    "vector-field" === e16.type && (this.container.symbolTypes = "wind-barb" === e16.style ? ["scalar", "triangle"] : "simple-scalar" === e16.style ? ["scalar"] : ["triangle"]);
  }
};
e([y()], a16.prototype, "container", void 0), e([y()], a16.prototype, "layer", void 0), e([y()], a16.prototype, "type", void 0), a16 = e([a("esri.views.2d.layers.imagery.VectorFieldTileView2D")], a16);
var n18 = a16;

// node_modules/@arcgis/core/views/layers/ImageryTileLayerView.js
var p5 = (p6) => {
  let u4 = class extends p6 {
    constructor() {
      super(...arguments), this._rasterFieldPrefix = "Raster.", this.layer = null, this.view = null, this.tileInfo = null;
    }
    get fullExtent() {
      return this._getfullExtent();
    }
    _getfullExtent() {
      return this.projectFullExtent(this.view.spatialReference);
    }
    get hasTilingEffects() {
      return !!(this.layer.renderer && "dynamicRangeAdjustment" in this.layer.renderer && this.layer.renderer.dynamicRangeAdjustment);
    }
    get datumTransformation() {
      return T2(this.layer.fullExtent, this.view.spatialReference, true);
    }
    supportsSpatialReference(e16) {
      return !!this.projectFullExtent(e16);
    }
    projectFullExtent(e16) {
      const t7 = this.layer.fullExtent, r10 = T2(t7, e16, false);
      return q(t7, e16, r10);
    }
    async fetchPopupFeatures(e16, o13) {
      const { layer: s15 } = this;
      if (!e16)
        throw new s2("imageryTileLayerView:fetchPopupFeatures", "Nothing to fetch without area", { layer: s15 });
      const { popupEnabled: i13 } = s15, a17 = p(s15, o13);
      if (!i13 || null == a17)
        throw new s2("imageryTileLayerView:fetchPopupFeatures", "Missing required popupTemplate or popupEnabled", { popupEnabled: i13, popupTemplate: a17 });
      const n19 = [], { value: p7, magdirValue: u5, processedValue: c4 } = await s15.identify(e16, { timeExtent: this.timeExtent });
      let f5 = "";
      if (p7 && p7.length) {
        f5 = "imagery-tile" === s15.type && s15.hasStandardTime() && null != p7[0] ? p7.map((e18) => s15.getStandardTimeValue(e18)).join(", ") : p7.join(", ");
        const e17 = { ObjectId: 0 }, r10 = "Raster.ServicePixelValue";
        e17[r10] = (c4 == null ? void 0 : c4.join(", ")) ?? f5, e17[r10 + ".Raw"] = f5;
        const o14 = s15.rasterInfo.attributeTable;
        if (null != o14) {
          const { fields: t7, features: r11 } = o14, s16 = t7.find(({ name: e18 }) => "value" === e18.toLowerCase()), i15 = s16 ? r11.find((e18) => String(e18.attributes[s16.name]) === f5) : null;
          if (i15) {
            for (const o15 in i15.attributes)
              if (i15.attributes.hasOwnProperty(o15)) {
                e17[this._rasterFieldPrefix + o15] = i15.attributes[o15];
              }
          }
        }
        const i14 = s15.rasterInfo.dataType;
        "vector-magdir" !== i14 && "vector-uv" !== i14 || (e17["Raster.Magnitude"] = u5 == null ? void 0 : u5[0], e17["Raster.Direction"] = u5 == null ? void 0 : u5[1]);
        const a18 = new h4(this.fullExtent.clone(), null, e17);
        a18.layer = s15, a18.sourceLayer = a18.layer, n19.push(a18);
      }
      return n19;
    }
  };
  return e([y()], u4.prototype, "layer", void 0), e([y(b2)], u4.prototype, "timeExtent", void 0), e([y()], u4.prototype, "view", void 0), e([y()], u4.prototype, "fullExtent", null), e([y()], u4.prototype, "tileInfo", void 0), e([y({ readOnly: true })], u4.prototype, "hasTilingEffects", null), e([y()], u4.prototype, "datumTransformation", null), u4 = e([a("esri.views.layers.ImageryTileLayerView")], u4), u4;
};

// node_modules/@arcgis/core/views/2d/layers/ImageryTileLayerView2D.js
var g4 = class extends p5(a3(f2(d3))) {
  constructor() {
    super(...arguments), this._useWebGLForProcessing = true, this._useProgressiveUpdate = true, this.subview = null;
  }
  get useWebGLForProcessing() {
    return this._useWebGLForProcessing;
  }
  set useWebGLForProcessing(e16) {
    this._useWebGLForProcessing = e16, this.subview && "useWebGLForProcessing" in this.subview && (this.subview.useWebGLForProcessing = e16);
  }
  get useProgressiveUpdate() {
    return this._useWebGLForProcessing;
  }
  set useProgressiveUpdate(e16) {
    this._useProgressiveUpdate = e16, this.subview && "useProgressiveUpdate" in this.subview && (this.subview.useProgressiveUpdate = e16);
  }
  get displayParameters() {
    const { layer: e16 } = this, t7 = this._get("displayParameters");
    return e16.renderer ? { bandIds: e16.bandIds, renderer: e16.renderer, interpolation: e16.interpolation, multidimensionalDefinition: e16.multidimensionalDefinition, rasterFunction: "imagery-tile" === e16.type ? e16.rasterFunction : null } : t7;
  }
  update(e16) {
    var _a;
    (_a = this.subview) == null ? void 0 : _a.update(e16), this.notifyChange("updating");
  }
  isUpdating() {
    return !this.subview || this.subview.updating;
  }
  attach() {
    this.layer.increaseRasterJobHandlerUsage(), this._updateSubview(), this.addAttachHandles([l(() => this.displayParameters, (e16, t7) => {
      var _a, _b;
      const r10 = e16.interpolation !== (t7 == null ? void 0 : t7.interpolation) && ("majority" === e16.interpolation || "majority" === (t7 == null ? void 0 : t7.interpolation)) && r4(this.layer), o13 = e16.renderer !== (t7 == null ? void 0 : t7.renderer) && ((_a = t7 == null ? void 0 : t7.renderer) == null ? void 0 : _a.type) !== ((_b = e16.renderer) == null ? void 0 : _b.type);
      o13 && this._updateSubview();
      const a17 = e16.multidimensionalDefinition !== (t7 == null ? void 0 : t7.multidimensionalDefinition), n19 = e16.rasterFunction !== (t7 == null ? void 0 : t7.rasterFunction), u4 = n19 && !this._useWebGLForProcessing, h7 = a17 || r10 || o13 || u4;
      this.subview.redrawOrRefetch({ refetch: h7, reprocess: n19 }).catch((e17) => {
        d(e17) || s.getLogger(this).error(e17);
      }), this.notifyChange("updating");
    }), l(() => this.layer.blendMode ?? "normal", (e16) => {
      this.subview.container.blendMode = e16;
    }, w), l(() => this.layer.effect ?? null, (e16) => {
      this.subview.container.effect = e16;
    }, w), l(() => this.layer.multidimensionalSubset ?? null, (e16, t7) => {
      const { multidimensionalDefinition: r10 } = this.layer;
      null != r10 && o(r10, e16) !== o(r10, t7) && (this.subview.redrawOrRefetch({ refetch: true }).catch((e17) => {
        d(e17) || s.getLogger(this).error(e17);
      }), this.notifyChange("updating"));
    }, U), l(() => this.timeExtent, () => {
      this.subview.timeExtent = this.timeExtent, this.subview.redrawOrRefetch({ refetch: true }).catch((e16) => {
        d(e16) || s.getLogger(this).error(e16);
      });
    }, h)]);
  }
  detach() {
    var _a;
    this.layer.decreaseRasterJobHandlerUsage(), this._detachSubview(this.subview), (_a = this.subview) == null ? void 0 : _a.destroy(), this.subview = null;
  }
  moveStart() {
    this.requestUpdate();
  }
  viewChange() {
    this.requestUpdate();
  }
  moveEnd() {
    this.subview.moveEnd();
  }
  async hitTest(e16, s15) {
    return [{ type: "graphic", layer: this.layer, mapPoint: e16, graphic: new h4({ attributes: {}, geometry: e16.clone() }) }];
  }
  doRefresh() {
    return this.subview ? this.subview.doRefresh() : Promise.resolve();
  }
  _updateSubview() {
    var _a, _b;
    const e16 = (_a = this.layer.renderer) == null ? void 0 : _a.type;
    if (!e16)
      return;
    const t7 = "vector-field" === e16 ? "rasterVF" : "flow" === e16 ? "flow" : "raster";
    if (this.subview) {
      if (this.subview.type === t7)
        return void this._attachSubview(this.subview);
      this._detachSubview(this.subview), (_b = this.subview) == null ? void 0 : _b.destroy(), this.subview = null;
    }
    const { layer: s15 } = this;
    let i13;
    if (i13 = "rasterVF" === t7 ? new n18({ layer: s15, layerView: this }) : "flow" === t7 ? new h5({ layer: s15, layerView: this }) : new a15({ layer: s15, layerView: this }), "useWebGLForProcessing" in i13 && (i13.useWebGLForProcessing = this._useWebGLForProcessing), "useProgressiveUpdate" in i13 && (i13.useProgressiveUpdate = this._useProgressiveUpdate), "previousLOD" in i13) {
      const { subview: e17 } = this;
      i13.previousLOD = e17 && "previousLOD" in e17 ? e17.previousLOD : null;
    }
    this._attachSubview(i13), this.subview = i13, this.requestUpdate();
  }
  _attachSubview(e16) {
    e16 && !e16.attached && (e16.attach(), e16.attached = true, this.container.addChildAt(e16.container, 0), e16.container.blendMode = this.layer.blendMode, e16.container.effect = this.layer.effect);
  }
  _detachSubview(e16) {
    (e16 == null ? void 0 : e16.attached) && (this.container.removeChild(e16.container), e16.detach(), e16.attached = false);
  }
};
e([y()], g4.prototype, "subview", void 0), e([y()], g4.prototype, "useWebGLForProcessing", null), e([y()], g4.prototype, "useProgressiveUpdate", null), e([y({ readOnly: true })], g4.prototype, "displayParameters", null), g4 = e([a("esri.views.2d.layers.ImageryTileLayerView2D")], g4);
var f4 = g4;
export {
  f4 as default
};
//# sourceMappingURL=ImageryTileLayerView2D-PLI4HJS7.js.map
