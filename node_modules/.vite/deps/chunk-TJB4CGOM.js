// node_modules/@arcgis/core/chunks/common.js
var t = 1e-6;
function a() {
  return t;
}
function e(a3) {
  t = a3;
}
var n = Math.random;
var o = Math.PI / 180;
var s = 180 / Math.PI;
function r(t2) {
  return t2 * o;
}
function u(t2) {
  return t2 * s;
}
function c(a3, e3) {
  return Math.abs(a3 - e3) <= t * Math.max(1, Math.abs(a3), Math.abs(e3));
}
var i = Object.freeze(Object.defineProperty({ __proto__: null, RANDOM: n, equals: c, getEpsilon: a, setEpsilon: e, toDegree: u, toRadian: r }, Symbol.toStringTag, { value: "Module" }));

// node_modules/@arcgis/core/chunks/vec4.js
function a2(t2, n2) {
  return t2[0] = n2[0], t2[1] = n2[1], t2[2] = n2[2], t2[3] = n2[3], t2;
}
function r2(t2, n2, a3, r3, s3) {
  return t2[0] = n2, t2[1] = a3, t2[2] = r3, t2[3] = s3, t2;
}
function s2(t2, n2, a3) {
  return t2[0] = n2[0] + a3[0], t2[1] = n2[1] + a3[1], t2[2] = n2[2] + a3[2], t2[3] = n2[3] + a3[3], t2;
}
function o2(t2, n2, a3) {
  return t2[0] = n2[0] - a3[0], t2[1] = n2[1] - a3[1], t2[2] = n2[2] - a3[2], t2[3] = n2[3] - a3[3], t2;
}
function u2(t2, n2, a3) {
  return t2[0] = n2[0] * a3[0], t2[1] = n2[1] * a3[1], t2[2] = n2[2] * a3[2], t2[3] = n2[3] * a3[3], t2;
}
function e2(t2, n2, a3) {
  return t2[0] = n2[0] / a3[0], t2[1] = n2[1] / a3[1], t2[2] = n2[2] / a3[2], t2[3] = n2[3] / a3[3], t2;
}
function c2(t2, n2) {
  return t2[0] = Math.ceil(n2[0]), t2[1] = Math.ceil(n2[1]), t2[2] = Math.ceil(n2[2]), t2[3] = Math.ceil(n2[3]), t2;
}
function i2(t2, n2) {
  return t2[0] = Math.floor(n2[0]), t2[1] = Math.floor(n2[1]), t2[2] = Math.floor(n2[2]), t2[3] = Math.floor(n2[3]), t2;
}
function h(t2, n2, a3) {
  return t2[0] = Math.min(n2[0], a3[0]), t2[1] = Math.min(n2[1], a3[1]), t2[2] = Math.min(n2[2], a3[2]), t2[3] = Math.min(n2[3], a3[3]), t2;
}
function M(t2, n2, a3) {
  return t2[0] = Math.max(n2[0], a3[0]), t2[1] = Math.max(n2[1], a3[1]), t2[2] = Math.max(n2[2], a3[2]), t2[3] = Math.max(n2[3], a3[3]), t2;
}
function f(t2, n2) {
  return t2[0] = Math.round(n2[0]), t2[1] = Math.round(n2[1]), t2[2] = Math.round(n2[2]), t2[3] = Math.round(n2[3]), t2;
}
function l(t2, n2, a3) {
  return t2[0] = n2[0] * a3, t2[1] = n2[1] * a3, t2[2] = n2[2] * a3, t2[3] = n2[3] * a3, t2;
}
function m(t2, n2, a3, r3) {
  return t2[0] = n2[0] + a3[0] * r3, t2[1] = n2[1] + a3[1] * r3, t2[2] = n2[2] + a3[2] * r3, t2[3] = n2[3] + a3[3] * r3, t2;
}
function d(t2, n2) {
  const a3 = n2[0] - t2[0], r3 = n2[1] - t2[1], s3 = n2[2] - t2[2], o3 = n2[3] - t2[3];
  return Math.sqrt(a3 * a3 + r3 * r3 + s3 * s3 + o3 * o3);
}
function b(t2, n2) {
  const a3 = n2[0] - t2[0], r3 = n2[1] - t2[1], s3 = n2[2] - t2[2], o3 = n2[3] - t2[3];
  return a3 * a3 + r3 * r3 + s3 * s3 + o3 * o3;
}
function x(t2) {
  const n2 = t2[0], a3 = t2[1], r3 = t2[2], s3 = t2[3];
  return Math.sqrt(n2 * n2 + a3 * a3 + r3 * r3 + s3 * s3);
}
function q(t2) {
  const n2 = t2[0], a3 = t2[1], r3 = t2[2], s3 = t2[3];
  return n2 * n2 + a3 * a3 + r3 * r3 + s3 * s3;
}
function p(t2, n2) {
  return t2[0] = -n2[0], t2[1] = -n2[1], t2[2] = -n2[2], t2[3] = -n2[3], t2;
}
function g(t2, n2) {
  return t2[0] = 1 / n2[0], t2[1] = 1 / n2[1], t2[2] = 1 / n2[2], t2[3] = 1 / n2[3], t2;
}
function v(t2, n2) {
  const a3 = n2[0], r3 = n2[1], s3 = n2[2], o3 = n2[3];
  let u3 = a3 * a3 + r3 * r3 + s3 * s3 + o3 * o3;
  return u3 > 0 && (u3 = 1 / Math.sqrt(u3), t2[0] = a3 * u3, t2[1] = r3 * u3, t2[2] = s3 * u3, t2[3] = o3 * u3), t2;
}
function y(t2, n2) {
  return t2[0] * n2[0] + t2[1] * n2[1] + t2[2] * n2[2] + t2[3] * n2[3];
}
function j(t2, n2, a3, r3) {
  const s3 = n2[0], o3 = n2[1], u3 = n2[2], e3 = n2[3];
  return t2[0] = s3 + r3 * (a3[0] - s3), t2[1] = o3 + r3 * (a3[1] - o3), t2[2] = u3 + r3 * (a3[2] - u3), t2[3] = e3 + r3 * (a3[3] - e3), t2;
}
function _(t2, a3) {
  const r3 = n;
  let s3, o3, u3, e3, c3, i3;
  a3 = a3 || 1;
  do {
    s3 = 2 * r3() - 1, o3 = 2 * r3() - 1, c3 = s3 * s3 + o3 * o3;
  } while (c3 >= 1);
  do {
    u3 = 2 * r3() - 1, e3 = 2 * r3() - 1, i3 = u3 * u3 + e3 * e3;
  } while (i3 >= 1);
  const h2 = Math.sqrt((1 - c3) / i3);
  return t2[0] = a3 * s3, t2[1] = a3 * o3, t2[2] = a3 * u3 * h2, t2[3] = a3 * e3 * h2, t2;
}
function w(t2, n2, a3) {
  const r3 = n2[0], s3 = n2[1], o3 = n2[2], u3 = n2[3];
  return t2[0] = a3[0] * r3 + a3[4] * s3 + a3[8] * o3 + a3[12] * u3, t2[1] = a3[1] * r3 + a3[5] * s3 + a3[9] * o3 + a3[13] * u3, t2[2] = a3[2] * r3 + a3[6] * s3 + a3[10] * o3 + a3[14] * u3, t2[3] = a3[3] * r3 + a3[7] * s3 + a3[11] * o3 + a3[15] * u3, t2;
}
function z(t2, n2, a3) {
  const r3 = n2[0], s3 = n2[1], o3 = n2[2], u3 = a3[0], e3 = a3[1], c3 = a3[2], i3 = a3[3], h2 = i3 * r3 + e3 * o3 - c3 * s3, M2 = i3 * s3 + c3 * r3 - u3 * o3, f2 = i3 * o3 + u3 * s3 - e3 * r3, l2 = -u3 * r3 - e3 * s3 - c3 * o3;
  return t2[0] = h2 * i3 + l2 * -u3 + M2 * -c3 - f2 * -e3, t2[1] = M2 * i3 + l2 * -e3 + f2 * -u3 - h2 * -c3, t2[2] = f2 * i3 + l2 * -c3 + h2 * -e3 - M2 * -u3, t2[3] = n2[3], t2;
}
function A(t2) {
  return "vec4(" + t2[0] + ", " + t2[1] + ", " + t2[2] + ", " + t2[3] + ")";
}
function D(t2, n2) {
  return t2[0] === n2[0] && t2[1] === n2[1] && t2[2] === n2[2] && t2[3] === n2[3];
}
function E(n2, a3) {
  const r3 = n2[0], s3 = n2[1], o3 = n2[2], u3 = n2[3], e3 = a3[0], c3 = a3[1], i3 = a3[2], h2 = a3[3], M2 = a();
  return Math.abs(r3 - e3) <= M2 * Math.max(1, Math.abs(r3), Math.abs(e3)) && Math.abs(s3 - c3) <= M2 * Math.max(1, Math.abs(s3), Math.abs(c3)) && Math.abs(o3 - i3) <= M2 * Math.max(1, Math.abs(o3), Math.abs(i3)) && Math.abs(u3 - h2) <= M2 * Math.max(1, Math.abs(u3), Math.abs(h2));
}
var L = o2;
var O = u2;
var S = e2;
var k = d;
var B = b;
var C = x;
var F = q;
var G = Object.freeze(Object.defineProperty({ __proto__: null, add: s2, ceil: c2, copy: a2, dist: k, distance: d, div: S, divide: e2, dot: y, equals: E, exactEquals: D, floor: i2, inverse: g, len: C, length: x, lerp: j, max: M, min: h, mul: O, multiply: u2, negate: p, normalize: v, random: _, round: f, scale: l, scaleAndAdd: m, set: r2, sqrDist: B, sqrLen: F, squaredDistance: b, squaredLength: q, str: A, sub: L, subtract: o2, transformMat4: w, transformQuat: z }, Symbol.toStringTag, { value: "Module" }));

export {
  a,
  n,
  r,
  u,
  a2,
  r2,
  s2 as s,
  l,
  x,
  q,
  v,
  y,
  j,
  D,
  E
};
//# sourceMappingURL=chunk-TJB4CGOM.js.map
