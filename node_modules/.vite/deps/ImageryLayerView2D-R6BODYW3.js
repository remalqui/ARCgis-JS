import {
  d as d4,
  f as f3,
  h as h3
} from "./chunk-SX6DCUJ2.js";
import {
  n
} from "./chunk-3HLLC2QX.js";
import {
  v
} from "./chunk-LHL45LMI.js";
import {
  a as a3
} from "./chunk-YOZTW63O.js";
import {
  a as a2
} from "./chunk-W7FXZ6Y5.js";
import {
  l as l2
} from "./chunk-LT4GV2NG.js";
import "./chunk-2SB5E3DQ.js";
import {
  oe
} from "./chunk-HVNVJMIO.js";
import "./chunk-M7TZTH7O.js";
import "./chunk-Y2JGNMOW.js";
import "./chunk-TOXOPWS2.js";
import "./chunk-HSAM6HYE.js";
import "./chunk-7YWQQHOF.js";
import {
  d as d3,
  f as f2
} from "./chunk-KPMUAI6T.js";
import {
  i as i2
} from "./chunk-TBMS67KR.js";
import {
  h as h2
} from "./chunk-FZIEP3HG.js";
import "./chunk-N5CR6S5Y.js";
import "./chunk-55E4WCHV.js";
import "./chunk-PEYWLFGJ.js";
import "./chunk-NE5U5H4D.js";
import {
  p
} from "./chunk-6YPETR6R.js";
import "./chunk-U3JB4DA4.js";
import {
  q
} from "./chunk-TBLEWSLT.js";
import {
  M as M2,
  f2 as f,
  m as m2
} from "./chunk-F72FE4ZJ.js";
import "./chunk-AER5JAFS.js";
import "./chunk-7HZ72XIE.js";
import "./chunk-YM46NRFF.js";
import "./chunk-3Y3ICAIL.js";
import "./chunk-TNXVIMSN.js";
import "./chunk-ZMKH5ZRU.js";
import "./chunk-Y7HVH6RU.js";
import {
  b as b2
} from "./chunk-HZHMZHPT.js";
import "./chunk-UIVGJZCT.js";
import "./chunk-MVR2W3C6.js";
import "./chunk-FNTT27FW.js";
import "./chunk-HPXPYN62.js";
import "./chunk-AC3INPLN.js";
import "./chunk-C3ULZZZU.js";
import "./chunk-A6DRT2G4.js";
import "./chunk-4BRWSSYR.js";
import "./chunk-C7U2SKSO.js";
import "./chunk-NVZXNBIH.js";
import "./chunk-GTENSI4J.js";
import "./chunk-CN3PB7HS.js";
import "./chunk-NLX3GR5V.js";
import "./chunk-ZL3HOHNK.js";
import "./chunk-ZO32FGGH.js";
import "./chunk-PX3Q44FM.js";
import "./chunk-XYJMHUDA.js";
import "./chunk-CSLWFQJE.js";
import "./chunk-XP6ESZGI.js";
import "./chunk-3VTULECI.js";
import "./chunk-A4HFWKMU.js";
import "./chunk-TDXHXKUI.js";
import "./chunk-PR2OEILG.js";
import "./chunk-PJP6JTP7.js";
import "./chunk-IVABPLLZ.js";
import {
  T
} from "./chunk-TBHRKIAA.js";
import "./chunk-34QQ6GDH.js";
import "./chunk-KTII3LWY.js";
import "./chunk-BBJLFBMQ.js";
import "./chunk-JSMUQBPG.js";
import "./chunk-QAWS7Y22.js";
import "./chunk-OCIERVFA.js";
import "./chunk-QOWAKGE4.js";
import "./chunk-UX5D32RO.js";
import "./chunk-FHYNSVC4.js";
import "./chunk-FF5LS3YE.js";
import "./chunk-BCDDCNQ2.js";
import "./chunk-NYLF7BL2.js";
import {
  b
} from "./chunk-YC4PIRSZ.js";
import "./chunk-32JSK7KN.js";
import "./chunk-YIJWIXDP.js";
import "./chunk-D5EV57FM.js";
import "./chunk-EISDT6B4.js";
import "./chunk-LREUW66K.js";
import "./chunk-PM3CFO6N.js";
import "./chunk-6VJWKAPY.js";
import "./chunk-UQOM5GR4.js";
import "./chunk-YBMFRTPB.js";
import "./chunk-KKGVORR5.js";
import "./chunk-WTKN55TU.js";
import "./chunk-TDPKDZC3.js";
import "./chunk-M5UHI5WR.js";
import "./chunk-YAWND7HF.js";
import "./chunk-RR2V4HRU.js";
import "./chunk-WZAASLQW.js";
import "./chunk-FJYIB7HF.js";
import "./chunk-SCOBW7KR.js";
import "./chunk-AHAGGZUI.js";
import "./chunk-TQGXXOXA.js";
import "./chunk-SO7CVIZK.js";
import "./chunk-RADYXGQH.js";
import "./chunk-KKBQS7Z3.js";
import {
  i
} from "./chunk-4U2D3HFL.js";
import "./chunk-D5NSNTGJ.js";
import "./chunk-OMDLZQUU.js";
import "./chunk-FQZ2JEHK.js";
import "./chunk-CNCZBOLJ.js";
import "./chunk-E2DURSMR.js";
import "./chunk-4YNW7QZY.js";
import "./chunk-E2BBTG5C.js";
import "./chunk-QNFDBY7V.js";
import "./chunk-EL72ISXP.js";
import "./chunk-5KLICR5E.js";
import "./chunk-PNA6D76Z.js";
import "./chunk-NDQCNJMM.js";
import "./chunk-R2HXL6HT.js";
import "./chunk-2PAQQUAG.js";
import "./chunk-QXPTMFGZ.js";
import {
  h
} from "./chunk-4SARN32Z.js";
import "./chunk-QA4FMJA6.js";
import "./chunk-VFQINJTY.js";
import "./chunk-4J6R7QH6.js";
import "./chunk-HB3KZNZ3.js";
import "./chunk-VZAEQ6CY.js";
import "./chunk-SS33L3LC.js";
import "./chunk-X4Y5OF5X.js";
import "./chunk-PX3FFFQ5.js";
import "./chunk-Y2ZDD3I4.js";
import "./chunk-MUO4EIZP.js";
import "./chunk-42RWGG3D.js";
import {
  d as d2
} from "./chunk-LNMNRMVX.js";
import "./chunk-OO4A3EBQ.js";
import "./chunk-ZBWBCN2I.js";
import "./chunk-GZTLZ6RD.js";
import "./chunk-KTEJJM3A.js";
import "./chunk-SO6DBMQG.js";
import "./chunk-KTSEQWMB.js";
import "./chunk-QXGO5RRL.js";
import "./chunk-EIE3W25Z.js";
import "./chunk-7KM4XBUC.js";
import "./chunk-OZXJDVTE.js";
import "./chunk-KIEN3CY2.js";
import "./chunk-4CZO65BK.js";
import "./chunk-7E3Q7HTF.js";
import "./chunk-FXDEKQIL.js";
import "./chunk-GJ5WE5D3.js";
import "./chunk-KKGH4SRQ.js";
import "./chunk-Y2CLYMXQ.js";
import {
  V
} from "./chunk-4RFFPIT2.js";
import "./chunk-KSQTM6XI.js";
import "./chunk-7KX64CAH.js";
import "./chunk-J4R3XNTP.js";
import "./chunk-Y6FRAP2R.js";
import "./chunk-BVNZ3ETW.js";
import "./chunk-FJQ7HIY7.js";
import "./chunk-T4XWQYGC.js";
import "./chunk-4H5JODOT.js";
import "./chunk-TCASQSKO.js";
import "./chunk-5HAVROZG.js";
import "./chunk-MOPR7RFH.js";
import "./chunk-KW3ZNPTA.js";
import "./chunk-TJB4CGOM.js";
import "./chunk-CWQ6Q3PH.js";
import {
  U,
  l,
  w
} from "./chunk-XN5VV437.js";
import "./chunk-ODFH3BSN.js";
import "./chunk-WBSPL6CJ.js";
import "./chunk-N5ULYWRU.js";
import "./chunk-LQVUN6IS.js";
import "./chunk-JZM5YUHA.js";
import "./chunk-MOIETNWJ.js";
import {
  M
} from "./chunk-3GSONYPC.js";
import {
  x2 as x
} from "./chunk-SFV6XLDZ.js";
import "./chunk-3PLRSFLA.js";
import "./chunk-VBD33VNW.js";
import "./chunk-7A5C2EQ3.js";
import {
  m,
  y3 as y
} from "./chunk-OYBXMT5R.js";
import {
  a2 as a
} from "./chunk-CIDWM2UN.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";
import "./chunk-SHJI4PR4.js";
import "./chunk-2YSHZRCT.js";
import {
  j
} from "./chunk-HKVL2MJK.js";
import "./chunk-MH2LNFJK.js";
import "./chunk-O3CHVGVF.js";
import {
  d,
  k
} from "./chunk-HNHXEGH2.js";
import "./chunk-DWOEYHKS.js";
import {
  s2 as s,
  s3 as s2
} from "./chunk-W2N7YT6I.js";
import "./chunk-I5JT24BO.js";
import "./chunk-I4U7MQNO.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/views/2d/layers/imagery/ImageryView2D.js
var m3 = class extends m {
  constructor() {
    super(...arguments), this.attached = false, this.container = new h2(), this.updateRequested = false, this.type = "imagery", this._bitmapView = new a3();
  }
  destroy() {
    this.attached && (this.detach(), this.attached = false), this.updateRequested = false;
  }
  get updating() {
    return !this.attached || this.isUpdating();
  }
  update(t2) {
    this.strategy.update(t2).catch((t3) => {
      d(t3) || s.getLogger(this).error(t3);
    });
  }
  hitTest(t2) {
    return new h({ attributes: {}, geometry: t2.clone(), layer: this.layer });
  }
  attach() {
    this.container.addChild(this._bitmapView);
    const t2 = this.layer.version >= 10, e2 = this.layer.version >= 10.1 ? this.layer.imageMaxHeight : 2048, i3 = this.layer.version >= 10.1 ? this.layer.imageMaxWidth : 2048;
    this.strategy = new v({ container: this._bitmapView, imageNormalizationSupported: t2, imageMaxHeight: e2, imageMaxWidth: i3, fetchSource: this._fetchImage.bind(this), requestUpdate: () => this.requestUpdate() });
  }
  detach() {
    this.strategy.destroy(), this._bitmapView.removeAllChildren(), this.container.removeAllChildren(), this.updateRequested = false;
  }
  redraw() {
    this.strategy.updateExports(async (t2) => {
      const { source: e2 } = t2;
      if (!e2 || e2 instanceof ImageBitmap)
        return;
      const i3 = await this.layer.applyRenderer({ extent: e2.extent, pixelBlock: e2.originalPixelBlock ?? e2.pixelBlock });
      e2.filter = (t3) => this.layer.pixelFilter ? this.layer.applyFilter(t3) : { ...i3, extent: e2.extent };
    }).catch((t2) => {
      d(t2) || s.getLogger(this).error(t2);
    });
  }
  requestUpdate() {
    this.updateRequested || (this.updateRequested = true, this.view.requestUpdate());
  }
  isUpdating() {
    return this.strategy.updating || this.updateRequested;
  }
  getPixelData() {
    if (this.updating)
      return null;
    const t2 = this.strategy.bitmaps;
    if (1 === t2.length && t2[0].source)
      return { extent: t2[0].source.extent, pixelBlock: t2[0].source.originalPixelBlock };
    if (t2.length > 1) {
      const e2 = this.view.extent, i3 = t2.map((t3) => t3.source).filter((t3) => t3.extent && t3.extent.intersects(e2)).map((t3) => ({ extent: t3.extent, pixelBlock: t3.originalPixelBlock })), r = M2(i3, e2);
      return null != r ? { extent: r.extent, pixelBlock: r.pixelBlock } : null;
    }
    return null;
  }
  async _fetchImage(t2, e2, i3, r) {
    var _a;
    (r = r || {}).timeExtent = this.timeExtent, r.requestAsImageElement = true, r.returnImageBitmap = true;
    const s3 = await this.layer.fetchImage(t2, e2, i3, r);
    if (s3.imageBitmap)
      return s3.imageBitmap;
    const a4 = await this.layer.applyRenderer(s3.pixelData, { signal: r.signal }), o = new l2(a4.pixelBlock, (_a = a4.extent) == null ? void 0 : _a.clone(), s3.pixelData.pixelBlock);
    return o.filter = (t3) => this.layer.applyFilter(t3), o;
  }
};
e([y()], m3.prototype, "attached", void 0), e([y()], m3.prototype, "container", void 0), e([y()], m3.prototype, "layer", void 0), e([y()], m3.prototype, "strategy", void 0), e([y()], m3.prototype, "timeExtent", void 0), e([y()], m3.prototype, "view", void 0), e([y()], m3.prototype, "updateRequested", void 0), e([y()], m3.prototype, "updating", null), e([y()], m3.prototype, "type", void 0), m3 = e([a("esri.views.2d.layers.imagery.ImageryView2D")], m3);
var u = m3;

// node_modules/@arcgis/core/views/2d/engine/imagery/RasterVFContainer.js
var t = class extends i2 {
  constructor() {
    super(...arguments), this.symbolTypes = ["triangle"];
  }
  get requiresDedicatedFBO() {
    return false;
  }
  prepareRenderPasses(s3) {
    const t2 = s3.registerRenderPass({ name: "imagery (vf)", brushes: [d4], target: () => this.children, drawPhase: T.MAP });
    return [...super.prepareRenderPasses(s3), t2];
  }
  doRender(e2) {
    this.visible && e2.drawPhase === T.MAP && this.symbolTypes.forEach((r) => {
      e2.renderPass = r, super.doRender(e2);
    });
  }
};

// node_modules/@arcgis/core/views/2d/layers/imagery/ImageryVFStrategy.js
var c = class extends m {
  constructor(e2) {
    super(e2), this._loading = null, this.update = k((e3, t2) => this._update(e3, t2).catch((e4) => {
      d(e4) || s.getLogger(this).error(e4);
    }));
  }
  get updating() {
    return !!this._loading;
  }
  redraw(e2) {
    if (!this.container.children.length)
      return;
    const t2 = this.container.children[0];
    t2.symbolizerParameters = e2, t2.invalidateVAO(), this.container.symbolTypes = "wind_speed" === e2.style ? ["scalar", "triangle"] : "simple_scalar" === e2.style ? ["scalar"] : ["triangle"], this.container.requestRender();
  }
  async _update(e2, t2, r) {
    if (!e2.stationary)
      return;
    const { extent: i3, spatialReference: s3 } = e2.state, o = new M({ xmin: i3.xmin, ymin: i3.ymin, xmax: i3.xmax, ymax: i3.ymax, spatialReference: s3 }), [a4, l3] = e2.state.size;
    this._loading = this.fetchPixels(o, a4, l3, r);
    const c2 = await this._loading;
    this._addToDisplay(c2, t2, e2.state), this._loading = null;
  }
  _addToDisplay(e2, t2, r) {
    if (null == e2.pixelBlock)
      return this.container.children.forEach((e3) => e3.destroy()), void this.container.removeAllChildren();
    const { extent: i3, pixelBlock: s3 } = e2, o = new f3(s3);
    o.offset = [0, 0], o.symbolizerParameters = t2, o.rawPixelData = e2, o.invalidateVAO(), o.x = i3.xmin, o.y = i3.ymax, o.pixelRatio = r.pixelRatio, o.rotation = r.rotation, o.resolution = r.resolution, o.width = s3.width * t2.symbolTileSize, o.height = s3.height * t2.symbolTileSize, this.container.children.forEach((e3) => e3.destroy()), this.container.removeAllChildren(), this.container.symbolTypes = "wind_speed" === t2.style ? ["scalar", "triangle"] : "simple_scalar" === t2.style ? ["scalar"] : ["triangle"], this.container.addChild(o);
  }
};
e([y()], c.prototype, "fetchPixels", void 0), e([y()], c.prototype, "container", void 0), e([y()], c.prototype, "_loading", void 0), e([y()], c.prototype, "updating", null), c = e([a("esri.views.2d.layers.imagery.ImageryVFStrategy")], c);
var p2 = c;

// node_modules/@arcgis/core/views/2d/layers/imagery/VectorFieldView2D.js
var u2 = class extends d2 {
  constructor() {
    super(...arguments), this.attached = false, this.container = new t(), this.type = "imageryVF", this._dataParameters = { exportParametersVersion: 0, bbox: "", symbolTileSize: 0, time: "" }, this._fetchpixels = async (t2, e2, r, i3) => {
      const s3 = await this._projectFullExtentPromise, { symbolTileSize: a4 } = this.layer.renderer, { extent: o, width: n3, height: l3 } = m2(t2, e2, r, a4, s3);
      if (null != s3 && !s3.intersects(t2))
        return { extent: o, pixelBlock: null };
      const c2 = { bbox: `${o.xmin}, ${o.ymin}, ${o.xmax}, ${o.ymax}`, exportParametersVersion: this.layer.exportImageServiceParameters.version, symbolTileSize: a4, time: JSON.stringify(this.timeExtent || "") };
      if (this._canReuseVectorFieldData(c2)) {
        const t3 = this.getPixelData();
        if (null != t3) {
          if (`${t3.extent.xmin}, ${t3.extent.ymin}, ${t3.extent.xmax}, ${t3.extent.ymax}` === c2.bbox)
            return t3;
        }
      }
      const { pixelData: h4 } = await this.layer.fetchImage(o, n3, l3, { timeExtent: this.timeExtent, requestAsImageElement: false, signal: i3 });
      this._dataParameters = c2;
      const y2 = h4 == null ? void 0 : h4.pixelBlock;
      if (null == y2)
        return { extent: o, pixelBlock: null };
      return { extent: o, pixelBlock: "vector-uv" === this.layer.rasterInfo.dataType ? f(y2, "vector-uv") : y2 };
    };
  }
  get updating() {
    return !this.attached || this._strategy.updating;
  }
  attach() {
    this._projectFullExtentPromise = this._getProjectedFullExtent(this.view.spatialReference), this._strategy = new p2({ container: this.container, fetchPixels: this._fetchpixels }), this.handles.add(l(() => this.layer.renderer, (t2) => this._updateSymbolizerParams(t2), w), "attach");
  }
  detach() {
    this._strategy.destroy(), this.container.children.forEach((t2) => t2.destroy()), this.container.removeAllChildren(), this.handles.remove("attach"), this._strategy = this.container = this._projectFullExtentPromise = null;
  }
  getPixelData() {
    var _a;
    const t2 = (_a = this.container.children[0]) == null ? void 0 : _a.rawPixelData;
    if (this.updating || !t2)
      return null;
    const { extent: e2, pixelBlock: r } = t2;
    return { extent: e2, pixelBlock: r };
  }
  hitTest(t2) {
    return new h({ attributes: {}, geometry: t2.clone(), layer: this.layer });
  }
  update(t2) {
    this._strategy.update(t2, this._symbolizerParams);
  }
  redraw() {
    const { renderer: t2 } = this.layer;
    t2 && (this._updateSymbolizerParams(t2), this._strategy.redraw(this._symbolizerParams));
  }
  _canReuseVectorFieldData(t2) {
    const e2 = this._dataParameters.exportParametersVersion === t2.exportParametersVersion, r = this._dataParameters.time === t2.time, i3 = this._dataParameters.symbolTileSize === t2.symbolTileSize, s3 = this._dataParameters.bbox === t2.bbox;
    return e2 && r && i3 && s3;
  }
  async _getProjectedFullExtent(t2) {
    try {
      return await q(this.layer.fullExtent, t2);
    } catch (e2) {
      try {
        const e3 = (await j(this.layer.url, { query: { option: "footprints", outSR: t2.wkid || JSON.stringify(t2.toJSON()), f: "json" } })).data.featureCollection.layers[0].layerDefinition.extent;
        return e3 ? M.fromJSON(e3) : null;
      } catch {
        return null;
      }
    }
  }
  _updateSymbolizerParams(t2) {
    "vector-field" === t2.type && (this._symbolizerParams = this.layer.symbolizer.generateWebGLParameters({ pixelBlock: null }));
  }
};
e([y()], u2.prototype, "attached", void 0), e([y()], u2.prototype, "container", void 0), e([y()], u2.prototype, "layer", void 0), e([y()], u2.prototype, "timeExtent", void 0), e([y()], u2.prototype, "type", void 0), e([y()], u2.prototype, "view", void 0), e([y()], u2.prototype, "updating", null), u2 = e([a("esri.views.2d.layers.imagery.VectorFieldView2D")], u2);
var d5 = u2;

// node_modules/@arcgis/core/views/layers/ImageryLayerView.js
var n2 = (n3) => {
  let u3 = class extends n3 {
    constructor() {
      super(...arguments), this.view = null;
    }
    async fetchPopupFeatures(e2, t2) {
      const { layer: o } = this;
      if (!e2)
        throw new s2("imagerylayerview:fetchPopupFeatures", "Nothing to fetch without area", { layer: o });
      const { popupEnabled: p3 } = o, n4 = p(o, t2);
      if (!p3 || null == n4)
        throw new s2("imagerylayerview:fetchPopupFeatures", "Missing required popupTemplate or popupEnabled", { popupEnabled: p3, popupTemplate: n4 });
      const u4 = await n4.getRequiredFields(), l3 = new b();
      l3.timeExtent = this.timeExtent, l3.geometry = e2, l3.outFields = u4, l3.outSpatialReference = e2.spatialReference;
      const { resolution: m4, spatialReference: c2 } = this.view, y2 = "2d" === this.view.type ? new x(m4, m4, c2) : new x(0.5 * m4, 0.5 * m4, c2), { returnTopmostRaster: d6, showNoDataRecords: h4 } = n4.layerOptions || { returnTopmostRaster: true, showNoDataRecords: false }, w2 = { returnDomainValues: true, returnTopmostRaster: d6, pixelSize: y2, showNoDataRecords: h4, signal: null != t2 ? t2.signal : null };
      return o.queryVisibleRasters(l3, w2).then((e3) => e3);
    }
    canResume() {
      var _a;
      return !!super.canResume() && !((_a = this.timeExtent) == null ? void 0 : _a.isEmpty);
    }
  };
  return e([y()], u3.prototype, "layer", void 0), e([y()], u3.prototype, "suspended", void 0), e([y(b2)], u3.prototype, "timeExtent", void 0), e([y()], u3.prototype, "view", void 0), u3 = e([a("esri.views.layers.ImageryLayerView")], u3), u3;
};

// node_modules/@arcgis/core/views/2d/layers/ImageryLayerView2D.js
var g = class extends n2(a2(f2(d3))) {
  constructor() {
    super(...arguments), this._exportImageVersion = -1, this._highlightGraphics = new i(), this._highlightView = void 0, this.layer = null, this.subview = null;
  }
  get pixelData() {
    const { subview: e2 } = this;
    return this.updating || !e2 ? null : "getPixelData" in e2 ? e2.getPixelData() : null;
  }
  async hitTest(e2, t2) {
    return this.subview ? [{ type: "graphic", graphic: this.subview.hitTest(e2), layer: this.layer, mapPoint: e2 }] : null;
  }
  update(e2) {
    var _a;
    (_a = this.subview) == null ? void 0 : _a.update(e2);
  }
  attach() {
    this.layer.increaseRasterJobHandlerUsage(), this._setSubView(), this.view && (this._highlightView = new oe({ view: this.view, graphics: this._highlightGraphics, requestUpdateCallback: () => this.requestUpdate(), container: new n(this.view.featuresTilingScheme) }), this.container.addChild(this._highlightView.container)), this.addAttachHandles([l(() => this.layer.blendMode ?? "normal", (e2) => this.subview && (this.subview.container.blendMode = e2), w), l(() => this.layer.effect ?? null, (e2) => this.subview && (this.subview.container.effect = e2), w), l(() => this.layer.exportImageServiceParameters.version, (e2) => {
      e2 && this._exportImageVersion !== e2 && (this._exportImageVersion = e2, this.requestUpdate());
    }, U), l(() => this.timeExtent, (e2) => {
      const { subview: t2 } = this;
      t2 && (t2.timeExtent = e2, "redraw" in t2 ? this.requestUpdate() : t2.redrawOrRefetch());
    }, U), this.layer.on("redraw", () => {
      const { subview: e2 } = this;
      e2 && ("redraw" in e2 ? e2.redraw() : e2.redrawOrRefetch());
    }), l(() => this.layer.renderer, () => this._setSubView())]);
  }
  detach() {
    var _a, _b;
    this.layer.decreaseRasterJobHandlerUsage(), this.container.removeAllChildren(), this._detachSubview(this.subview), (_a = this.subview) == null ? void 0 : _a.destroy(), this.subview = null, (_b = this._highlightView) == null ? void 0 : _b.destroy(), this._exportImageVersion = -1;
  }
  moveStart() {
  }
  viewChange() {
  }
  moveEnd() {
    this.requestUpdate();
  }
  highlight(e2, r) {
    if (!((Array.isArray(e2) ? e2[0] : V.isCollection(e2) ? e2.at(0) : e2) instanceof h))
      return { remove: () => {
      } };
    let s3 = [];
    return Array.isArray(e2) || V.isCollection(e2) ? s3 = e2.map((e3) => e3.clone()) : e2 instanceof h && (s3 = [e2.clone()]), this._highlightGraphics.addMany(s3), { remove: () => {
      this._highlightGraphics.removeMany(s3);
    } };
  }
  async doRefresh() {
    this.requestUpdate();
  }
  isUpdating() {
    return !this.subview || this.subview.updating;
  }
  _setSubView() {
    var _a, _b;
    if (!this.view)
      return;
    const e2 = (_a = this.layer.renderer) == null ? void 0 : _a.type;
    let t2 = "imagery";
    if ("vector-field" === e2 ? t2 = "imageryVF" : "flow" === e2 && (t2 = "flow"), this.subview) {
      const { type: e3 } = this.subview;
      if (e3 === t2)
        return this._attachSubview(this.subview), void ("flow" === e3 ? this.subview.redrawOrRefetch() : "imagery" === e3 && "lerc" === this.layer.format ? this.subview.redraw() : this.requestUpdate());
      this._detachSubview(this.subview), (_b = this.subview) == null ? void 0 : _b.destroy();
    }
    this.subview = "imagery" === t2 ? new u({ layer: this.layer, view: this.view, timeExtent: this.timeExtent }) : "imageryVF" === t2 ? new d5({ layer: this.layer, view: this.view, timeExtent: this.timeExtent }) : new h3({ layer: this.layer, layerView: this }), this._attachSubview(this.subview), this.requestUpdate();
  }
  _attachSubview(e2) {
    e2 && !e2.attached && (e2.attach(), e2.attached = true, this.container.addChildAt(e2.container, 0), e2.container.blendMode = this.layer.blendMode, e2.container.effect = this.layer.effect);
  }
  _detachSubview(e2) {
    (e2 == null ? void 0 : e2.attached) && (this.container.removeChild(e2.container), e2.detach(), e2.attached = false);
  }
};
e([y()], g.prototype, "pixelData", null), e([y()], g.prototype, "subview", void 0), g = e([a("esri.views.2d.layers.ImageryLayerView2D")], g);
var b3 = g;
export {
  b3 as default
};
//# sourceMappingURL=ImageryLayerView2D-R6BODYW3.js.map
