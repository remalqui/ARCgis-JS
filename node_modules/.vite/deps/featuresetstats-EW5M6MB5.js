import {
  l
} from "./chunk-BDKC62LO.js";
import {
  f
} from "./chunk-Z36PKTLY.js";
import {
  L,
  Q,
  V,
  q,
  v,
  z
} from "./chunk-RFI4CCAC.js";
import "./chunk-YAWND7HF.js";
import "./chunk-5CIVT7RW.js";
import "./chunk-RR2V4HRU.js";
import "./chunk-WZAASLQW.js";
import {
  e,
  t
} from "./chunk-FJYIB7HF.js";
import "./chunk-OZXJDVTE.js";
import "./chunk-4H5JODOT.js";
import "./chunk-TCASQSKO.js";
import "./chunk-5HAVROZG.js";
import "./chunk-MOPR7RFH.js";
import "./chunk-KW3ZNPTA.js";
import "./chunk-TJB4CGOM.js";
import "./chunk-ODFH3BSN.js";
import "./chunk-JZM5YUHA.js";
import "./chunk-3GSONYPC.js";
import "./chunk-SFV6XLDZ.js";
import "./chunk-3PLRSFLA.js";
import "./chunk-VBD33VNW.js";
import "./chunk-7A5C2EQ3.js";
import "./chunk-OYBXMT5R.js";
import "./chunk-CIDWM2UN.js";
import "./chunk-PD5Q7TDW.js";
import "./chunk-SHJI4PR4.js";
import "./chunk-2YSHZRCT.js";
import "./chunk-MH2LNFJK.js";
import "./chunk-O3CHVGVF.js";
import "./chunk-HNHXEGH2.js";
import "./chunk-DWOEYHKS.js";
import "./chunk-W2N7YT6I.js";
import "./chunk-I5JT24BO.js";
import "./chunk-I4U7MQNO.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/arcade/functions/featuresetstats.js
async function f2(n, t2, r, i, f3, d2) {
  if (1 === i.length) {
    if (z(i[0]))
      return l(n, i[0], v(i[1], -1));
    if (q(i[0]))
      return l(n, i[0].toArray(), v(i[1], -1));
  } else if (2 === i.length) {
    if (z(i[0]))
      return l(n, i[0], v(i[1], -1));
    if (q(i[0]))
      return l(n, i[0].toArray(), v(i[1], -1));
    if (V(i[0])) {
      const r2 = await i[0].load(), e2 = await l2(f.create(i[1], r2.getFieldsIndex()), d2, f3);
      return i[0].calculateStatistic(n, e2, v(i[2], 1e3), t2.abortSignal);
    }
  } else if (3 === i.length && V(i[0])) {
    const r2 = await i[0].load(), e2 = await l2(f.create(i[1], r2.getFieldsIndex()), d2, f3);
    return i[0].calculateStatistic(n, e2, v(i[2], 1e3), t2.abortSignal);
  }
  return l(n, i, -1);
}
async function l2(n, t2, r) {
  const e2 = n.getVariables();
  if (e2.length > 0) {
    const a = [];
    for (let n2 = 0; n2 < e2.length; n2++) {
      const i2 = { name: e2[n2] };
      a.push(await t2.evaluateIdentifier(r, i2));
    }
    const i = {};
    for (let n2 = 0; n2 < e2.length; n2++)
      i[e2[n2]] = a[n2];
    return n.parameters = i, n;
  }
  return n;
}
function d(c) {
  "async" === c.mode && (c.functions.stdev = function(n, t2) {
    return c.standardFunctionAsync(n, t2, (t3, r, e2) => f2("stdev", t3, r, e2, n, c));
  }, c.functions.variance = function(n, t2) {
    return c.standardFunctionAsync(n, t2, (t3, r, e2) => f2("variance", t3, r, e2, n, c));
  }, c.functions.average = function(n, t2) {
    return c.standardFunctionAsync(n, t2, (t3, r, e2) => f2("mean", t3, r, e2, n, c));
  }, c.functions.mean = function(n, t2) {
    return c.standardFunctionAsync(n, t2, (t3, r, e2) => f2("mean", t3, r, e2, n, c));
  }, c.functions.sum = function(n, t2) {
    return c.standardFunctionAsync(n, t2, (t3, r, e2) => f2("sum", t3, r, e2, n, c));
  }, c.functions.min = function(n, t2) {
    return c.standardFunctionAsync(n, t2, (t3, r, e2) => f2("min", t3, r, e2, n, c));
  }, c.functions.max = function(n, t2) {
    return c.standardFunctionAsync(n, t2, (t3, r, e2) => f2("max", t3, r, e2, n, c));
  }, c.functions.count = function(o, u) {
    return c.standardFunctionAsync(o, u, (c2, f3, l3) => {
      if (Q(l3, 1, 1, o, u), V(l3[0]))
        return l3[0].count(c2.abortSignal);
      if (z(l3[0]) || L(l3[0]))
        return l3[0].length;
      if (q(l3[0]))
        return l3[0].length();
      throw new t(o, e.InvalidParameter, u);
    });
  });
}
export {
  d as registerFunctions
};
//# sourceMappingURL=featuresetstats-EW5M6MB5.js.map
