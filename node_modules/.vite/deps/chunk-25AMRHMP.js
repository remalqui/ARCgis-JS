import {
  a as a3,
  c2 as c
} from "./chunk-6ZYJGHGB.js";
import {
  s as s2
} from "./chunk-3PLRSFLA.js";
import {
  l
} from "./chunk-7A5C2EQ3.js";
import {
  y3 as y
} from "./chunk-OYBXMT5R.js";
import {
  a2
} from "./chunk-CIDWM2UN.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";
import {
  v
} from "./chunk-2YSHZRCT.js";
import {
  s2 as s
} from "./chunk-W2N7YT6I.js";
import {
  a
} from "./chunk-I5JT24BO.js";

// node_modules/@arcgis/core/geometry/support/MeshVertexAttributes.js
var i;
var l2 = "esri.geometry.support.MeshVertexAttributes";
var c2 = s.getLogger(l2);
var p = i = class extends l {
  constructor(t) {
    super(t), this.color = null, this.position = new Float64Array(0), this.uv = null, this.normal = null, this.tangent = null;
  }
  castColor(t) {
    return g(t, Uint8Array, [Uint8ClampedArray], { loggerTag: ".color=", stride: 4 }, c2);
  }
  castPosition(t) {
    t && t instanceof Float32Array && c2.warn(".position=", "Setting position attribute from a Float32Array may cause precision problems. Consider storing data in a Float64Array or a regular number array");
    return g(t, Float64Array, [Float32Array], { loggerTag: ".position=", stride: 3 }, c2);
  }
  castUv(t) {
    return g(t, Float32Array, [Float64Array], { loggerTag: ".uv=", stride: 2 }, c2);
  }
  castNormal(t) {
    return g(t, Float32Array, [Float64Array], { loggerTag: ".normal=", stride: 3 }, c2);
  }
  castTangent(t) {
    return g(t, Float32Array, [Float64Array], { loggerTag: ".tangent=", stride: 4 }, c2);
  }
  clone() {
    const t = { position: a(this.position), uv: a(this.uv), normal: a(this.normal), tangent: a(this.tangent), color: a(this.color) };
    return new i(t);
  }
  clonePositional() {
    const t = { position: a(this.position), normal: a(this.normal), tangent: a(this.tangent), uv: this.uv, color: this.color };
    return new i(t);
  }
  get memoryUsage() {
    let t = 0;
    return t += this.position.byteLength, null != this.uv && (t += this.uv.byteLength), null != this.normal && (t += this.normal.byteLength), null != this.tangent && (t += this.tangent.byteLength), null != this.color && (t += this.color.byteLength), t;
  }
};
function u(t, o, r, n) {
  const { loggerTag: e2, stride: s3 } = o;
  return t.length % s3 != 0 ? (n.error(e2, `Invalid array length, expected a multiple of ${s3}`), new r([])) : t;
}
function g(t, o, r, n, e2) {
  if (!t)
    return t;
  if (t instanceof o)
    return u(t, n, o, e2);
  for (const s3 of r)
    if (t instanceof s3)
      return u(new o(t), n, o, e2);
  if (Array.isArray(t))
    return u(new o(t), n, o, e2);
  {
    const n2 = r.map((t2) => `'${t2.name}'`);
    return e2.error(`Failed to set property, expected one of ${n2}, but got ${t.constructor.name}`), new o([]);
  }
}
function y2(t, o, r) {
  o[r] = m(t);
}
function m(t) {
  const o = new Array(t.length);
  for (let r = 0; r < t.length; r++)
    o[r] = t[r];
  return o;
}
e([y({ json: { write: y2 } })], p.prototype, "color", void 0), e([s2("color")], p.prototype, "castColor", null), e([y({ nonNullable: true, json: { write: y2 } })], p.prototype, "position", void 0), e([s2("position")], p.prototype, "castPosition", null), e([y({ json: { write: y2 } })], p.prototype, "uv", void 0), e([s2("uv")], p.prototype, "castUv", null), e([y({ json: { write: y2 } })], p.prototype, "normal", void 0), e([s2("normal")], p.prototype, "castNormal", null), e([y({ json: { write: y2 } })], p.prototype, "tangent", void 0), e([s2("tangent")], p.prototype, "castTangent", null), p = i = e([a2(l2)], p);

// node_modules/@arcgis/core/geometry/support/MeshComponent.js
var p2;
var u2 = "esri.geometry.support.MeshComponent";
var h = s.getLogger(u2);
var f = p2 = class extends l {
  static from(t) {
    return v(p2, t);
  }
  constructor(t) {
    super(t), this.faces = null, this.material = null, this.shading = "source", this.trustSourceNormals = false;
  }
  castFaces(t) {
    return g(t, Uint32Array, [Uint16Array], { loggerTag: ".faces=", stride: 3 }, h);
  }
  castMaterial(t) {
    return v(t && "object" == typeof t && ("metallic" in t || "roughness" in t || "metallicRoughnessTexture" in t) ? c : a3, t);
  }
  clone() {
    return new p2({ faces: a(this.faces), shading: this.shading, material: a(this.material), trustSourceNormals: this.trustSourceNormals });
  }
  cloneWithDeduplication(t, r) {
    const s3 = { faces: a(this.faces), shading: this.shading, material: this.material ? this.material.cloneWithDeduplication(t, r) : null, trustSourceNormals: this.trustSourceNormals };
    return new p2(s3);
  }
  get memoryUsage() {
    let t = 0;
    return null != this.faces && (t += this.faces.byteLength), null != this.material && (t += this.material.memoryUsage), t;
  }
};
e([y({ json: { write: true } })], f.prototype, "faces", void 0), e([s2("faces")], f.prototype, "castFaces", null), e([y({ type: a3, json: { write: true } })], f.prototype, "material", void 0), e([s2("material")], f.prototype, "castMaterial", null), e([y({ type: String, json: { write: true } })], f.prototype, "shading", void 0), e([y({ type: Boolean })], f.prototype, "trustSourceNormals", void 0), f = p2 = e([a2(u2)], f);
var g2 = f;

export {
  p,
  g2 as g
};
//# sourceMappingURL=chunk-25AMRHMP.js.map
