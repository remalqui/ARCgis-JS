import {
  k
} from "./chunk-QA4FMJA6.js";
import {
  j2 as j
} from "./chunk-VFQINJTY.js";
import {
  i
} from "./chunk-KTEJJM3A.js";
import {
  n
} from "./chunk-BVNZ3ETW.js";
import {
  p
} from "./chunk-T4XWQYGC.js";
import {
  l
} from "./chunk-7A5C2EQ3.js";
import {
  e as e2,
  y3 as y
} from "./chunk-OYBXMT5R.js";
import {
  a2 as a
} from "./chunk-CIDWM2UN.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";

// node_modules/@arcgis/core/Graphic.js
var u;
function y2(t) {
  if (!t)
    return null;
  const e3 = {};
  for (const r in t) {
    const o = p(t[r]);
    o && (e3[r] = o);
  }
  return 0 !== Object.keys(e3).length ? e3 : null;
}
function m(t) {
  if (null == t)
    return null;
  const e3 = {};
  for (const r in t) {
    const o = t[r];
    o && (e3[r] = o.toJSON());
  }
  return 0 !== Object.keys(e3).length ? e3 : null;
}
var g = u = class extends i(l) {
  constructor(...t) {
    super(...t), this.isAggregate = false, this.layer = null, this.popupTemplate = null, this.sourceLayer = null, Object.defineProperty(this, "uid", { value: e2(), configurable: true });
  }
  normalizeCtorArgs(t, e3, r, o) {
    return t && !t.declaredClass ? t : { geometry: t, symbol: e3, attributes: r, popupTemplate: o };
  }
  set aggregateGeometries(t) {
    const e3 = this._get("aggregateGeometries");
    JSON.stringify(e3) !== JSON.stringify(t) && this._set("aggregateGeometries", t);
  }
  set attributes(t) {
    const e3 = this._get("attributes");
    e3 !== t && (this._set("attributes", t), this._notifyLayer("attributes", e3, t));
  }
  set geometry(t) {
    const e3 = this._get("geometry");
    e3 !== t && (this._set("geometry", t), this._notifyLayer("geometry", e3, t));
  }
  set symbol(t) {
    const e3 = this._get("symbol");
    e3 !== t && (this._set("symbol", t), this._notifyLayer("symbol", e3, t));
  }
  set visible(t) {
    const e3 = this._get("visible");
    e3 !== t && (this._set("visible", t), this._notifyLayer("visible", e3, t));
  }
  cloneShallow() {
    return new u({ aggregateGeometries: this.aggregateGeometries, attributes: this.attributes, geometry: this.geometry, isAggregate: this.isAggregate, layer: this.layer, popupTemplate: this.popupTemplate, sourceLayer: this.sourceLayer, symbol: this.symbol, visible: this.visible });
  }
  getEffectivePopupTemplate(t = false) {
    if (this.popupTemplate)
      return this.popupTemplate;
    for (const e3 of [this.sourceLayer, this.layer])
      if (e3) {
        if ("popupTemplate" in e3 && e3.popupTemplate)
          return e3.popupTemplate;
        if (t && "defaultPopupTemplate" in e3 && null != e3.defaultPopupTemplate)
          return e3.defaultPopupTemplate;
      }
    return null;
  }
  getAttribute(t) {
    var _a;
    return (_a = this.attributes) == null ? void 0 : _a[t];
  }
  setAttribute(t, e3) {
    if (this.attributes) {
      const r = this.getAttribute(t);
      this.attributes[t] = e3, this._notifyLayer("attributes", r, e3, t);
    } else
      this.attributes = { [t]: e3 }, this._notifyLayer("attributes", void 0, e3, t);
  }
  getObjectId() {
    return this.sourceLayer && "objectIdField" in this.sourceLayer && this.sourceLayer.objectIdField ? this.getAttribute(this.sourceLayer.objectIdField) : null;
  }
  toJSON() {
    return { aggregateGeometries: m(this.aggregateGeometries), geometry: null != this.geometry ? this.geometry.toJSON() : null, symbol: null != this.symbol ? this.symbol.toJSON() : null, attributes: { ...this.attributes }, popupTemplate: this.popupTemplate && this.popupTemplate.toJSON() };
  }
  notifyGeometryChanged() {
    this._notifyLayer("geometry", this.geometry, this.geometry);
  }
  notifyMeshTransformChanged(t = {}) {
    const { geometry: e3 } = this;
    if ("mesh" === (e3 == null ? void 0 : e3.type)) {
      const r = { origin: e3.origin, transform: e3.transform };
      this._notifyLayer("origin-transform", r, r, t.action);
    }
  }
  _notifyLayer(t, e3, r, o) {
    if (!this.layer || !("graphicChanged" in this.layer))
      return;
    const s = { graphic: this, property: t, oldValue: e3, newValue: r };
    "origin-transform" === t && (s.action = o), "attributes" === t && (s.attributeName = o), this.layer.graphicChanged(s);
  }
};
e([y({ value: null, json: { read: y2 } })], g.prototype, "aggregateGeometries", null), e([y({ value: null })], g.prototype, "attributes", null), e([y({ value: null, types: n, json: { read: p } })], g.prototype, "geometry", null), e([y({ type: Boolean })], g.prototype, "isAggregate", void 0), e([y({ clonable: "reference" })], g.prototype, "layer", void 0), e([y({ type: k })], g.prototype, "popupTemplate", void 0), e([y({ clonable: "reference" })], g.prototype, "sourceLayer", void 0), e([y({ value: null, types: j })], g.prototype, "symbol", null), e([y({ type: Boolean, value: true })], g.prototype, "visible", null), g = u = e([a("esri.Graphic")], g), function(t) {
  t.generateUID = e2;
}(g || (g = {}));
var h = g;

export {
  h
};
//# sourceMappingURL=chunk-4SARN32Z.js.map
