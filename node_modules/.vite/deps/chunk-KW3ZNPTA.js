import {
  a,
  n
} from "./chunk-TJB4CGOM.js";

// node_modules/@arcgis/core/chunks/vec3f64.js
function n2() {
  return [0, 0, 0];
}
function t(n3) {
  return [n3[0], n3[1], n3[2]];
}
function r(n3, t2, r3) {
  return [n3, t2, r3];
}
function e(t2) {
  const r3 = n2(), e3 = Math.min(3, t2.length);
  for (let n3 = 0; n3 < e3; ++n3)
    r3[n3] = t2[n3];
  return r3;
}
function u(n3, t2) {
  return new Float64Array(n3, t2, 3);
}
function o() {
  return n2();
}
function a2() {
  return r(1, 1, 1);
}
function s() {
  return r(1, 0, 0);
}
function c() {
  return r(0, 1, 0);
}
function i() {
  return r(0, 0, 1);
}
var f = o();
var l = a2();
var _ = s();
var O = c();
var b = i();
var g = Object.freeze(Object.defineProperty({ __proto__: null, ONES: l, UNIT_X: _, UNIT_Y: O, UNIT_Z: b, ZEROS: f, clone: t, create: n2, createView: u, fromArray: e, fromValues: r, ones: a2, unitX: s, unitY: c, unitZ: i, zeros: o }, Symbol.toStringTag, { value: "Module" }));

// node_modules/@arcgis/core/chunks/vec3.js
function s2(t2) {
  const n3 = t2[0], a3 = t2[1], s3 = t2[2];
  return Math.sqrt(n3 * n3 + a3 * a3 + s3 * s3);
}
function r2(t2, n3) {
  return t2[0] = n3[0], t2[1] = n3[1], t2[2] = n3[2], t2;
}
function o2(t2, n3, a3, s3) {
  return t2[0] = n3, t2[1] = a3, t2[2] = s3, t2;
}
function u2(t2, n3, a3) {
  return t2[0] = n3[0] + a3[0], t2[1] = n3[1] + a3[1], t2[2] = n3[2] + a3[2], t2;
}
function e2(t2, n3, a3) {
  return t2[0] = n3[0] - a3[0], t2[1] = n3[1] - a3[1], t2[2] = n3[2] - a3[2], t2;
}
function c2(t2, n3, a3) {
  return t2[0] = n3[0] * a3[0], t2[1] = n3[1] * a3[1], t2[2] = n3[2] * a3[2], t2;
}
function i2(t2, n3, a3) {
  return t2[0] = n3[0] / a3[0], t2[1] = n3[1] / a3[1], t2[2] = n3[2] / a3[2], t2;
}
function h(t2, n3) {
  return t2[0] = Math.ceil(n3[0]), t2[1] = Math.ceil(n3[1]), t2[2] = Math.ceil(n3[2]), t2;
}
function M(t2, n3) {
  return t2[0] = Math.floor(n3[0]), t2[1] = Math.floor(n3[1]), t2[2] = Math.floor(n3[2]), t2;
}
function f2(t2, n3) {
  return t2[0] = Math.abs(n3[0]), t2[1] = Math.abs(n3[1]), t2[2] = Math.abs(n3[2]), t2;
}
function l2(t2, n3) {
  return t2[0] = Math.sign(n3[0]), t2[1] = Math.sign(n3[1]), t2[2] = Math.sign(n3[2]), t2;
}
function m(t2, n3, a3) {
  return t2[0] = Math.min(n3[0], a3[0]), t2[1] = Math.min(n3[1], a3[1]), t2[2] = Math.min(n3[2], a3[2]), t2;
}
function d(t2, n3, a3) {
  return t2[0] = Math.max(n3[0], a3[0]), t2[1] = Math.max(n3[1], a3[1]), t2[2] = Math.max(n3[2], a3[2]), t2;
}
function b2(t2, n3) {
  return t2[0] = Math.round(n3[0]), t2[1] = Math.round(n3[1]), t2[2] = Math.round(n3[2]), t2;
}
function g2(t2, n3, a3) {
  return t2[0] = n3[0] * a3, t2[1] = n3[1] * a3, t2[2] = n3[2] * a3, t2;
}
function q(t2, n3, a3, s3) {
  return t2[0] = n3[0] + a3[0] * s3, t2[1] = n3[1] + a3[1] * s3, t2[2] = n3[2] + a3[2] * s3, t2;
}
function x(t2, n3) {
  const a3 = n3[0] - t2[0], s3 = n3[1] - t2[1], r3 = n3[2] - t2[2];
  return Math.sqrt(a3 * a3 + s3 * s3 + r3 * r3);
}
function p(t2, n3) {
  const a3 = n3[0] - t2[0], s3 = n3[1] - t2[1], r3 = n3[2] - t2[2];
  return a3 * a3 + s3 * s3 + r3 * r3;
}
function v(t2) {
  const n3 = t2[0], a3 = t2[1], s3 = t2[2];
  return n3 * n3 + a3 * a3 + s3 * s3;
}
function j(t2, n3) {
  return t2[0] = -n3[0], t2[1] = -n3[1], t2[2] = -n3[2], t2;
}
function y(t2, n3) {
  return t2[0] = 1 / n3[0], t2[1] = 1 / n3[1], t2[2] = 1 / n3[2], t2;
}
function z(t2, n3) {
  const a3 = n3[0], s3 = n3[1], r3 = n3[2];
  let o3 = a3 * a3 + s3 * s3 + r3 * r3;
  return o3 > 0 && (o3 = 1 / Math.sqrt(o3), t2[0] = n3[0] * o3, t2[1] = n3[1] * o3, t2[2] = n3[2] * o3), t2;
}
function P(t2, n3) {
  return t2[0] * n3[0] + t2[1] * n3[1] + t2[2] * n3[2];
}
function _2(t2, n3, a3) {
  const s3 = n3[0], r3 = n3[1], o3 = n3[2], u3 = a3[0], e3 = a3[1], c3 = a3[2];
  return t2[0] = r3 * c3 - o3 * e3, t2[1] = o3 * u3 - s3 * c3, t2[2] = s3 * e3 - r3 * u3, t2;
}
function A(t2, n3, a3, s3) {
  const r3 = n3[0], o3 = n3[1], u3 = n3[2];
  return t2[0] = r3 + s3 * (a3[0] - r3), t2[1] = o3 + s3 * (a3[1] - o3), t2[2] = u3 + s3 * (a3[2] - u3), t2;
}
function D(t2, n3, a3, s3, r3, o3) {
  const u3 = o3 * o3, e3 = u3 * (2 * o3 - 3) + 1, c3 = u3 * (o3 - 2) + o3, i3 = u3 * (o3 - 1), h2 = u3 * (3 - 2 * o3);
  return t2[0] = n3[0] * e3 + a3[0] * c3 + s3[0] * i3 + r3[0] * h2, t2[1] = n3[1] * e3 + a3[1] * c3 + s3[1] * i3 + r3[1] * h2, t2[2] = n3[2] * e3 + a3[2] * c3 + s3[2] * i3 + r3[2] * h2, t2;
}
function I(t2, n3, a3, s3, r3, o3) {
  const u3 = 1 - o3, e3 = u3 * u3, c3 = o3 * o3, i3 = e3 * u3, h2 = 3 * o3 * e3, M2 = 3 * c3 * u3, f3 = c3 * o3;
  return t2[0] = n3[0] * i3 + a3[0] * h2 + s3[0] * M2 + r3[0] * f3, t2[1] = n3[1] * i3 + a3[1] * h2 + s3[1] * M2 + r3[1] * f3, t2[2] = n3[2] * i3 + a3[2] * h2 + s3[2] * M2 + r3[2] * f3, t2;
}
function L(t2, n3) {
  n3 = n3 || 1;
  const s3 = n, r3 = 2 * s3() * Math.PI, o3 = 2 * s3() - 1, u3 = Math.sqrt(1 - o3 * o3) * n3;
  return t2[0] = Math.cos(r3) * u3, t2[1] = Math.sin(r3) * u3, t2[2] = o3 * n3, t2;
}
function O2(t2, n3, a3) {
  const s3 = n3[0], r3 = n3[1], o3 = n3[2];
  return t2[0] = a3[0] * s3 + a3[4] * r3 + a3[8] * o3 + a3[12], t2[1] = a3[1] * s3 + a3[5] * r3 + a3[9] * o3 + a3[13], t2[2] = a3[2] * s3 + a3[6] * r3 + a3[10] * o3 + a3[14], t2;
}
function S(t2, n3, a3) {
  const s3 = n3[0], r3 = n3[1], o3 = n3[2];
  return t2[0] = s3 * a3[0] + r3 * a3[3] + o3 * a3[6], t2[1] = s3 * a3[1] + r3 * a3[4] + o3 * a3[7], t2[2] = s3 * a3[2] + r3 * a3[5] + o3 * a3[8], t2;
}
function E(t2, n3, a3) {
  const s3 = a3[0], r3 = a3[1], o3 = a3[2], u3 = a3[3], e3 = n3[0], c3 = n3[1], i3 = n3[2];
  let h2 = r3 * i3 - o3 * c3, M2 = o3 * e3 - s3 * i3, f3 = s3 * c3 - r3 * e3, l3 = r3 * f3 - o3 * M2, m2 = o3 * h2 - s3 * f3, d2 = s3 * M2 - r3 * h2;
  const b3 = 2 * u3;
  return h2 *= b3, M2 *= b3, f3 *= b3, l3 *= 2, m2 *= 2, d2 *= 2, t2[0] = e3 + h2 + l3, t2[1] = c3 + M2 + m2, t2[2] = i3 + f3 + d2, t2;
}
function Q(t2, n3, a3, s3) {
  const r3 = [], o3 = [];
  return r3[0] = n3[0] - a3[0], r3[1] = n3[1] - a3[1], r3[2] = n3[2] - a3[2], o3[0] = r3[0], o3[1] = r3[1] * Math.cos(s3) - r3[2] * Math.sin(s3), o3[2] = r3[1] * Math.sin(s3) + r3[2] * Math.cos(s3), t2[0] = o3[0] + a3[0], t2[1] = o3[1] + a3[1], t2[2] = o3[2] + a3[2], t2;
}
function R(t2, n3, a3, s3) {
  const r3 = [], o3 = [];
  return r3[0] = n3[0] - a3[0], r3[1] = n3[1] - a3[1], r3[2] = n3[2] - a3[2], o3[0] = r3[2] * Math.sin(s3) + r3[0] * Math.cos(s3), o3[1] = r3[1], o3[2] = r3[2] * Math.cos(s3) - r3[0] * Math.sin(s3), t2[0] = o3[0] + a3[0], t2[1] = o3[1] + a3[1], t2[2] = o3[2] + a3[2], t2;
}
function T(t2, n3, a3, s3) {
  const r3 = [], o3 = [];
  return r3[0] = n3[0] - a3[0], r3[1] = n3[1] - a3[1], r3[2] = n3[2] - a3[2], o3[0] = r3[0] * Math.cos(s3) - r3[1] * Math.sin(s3), o3[1] = r3[0] * Math.sin(s3) + r3[1] * Math.cos(s3), o3[2] = r3[2], t2[0] = o3[0] + a3[0], t2[1] = o3[1] + a3[1], t2[2] = o3[2] + a3[2], t2;
}
function k(t2, n3) {
  r2(w, t2), r2(B, n3), z(w, w), z(B, B);
  const a3 = P(w, B);
  return a3 > 1 ? 0 : a3 < -1 ? Math.PI : Math.acos(a3);
}
var w = n2();
var B = n2();
function C(t2) {
  return "vec3(" + t2[0] + ", " + t2[1] + ", " + t2[2] + ")";
}
function F(t2, n3) {
  return t2[0] === n3[0] && t2[1] === n3[1] && t2[2] === n3[2];
}
function G(t2, a3) {
  if (t2 === a3)
    return true;
  const s3 = t2[0], r3 = t2[1], o3 = t2[2], u3 = a3[0], e3 = a3[1], c3 = a3[2], i3 = a();
  return Math.abs(s3 - u3) <= i3 * Math.max(1, Math.abs(s3), Math.abs(u3)) && Math.abs(r3 - e3) <= i3 * Math.max(1, Math.abs(r3), Math.abs(e3)) && Math.abs(o3 - c3) <= i3 * Math.max(1, Math.abs(o3), Math.abs(c3));
}
function H(t2, n3, a3) {
  const s3 = a3[0] - n3[0], r3 = a3[1] - n3[1], o3 = a3[2] - n3[2];
  let u3 = s3 * s3 + r3 * r3 + o3 * o3;
  return u3 > 0 ? (u3 = 1 / Math.sqrt(u3), t2[0] = s3 * u3, t2[1] = r3 * u3, t2[2] = o3 * u3, t2) : (t2[0] = 0, t2[1] = 0, t2[2] = 0, t2);
}
var J = e2;
var K = c2;
var N = i2;
var U = x;
var X = p;
var Y = s2;
var Z = v;
var V = Object.freeze(Object.defineProperty({ __proto__: null, abs: f2, add: u2, angle: k, bezier: I, ceil: h, copy: r2, cross: _2, direction: H, dist: U, distance: x, div: N, divide: i2, dot: P, equals: G, exactEquals: F, floor: M, hermite: D, inverse: y, len: Y, length: s2, lerp: A, max: d, min: m, mul: K, multiply: c2, negate: j, normalize: z, random: L, rotateX: Q, rotateY: R, rotateZ: T, round: b2, scale: g2, scaleAndAdd: q, set: o2, sign: l2, sqrDist: X, sqrLen: Z, squaredDistance: p, squaredLength: v, str: C, sub: J, subtract: e2, transformMat3: S, transformMat4: O2, transformQuat: E }, Symbol.toStringTag, { value: "Module" }));

export {
  n2 as n,
  t,
  r,
  e,
  u,
  f,
  l,
  _,
  O,
  b,
  s2 as s,
  r2,
  o2 as o,
  u2,
  e2,
  c2 as c,
  i2 as i,
  g2 as g,
  q,
  x,
  p,
  v,
  z,
  P,
  _2,
  A,
  O2,
  S,
  E,
  F,
  H,
  U,
  Y
};
//# sourceMappingURL=chunk-KW3ZNPTA.js.map
