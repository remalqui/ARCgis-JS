import {
  m
} from "./chunk-HTY52TPQ.js";
import {
  b
} from "./chunk-YC4PIRSZ.js";
import {
  t
} from "./chunk-QXGO5RRL.js";
import {
  p
} from "./chunk-T4XWQYGC.js";
import {
  n
} from "./chunk-WBSPL6CJ.js";
import {
  f
} from "./chunk-SFV6XLDZ.js";
import {
  y3 as y
} from "./chunk-OYBXMT5R.js";
import {
  a2 as a
} from "./chunk-CIDWM2UN.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";
import {
  j
} from "./chunk-HKVL2MJK.js";
import {
  kt
} from "./chunk-O3CHVGVF.js";
import {
  C,
  g
} from "./chunk-HNHXEGH2.js";
import {
  s2 as s,
  s3 as s2
} from "./chunk-W2N7YT6I.js";

// node_modules/@arcgis/core/layers/support/StreamConnection.js
var c = class extends n.EventedAccessor {
  destroy() {
    this.emit("destroy");
  }
  get connectionError() {
    return this.errorString ? new s2("stream-connection", this.errorString) : null;
  }
  onFeature(r) {
    this.emit("data-received", r);
  }
  onMessage(r) {
    this.emit("message-received", r);
  }
};
e([y({ readOnly: true })], c.prototype, "connectionError", null), c = e([a("esri.layers.support.StreamConnection")], c);
var i = c;

// node_modules/@arcgis/core/layers/graphics/sources/connections/WebSocketConnection.js
var h;
!function(e2) {
  e2[e2.CONNECTING = 0] = "CONNECTING", e2[e2.OPEN = 1] = "OPEN", e2[e2.CLOSING = 2] = "CLOSING", e2[e2.CLOSED = 3] = "CLOSED";
}(h || (h = {}));
var d = class extends i {
  constructor(e2) {
    super(), this._outstandingMessages = [], this.errorString = null;
    const { geometryType: t2, spatialReference: o2, sourceSpatialReference: s3 } = e2;
    this._config = e2, this._featureZScaler = t(t2, s3, o2), this._open();
  }
  async _open() {
    await this._tryCreateWebSocket(), this.destroyed || await this._handshake();
  }
  destroy() {
    super.destroy(), null != this._websocket && (this._websocket.onopen = null, this._websocket.onclose = null, this._websocket.onerror = null, this._websocket.onmessage = null, this._websocket.close()), this._websocket = null;
  }
  get connectionStatus() {
    if (null == this._websocket)
      return "disconnected";
    switch (this._websocket.readyState) {
      case h.CONNECTING:
      case h.OPEN:
        return "connected";
      case h.CLOSING:
      case h.CLOSED:
        return "disconnected";
    }
  }
  sendMessageToSocket(e2) {
    null != this._websocket ? this._websocket.send(JSON.stringify(e2)) : this._outstandingMessages.push(e2);
  }
  sendMessageToClient(e2) {
    this._onMessage(e2);
  }
  updateCustomParameters(e2) {
    this._config.customParameters = e2, null != this._websocket && this._websocket.close();
  }
  async _tryCreateWebSocket(e2 = this._config.source.path, r = 1e3, i2 = 0) {
    try {
      if (this.destroyed)
        return;
      const t2 = kt(e2, this._config.customParameters ?? {});
      this._websocket = await this._createWebSocket(t2), this.notifyChange("connectionStatus");
    } catch (c3) {
      const n2 = r / 1e3;
      return this._config.maxReconnectionAttempts && i2 >= this._config.maxReconnectionAttempts ? (s.getLogger(this).error(new s2("websocket-connection", "Exceeded maxReconnectionAttempts attempts. No further attempts will be made")), void this.destroy()) : (s.getLogger(this).error(new s2("websocket-connection", `Failed to connect. Attempting to reconnect in ${n2}s`, c3)), await g(r), this._tryCreateWebSocket(e2, Math.min(1.5 * r, 1e3 * this._config.maxReconnectionInterval), i2 + 1));
    }
  }
  _setWebSocketJSONParseHandler(e2) {
    e2.onmessage = (e3) => {
      try {
        const t2 = JSON.parse(e3.data);
        this._onMessage(t2);
      } catch (s3) {
        return void s.getLogger(this).error(new s2("websocket-connection", "Failed to parse message, invalid JSON", { error: s3 }));
      }
    };
  }
  _createWebSocket(e2) {
    return new Promise((t2, o2) => {
      const s3 = new WebSocket(e2);
      s3.onopen = () => {
        if (s3.onopen = null, this.destroyed)
          return s3.onclose = null, void s3.close();
        s3.onclose = (e3) => this._onClose(e3), s3.onerror = (e3) => this._onError(e3), this._setWebSocketJSONParseHandler(s3), t2(s3);
      }, s3.onclose = (e3) => {
        s3.onopen = s3.onclose = null, o2(e3);
      };
    });
  }
  async _handshake(e2 = 1e4) {
    const s3 = this._websocket;
    if (null == s3)
      return;
    const n2 = C(), i2 = s3.onmessage, { filter: c3, outFields: a2, spatialReference: l } = this._config;
    return n2.timeout(e2), s3.onmessage = (e3) => {
      var _a;
      let r = null;
      try {
        r = JSON.parse(e3.data);
      } catch (h3) {
      }
      r && "object" == typeof r || (s.getLogger(this).error(new s2("websocket-connection", "Protocol violation. Handshake failed - malformed message", e3.data)), n2.reject(), this.destroy()), ((_a = r.spatialReference) == null ? void 0 : _a.wkid) !== (l == null ? void 0 : l.wkid) && (s.getLogger(this).error(new s2("websocket-connection", `Protocol violation. Handshake failed - expected wkid of ${l.wkid}`, e3.data)), n2.reject(), this.destroy()), "json" !== r.format && (s.getLogger(this).error(new s2("websocket-connection", "Protocol violation. Handshake failed - format is not set", e3.data)), n2.reject(), this.destroy()), c3 && r.filter !== c3 && s.getLogger(this).error(new s2("websocket-connection", "Tried to set filter, but server doesn't support it")), a2 && r.outFields !== a2 && s.getLogger(this).error(new s2("websocket-connection", "Tried to set outFields, but server doesn't support it")), s3.onmessage = i2;
      for (const t2 of this._outstandingMessages)
        s3.send(JSON.stringify(t2));
      this._outstandingMessages = [], n2.resolve();
    }, s3.send(JSON.stringify({ filter: c3, outFields: a2, format: "json", spatialReference: { wkid: l.wkid } })), n2.promise;
  }
  _onMessage(e2) {
    if (this.onMessage(e2), "type" in e2)
      switch (e2.type) {
        case "features":
        case "featureResult":
          for (const t2 of e2.features)
            null != this._featureZScaler && this._featureZScaler(t2.geometry), this.onFeature(t2);
      }
  }
  _onError(e2) {
    const t2 = "Encountered an error over WebSocket connection";
    this._set("errorString", t2), s.getLogger(this).error("websocket-connection", t2);
  }
  _onClose(e2) {
    this._websocket = null, this.notifyChange("connectionStatus"), 1e3 !== e2.code && s.getLogger(this).error("websocket-connection", `WebSocket closed unexpectedly with error code ${e2.code}`), this.destroyed || this._open();
  }
};
e([y()], d.prototype, "connectionStatus", null), e([y()], d.prototype, "errorString", void 0), d = e([a("esri.layers.graphics.sources.connections.WebSocketConnection")], d);

// node_modules/@arcgis/core/layers/graphics/sources/connections/GeoEventConnection.js
var h2 = 1e4;
var d2 = { maxQueryDepth: 5, maxRecordCountFactor: 3 };
var g2 = class extends d {
  constructor(e2) {
    super({ ...d2, ...e2 }), this._buddyServicesQuery = null, this._relatedFeatures = null;
  }
  async _open() {
    const e2 = await this._fetchServiceDefinition(this._config.source);
    e2.timeInfo.trackIdField || s.getLogger(this).warn("GeoEvent service was configured without a TrackIdField. This may result in certain functionality being disabled. The purgeOptions.maxObservations property will have no effect.");
    const t2 = this._fetchWebSocketUrl(e2.streamUrls, this._config.spatialReference);
    this._buddyServicesQuery || (this._buddyServicesQuery = this._queryBuddyServices()), await this._buddyServicesQuery, await this._tryCreateWebSocket(t2);
    const { filter: r, outFields: o2 } = this._config;
    this.destroyed || this._setFilter(r, o2);
  }
  _onMessage(e2) {
    if ("attributes" in e2) {
      let o2;
      try {
        o2 = this._enrich(e2), null != this._featureZScaler && this._featureZScaler(o2.geometry);
      } catch (t2) {
        return void s.getLogger(this).error(new s2("geoevent-connection", "Failed to parse message", t2));
      }
      this.onFeature(o2);
    } else
      this.onMessage(e2);
  }
  async _fetchServiceDefinition(e2) {
    const r = { f: "json", ...this._config.customParameters }, s3 = j(e2.path, { query: r, responseType: "json" }), o2 = (await s3).data;
    return this._serviceDefinition = o2, o2;
  }
  _fetchWebSocketUrl(e2, t2) {
    const r = e2[0], { urls: s3, token: o2 } = r, n2 = this._inferWebSocketBaseUrl(s3);
    return kt(`${n2}/subscribe`, { outSR: "" + t2.wkid, token: o2 });
  }
  _inferWebSocketBaseUrl(e2) {
    if (1 === e2.length)
      return e2[0];
    for (const t2 of e2)
      if (t2.includes("wss"))
        return t2;
    return s.getLogger(this).error(new s2("geoevent-connection", "Unable to infer WebSocket url", e2)), null;
  }
  async _setFilter(e2, t2) {
    const i2 = this._websocket;
    if (null == i2 || null == e2 && null == t2)
      return;
    const n2 = JSON.stringify({ filter: this._serializeFilter(e2, t2) });
    let a2 = false;
    const c3 = C(), u = () => {
      a2 || (this.destroyed || this._websocket !== i2 || s.getLogger(this).error(new s2("geoevent-connection", "Server timed out when setting filter")), c3.reject());
    }, l = (e3) => {
      const t3 = JSON.parse(e3.data);
      t3.filter && (t3.error && (s.getLogger(this).error(new s2("geoevent-connection", "Failed to set service filter", t3.error)), this._set("errorString", `Could not set service filter - ${t3.error}`), c3.reject(t3.error)), this._setWebSocketJSONParseHandler(i2), a2 = true, c3.resolve());
    };
    return i2.onmessage = l, i2.send(n2), setTimeout(u, h2), c3.promise;
  }
  _serializeFilter(e2, t2) {
    const o2 = {};
    if (null == e2 && null == t2)
      return o2;
    if (null != e2 && e2.geometry)
      try {
        const t3 = p(e2.geometry);
        if ("extent" !== t3.type)
          throw new s2(`Expected extent but found type ${t3.type}`);
        o2.geometry = JSON.stringify(t3.shiftCentralMeridian());
      } catch (i2) {
        s.getLogger(this).error(new s2("geoevent-connection", "Encountered an error when setting connection geometryDefinition", i2));
      }
    return null != e2 && e2.where && "1 = 1" !== e2.where && "1=1" !== e2.where && (o2.where = e2.where), null != t2 && (o2.outFields = t2.join(",")), o2;
  }
  _enrich(e2) {
    if (!this._relatedFeatures)
      return e2;
    const t2 = this._serviceDefinition.relatedFeatures.joinField, o2 = e2.attributes[t2], i2 = this._relatedFeatures.get(o2);
    if (!i2)
      return s.getLogger(this).warn("geoevent-connection", "Feature join failed. Is the join field configured correctly?", e2), e2;
    const { attributes: n2, geometry: a2 } = i2;
    for (const r in n2)
      e2.attributes[r] = n2[r];
    return a2 && (e2.geometry = a2), e2.geometry || e2.centroid || s.getLogger(this).error(new s2("geoevent-connection", "Found malformed feature - no geometry found", e2)), e2;
  }
  async _queryBuddyServices() {
    try {
      const { relatedFeatures: e2, keepLatestArchive: t2 } = this._serviceDefinition, r = this._queryRelatedFeatures(e2), s3 = this._queryArchive(t2);
      await r;
      const o2 = await s3;
      if (!o2)
        return;
      for (const i2 of o2.features)
        this.onFeature(this._enrich(i2));
    } catch (e2) {
      s.getLogger(this).error(new s2("geoevent-connection", "Encountered an error when querying buddy services", { error: e2 }));
    }
  }
  async _queryRelatedFeatures(e2) {
    if (!e2)
      return;
    const t2 = await this._queryBuddy(e2.featuresUrl);
    this._addRelatedFeatures(t2);
  }
  async _queryArchive(e2) {
    if (e2)
      return this._queryBuddy(e2.featuresUrl);
  }
  async _queryBuddy(e2) {
    var _a;
    const t2 = new (await import("./FeatureLayer-XX74FMHQ.js")).default({ url: e2 }), { capabilities: r } = await t2.load(), s3 = r.query.supportsMaxRecordCountFactor, o2 = r.query.supportsPagination, i2 = r.query.supportsCentroid, n2 = this._config.maxRecordCountFactor, a2 = t2.capabilities.query.maxRecordCount, l = s3 ? a2 * n2 : a2, h3 = new b();
    if (h3.outFields = this._config.outFields ?? ["*"], h3.where = ((_a = this._config.filter) == null ? void 0 : _a.where) ?? "1=1", h3.returnGeometry = true, h3.returnExceededLimitFeatures = true, h3.outSpatialReference = f.fromJSON(this._config.spatialReference), i2 && (h3.returnCentroid = true), s3 && (h3.maxRecordCountFactor = n2), o2)
      return h3.num = l, t2.destroy(), this._queryPages(e2, h3);
    const d3 = await m(e2, h3, this._config.sourceSpatialReference);
    return t2.destroy(), d3.data;
  }
  async _queryPages(e2, t2, r = [], s3 = 0) {
    t2.start = null != t2.num ? s3 * t2.num : null;
    const { data: o2 } = await m(e2, t2, this._config.sourceSpatialReference);
    return o2.exceededTransferLimit && s3 < (this._config.maxQueryDepth ?? 0) ? (o2.features.forEach((e3) => r.push(e3)), this._queryPages(e2, t2, r, s3 + 1)) : (r.forEach((e3) => o2.features.push(e3)), o2);
  }
  _addRelatedFeatures(e2) {
    const t2 = /* @__PURE__ */ new Map(), r = e2.features, s3 = this._serviceDefinition.relatedFeatures.joinField;
    for (const o2 of r) {
      const e3 = o2.attributes[s3];
      t2.set(e3, o2);
    }
    this._relatedFeatures = t2;
  }
};
g2 = e([a("esri.layers.graphics.sources.connections.GeoEventConnection")], g2);
var y2 = g2;

// node_modules/@arcgis/core/layers/support/ClientSideConnection.js
var c2 = class extends i {
  constructor(e2) {
    super(), this.connectionStatus = "connected", this.errorString = null;
    const { geometryType: r, spatialReference: t2, sourceSpatialReference: s3 } = e2;
    this._featureZScaler = t(r, s3, t2);
  }
  updateCustomParameters(e2) {
  }
  sendMessageToSocket(e2) {
  }
  sendMessageToClient(e2) {
    if ("type" in e2)
      switch (e2.type) {
        case "features":
        case "featureResult":
          for (const r of e2.features)
            null != this._featureZScaler && this._featureZScaler(r.geometry), this.onFeature(r);
      }
    this.onMessage(e2);
  }
};
e([y()], c2.prototype, "connectionStatus", void 0), e([y()], c2.prototype, "errorString", void 0), c2 = e([a("esri.layers.support.ClientSideConnection")], c2);

// node_modules/@arcgis/core/layers/graphics/sources/connections/createConnection.js
function o(o2, r, s3, i2, c3, a2, m2, p2) {
  const f2 = { source: o2, sourceSpatialReference: r, spatialReference: s3, geometryType: i2, filter: c3, maxReconnectionAttempts: a2, maxReconnectionInterval: m2, customParameters: p2 };
  if (!o2)
    return new c2(f2);
  return o2.path.startsWith("wss://") || o2.path.startsWith("ws://") ? new d(f2) : new y2(f2);
}

export {
  o
};
//# sourceMappingURL=chunk-4OFTYAJJ.js.map
